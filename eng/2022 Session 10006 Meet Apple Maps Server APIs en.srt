1
00:00:00,033 --> 00:00:03,003
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,003 --> 00:00:09,276
♪

3
00:00:09,276 --> 00:00:12,079
Hi, everyone!
My name is Ankur Soni.

4
00:00:12,079 --> 00:00:14,882
I'm an engineering manager
on the Maps Services team

5
00:00:14,882 --> 00:00:16,416
here at Apple.

6
00:00:16,416 --> 00:00:19,353
Today, we're going to look at
some exciting new capabilities

7
00:00:19,353 --> 00:00:21,255
coming to the Maps
developer ecosystem.

8
00:00:21,255 --> 00:00:23,223
So let's get started.

9
00:00:23,223 --> 00:00:26,326
Our Maps app offers
various end-user experiences

10
00:00:26,326 --> 00:00:28,195
to Apple customers
around the globe.

11
00:00:28,195 --> 00:00:30,264
We empower developers to create

12
00:00:30,264 --> 00:00:33,533
beautiful geolocation
experiences for their apps

13
00:00:33,533 --> 00:00:38,205
and websites through our MapKit
and MapKit JS offerings.

14
00:00:38,205 --> 00:00:41,108
However, our Apple Maps
developer offering

15
00:00:41,108 --> 00:00:43,911
has always been
very client-centric.

16
00:00:43,911 --> 00:00:47,214
We have listened carefully
to all your great feedback.

17
00:00:47,214 --> 00:00:50,817
You wanted a way to augment
your own data on MapKit

18
00:00:50,817 --> 00:00:54,388
without compromising
on performance or power.

19
00:00:54,388 --> 00:00:56,156
So to round out our ecosystem,

20
00:00:56,156 --> 00:01:01,128
we are excited to introduce
the Apple Maps Server APIs.

21
00:01:01,128 --> 00:01:04,398
We are introducing
four new server APIs:

22
00:01:04,398 --> 00:01:08,335
Geocoding, Reverse Geocoding,
Search,

23
00:01:08,335 --> 00:01:12,306
Estimated Time of Arrival --
or ETA.

24
00:01:12,306 --> 00:01:15,842
These APIs will help you tackle
a variety of use cases

25
00:01:15,842 --> 00:01:20,047
while integrating Maps
into your applications.

26
00:01:20,047 --> 00:01:23,150
With Geocoding APIs,
you can convert an address

27
00:01:23,150 --> 00:01:26,486
to geographic coordinates
latitude and longitude.

28
00:01:26,486 --> 00:01:28,956
Similarly,
with Reverse Geocoding,

29
00:01:28,956 --> 00:01:30,257
you can do the opposite --

30
00:01:30,257 --> 00:01:33,860
go from geographic coordinates
to an address.

31
00:01:33,860 --> 00:01:37,431
With Search API, you can give
your users the capability

32
00:01:37,431 --> 00:01:40,367
to enter a search string
to discover places

33
00:01:40,367 --> 00:01:43,637
like businesses,
points of interest, and more.

34
00:01:43,637 --> 00:01:45,672
Maybe you want to overlay
some of your own data

35
00:01:45,672 --> 00:01:47,774
and present it to the user.

36
00:01:47,774 --> 00:01:51,078
With ETA API,
you can help your customers

37
00:01:51,078 --> 00:01:53,680
get a sense of how far
your business is from them

38
00:01:53,680 --> 00:01:56,717
or do some computations
to find the closest store.

39
00:01:56,717 --> 00:02:00,287
The possibilities are endless!

40
00:02:00,287 --> 00:02:05,525
We think you'll love server APIs
for three important reasons.

41
00:02:05,525 --> 00:02:08,862
You can now deliver a seamless
experience by leveraging

42
00:02:08,862 --> 00:02:13,367
MapKit, MapKit JS, and the new
Apple Maps Server APIs.

43
00:02:13,367 --> 00:02:15,736
This will simplify
your application architecture

44
00:02:15,736 --> 00:02:18,572
giving you a full
Apple Maps stack.

45
00:02:18,572 --> 00:02:20,574
This will make your life
much easier.

46
00:02:20,574 --> 00:02:21,908
For sure, it helped me.

47
00:02:21,908 --> 00:02:24,611
But hey, I'm biased!

48
00:02:24,611 --> 00:02:27,881
The next benefit is
the reduction in network calls.

49
00:02:27,881 --> 00:02:30,650
Many times,
we find ourselves in a situation

50
00:02:30,650 --> 00:02:33,086
where we are making repetitive
and redundant requests

51
00:02:33,086 --> 00:02:36,790
from our users' devices
like an iPhone, iPad,

52
00:02:36,790 --> 00:02:38,692
websites, etcetera.

53
00:02:38,692 --> 00:02:41,862
Maybe you are looking up the
same address over and over again

54
00:02:41,862 --> 00:02:44,798
from your app running
on different user devices.

55
00:02:44,798 --> 00:02:48,268
This causes a lot of network
calls and wasted bandwidth.

56
00:02:48,268 --> 00:02:51,171
Delegating this common operation
to your server

57
00:02:51,171 --> 00:02:55,242
and doing it only once in
the back end using server APIs

58
00:02:55,242 --> 00:02:58,812
will help your application
consume less bandwidth.

59
00:02:58,812 --> 00:03:02,082
A nice side effect of this
is that now your application

60
00:03:02,082 --> 00:03:05,786
is power efficient too, since
some processing is now delegated

61
00:03:05,786 --> 00:03:09,222
to your server using
Apple Maps Server APIs.

62
00:03:09,222 --> 00:03:12,292
Now let's take some of
these APIs for a spin.

63
00:03:12,292 --> 00:03:14,828
Let's say we are building
these contact cards

64
00:03:14,828 --> 00:03:17,397
for your store locator
application.

65
00:03:17,397 --> 00:03:20,300
Here we see three stores
with their addresses

66
00:03:20,300 --> 00:03:22,736
and distance
from the customer location.

67
00:03:22,736 --> 00:03:25,772
In this example,
we'll assume that the customer

68
00:03:25,772 --> 00:03:29,109
has provided their location.

69
00:03:29,109 --> 00:03:32,846
For now, let's focus on building
one of these contact cards.

70
00:03:32,846 --> 00:03:35,415
We'll assume that these
addresses are on a server

71
00:03:35,415 --> 00:03:41,121
which stores and serves the
locations of comic bookstores.

72
00:03:41,121 --> 00:03:44,191
There are many ways
to build this, but for a second,

73
00:03:44,191 --> 00:03:47,260
let's assume we don't have
these new server APIs.

74
00:03:47,260 --> 00:03:49,763
What would a basic architecture
look like?

75
00:03:49,763 --> 00:03:52,666
How would your client
application get this data?

76
00:03:52,666 --> 00:03:56,570
In this diagram, our application
is making a call to the server

77
00:03:56,570 --> 00:03:58,972
to get the list
of store addresses.

78
00:03:58,972 --> 00:04:01,741
The back-end server returns
a list of store addresses

79
00:04:01,741 --> 00:04:04,511
to your client device.

80
00:04:04,511 --> 00:04:07,514
Since we don't have
the server APIs in this example,

81
00:04:07,514 --> 00:04:10,717
now our client application
has to perform various actions

82
00:04:10,717 --> 00:04:13,520
on the address
to build the contact card.

83
00:04:13,520 --> 00:04:15,355
To perform a single task,

84
00:04:15,355 --> 00:04:17,757
a client may have to make
multiple calls

85
00:04:17,757 --> 00:04:20,127
to various back-end services.

86
00:04:20,127 --> 00:04:23,697
Here you can see that
the client app is making a call

87
00:04:23,697 --> 00:04:25,866
directly to
the Apple Maps Server,

88
00:04:25,866 --> 00:04:29,569
either by using MapKit
or MapKit JS.

89
00:04:29,569 --> 00:04:32,772
This chattiness between
a client and a back end

90
00:04:32,772 --> 00:04:35,075
can adversely impact
the performance and scale

91
00:04:35,075 --> 00:04:36,643
of the application.

92
00:04:36,643 --> 00:04:39,779
Over a cellular network
with typically high latency,

93
00:04:39,779 --> 00:04:43,517
using individual requests
in this manner is inefficient

94
00:04:43,517 --> 00:04:45,585
and could result
in broken connectivity

95
00:04:45,585 --> 00:04:47,487
or incomplete requests.

96
00:04:47,487 --> 00:04:50,190
While each request
may be done in parallel,

97
00:04:50,190 --> 00:04:53,093
the application must send,
wait, and process data

98
00:04:53,093 --> 00:04:55,896
for each request
all on separate connections

99
00:04:55,896 --> 00:04:58,231
increasing the chance
of failure.

100
00:04:58,231 --> 00:05:02,435
Finally, you'll have to merge
all the responses on the client.

101
00:05:02,435 --> 00:05:04,738
And while
all these calls happen,

102
00:05:04,738 --> 00:05:07,340
you are showing a spinner
to the user.

103
00:05:07,340 --> 00:05:10,076
Plus, the client device
is using more bandwidth

104
00:05:10,076 --> 00:05:12,078
and power for these extra calls.

105
00:05:12,078 --> 00:05:14,848
That is not
a good user experience.

106
00:05:14,848 --> 00:05:17,284
Now, let's look at
a model architecture

107
00:05:17,284 --> 00:05:20,120
with access
to Apple Maps Server APIs.

108
00:05:20,120 --> 00:05:23,156
You can start using your
back-end server as a gateway

109
00:05:23,156 --> 00:05:27,894
to reduce chattiness between
the client and the services.

110
00:05:27,894 --> 00:05:31,198
Just like before,
here we request a list of stores

111
00:05:31,198 --> 00:05:34,367
to be displayed
from your client.

112
00:05:34,367 --> 00:05:39,739
Next, we make a request
from the server to do geocoding.

113
00:05:39,739 --> 00:05:42,842
We then receive responses
for each API

114
00:05:42,842 --> 00:05:45,845
from the Apple Maps Server.

115
00:05:45,845 --> 00:05:50,217
The comic book server combines
the responses from each service

116
00:05:50,217 --> 00:05:52,919
and sends the response
to the application.

117
00:05:52,919 --> 00:05:55,655
This pattern can reduce
the number of requests

118
00:05:55,655 --> 00:05:58,458
that the application makes
to back-end services,

119
00:05:58,458 --> 00:06:00,093
and improve
application performance

120
00:06:00,093 --> 00:06:02,162
over high-latency networks.

121
00:06:02,162 --> 00:06:05,899
In summary, your client
makes one call to your server

122
00:06:05,899 --> 00:06:07,867
to get the list of stores.

123
00:06:07,867 --> 00:06:10,337
Your server then does
the heavy lifting

124
00:06:10,337 --> 00:06:13,940
to make appropriate API calls
to compose a response

125
00:06:13,940 --> 00:06:16,810
most suited for your user.

126
00:06:16,810 --> 00:06:19,779
So let's go back to our
case study example here.

127
00:06:19,779 --> 00:06:22,249
We'll use Geocoding and ETA API

128
00:06:22,249 --> 00:06:24,918
to get the distance
to the store.

129
00:06:24,918 --> 00:06:29,256
We can use the Geocode API to
find the latitude and longitude

130
00:06:29,256 --> 00:06:31,825
for the store addresses,
which we'll later use

131
00:06:31,825 --> 00:06:33,627
for ETA calculations.

132
00:06:33,627 --> 00:06:36,429
In this example, first,
we are going to take

133
00:06:36,429 --> 00:06:42,102
the address for the comic book
store and URL encode it.

134
00:06:42,102 --> 00:06:45,338
Next, we'll use the Geocode API

135
00:06:45,338 --> 00:06:50,076
and pass this URL-encoded
address as a query parameter.

136
00:06:50,076 --> 00:06:52,746
We'll skip over the
authentication details for now

137
00:06:52,746 --> 00:06:55,749
and come back to it
in a few slides.

138
00:06:55,749 --> 00:06:58,852
In the response, you can see
the latitude and longitude

139
00:06:58,852 --> 00:07:01,554
for the address returned.

140
00:07:01,554 --> 00:07:03,723
We'll repeat
the same process to find

141
00:07:03,723 --> 00:07:06,993
the latitude and longitude
for the customer's address.

142
00:07:06,993 --> 00:07:10,063
This will be later used
for ETA calculations.

143
00:07:10,063 --> 00:07:13,600
As you can see, there are
more fields in the response.

144
00:07:13,600 --> 00:07:15,268
I'll link the detailed
documentation

145
00:07:15,268 --> 00:07:18,438
in the Resources section below.

146
00:07:18,438 --> 00:07:23,109
Now, we can set the origin
and destination on the ETA API

147
00:07:23,109 --> 00:07:26,946
with the data we got
from the Geocode API.

148
00:07:26,946 --> 00:07:31,584
As I mentioned before, we have
the origin latitude, longitude

149
00:07:31,584 --> 00:07:34,120
and the destination
latitude, longitude.

150
00:07:34,120 --> 00:07:38,124
We can specify up to 10
destinations here if needed.

151
00:07:38,124 --> 00:07:41,628
We'll feed that in the ETA API

152
00:07:41,628 --> 00:07:45,298
as origin and as
destination query parameters

153
00:07:45,298 --> 00:07:47,701
which are URL encoded.

154
00:07:47,701 --> 00:07:50,970
The response to the API
is a list of ETAs,

155
00:07:50,970 --> 00:07:53,039
one for each destination
provided.

156
00:07:53,039 --> 00:07:55,141
In this case,
we only have one

157
00:07:55,141 --> 00:07:58,678
since we provided
one destination.

158
00:07:58,678 --> 00:08:02,415
Here for our example, we are
interested in distanceMeters

159
00:08:02,415 --> 00:08:04,918
to calculate the distance
to the store.

160
00:08:04,918 --> 00:08:07,921
With this, we have
all the pieces we need:

161
00:08:07,921 --> 00:08:10,757
the store address
and the distance for the user

162
00:08:10,757 --> 00:08:12,625
to reach your store.

163
00:08:12,625 --> 00:08:15,829
You can also choose
to augment or overlay this data

164
00:08:15,829 --> 00:08:19,666
with your own store information,
like store hours.

165
00:08:19,666 --> 00:08:23,136
In this way, you can leverage
different server APIs

166
00:08:23,136 --> 00:08:25,238
to build your applications.

167
00:08:25,238 --> 00:08:28,041
For other APIs,
please refer to documentation

168
00:08:28,041 --> 00:08:29,909
linked below this talk.

169
00:08:29,909 --> 00:08:33,813
One critical piece we haven't
talked about is authentication.

170
00:08:33,813 --> 00:08:37,450
All the Apple Maps Server APIs
are authenticated.

171
00:08:37,450 --> 00:08:41,154
If you are using MapKit JS,
you are already halfway there.

172
00:08:41,154 --> 00:08:45,225
Apple Maps Server APIs use
the same mechanism as MapKit JS

173
00:08:45,225 --> 00:08:47,327
to authenticate.

174
00:08:47,327 --> 00:08:49,629
First, you'll download
your private key

175
00:08:49,629 --> 00:08:51,564
from your developer account.

176
00:08:51,564 --> 00:08:53,299
You'll then use this private key

177
00:08:53,299 --> 00:08:56,703
to generate a Maps auth token
in JWT format.

178
00:08:56,703 --> 00:08:59,038
There is a detailed doc
about how to generate one

179
00:08:59,038 --> 00:09:00,874
linked below.

180
00:09:00,874 --> 00:09:03,076
You can then exchange
this Maps auth token

181
00:09:03,076 --> 00:09:06,713
using the token API
to get Maps access token.

182
00:09:06,713 --> 00:09:10,417
We'll authenticate the
Maps auth token on the back end

183
00:09:10,417 --> 00:09:13,052
and send back Maps access token.

184
00:09:13,052 --> 00:09:15,422
This is in JWT format
and will be used

185
00:09:15,422 --> 00:09:18,792
for all API interactions.

186
00:09:18,792 --> 00:09:22,328
This access token needs to be
refreshed every 30 minutes

187
00:09:22,328 --> 00:09:25,632
by repeating the highlighted
process here.

188
00:09:25,632 --> 00:09:29,235
Now that we saw how the
authentication flow looks like,

189
00:09:29,235 --> 00:09:33,106
here is a simple example
of how to use the token API

190
00:09:33,106 --> 00:09:35,775
to fetch the access token.

191
00:09:35,775 --> 00:09:39,078
We are using the token API here.

192
00:09:39,078 --> 00:09:43,049
We are passing
the Maps auth token as a header.

193
00:09:43,049 --> 00:09:46,019
You'll get back
a Maps access token

194
00:09:46,019 --> 00:09:48,555
that can be used
to access the API.

195
00:09:48,555 --> 00:09:52,158
This will be in JWT format
and will have standard fields

196
00:09:52,158 --> 00:09:55,562
like expiry, issuedAt, etcetera.

197
00:09:55,562 --> 00:09:58,298
As a convenience,
the expiresInSeconds field

198
00:09:58,298 --> 00:10:01,000
shows for how long
the token is valid for.

199
00:10:01,000 --> 00:10:04,737
In this case, it's 30 minutes.

200
00:10:04,737 --> 00:10:07,207
Keep in mind Maps auth token

201
00:10:07,207 --> 00:10:10,310
is not the same
as Maps access token.

202
00:10:10,310 --> 00:10:12,712
You exchange
the Maps auth token

203
00:10:12,712 --> 00:10:15,648
to get a 30-minute long
Maps access token

204
00:10:15,648 --> 00:10:18,251
to access the server APIs.

205
00:10:18,251 --> 00:10:21,054
Let's take a quick look
at how the API interaction

206
00:10:21,054 --> 00:10:24,958
with Maps access token
looks like.

207
00:10:24,958 --> 00:10:29,095
We'll pass the Maps access token
along with server API call.

208
00:10:29,095 --> 00:10:31,931
It is added as a header
to the API call,

209
00:10:31,931 --> 00:10:34,367
just like we saw
a few slides ago.

210
00:10:34,367 --> 00:10:37,971
The Apple Maps Server will
validate the Maps access token.

211
00:10:37,971 --> 00:10:40,073
Once the validation
is successful,

212
00:10:40,073 --> 00:10:44,577
the Apple Maps Server will
respond with an API response.

213
00:10:44,577 --> 00:10:47,847
Now that I have covered
APIs and authentication,

214
00:10:47,847 --> 00:10:50,416
let me talk about usage limits.

215
00:10:50,416 --> 00:10:53,152
With great power
comes great responsibility,

216
00:10:53,152 --> 00:10:55,388
so use your quota wisely.

217
00:10:55,388 --> 00:10:59,359
There is a daily cap on
how many API calls you can make,

218
00:10:59,359 --> 00:11:01,094
and it's big!

219
00:11:01,094 --> 00:11:05,632
You'll get a quota of 25,000
service calls per day in total.

220
00:11:05,632 --> 00:11:09,736
Keep in mind, calling services
via MapKit JS and server APIs

221
00:11:09,736 --> 00:11:11,371
use the same quota.

222
00:11:11,371 --> 00:11:14,507
If you need more,
please reach out to us.

223
00:11:14,507 --> 00:11:18,011
So, how do you keep track
of all this?

224
00:11:18,011 --> 00:11:23,082
You can view your usage stats
at the Maps developer dashboard.

225
00:11:23,082 --> 00:11:24,884
Anybody using MapKit JS?

226
00:11:24,884 --> 00:11:27,787
This will look
very familiar to you.

227
00:11:27,787 --> 00:11:31,190
The server API usage
is categorized as Services,

228
00:11:31,190 --> 00:11:34,961
which you can see
highlighted here.

229
00:11:34,961 --> 00:11:37,430
When the daily quota
is exceeded,

230
00:11:37,430 --> 00:11:41,868
which means more than
25,000 server API calls,

231
00:11:41,868 --> 00:11:44,370
we'll start rejecting
new service calls

232
00:11:44,370 --> 00:11:47,407
and respond with
HTTP status 429,

233
00:11:47,407 --> 00:11:50,176
which means too many requests.

234
00:11:50,176 --> 00:11:52,445
You should make sure
that the app experience

235
00:11:52,445 --> 00:11:55,381
degrades gracefully
in such scenarios.

236
00:11:55,381 --> 00:11:57,483
In rare scenarios,
when your service

237
00:11:57,483 --> 00:12:00,520
makes an unusual
amount of requests --

238
00:12:00,520 --> 00:12:03,489
maybe it's due to some bug in
your code or infrastructure --

239
00:12:03,489 --> 00:12:07,226
it's possible to get
HTTP status 429 as well.

240
00:12:07,226 --> 00:12:10,396
When you receive HTTP 429,
it is important

241
00:12:10,396 --> 00:12:13,666
not to simply loop repeatedly
in making requests.

242
00:12:13,666 --> 00:12:16,569
A better approach is
to retry with increasing delays

243
00:12:16,569 --> 00:12:18,104
in between attempts.

244
00:12:18,104 --> 00:12:21,774
This approach is known
as exponential backoff.

245
00:12:21,774 --> 00:12:24,877
So, what did we learn today?

246
00:12:24,877 --> 00:12:27,547
We are releasing
four new server APIs.

247
00:12:27,547 --> 00:12:30,783
These APIs are Geocoding,
Reverse Geocoding,

248
00:12:30,783 --> 00:12:33,686
Search, and ETA.

249
00:12:33,686 --> 00:12:38,024
Using these APIs in conjunction
with MapKit and MapKit JS

250
00:12:38,024 --> 00:12:40,026
will help you
better architect your apps

251
00:12:40,026 --> 00:12:42,895
using the Apple Maps stack.

252
00:12:42,895 --> 00:12:45,865
You can optimize redundant
and repetitive calls

253
00:12:45,865 --> 00:12:48,334
by delegating those tasks
to your back-end server

254
00:12:48,334 --> 00:12:51,871
using Apple Maps Server APIs.

255
00:12:51,871 --> 00:12:55,541
Daily quota for these APIs
is 25,000

256
00:12:55,541 --> 00:12:58,745
and is shared with your
MapKit JS service usage.

257
00:12:58,745 --> 00:13:01,848
And that's the new
Apple Maps Server APIs for you.

258
00:13:01,848 --> 00:13:04,550
Be sure to check out the other
sessions mentioned here

259
00:13:04,550 --> 00:13:07,020
and detailed documentation
linked below.

260
00:13:07,020 --> 00:13:10,123
We look forward to seeing
how you take advantage of them.

261
00:13:10,123 --> 00:13:11,457
Thank you!

262
00:13:11,457 --> 00:13:15,461
♪

