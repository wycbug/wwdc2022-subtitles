1
00:00:00,000 --> 00:00:03,003
♪ Mellow instrumental
hip-hip music ♪

2
00:00:03,003 --> 00:00:09,610
♪

3
00:00:09,610 --> 00:00:13,080
Hello and welcome to WWDC.

4
00:00:13,080 --> 00:00:16,850
My name's Karim,
and I'm a HealthKit engineer.

5
00:00:16,850 --> 00:00:19,753
The HealthKit framework
provides the foundation

6
00:00:19,753 --> 00:00:22,322
for building great
health experiences,

7
00:00:22,322 --> 00:00:24,124
and Apple Watch comes packed

8
00:00:24,124 --> 00:00:26,860
with many health
and safety features,

9
00:00:26,860 --> 00:00:29,429
that keep an eye on things
for you.

10
00:00:29,429 --> 00:00:33,567
One of the most popular
is sleep tracking,

11
00:00:33,567 --> 00:00:35,235
and we are making updates

12
00:00:35,235 --> 00:00:38,839
to capture more detailed
sleep data.

13
00:00:38,839 --> 00:00:41,875
We also have other
great new additions

14
00:00:41,875 --> 00:00:44,478
to HealthKit this year.

15
00:00:44,478 --> 00:00:47,281
We enhanced our APIs
to make it easier

16
00:00:47,281 --> 00:00:51,885
to query for data
with Swift async.

17
00:00:51,885 --> 00:00:57,557
We're improving workouts with
a richer workout representation.

18
00:00:57,557 --> 00:01:02,029
And we're adding support
for saving vision prescriptions,

19
00:01:02,029 --> 00:01:07,668
including a digital copy
of the physical prescription.

20
00:01:07,668 --> 00:01:10,971
I'm excited to tell you more
about all these updates

21
00:01:10,971 --> 00:01:14,041
and how your apps
can leverage them.

22
00:01:14,041 --> 00:01:17,244
Let's get started!

23
00:01:17,244 --> 00:01:20,080
Sleep is such
an essential function

24
00:01:20,080 --> 00:01:23,884
that allows our bodies
and minds to recharge,

25
00:01:23,884 --> 00:01:27,955
and I love using my Apple Watch
to manage my sleep schedule

26
00:01:27,955 --> 00:01:30,757
and get insights
that help me understand

27
00:01:30,757 --> 00:01:33,393
and improve my sleep.

28
00:01:33,393 --> 00:01:37,397
This year we are making
sleep tracking even better

29
00:01:37,397 --> 00:01:41,001
by introducing sleep stages.

30
00:01:41,001 --> 00:01:43,704
Apple Watch
will automatically track

31
00:01:43,704 --> 00:01:46,173
all the different sleep stages
you go through

32
00:01:46,173 --> 00:01:47,574
when you're asleep,

33
00:01:47,574 --> 00:01:51,478
and this data will be accessible
from the Health app

34
00:01:51,478 --> 00:01:53,947
and saved in HealthKit.

35
00:01:53,947 --> 00:01:57,417
Of course,
your app will be able to read

36
00:01:57,417 --> 00:02:01,455
and save sleep stages data.

37
00:02:01,455 --> 00:02:04,691
Sleep data saved
by Apple Watch or your app

38
00:02:04,691 --> 00:02:08,261
is represented in HealthKit
by category samples

39
00:02:08,261 --> 00:02:12,833
with the identifier
sleepAnalysis.

40
00:02:12,833 --> 00:02:15,802
We will support
three sleep stages:

41
00:02:15,802 --> 00:02:20,374
REM, core, and deep.

42
00:02:20,374 --> 00:02:22,576
When saving sleep data
to HealthKit,

43
00:02:22,576 --> 00:02:25,545
you should make sure
to create one sample

44
00:02:25,545 --> 00:02:31,752
for each continuous period
of time in a given sleep stage.

45
00:02:31,752 --> 00:02:35,522
This is what the sleep sample
value enum looks like.

46
00:02:35,522 --> 00:02:41,128
We're adding three cases
to represent sleep stages,

47
00:02:41,128 --> 00:02:43,730
starting with asleepCore,

48
00:02:43,730 --> 00:02:48,268
which corresponds to stages one
and two of the scoring model

49
00:02:48,268 --> 00:02:54,708
from the American Academy
of Sleep Medicine or AASM;

50
00:02:54,708 --> 00:02:58,712
asleepDeep, which corresponds
to stage three

51
00:02:58,712 --> 00:03:02,349
of the AASM scoring model;

52
00:03:02,349 --> 00:03:04,785
and finally, asleepREM,

53
00:03:04,785 --> 00:03:09,556
which corresponds
to the rapid eye movement stage.

54
00:03:09,556 --> 00:03:11,825
Now that we added sleep stages,

55
00:03:11,825 --> 00:03:14,761
we are deprecating
the asleep case

56
00:03:14,761 --> 00:03:18,265
in favor of asleepUnspecified,

57
00:03:18,265 --> 00:03:21,134
which indicates
that the user is asleep

58
00:03:21,134 --> 00:03:24,071
but no sleep stage
was specified.

59
00:03:24,071 --> 00:03:26,706
With the updated sleep
samples enum,

60
00:03:26,706 --> 00:03:30,510
it is now possible to save
and read sleep stages data

61
00:03:30,510 --> 00:03:32,045
from HealthKit.

62
00:03:32,045 --> 00:03:36,416
We added a new predicate to make
it easy to read sleep samples

63
00:03:36,416 --> 00:03:38,685
for a given stage.

64
00:03:38,685 --> 00:03:42,022
Let's say I want to read
sleep samples

65
00:03:42,022 --> 00:03:44,191
in the REM stage.

66
00:03:44,191 --> 00:03:46,259
First, I create a predicate

67
00:03:46,259 --> 00:03:49,529
using the new
predicateForSamples method

68
00:03:49,529 --> 00:03:52,532
with asleepREM as value.

69
00:03:52,532 --> 00:03:55,769
Now, I can start
building my query.

70
00:03:55,769 --> 00:03:57,871
I create a predicate
for my query

71
00:03:57,871 --> 00:04:00,340
with the sleepAnalysis
sample type

72
00:04:00,340 --> 00:04:02,642
and the sleep stage predicate.

73
00:04:02,642 --> 00:04:07,380
And with this query predicate,
I can now create my query.

74
00:04:07,380 --> 00:04:09,616
Running the query
will give me back

75
00:04:09,616 --> 00:04:13,553
an array of sleep samples
in the REM stage.

76
00:04:13,553 --> 00:04:16,857
However, if you're interested
in reading samples

77
00:04:16,857 --> 00:04:20,827
for all sleep stages,
including unspecified,

78
00:04:20,827 --> 00:04:23,163
it's important that
you update your app

79
00:04:23,163 --> 00:04:28,668
to use the new .allAsleepValues
when building your predicate.

80
00:04:28,668 --> 00:04:31,805
If you haven't looked
at HealthKit since last year,

81
00:04:31,805 --> 00:04:36,877
this shorter syntax for querying
may look unfamiliar to you.

82
00:04:36,877 --> 00:04:39,179
Since iOS 15.4,

83
00:04:39,179 --> 00:04:44,518
we have updated our query API
to support Swift async.

84
00:04:44,518 --> 00:04:47,888
Queries are an essential piece
of HealthKit,

85
00:04:47,888 --> 00:04:51,124
and with Swift async support,
they're easier to use

86
00:04:51,124 --> 00:04:54,161
with a more concise syntax.

87
00:04:54,161 --> 00:04:57,464
Queries allow you to read
various data from HealthKit,

88
00:04:57,464 --> 00:04:59,933
using predicates
to filter the results,

89
00:04:59,933 --> 00:05:03,870
and also watch for new data
as it comes in.

90
00:05:03,870 --> 00:05:08,441
All queries are subclasses
of HKQuery.

91
00:05:08,441 --> 00:05:12,045
If I'm interested in knowing
the total calories burned

92
00:05:12,045 --> 00:05:14,014
over a certain period of time,

93
00:05:14,014 --> 00:05:17,217
a great query to get
these computed statistics

94
00:05:17,217 --> 00:05:20,554
is HKStatisticsCollectionQuery.

95
00:05:20,554 --> 00:05:23,223
To get the initial results,
you would set

96
00:05:23,223 --> 00:05:27,894
the initialResultsHandler
closure of the query.

97
00:05:27,894 --> 00:05:31,398
And if you're interested
in watching for any updates,

98
00:05:31,398 --> 00:05:33,099
you would additionally set

99
00:05:33,099 --> 00:05:36,403
the statisticsUpdateHandler
closure.

100
00:05:36,403 --> 00:05:38,104
Once the query is started,

101
00:05:38,104 --> 00:05:41,841
these closures will be called
with the results.

102
00:05:41,841 --> 00:05:46,313
Thanks to Swift async,
we are making this even simpler.

103
00:05:46,313 --> 00:05:49,883
Each query now has
a matching query descriptor,

104
00:05:49,883 --> 00:05:53,186
so HKStatisticsCollectionQuery
becomes

105
00:05:53,186 --> 00:05:56,990
HKStatisticsCollectionQuery
Descriptor.

106
00:05:56,990 --> 00:05:58,425
You get the initial result

107
00:05:58,425 --> 00:06:02,696
by simply calling
the async result(for:) method.

108
00:06:02,696 --> 00:06:06,333
If, on the other hand, you want
to get the initial result

109
00:06:06,333 --> 00:06:10,270
and also watch for updates,
you call results(for:),

110
00:06:10,270 --> 00:06:14,341
which returns an AsyncSequence
that you can loop through

111
00:06:14,341 --> 00:06:16,676
to read the results.

112
00:06:16,676 --> 00:06:20,213
HealthKit is great
for tracking workouts

113
00:06:20,213 --> 00:06:24,317
and relevant metrics
such as burned calories.

114
00:06:24,317 --> 00:06:28,021
To find out how many calories
I burned this week,

115
00:06:28,021 --> 00:06:32,125
I can use the statistics
collection query descriptor.

116
00:06:32,125 --> 00:06:35,028
First, I create
the query descriptor

117
00:06:35,028 --> 00:06:38,732
with a predicate
to match calorie samples.

118
00:06:38,732 --> 00:06:44,404
I use the cumulativeSum option
because I want the total sum.

119
00:06:44,404 --> 00:06:46,506
I'm interested
in this week's data,

120
00:06:46,506 --> 00:06:50,844
so I use thisSunday
as my anchorDate.

121
00:06:50,844 --> 00:06:54,114
And finally,
I want my calorie totals

122
00:06:54,114 --> 00:06:58,685
to be computed for
a time interval of one week.

123
00:06:58,685 --> 00:07:00,987
Once I created
my query descriptor,

124
00:07:00,987 --> 00:07:04,224
all I need to do
is call result(for:)

125
00:07:04,224 --> 00:07:07,127
with a healthStore object.

126
00:07:07,127 --> 00:07:09,562
The returned
statisticsCollection object

127
00:07:09,562 --> 00:07:13,400
gives me a snapshot
of my current data.

128
00:07:13,400 --> 00:07:16,770
But if I want live updates
as my calories change,

129
00:07:16,770 --> 00:07:20,473
it's as simple
as calling results(for:)

130
00:07:20,473 --> 00:07:23,043
and looping through
the returned async sequence

131
00:07:23,043 --> 00:07:25,879
to read the results.

132
00:07:25,879 --> 00:07:28,048
When I'm done
watching for updates,

133
00:07:28,048 --> 00:07:32,986
I just break out of the loop
and that will stop the query.

134
00:07:32,986 --> 00:07:36,589
Now, let's talk about workouts.

135
00:07:36,589 --> 00:07:40,226
HealthKit is a great place
for saving workouts

136
00:07:40,226 --> 00:07:42,495
and all their related metrics

137
00:07:42,495 --> 00:07:45,332
whether you're going
on a casual bike ride

138
00:07:45,332 --> 00:07:48,702
or pushing yourself
to the limit at a race.

139
00:07:48,702 --> 00:07:49,969
And oftentimes,

140
00:07:49,969 --> 00:07:53,873
workouts may contain
more than one distinct activity.

141
00:07:53,873 --> 00:07:58,378
You may be repeating the same
exercise with interval training

142
00:07:58,378 --> 00:08:01,181
or participating
in a triathlon race

143
00:08:01,181 --> 00:08:05,685
which comprises swimming,
cycling, and running.

144
00:08:05,685 --> 00:08:10,657
We are updating our workouts API
in iOS 16 and watchOS 9

145
00:08:10,657 --> 00:08:14,361
to make it possible to capture
these types of workouts

146
00:08:14,361 --> 00:08:19,265
and the relevant statistics
for each activity.

147
00:08:19,265 --> 00:08:22,836
This is the timeline
of a swim-bike-run workout

148
00:08:22,836 --> 00:08:24,771
I did recently.

149
00:08:24,771 --> 00:08:26,606
I started with swimming,

150
00:08:26,606 --> 00:08:28,975
after which
I took a little bit of time

151
00:08:28,975 --> 00:08:32,245
to get ready for the cycling
portion of the workout,

152
00:08:32,245 --> 00:08:34,147
and finally running.

153
00:08:34,147 --> 00:08:41,154
Each activity is represented by
an HKWorkoutActivity object.

154
00:08:41,154 --> 00:08:42,756
Each workout activity

155
00:08:42,756 --> 00:08:45,959
is created with its own
workout configuration,

156
00:08:45,959 --> 00:08:49,729
which includes
the activity type.

157
00:08:49,729 --> 00:08:52,866
A workout activity holds
a list of events

158
00:08:52,866 --> 00:08:56,936
that occurred
during the activity.

159
00:08:56,936 --> 00:09:01,274
And you will be able to read
statistics for each activity,

160
00:09:01,274 --> 00:09:03,943
which is great for when
you're only interested

161
00:09:03,943 --> 00:09:08,948
in analyzing what happened
during a particular activity.

162
00:09:08,948 --> 00:09:10,750
Going back to my timeline,

163
00:09:10,750 --> 00:09:12,852
my three activities
are configured

164
00:09:12,852 --> 00:09:16,589
with their appropriate
activity type.

165
00:09:16,589 --> 00:09:19,692
Activities cannot
overlap in time.

166
00:09:19,692 --> 00:09:22,295
And because there may be
a transition period

167
00:09:22,295 --> 00:09:24,264
between each activity,

168
00:09:24,264 --> 00:09:27,834
they are not required
to be contiguous.

169
00:09:27,834 --> 00:09:30,336
If I'm interested
in analyzing what happened

170
00:09:30,336 --> 00:09:32,539
during transition periods,

171
00:09:32,539 --> 00:09:35,675
I can create an
HKWorkoutActivity

172
00:09:35,675 --> 00:09:39,612
for each transition
with the type transition.

173
00:09:39,612 --> 00:09:44,451
All of these activities will be
saved with the HKWorkout object

174
00:09:44,451 --> 00:09:47,720
under the workoutActivities
property.

175
00:09:47,720 --> 00:09:52,091
If you're using HKWorkoutBuilder
to add workouts to HealthKit,

176
00:09:52,091 --> 00:09:55,695
adding an activity
is as easy as creating

177
00:09:55,695 --> 00:10:00,633
an HKWorkoutActivity object
with a workoutConfiguration,

178
00:10:00,633 --> 00:10:04,170
start and end date,
and an optional metadata.

179
00:10:04,170 --> 00:10:08,141
And then, you simply call
addWorkoutActivity

180
00:10:08,141 --> 00:10:10,477
on the workout builder.

181
00:10:10,477 --> 00:10:14,214
On Apple Watch, you can use
a workout session

182
00:10:14,214 --> 00:10:16,616
to track
a swim-bike-run workout,

183
00:10:16,616 --> 00:10:18,651
and the associated
workout builder

184
00:10:18,651 --> 00:10:21,454
to save the workout
in HealthKit.

185
00:10:21,454 --> 00:10:23,523
Let's go back
to my workout timeline.

186
00:10:23,523 --> 00:10:26,593
To track this workout
on Apple Watch,

187
00:10:26,593 --> 00:10:31,598
I need to set up
a workout session and builder.

188
00:10:31,598 --> 00:10:35,101
I start by creating
a workout configuration

189
00:10:35,101 --> 00:10:38,171
with the type swimBikeRun.

190
00:10:38,171 --> 00:10:41,474
Then I create
an HKWorkoutSession

191
00:10:41,474 --> 00:10:43,943
using my configuration.

192
00:10:43,943 --> 00:10:45,812
At the beginning of the workout

193
00:10:45,812 --> 00:10:48,982
I simply call startActivity
on the session,

194
00:10:48,982 --> 00:10:53,286
and beginCollection on the
associated workout builder.

195
00:10:53,286 --> 00:10:55,922
Now that my session
and builder are ready,

196
00:10:55,922 --> 00:10:58,458
I can add my first activity

197
00:10:58,458 --> 00:11:01,127
using the
beginNewActivity method

198
00:11:01,127 --> 00:11:05,765
with a swimming workout
configuration and a start date.

199
00:11:05,765 --> 00:11:08,368
At the beginning
of each activity,

200
00:11:08,368 --> 00:11:11,437
you should make sure to update
the workout builder data source

201
00:11:11,437 --> 00:11:15,675
to only collect the data types
you're interested in.

202
00:11:15,675 --> 00:11:17,977
Because this is
a swimming activity,

203
00:11:17,977 --> 00:11:21,180
I want swimming distance
to be collected.

204
00:11:21,180 --> 00:11:22,982
At the end of the activity,

205
00:11:22,982 --> 00:11:28,588
I call endCurrentActivity
with the end date.

206
00:11:28,588 --> 00:11:32,091
Because I'm interested in
analyzing the transition period

207
00:11:32,091 --> 00:11:34,394
from swimming to cycling,

208
00:11:34,394 --> 00:11:37,063
I will start
a new transition activity

209
00:11:37,063 --> 00:11:40,667
immediately
after swimming has ended.

210
00:11:40,667 --> 00:11:44,704
Again, because this is
the beginning of an activity,

211
00:11:44,704 --> 00:11:46,539
I update the builder data source

212
00:11:46,539 --> 00:11:49,676
to disable the collection
of swimming distance,

213
00:11:49,676 --> 00:11:53,680
since it's no longer relevant.

214
00:11:53,680 --> 00:11:58,384
I end the transition activity
right before cycling begins.

215
00:11:58,384 --> 00:12:01,154
I can track the remaining
activities of my workout

216
00:12:01,154 --> 00:12:03,856
the same way.

217
00:12:03,856 --> 00:12:05,458
At the end of the workout,

218
00:12:05,458 --> 00:12:10,129
ending the session will
also end any running activity.

219
00:12:10,129 --> 00:12:12,432
Then I can finish
the workout builder,

220
00:12:12,432 --> 00:12:16,803
which will save and return
an HKWorkout object.

221
00:12:16,803 --> 00:12:19,038
I can use the returned workout

222
00:12:19,038 --> 00:12:21,674
to read some
of the associated metrics

223
00:12:21,674 --> 00:12:25,311
such as totalEnergyBurned
and totalDistance,

224
00:12:25,311 --> 00:12:29,949
and display a summary
of the workout in my app.

225
00:12:29,949 --> 00:12:32,919
However,
this small set of properties

226
00:12:32,919 --> 00:12:35,121
is no longer sufficient.

227
00:12:35,121 --> 00:12:39,425
totalSwimmingStrokeCount
is not relevant to all workouts,

228
00:12:39,425 --> 00:12:43,162
and some workouts
may collect more metrics.

229
00:12:43,162 --> 00:12:45,732
In order to make it easier
to read metrics

230
00:12:45,732 --> 00:12:47,500
for all kinds of workouts,

231
00:12:47,500 --> 00:12:49,802
we are deprecating
these properties

232
00:12:49,802 --> 00:12:53,873
in favor of a new method
which returns statistics

233
00:12:53,873 --> 00:12:56,643
for a given quantity type.

234
00:12:56,643 --> 00:12:59,846
As a reminder,
this method is also available

235
00:12:59,846 --> 00:13:03,750
on HKWorkoutActivity,
allowing you to focus

236
00:13:03,750 --> 00:13:08,187
on just what happened
during an activity.

237
00:13:08,187 --> 00:13:11,758
These statistics will be
automatically computed

238
00:13:11,758 --> 00:13:14,327
from any samples collected
with the workout,

239
00:13:14,327 --> 00:13:20,033
only when using HKWorkoutBuilder
or HKLiveWorkoutBuilder.

240
00:13:20,033 --> 00:13:23,102
Along with this richer
workout representation,

241
00:13:23,102 --> 00:13:26,272
we also have a new set
of predicates to help you query

242
00:13:26,272 --> 00:13:28,875
for only the workouts
you're interested in

243
00:13:28,875 --> 00:13:32,979
when driving your analysis
or visualization.

244
00:13:32,979 --> 00:13:34,847
To give you an example,

245
00:13:34,847 --> 00:13:38,451
here's a list
of my recent workouts

246
00:13:38,451 --> 00:13:42,622
with the average heart rate
for each activity.

247
00:13:42,622 --> 00:13:47,060
I would like to find my workouts
with high-intensity activities

248
00:13:47,060 --> 00:13:50,930
where my average heart rate
was above 150.

249
00:13:50,930 --> 00:13:54,567
First, I start by creating
a predicate using the new

250
00:13:54,567 --> 00:13:57,170
predicateForWorkoutActivities
method,

251
00:13:57,170 --> 00:14:00,573
which will act
on workout activities.

252
00:14:00,573 --> 00:14:02,108
I want the average heart rate

253
00:14:02,108 --> 00:14:05,578
to be greater
than 150 beats per minute.

254
00:14:05,578 --> 00:14:08,581
Next, because
I want to query for workouts,

255
00:14:08,581 --> 00:14:13,286
I wrap my heart rate predicate
inside a workout predicate.

256
00:14:13,286 --> 00:14:17,390
Then, I create a query
using that predicate.

257
00:14:17,390 --> 00:14:20,059
And I call the
result(for: healthStore) method

258
00:14:20,059 --> 00:14:23,396
of my query descriptor
to get the list of workouts

259
00:14:23,396 --> 00:14:26,099
that match my predicate.

260
00:14:26,099 --> 00:14:27,934
And that's how I'm able to query

261
00:14:27,934 --> 00:14:31,270
for just the workouts
I'm interested in.

262
00:14:31,270 --> 00:14:33,072
One of my recent workouts

263
00:14:33,072 --> 00:14:36,476
consisted of four
running intervals.

264
00:14:36,476 --> 00:14:40,246
Using HKWorkoutActivity
is a great way

265
00:14:40,246 --> 00:14:42,615
to capture these intervals.

266
00:14:42,615 --> 00:14:45,418
You just need to make sure
that all activities

267
00:14:45,418 --> 00:14:49,021
of an interval workout
have the same activity type

268
00:14:49,021 --> 00:14:50,857
as the workout.

269
00:14:50,857 --> 00:14:54,460
So for a running workout,
all activities are configured

270
00:14:54,460 --> 00:14:57,063
with the .running type.

271
00:14:57,063 --> 00:15:01,033
One benefit of using workout
activities to track intervals

272
00:15:01,033 --> 00:15:04,971
is you can get statistics
for each interval.

273
00:15:04,971 --> 00:15:07,740
With these updates,
workouts now include

274
00:15:07,740 --> 00:15:11,544
a more comprehensive
picture of their activities

275
00:15:11,544 --> 00:15:14,614
and the context
surrounding them.

276
00:15:14,614 --> 00:15:18,050
In order to provide
an even richer picture,

277
00:15:18,050 --> 00:15:21,187
we're introducing
new running metrics

278
00:15:21,187 --> 00:15:23,389
that will be
automatically collected

279
00:15:23,389 --> 00:15:28,060
on Apple Watch Series 6,
SE, and newer --

280
00:15:28,060 --> 00:15:33,699
metrics such as running stride
length, or power in watts.

281
00:15:33,699 --> 00:15:37,603
For swimming workouts,
we're adding the SWOLF score.

282
00:15:37,603 --> 00:15:40,373
It's defined as
the number of strokes

283
00:15:40,373 --> 00:15:42,508
taken in a given length,

284
00:15:42,508 --> 00:15:45,812
and the time it took
to swim that length.

285
00:15:45,812 --> 00:15:49,549
This score will be calculated
for each lap event

286
00:15:49,549 --> 00:15:52,218
and segment event
for swimming workouts

287
00:15:52,218 --> 00:15:55,588
recorded on Apple Watch.

288
00:15:55,588 --> 00:15:58,758
While these metrics enrich
your workouts and allow you

289
00:15:58,758 --> 00:16:02,695
to get a better understanding
of how you performed,

290
00:16:02,695 --> 00:16:05,298
another important metric
that is recorded

291
00:16:05,298 --> 00:16:09,402
after a workout has ended
is heart rate recovery.

292
00:16:09,402 --> 00:16:13,472
It's an estimate of how quickly
your heart rate lowers

293
00:16:13,472 --> 00:16:17,877
after exercise,
and it can be used to understand

294
00:16:17,877 --> 00:16:20,213
how the heart recovers
after stress,

295
00:16:20,213 --> 00:16:23,282
and reveal potential
health problems.

296
00:16:23,282 --> 00:16:28,721
With iOS 16, we are introducing
a new Cardio Recovery data type.

297
00:16:28,721 --> 00:16:31,324
It will be accessible
from the Health app,

298
00:16:31,324 --> 00:16:34,760
and your apps will be able
to read and save this data

299
00:16:34,760 --> 00:16:37,363
in HealthKit.

300
00:16:37,363 --> 00:16:41,067
Heart rate recovery
is a quantity type

301
00:16:41,067 --> 00:16:46,172
with the identifier
.heartRateRecoveryOneMinute.

302
00:16:46,172 --> 00:16:48,274
Additional context information

303
00:16:48,274 --> 00:16:50,710
about each heart rate
recovery sample

304
00:16:50,710 --> 00:16:54,113
can be added as metadata.

305
00:16:54,113 --> 00:16:56,649
In my recent
swim-bike-run workout,

306
00:16:56,649 --> 00:16:59,151
I pushed myself to my limits,

307
00:16:59,151 --> 00:17:03,055
and then observed
my heart rate's recovery rate.

308
00:17:03,055 --> 00:17:05,491
It took me about
three and a half hours

309
00:17:05,491 --> 00:17:08,294
to complete the workout.

310
00:17:08,294 --> 00:17:12,732
I reached a maximum heart rate
of 184 beats per minute

311
00:17:12,732 --> 00:17:14,533
when I was running.

312
00:17:14,533 --> 00:17:16,802
And the minute following
the workout,

313
00:17:16,802 --> 00:17:20,506
my heart rate
dropped by 50 beats.

314
00:17:20,506 --> 00:17:24,176
When using HKLiveWorkoutBuilder
on Apple Watch,

315
00:17:24,176 --> 00:17:26,279
a heart rate recovery sample,

316
00:17:26,279 --> 00:17:28,748
along with
its surrounding context,

317
00:17:28,748 --> 00:17:33,319
is automatically saved
in HealthKit after a workout.

318
00:17:33,319 --> 00:17:37,023
Otherwise, to save
a heart rate recovery sample,

319
00:17:37,023 --> 00:17:39,425
I create a quantity sample
with the

320
00:17:39,425 --> 00:17:42,728
.heartRateRecoveryOneMinute
type.

321
00:17:42,728 --> 00:17:44,530
My heart rate dropped
by 50 beats

322
00:17:44,530 --> 00:17:46,332
the minute
following the workout,

323
00:17:46,332 --> 00:17:50,503
so I set that as the quantity
of my sample.

324
00:17:50,503 --> 00:17:54,073
I also set a start and end date
for the sample.

325
00:17:54,073 --> 00:17:57,944
Then, I put the additional
context information

326
00:17:57,944 --> 00:18:00,613
in the metadata dictionary,

327
00:18:00,613 --> 00:18:03,449
starting with
the recovery test type.

328
00:18:03,449 --> 00:18:06,185
Because my workout
was an all-out effort,

329
00:18:06,185 --> 00:18:09,722
the test type is .maxExercise.

330
00:18:09,722 --> 00:18:12,258
My workout was a swimBikeRun,

331
00:18:12,258 --> 00:18:15,995
so I set that
as the activity type.

332
00:18:15,995 --> 00:18:19,231
I can also add the workout
duration using the

333
00:18:19,231 --> 00:18:23,169
HeartRateRecoveryActivity
Duration key.

334
00:18:23,169 --> 00:18:27,306
Finally, I add the maximum
heart rate observed

335
00:18:27,306 --> 00:18:32,845
during the workout,
which was 184 beats per minute.

336
00:18:32,845 --> 00:18:35,915
With these updates,
it is now easier than ever

337
00:18:35,915 --> 00:18:39,952
to track swim-bike-run,
and interval workouts.

338
00:18:39,952 --> 00:18:43,456
In addition,
the introduction of new metrics

339
00:18:43,456 --> 00:18:47,426
provides a more comprehensive
picture for your workouts

340
00:18:47,426 --> 00:18:52,431
and newer ways
to evaluate progress over time.

341
00:18:52,431 --> 00:18:57,069
While activity and fitness is
something that impacts everyone

342
00:18:57,069 --> 00:18:59,472
there are other aspects
of health

343
00:18:59,472 --> 00:19:03,275
that touch on many of us,
such as vision.

344
00:19:03,275 --> 00:19:07,046
In fact, according to
the Vision Council of America,

345
00:19:07,046 --> 00:19:11,951
approximately 75 percent
of adults in the United States

346
00:19:11,951 --> 00:19:15,321
rely on vision correction
with prescription glasses

347
00:19:15,321 --> 00:19:17,723
or contact lenses.

348
00:19:17,723 --> 00:19:20,960
These prescriptions,
however, are easy to lose,

349
00:19:20,960 --> 00:19:23,629
and it's one more thing
you need to have with you

350
00:19:23,629 --> 00:19:27,967
when ordering prescription
glasses or contact lenses.

351
00:19:27,967 --> 00:19:31,103
So let's put them
in our phones.

352
00:19:31,103 --> 00:19:34,140
Starting with iOS 16,
your apps can now save

353
00:19:34,140 --> 00:19:39,712
glasses and contacts
prescriptions in HealthKit.

354
00:19:39,712 --> 00:19:42,348
A vision prescription
is a sample

355
00:19:42,348 --> 00:19:45,684
with the visionPrescriptionType.

356
00:19:45,684 --> 00:19:47,720
The sample's start date
corresponds

357
00:19:47,720 --> 00:19:50,423
to the prescription's
issue date,

358
00:19:50,423 --> 00:19:54,660
while the end date corresponds
to the expiration date.

359
00:19:54,660 --> 00:19:59,065
Optionally, a digital copy
of the physical prescription

360
00:19:59,065 --> 00:20:02,835
can be attached
to the sample.

361
00:20:02,835 --> 00:20:06,005
A glasses or contacts
prescription sample

362
00:20:06,005 --> 00:20:10,709
is a subclass
of HKVisionPrescription.

363
00:20:10,709 --> 00:20:15,347
For glasses, you use the
HKGlassesPrescription subclass,

364
00:20:15,347 --> 00:20:20,453
and for contacts, the
HKContactsPrescription subclass.

365
00:20:20,453 --> 00:20:22,755
Each glasses prescription
is created

366
00:20:22,755 --> 00:20:26,559
using two glasses lens
specification objects;

367
00:20:26,559 --> 00:20:29,395
one for each eye.

368
00:20:29,395 --> 00:20:32,765
And similarly, contacts
prescriptions are created

369
00:20:32,765 --> 00:20:36,769
with two contacts lens
specification objects.

370
00:20:36,769 --> 00:20:40,239
Now, let's save
my reading glasses prescription

371
00:20:40,239 --> 00:20:42,274
to HealthKit.

372
00:20:42,274 --> 00:20:46,579
The first step is to create
an HKGlassesLensSpecification

373
00:20:46,579 --> 00:20:48,681
for each eye.

374
00:20:48,681 --> 00:20:52,618
Some parameters, such as
vertex distance and prism,

375
00:20:52,618 --> 00:20:54,820
are optional.

376
00:20:54,820 --> 00:21:00,926
I can create the right eye
lens specification the same way.

377
00:21:00,926 --> 00:21:04,563
Next, I create a glasses
prescription sample

378
00:21:04,563 --> 00:21:09,168
with my right eye and left eye
lens specifications.

379
00:21:09,168 --> 00:21:12,204
This prescription
is for my reading glasses,

380
00:21:12,204 --> 00:21:16,308
so I'm adding that
in the description.

381
00:21:16,308 --> 00:21:18,944
Then, I just call save
on the healthStore

382
00:21:18,944 --> 00:21:20,880
with my prescription.

383
00:21:20,880 --> 00:21:25,818
And with that, my prescription
is now saved in HealthKit.

384
00:21:25,818 --> 00:21:27,686
I also took a picture of it,

385
00:21:27,686 --> 00:21:31,891
which I'd like to attach
to the sample I just saved.

386
00:21:31,891 --> 00:21:37,897
A file attachment is represented
by an HKAttachment object.

387
00:21:37,897 --> 00:21:43,903
You use HKAttachmentStore to
save and read file attachments.

388
00:21:43,903 --> 00:21:47,072
Only static images or PDF files

389
00:21:47,072 --> 00:21:50,910
can be attached
to prescriptions.

390
00:21:50,910 --> 00:21:55,414
To attach the picture I took
to my prescription sample,

391
00:21:55,414 --> 00:21:59,451
I start by creating
an HKAttachmentStore object

392
00:21:59,451 --> 00:22:01,720
using a healthStore.

393
00:22:01,720 --> 00:22:07,126
Then I call addAttachment(to:)
with my prescription sample.

394
00:22:07,126 --> 00:22:09,962
I set a name for the attachment.

395
00:22:09,962 --> 00:22:13,332
Here, I'm attaching a PNG file.

396
00:22:13,332 --> 00:22:17,870
And finally,
pass the URL of the file.

397
00:22:17,870 --> 00:22:22,708
The prescription I just attached
contains a lot more information

398
00:22:22,708 --> 00:22:25,511
than just
the lens specification --

399
00:22:25,511 --> 00:22:30,783
sensitive information, like
my full name and date of birth.

400
00:22:30,783 --> 00:22:33,018
One of HealthKit's
core principles

401
00:22:33,018 --> 00:22:36,355
is to protect your privacy
and make sure

402
00:22:36,355 --> 00:22:40,492
that you are always in control
of the data you share.

403
00:22:40,492 --> 00:22:44,496
Because it can be easy to share
more data than intended

404
00:22:44,496 --> 00:22:47,099
with prescriptions
that include an attachment,

405
00:22:47,099 --> 00:22:50,302
we are introducing
a new authorization model

406
00:22:50,302 --> 00:22:52,404
for prescriptions.

407
00:22:52,404 --> 00:22:54,640
Read authorization is granted

408
00:22:54,640 --> 00:22:57,943
for each prescription
object separately.

409
00:22:57,943 --> 00:23:00,713
Users can select exactly
which prescriptions

410
00:23:00,713 --> 00:23:03,549
they grant your app access to,

411
00:23:03,549 --> 00:23:07,253
and update their selection
at any time.

412
00:23:07,253 --> 00:23:10,923
We have a new API
for requesting authorization

413
00:23:10,923 --> 00:23:14,159
for vision prescription objects.

414
00:23:14,159 --> 00:23:16,195
Just like other data types,

415
00:23:16,195 --> 00:23:19,164
you can use queries
to read prescriptions

416
00:23:19,164 --> 00:23:22,034
that your app has access to.

417
00:23:22,034 --> 00:23:25,537
If you're only interested
in certain prescriptions,

418
00:23:25,537 --> 00:23:27,873
you can use a predicate.

419
00:23:27,873 --> 00:23:31,010
To request authorization,
simply call the

420
00:23:31,010 --> 00:23:34,246
requestPerObjectRead
Authorization method

421
00:23:34,246 --> 00:23:37,883
of the healthStore
with the visionType.

422
00:23:37,883 --> 00:23:42,888
Doing so will always display an
authorization prompt in your app

423
00:23:42,888 --> 00:23:45,557
with a list of all
the prescriptions

424
00:23:45,557 --> 00:23:48,594
that match your predicate.

425
00:23:48,594 --> 00:23:51,363
Make sure you're asking
for authorization

426
00:23:51,363 --> 00:23:56,368
in the appropriate context to
ensure the best user experience.

427
00:23:56,368 --> 00:24:00,572
These are just some of the new
things we added to HealthKit

428
00:24:00,572 --> 00:24:03,509
to empower your apps
to provide better health

429
00:24:03,509 --> 00:24:05,978
and fitness experiences.

430
00:24:05,978 --> 00:24:09,948
We can't wait to see
what you will build next.

431
00:24:09,948 --> 00:24:13,752
Have a great WWDC,
and if you have any questions,

432
00:24:13,752 --> 00:24:17,356
we'll be happy to help you
in the Developer Forums.

433
00:24:17,356 --> 00:24:21,460
♪

