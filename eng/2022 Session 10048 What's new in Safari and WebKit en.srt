1
00:00:00,000 --> 00:00:03,003
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,003 --> 00:00:09,710
♪

3
00:00:09,710 --> 00:00:12,145
Hi there! I'm Kendall Bagley,

4
00:00:12,145 --> 00:00:14,982
a software engineer
on the Safari team.

5
00:00:14,982 --> 00:00:19,486
It's been a full year since
we last got together at WWDC,

6
00:00:19,486 --> 00:00:21,488
and today, we're going
to be talking about

7
00:00:21,488 --> 00:00:23,957
all the amazing features
and enhancements

8
00:00:23,957 --> 00:00:25,425
to Safari and WebKit

9
00:00:25,425 --> 00:00:28,629
from both what's new here
at this year's WWDC

10
00:00:28,629 --> 00:00:32,032
and from what we've seen
throughout this whole past year.

11
00:00:32,032 --> 00:00:35,335
In fact, it's been
quite a busy year!

12
00:00:35,335 --> 00:00:38,372
Since last fall, each release
of Safari has delivered

13
00:00:38,372 --> 00:00:42,209
new and exciting features that
we know y'all as web developers

14
00:00:42,209 --> 00:00:44,211
have been asking for.

15
00:00:44,211 --> 00:00:47,014
Each of the new enhancements
delivered this year

16
00:00:47,014 --> 00:00:49,349
aimed to address some of
the biggest points of feedback

17
00:00:49,349 --> 00:00:51,451
you've been sharing with us.

18
00:00:51,451 --> 00:00:55,022
Like adding a parent selector
with the :has() pseudo class,

19
00:00:55,022 --> 00:00:59,059
the new flexbox inspector,
and even container queries.

20
00:00:59,059 --> 00:01:02,362
We want to make your daily work
that much better and easier

21
00:01:02,362 --> 00:01:05,032
while building the best
and most powerful software

22
00:01:05,032 --> 00:01:06,400
for the web.

23
00:01:06,400 --> 00:01:09,670
In fact, what's here
is just some of the new content

24
00:01:09,670 --> 00:01:11,872
that we'll be going over today.

25
00:01:11,872 --> 00:01:15,242
But there's so much more that
we wouldn't possibly be able

26
00:01:15,242 --> 00:01:18,378
to cover it all
in this one session.

27
00:01:18,378 --> 00:01:23,150
There's been a total
of 162 new web platform features

28
00:01:23,150 --> 00:01:26,019
and improvements across
the seven Safari releases

29
00:01:26,019 --> 00:01:27,721
this past year.

30
00:01:27,721 --> 00:01:31,692
We've been proud to provide
so many new tools for you to use

31
00:01:31,692 --> 00:01:34,361
to make your websites
and web apps.

32
00:01:34,361 --> 00:01:38,932
And for macOS, the best way
to see what's new and exciting

33
00:01:38,932 --> 00:01:42,836
as soon as possible is through
Safari Technology Preview,

34
00:01:42,836 --> 00:01:45,339
where you can try out
the latest and greatest

35
00:01:45,339 --> 00:01:48,308
for Safari and WebKit
and also help us know

36
00:01:48,308 --> 00:01:51,011
what we should have come next.

37
00:01:51,011 --> 00:01:55,148
But like you saw, there's
a whole bunch of new features,

38
00:01:55,148 --> 00:01:56,249
so let's take a look

39
00:01:56,249 --> 00:01:59,086
at everything that
we're going to cover.

40
00:01:59,086 --> 00:02:03,557
Today we'll be looking
at new HTML features,

41
00:02:03,557 --> 00:02:05,192
CSS enhancements --

42
00:02:05,192 --> 00:02:09,463
including a bunch to help
your code architecture --

43
00:02:09,463 --> 00:02:15,435
new Web Inspector tools,
a wide selection of new web API,

44
00:02:15,435 --> 00:02:19,206
great JavaScript
and WebAssembly features,

45
00:02:19,206 --> 00:02:23,210
and improvements
to security and privacy.

46
00:02:23,210 --> 00:02:27,280
So, let's get started
with what's new with HTML

47
00:02:27,280 --> 00:02:29,750
by taking a look
at a web page I'm creating

48
00:02:29,750 --> 00:02:32,753
for my coworkers and I to use.

49
00:02:32,753 --> 00:02:36,223
I personally really like to
thrift and repurpose my clothes

50
00:02:36,223 --> 00:02:39,226
as a way to make my wardrobe
more sustainable,

51
00:02:39,226 --> 00:02:41,461
and I thought
a clothing swap website

52
00:02:41,461 --> 00:02:46,233
would be a great way
to have my team try it out too.

53
00:02:46,233 --> 00:02:49,669
My design for the site includes
a Request Item button

54
00:02:49,669 --> 00:02:51,338
that should show you
a form to fill out

55
00:02:51,338 --> 00:02:54,174
when you spot a piece
of clothing that you like.

56
00:02:54,174 --> 00:02:56,576
And I want that form
to show up in an overlay

57
00:02:56,576 --> 00:02:58,812
over top of the whole page.

58
00:02:58,812 --> 00:03:01,882
The new dialog element
provides a really easy way

59
00:03:01,882 --> 00:03:06,253
to create overlays in a robust
and accessible manner

60
00:03:06,253 --> 00:03:08,789
that we can use
for our request form.

61
00:03:08,789 --> 00:03:11,958
And the new backdrop
pseudo-element in CSS

62
00:03:11,958 --> 00:03:14,461
makes it possible
to style the background

63
00:03:14,461 --> 00:03:16,329
behind the modal.

64
00:03:16,329 --> 00:03:19,866
Let's bring up the dialog
by requesting an item.

65
00:03:19,866 --> 00:03:22,369
See that shadow and animation?

66
00:03:22,369 --> 00:03:24,471
It's really looking great!

67
00:03:24,471 --> 00:03:27,374
Then, once an item
is requested on our site,

68
00:03:27,374 --> 00:03:28,575
the person who posted it

69
00:03:28,575 --> 00:03:32,979
needs to be able
to accept the request.

70
00:03:32,979 --> 00:03:35,415
At the bottom of the page,
there's a carousel

71
00:03:35,415 --> 00:03:38,452
to flip through
all your received requests.

72
00:03:38,452 --> 00:03:41,788
But I don't want someone
to accidentally interact

73
00:03:41,788 --> 00:03:44,591
with a button or a text field
for one of the items

74
00:03:44,591 --> 00:03:46,359
that's not the frontmost,

75
00:03:46,359 --> 00:03:49,463
with either clicks
or keyboard navigation.

76
00:03:49,463 --> 00:03:52,766
I can use the inert attribute
to fix this.

77
00:03:52,766 --> 00:03:55,202
By dynamically applying
the inert attribute

78
00:03:55,202 --> 00:03:56,937
with the JavaScript here,

79
00:03:56,937 --> 00:04:00,540
I'm disabling any interactions
for elements on slides

80
00:04:00,540 --> 00:04:02,843
that aren't the currently
selected slide

81
00:04:02,843 --> 00:04:04,945
as we switch between them.

82
00:04:04,945 --> 00:04:08,782
And, using inert
includes disabling interactions

83
00:04:08,782 --> 00:04:11,885
for assistive technologies
and prevents screen readers

84
00:04:11,885 --> 00:04:14,688
from reading those
disabled items aloud,

85
00:04:14,688 --> 00:04:16,523
giving much clearer guidance

86
00:04:16,523 --> 00:04:20,660
on which elements
are intended for interaction.

87
00:04:20,660 --> 00:04:25,398
And lastly for HTML, there's
the new lazy loading for images.

88
00:04:25,398 --> 00:04:27,534
On my site,
there's some icons in the header

89
00:04:27,534 --> 00:04:32,339
that I need to load right away,
but for the clothing item images

90
00:04:32,339 --> 00:04:34,875
that are offscreen
on that first load,

91
00:04:34,875 --> 00:04:37,511
we can utilize
lazy loading for them,

92
00:04:37,511 --> 00:04:40,881
so the images only load
when the user scrolls to them,

93
00:04:40,881 --> 00:04:44,684
making the page feel faster
and more responsive.

94
00:04:44,684 --> 00:04:47,254
I'm really loving
how the site's looking so far,

95
00:04:47,254 --> 00:04:48,989
and it's going to work great

96
00:04:48,989 --> 00:04:52,392
for those using
assistive technologies as well.

97
00:04:52,392 --> 00:04:56,696
And those HTML features
are just getting us started,

98
00:04:56,696 --> 00:04:58,965
because there's so much
to check out

99
00:04:58,965 --> 00:05:02,269
with CSS this year too.

100
00:05:02,269 --> 00:05:04,838
A huge part of our CSS focus

101
00:05:04,838 --> 00:05:07,974
has been around
making your CSS easier to reuse

102
00:05:07,974 --> 00:05:10,410
through more
powerful architecture.

103
00:05:10,410 --> 00:05:13,280
With that, we know
the number one request

104
00:05:13,280 --> 00:05:16,650
for new web technology
has been container queries.

105
00:05:16,650 --> 00:05:19,419
And we're thrilled to announce
container queries

106
00:05:19,419 --> 00:05:22,589
will ship in Safari 16!

107
00:05:22,589 --> 00:05:24,758
You'll be able to use
both size queries

108
00:05:24,758 --> 00:05:27,260
and container query units.

109
00:05:27,260 --> 00:05:30,197
Here, I'm experimenting
with an alternative layout

110
00:05:30,197 --> 00:05:32,499
for the clothing swap website.

111
00:05:32,499 --> 00:05:35,235
I'm making the card that
presents a piece of clothing

112
00:05:35,235 --> 00:05:38,672
into a reusable component
and dropping that component

113
00:05:38,672 --> 00:05:42,175
into several different
places in the page layout.

114
00:05:42,175 --> 00:05:43,610
Here in the sidebar,

115
00:05:43,610 --> 00:05:46,580
the available space
is a bit narrow,

116
00:05:46,580 --> 00:05:49,149
so I want all the content
inside my component

117
00:05:49,149 --> 00:05:51,451
to stack vertically.

118
00:05:51,451 --> 00:05:53,086
In the main grid of items,

119
00:05:53,086 --> 00:05:56,189
I want to feature the first one
as a hero graphic

120
00:05:56,189 --> 00:05:59,659
that should take up all
the available space horizontally

121
00:05:59,659 --> 00:06:02,896
and arrange the content in a
fashion that makes more sense

122
00:06:02,896 --> 00:06:05,232
for a wide layout.

123
00:06:05,232 --> 00:06:07,968
The rest of the items
in the main content area

124
00:06:07,968 --> 00:06:10,870
should be divided
into smaller columns.

125
00:06:10,870 --> 00:06:12,872
So I've created another layout

126
00:06:12,872 --> 00:06:17,110
that works when there's a medium
amount of horizontal space.

127
00:06:17,110 --> 00:06:20,747
Using container queries to
handle the change in the layout,

128
00:06:20,747 --> 00:06:22,415
rather than media queries,

129
00:06:22,415 --> 00:06:26,419
I can write the layout code
for this component just once

130
00:06:26,419 --> 00:06:29,522
and use that component
any place on my site

131
00:06:29,522 --> 00:06:31,858
in a container of any size,

132
00:06:31,858 --> 00:06:35,395
and the correct layout
will always get applied.

133
00:06:35,395 --> 00:06:38,798
I specified which element
to use for the container

134
00:06:38,798 --> 00:06:41,935
and whether I want to measure
against just the inline size

135
00:06:41,935 --> 00:06:45,805
or both inline and block size
at the same time,

136
00:06:45,805 --> 00:06:48,908
by using
the container-type property.

137
00:06:48,908 --> 00:06:51,444
I can optionally
name my container

138
00:06:51,444 --> 00:06:53,613
using
the container-name property,

139
00:06:53,613 --> 00:06:58,518
which gives me more flexibility
in how I structure the HTML.

140
00:06:58,518 --> 00:07:03,089
Then I use the @container rule
to apply styles conditionally,

141
00:07:03,089 --> 00:07:05,358
based on the size
of the container.

142
00:07:05,358 --> 00:07:08,094
Here, if the clothing card
component is in a container

143
00:07:08,094 --> 00:07:10,897
that's wider than 250 pixels,

144
00:07:10,897 --> 00:07:14,968
the grid will change to have
two columns instead of one.

145
00:07:14,968 --> 00:07:18,738
Next up with CSS architecture:
cascade layers.

146
00:07:18,738 --> 00:07:22,809
This is a powerful change
to the CSS cascade.

147
00:07:22,809 --> 00:07:24,911
Since the beginning of CSS,

148
00:07:24,911 --> 00:07:28,348
the cascade has been made up
of these different layers.

149
00:07:28,348 --> 00:07:32,052
But no matter what specificity
of any given selector

150
00:07:32,052 --> 00:07:34,621
inside each layer,
author styles --

151
00:07:34,621 --> 00:07:37,023
the styles you write
as web developers --

152
00:07:37,023 --> 00:07:39,859
always beats UA styles.

153
00:07:39,859 --> 00:07:43,596
Inline styles are always more
powerful than author styles,

154
00:07:43,596 --> 00:07:46,599
and so on
with the rest of the hierarchy.

155
00:07:46,599 --> 00:07:49,369
Cascade layers takes
this same concept

156
00:07:49,369 --> 00:07:52,339
and allows you to create
your own custom layers

157
00:07:52,339 --> 00:07:57,277
where specificity is calculated
independently inside each layer.

158
00:07:57,277 --> 00:08:00,380
One entire layer
beats another entire layer,

159
00:08:00,380 --> 00:08:04,984
no matter what the specificity
is of the selectors being used.

160
00:08:04,984 --> 00:08:08,388
And you determine which layer
has power over the others

161
00:08:08,388 --> 00:08:13,293
through the order of how you
define the layers in your CSS.

162
00:08:13,293 --> 00:08:15,395
Cascade layers
will be a useful tool

163
00:08:15,395 --> 00:08:18,298
for architecting CSS
on large projects

164
00:08:18,298 --> 00:08:20,767
and maintaining
that code over time.

165
00:08:20,767 --> 00:08:22,202
Perhaps your team will use them

166
00:08:22,202 --> 00:08:24,938
to separate a design system
from overrides

167
00:08:24,938 --> 00:08:28,775
or a framework you're using for
custom styles for your project.

168
00:08:28,775 --> 00:08:30,910
It's totally up to you!

169
00:08:30,910 --> 00:08:33,780
And, to round out all
the amazing new enhancements

170
00:08:33,780 --> 00:08:36,916
for your CSS architecture
is :has(),

171
00:08:36,916 --> 00:08:40,920
a pseudo-class that can act as
the long-wanted parent selector

172
00:08:40,920 --> 00:08:42,689
and much more.

173
00:08:42,689 --> 00:08:45,625
Combined with
any other selector in CSS,

174
00:08:45,625 --> 00:08:48,628
:has() can look for siblings,
attributes,

175
00:08:48,628 --> 00:08:51,131
states of form fields,
and much more.

176
00:08:51,131 --> 00:08:54,033
It's really powerful.

177
00:08:54,033 --> 00:08:56,970
Here, I want to highlight
the entire message box

178
00:08:56,970 --> 00:08:59,706
whenever someone has checked
the "Urgent?" checkbox

179
00:08:59,706 --> 00:09:01,608
for one of their messages.

180
00:09:01,608 --> 00:09:05,145
I can use the :has pseudo-class
here to say that anytime

181
00:09:05,145 --> 00:09:08,715
the form element has an input
of type checkbox

182
00:09:08,715 --> 00:09:12,719
with that checkbox checked,
apply this CSS.

183
00:09:12,719 --> 00:09:16,890
And I don't even need
to use any JavaScript.

184
00:09:16,890 --> 00:09:19,359
We hope all these
great improvements

185
00:09:19,359 --> 00:09:21,995
to handling
your CSS architecture,

186
00:09:21,995 --> 00:09:25,999
with :has(), cascade layers,
and container queries,

187
00:09:25,999 --> 00:09:28,134
make your work
as a web developer

188
00:09:28,134 --> 00:09:30,470
that much better.

189
00:09:30,470 --> 00:09:33,239
But these aren't
the only CSS additions

190
00:09:33,239 --> 00:09:35,975
that we're excited about.

191
00:09:35,975 --> 00:09:39,179
You've wanted a tool similar
to existing viewport units

192
00:09:39,179 --> 00:09:41,915
but would be more useful
on devices where scrolling

193
00:09:41,915 --> 00:09:44,617
causes the size of the viewport
to change.

194
00:09:44,617 --> 00:09:48,588
And for that, there's new
viewport units for y'all.

195
00:09:48,588 --> 00:09:50,457
When you want to know
the height of the viewport

196
00:09:50,457 --> 00:09:53,526
when it's at its smallest,
use svh.

197
00:09:53,526 --> 00:09:54,828
For the height of the viewport

198
00:09:54,828 --> 00:09:57,430
when it's at its largest,
use lvh.

199
00:09:57,430 --> 00:10:00,867
Just remember: s for small,
l for large.

200
00:10:00,867 --> 00:10:03,636
For a dynamic number
that changes to always match

201
00:10:03,636 --> 00:10:07,740
the current actual height
of the viewport, use dvh.

202
00:10:07,740 --> 00:10:10,210
And it's not just for height.

203
00:10:10,210 --> 00:10:14,581
We've got you covered
with even more viewport units.

204
00:10:14,581 --> 00:10:17,617
There's width units,
which are good for completeness

205
00:10:17,617 --> 00:10:20,687
to match up with
the highly used height units.

206
00:10:20,687 --> 00:10:24,090
We've got block and inline --
both being useful

207
00:10:24,090 --> 00:10:25,792
when writing
for multiple languages

208
00:10:25,792 --> 00:10:28,728
with differing ways
in which text can flow.

209
00:10:28,728 --> 00:10:32,332
And we didn't forget,
min and max, too.

210
00:10:32,332 --> 00:10:35,735
But what about when you want
to create some movement

211
00:10:35,735 --> 00:10:39,038
on your page,
not just react to it?

212
00:10:39,038 --> 00:10:42,509
Animation has previously
been very declarative

213
00:10:42,509 --> 00:10:46,079
where you can specify a start,
an end, and a duration

214
00:10:46,079 --> 00:10:48,014
to get objects moving.

215
00:10:48,014 --> 00:10:51,784
But it's been a challenge
to animate elements on a page

216
00:10:51,784 --> 00:10:54,654
either when trying to get it
to follow a curved path

217
00:10:54,654 --> 00:10:59,425
or even just being able
to move it around by an offset.

218
00:10:59,425 --> 00:11:02,161
And I'd like to add
a secret animation

219
00:11:02,161 --> 00:11:04,531
for the header
when you click on it,

220
00:11:04,531 --> 00:11:07,800
Really just thought it'd be fun.

221
00:11:07,800 --> 00:11:10,637
With the new offset-path,
you can define a path

222
00:11:10,637 --> 00:11:13,573
that you want your object
to animate along.

223
00:11:13,573 --> 00:11:17,677
Set the path with offset-path
and use offset-distance

224
00:11:17,677 --> 00:11:19,946
for the keyframe effect.

225
00:11:19,946 --> 00:11:24,217
Then use the animation property
to apply the keyframe effect,

226
00:11:24,217 --> 00:11:27,854
giving you all the control
you'd want with your animations,

227
00:11:27,854 --> 00:11:30,189
all in CSS.

228
00:11:30,189 --> 00:11:33,660
We also want to give you
more control over your page

229
00:11:33,660 --> 00:11:36,429
even with the parts of the web
that have typically been

230
00:11:36,429 --> 00:11:39,132
defined by
the browser engine itself,

231
00:11:39,132 --> 00:11:43,469
and over scroll-behavior is just
our first example of this.

232
00:11:43,469 --> 00:11:46,472
Since the beginning of the web,
if you click on a link

233
00:11:46,472 --> 00:11:49,108
that moves you to another part
of a web page,

234
00:11:49,108 --> 00:11:51,811
it visually appears as a jump.

235
00:11:51,811 --> 00:11:54,981
Sometimes this is disorienting
to your users.

236
00:11:54,981 --> 00:11:58,084
The scroll-behavior property
in CSS provides a way

237
00:11:58,084 --> 00:12:01,788
to specify if you want
this behavior or not.

238
00:12:01,788 --> 00:12:06,759
By default, it's set to auto,
and it'll appear as that jump.

239
00:12:06,759 --> 00:12:09,629
By specifying scroll-behavior
as smooth,

240
00:12:09,629 --> 00:12:12,699
you can ask the browser
to instead scroll smoothly

241
00:12:12,699 --> 00:12:14,901
to the next place on the page.

242
00:12:14,901 --> 00:12:17,604
You can also do this
with the JavaScript methods

243
00:12:17,604 --> 00:12:21,941
window.scroll(), scrollTo(),
or scrollBy().

244
00:12:21,941 --> 00:12:24,043
You know your customers best

245
00:12:24,043 --> 00:12:27,246
and should be able to define
your own web page experience

246
00:12:27,246 --> 00:12:30,416
outside of the browser
engine defaults,

247
00:12:30,416 --> 00:12:33,653
which is also where
the use of :focus-visible

248
00:12:33,653 --> 00:12:37,156
as well as accent-color
can come into play.

249
00:12:37,156 --> 00:12:39,859
You're probably familiar
with the focus selector

250
00:12:39,859 --> 00:12:42,495
if you've ever wanted
to apply a specific style

251
00:12:42,495 --> 00:12:44,364
to the focus indicator,

252
00:12:44,364 --> 00:12:47,934
likely to have it more in line
with your overall design.

253
00:12:47,934 --> 00:12:50,570
But there are some
accessibility pitfalls

254
00:12:50,570 --> 00:12:55,575
of losing the browser-based
heuristic when you do that.

255
00:12:55,575 --> 00:12:59,045
And on my site, instead
of the built-in form colors,

256
00:12:59,045 --> 00:13:02,348
I'd love to use a custom color.

257
00:13:02,348 --> 00:13:05,284
Let's use the teal color
that's already in my header

258
00:13:05,284 --> 00:13:09,155
for both the focus highlight
and the checkbox.

259
00:13:09,155 --> 00:13:11,457
With the :focus-visible
pseudo-class,

260
00:13:11,457 --> 00:13:14,527
you can style the focus
indicator how you choose

261
00:13:14,527 --> 00:13:18,097
while also having that
stylized indicator only show

262
00:13:18,097 --> 00:13:21,801
if it would be shown natively
by the browser.

263
00:13:21,801 --> 00:13:25,171
And to add another layer of
customization to your forms,

264
00:13:25,171 --> 00:13:27,707
you can use accent-color
to change the color

265
00:13:27,707 --> 00:13:30,843
of different parts
of the form control UI.

266
00:13:30,843 --> 00:13:32,912
It'll take affect
on that checkbox

267
00:13:32,912 --> 00:13:35,982
as well as radio buttons,
and so much more.

268
00:13:35,982 --> 00:13:38,017
Also with CSS,

269
00:13:38,017 --> 00:13:42,255
we've been replacing more
and more of the WebKit prefixes.

270
00:13:42,255 --> 00:13:44,123
These used to be the perfect way

271
00:13:44,123 --> 00:13:47,193
to try out experimental
features, but now,

272
00:13:47,193 --> 00:13:50,296
we're able to move towards their
standards-defined properties

273
00:13:50,296 --> 00:13:55,201
to make your CSS easier to write
and more interoperable.

274
00:13:55,201 --> 00:13:59,939
But don't worry, your existing
CSS with WebKit prefixes

275
00:13:59,939 --> 00:14:02,008
will keep working
as you transition

276
00:14:02,008 --> 00:14:04,577
to their web standards
counterparts.

277
00:14:04,577 --> 00:14:08,681
Backface-visibility,
print-color-adjust,

278
00:14:08,681 --> 00:14:11,918
and text-align: match-parent
are all exactly the same

279
00:14:11,918 --> 00:14:14,520
as their prefixed counterpart.

280
00:14:14,520 --> 00:14:17,557
Both mask
and text-combine-upright

281
00:14:17,557 --> 00:14:20,827
have had their syntax updated
from the prefixed version

282
00:14:20,827 --> 00:14:23,162
to match the standard.

283
00:14:23,162 --> 00:14:26,632
And the nonprefixed appearance
property also adds support

284
00:14:26,632 --> 00:14:29,302
for the new auto value
but has removed

285
00:14:29,302 --> 00:14:32,305
the WebKit-specific values
in Safari 16,

286
00:14:32,305 --> 00:14:34,540
like caret or listitem,

287
00:14:34,540 --> 00:14:38,344
as it got brought up
to standards specifications.

288
00:14:38,344 --> 00:14:39,612
There's been a lot to note

289
00:14:39,612 --> 00:14:42,248
about our typography additions
as well.

290
00:14:42,248 --> 00:14:45,418
In particular, we've added
the font-palette property

291
00:14:45,418 --> 00:14:48,154
that allows for easy selection
of a color palette

292
00:14:48,154 --> 00:14:50,256
within a color font.

293
00:14:50,256 --> 00:14:52,191
It's something that I think
would be really cool

294
00:14:52,191 --> 00:14:55,795
to try out with some
potential logos for my site.

295
00:14:55,795 --> 00:14:57,263
We can test out how it looks

296
00:14:57,263 --> 00:15:00,133
with the built-in
dark or light palettes

297
00:15:00,133 --> 00:15:02,368
or even what it'd be like
to customize it

298
00:15:02,368 --> 00:15:05,404
to exactly what I want
with color overrides

299
00:15:05,404 --> 00:15:08,908
and get some yellow in there
to brighten it up.

300
00:15:08,908 --> 00:15:11,778
And with typography,
there's been the addition of

301
00:15:11,778 --> 00:15:15,281
text-decoration-skip-ink,
which allows you to control

302
00:15:15,281 --> 00:15:18,050
what happens when
an underline or overline

303
00:15:18,050 --> 00:15:21,220
intersects
with a letter or character.

304
00:15:21,220 --> 00:15:25,491
Plus the ic unit, which makes it
possible to precisely line up

305
00:15:25,491 --> 00:15:28,828
CJK characters
in the block direction.

306
00:15:28,828 --> 00:15:31,764
It's useful for creating
a clean typography grid

307
00:15:31,764 --> 00:15:36,569
in languages like Chinese,
Japanese, and Korean.

308
00:15:36,569 --> 00:15:40,740
To wrap up our discussion
of all these great CSS features,

309
00:15:40,740 --> 00:15:43,776
we've definitely
got to talk about subgrid.

310
00:15:43,776 --> 00:15:47,413
For years, layout on the web
was pretty hard.

311
00:15:47,413 --> 00:15:50,216
CSS Grid has been revolutionary,

312
00:15:50,216 --> 00:15:55,454
but it only affects the direct
children of a grid container.

313
00:15:55,454 --> 00:15:59,525
Here, I'm using CSS Grid
to layout these cards,

314
00:15:59,525 --> 00:16:01,527
and to automatically
adjust the layout

315
00:16:01,527 --> 00:16:04,964
to fit the viewport width
by adding and removing columns

316
00:16:04,964 --> 00:16:08,067
without any media queries.

317
00:16:08,067 --> 00:16:12,438
But the size of the content
on each card isn't the same;

318
00:16:12,438 --> 00:16:14,540
some headlines are longer,

319
00:16:14,540 --> 00:16:17,243
the photos have
different aspect ratios,

320
00:16:17,243 --> 00:16:21,047
and that's causing the visuals
to look really messy.

321
00:16:21,047 --> 00:16:23,683
I'd like for all
the Request Item buttons

322
00:16:23,683 --> 00:16:27,453
and the message boxes
to line up across the page,

323
00:16:27,453 --> 00:16:31,424
and I'd like a longer title
on one card to affect the layout

324
00:16:31,424 --> 00:16:35,695
on the other cards, so they all
get the same spacing.

325
00:16:35,695 --> 00:16:39,131
Now, we can accomplish
this using subgrid.

326
00:16:39,131 --> 00:16:41,400
I've put a grid
on each article,

327
00:16:41,400 --> 00:16:44,904
and I've tied all of those grids
to the grid of their parent

328
00:16:44,904 --> 00:16:49,842
simply by writing
"grid-template-rows: subgrid."

329
00:16:49,842 --> 00:16:53,379
You can see how all the content
on each clothing card now

330
00:16:53,379 --> 00:16:57,183
perfectly lines up by using the
Grid Inspector in Web Inspector

331
00:16:57,183 --> 00:17:01,621
where I can turn on all the
grids I could possibly need too.

332
00:17:01,621 --> 00:17:06,726
A lot of CSS work becomes easier
when we use the Web Inspector.

333
00:17:06,726 --> 00:17:10,162
In fact, there's been some
amazing additions

334
00:17:10,162 --> 00:17:11,497
to the Web Inspector

335
00:17:11,497 --> 00:17:14,967
that I think you'll be
really excited to try out.

336
00:17:14,967 --> 00:17:17,270
First off,
layout is easier to write

337
00:17:17,270 --> 00:17:19,405
when you can see
what's going on,

338
00:17:19,405 --> 00:17:23,743
which is exactly what makes
the Web Inspector so important.

339
00:17:23,743 --> 00:17:26,145
And with the new
Flexbox Inspector,

340
00:17:26,145 --> 00:17:30,316
you can actually visualize
the spacing between elements.

341
00:17:30,316 --> 00:17:32,818
Here on my website,
I was having some trouble

342
00:17:32,818 --> 00:17:35,588
adding these icons to my header.

343
00:17:35,588 --> 00:17:39,625
All I need to do
is inspect the element,

344
00:17:39,625 --> 00:17:42,161
and go to the Layout tab,

345
00:17:42,161 --> 00:17:44,931
and since I'm not concerned
with my grids right now,

346
00:17:44,931 --> 00:17:47,533
I can go ahead
and collapse that section

347
00:17:47,533 --> 00:17:51,203
to get right to the new
Flexbox Inspector.

348
00:17:51,203 --> 00:17:53,239
I can even turn on
all the views

349
00:17:53,239 --> 00:17:57,910
with just a single click and
still have smooth performance.

350
00:17:57,910 --> 00:18:00,146
And with all the views
turned on,

351
00:18:00,146 --> 00:18:01,914
I can clearly see
with the hash marks

352
00:18:01,914 --> 00:18:05,418
and container boxes how
my elements are being arranged

353
00:18:05,418 --> 00:18:09,588
and how the empty space
is taking up the view.

354
00:18:09,588 --> 00:18:13,392
So now I want to make sure
I'm getting my alignment right,

355
00:18:13,392 --> 00:18:16,162
which I can use
the new alignment editor for.

356
00:18:16,162 --> 00:18:18,064
I can go to the Styles tab

357
00:18:18,064 --> 00:18:21,133
to find a new button
next to align-items.

358
00:18:21,133 --> 00:18:24,136
Here, I'm able to toggle
through the different options

359
00:18:24,136 --> 00:18:26,906
to find what works best
for my header,

360
00:18:26,906 --> 00:18:30,676
and I can do the same
with justify-content as well.

361
00:18:30,676 --> 00:18:33,879
Again, just toggling through
each of the options

362
00:18:33,879 --> 00:18:39,251
and then landing on the one
that I think looks just right.

363
00:18:39,251 --> 00:18:43,089
I also think the yellow icons
are a bit too small,

364
00:18:43,089 --> 00:18:47,059
and I want to try making them
the same size as the red icons,

365
00:18:47,059 --> 00:18:49,395
which I believe
are using a variable

366
00:18:49,395 --> 00:18:50,930
with "medium" in the name,

367
00:18:50,930 --> 00:18:54,767
but I really can't remember
the full name.

368
00:18:54,767 --> 00:18:56,802
I can try out
changing the size

369
00:18:56,802 --> 00:18:58,804
by inspecting
one of the yellow icons

370
00:18:58,804 --> 00:19:02,008
and editing its height
in the inspector.

371
00:19:02,008 --> 00:19:05,311
And, thanks to our new
CSS fuzzy autocompletion,

372
00:19:05,311 --> 00:19:10,850
I can go ahead and type "medium"
and the variable I want pops up

373
00:19:10,850 --> 00:19:14,353
even though "medium"
is at the end of the name.

374
00:19:14,353 --> 00:19:16,255
And those yellow icons

375
00:19:16,255 --> 00:19:20,092
definitely aren't too small
anymore.

376
00:19:20,092 --> 00:19:23,029
And when those other variables
for the different icons

377
00:19:23,029 --> 00:19:26,232
aren't being used
for the element I'm inspecting,

378
00:19:26,232 --> 00:19:29,368
they get hidden away
with our new CSS tooling.

379
00:19:29,368 --> 00:19:32,338
But don't worry,
there's a button to reveal them

380
00:19:32,338 --> 00:19:34,306
when you need them.

381
00:19:34,306 --> 00:19:38,144
And probably most excitingly
for Web Inspector this year,

382
00:19:38,144 --> 00:19:40,513
we are happy
to announce support

383
00:19:40,513 --> 00:19:44,517
for developer tool extensions
for the Safari Web Inspector.

384
00:19:44,517 --> 00:19:47,686
The creators of your favorite
developer tools extensions

385
00:19:47,686 --> 00:19:50,389
will now be able
to port them to Safari,

386
00:19:50,389 --> 00:19:55,327
using the same underlying APIs
that they use in other browsers.

387
00:19:55,327 --> 00:19:58,531
If you're interested in learning
how to make an extension

388
00:19:58,531 --> 00:20:00,366
for the Web Inspector,

389
00:20:00,366 --> 00:20:03,636
exploring the new APIs,
and getting set up

390
00:20:03,636 --> 00:20:06,705
to start using them yourself,
make sure to watch

391
00:20:06,705 --> 00:20:12,411
"Create Safari Web Inspector
Extensions" at this year's WWDC.

392
00:20:12,411 --> 00:20:15,081
Now we've covered
a lot of what's new

393
00:20:15,081 --> 00:20:18,484
with our front-end technologies,
so let's switch gears

394
00:20:18,484 --> 00:20:22,254
and get into
what's new with our web APIs.

395
00:20:22,254 --> 00:20:26,826
Which we are so excited to
announce support for web push.

396
00:20:26,826 --> 00:20:31,363
It'll be available in Safari 16
on macOS Ventura.

397
00:20:31,363 --> 00:20:35,768
It's coming to iOS
and iPadOS next year.

398
00:20:35,768 --> 00:20:39,405
Web push lets you remotely
send notifications to your users

399
00:20:39,405 --> 00:20:41,774
from your website or web app.

400
00:20:41,774 --> 00:20:46,512
This is a fully interoperable,
standards-based implementation.

401
00:20:46,512 --> 00:20:48,881
If you've implemented
web push already

402
00:20:48,881 --> 00:20:50,916
and it works in other browsers,

403
00:20:50,916 --> 00:20:55,254
it should just work in Safari
without any modifications.

404
00:20:55,254 --> 00:20:58,824
And you don't need an
Apple Developer account either.

405
00:20:58,824 --> 00:21:00,793
To learn all about the details,

406
00:21:00,793 --> 00:21:06,432
watch "Meet Web Push for Safari"
here at WWDC22.

407
00:21:06,432 --> 00:21:08,567
If you're excited
about web push,

408
00:21:08,567 --> 00:21:10,202
then you'll probably
be excited about

409
00:21:10,202 --> 00:21:13,272
new web app manifest
improvements too.

410
00:21:13,272 --> 00:21:16,809
Now, you can define the icon
that's used when people save

411
00:21:16,809 --> 00:21:20,246
your web app to the Home Screen
in your manifest file.

412
00:21:20,246 --> 00:21:23,315
To have the icons
in the manifest take precedence,

413
00:21:23,315 --> 00:21:24,917
you'll need to ensure
that there is no

414
00:21:24,917 --> 00:21:28,921
apple-touch-icon
defined in the HTML head.

415
00:21:28,921 --> 00:21:32,825
If you want to deliver
one icon to iOS and iPadOS,

416
00:21:32,825 --> 00:21:36,462
while delivering a different
icon to other mobile platforms,

417
00:21:36,462 --> 00:21:39,965
you can still do so by defining
the icon for Apple devices

418
00:21:39,965 --> 00:21:44,036
in that HTML head
using the apple-touch-icon.

419
00:21:44,036 --> 00:21:47,173
And if you don't declare
an icon in either place,

420
00:21:47,173 --> 00:21:50,042
then when a user saves
your site to the Home Screen,

421
00:21:50,042 --> 00:21:52,545
they'll simply get
a screenshot of your site.

422
00:21:52,545 --> 00:21:56,282
Excitingly, we also no longer
wait for the user to choose

423
00:21:56,282 --> 00:21:58,684
"Add to Home Screen"
from the Share menu

424
00:21:58,684 --> 00:22:01,887
to load the manifest file,
which means you can use

425
00:22:01,887 --> 00:22:05,324
that manifest file to define
characteristics of your web page

426
00:22:05,324 --> 00:22:08,427
on all your sites
and even further reduce

427
00:22:08,427 --> 00:22:11,630
the need to use meta tags.

428
00:22:11,630 --> 00:22:15,234
Continuing with our APIs,
we've done a lot to improve

429
00:22:15,234 --> 00:22:18,170
the use of web pages
in multiple browsing contexts

430
00:22:18,170 --> 00:22:20,005
with the same origins.

431
00:22:20,005 --> 00:22:22,841
Broadcast channels allow you
to send notifications

432
00:22:22,841 --> 00:22:25,811
between those different
browsing contexts.

433
00:22:25,811 --> 00:22:29,248
Let's imagine someone is using
the clothing swap website

434
00:22:29,248 --> 00:22:32,618
and they have it open in
two windows at the same time.

435
00:22:32,618 --> 00:22:35,921
Then they claim a piece
of clothing in one window.

436
00:22:35,921 --> 00:22:39,625
We'll be able to post a message
and sync that unavailable state

437
00:22:39,625 --> 00:22:43,395
to any other
open tabs or windows.

438
00:22:43,395 --> 00:22:47,132
But maybe it's not updating
a tab in the background,

439
00:22:47,132 --> 00:22:49,802
but updating a file
saved for your site.

440
00:22:49,802 --> 00:22:51,604
For that,
there's been the addition

441
00:22:51,604 --> 00:22:54,673
of the File System Access API.

442
00:22:54,673 --> 00:22:57,176
We've had incremental updates
to this API

443
00:22:57,176 --> 00:22:59,778
across multiple
releases this year,

444
00:22:59,778 --> 00:23:02,982
starting with origin
private file system,

445
00:23:02,982 --> 00:23:05,784
which is private storage
based on origin.

446
00:23:05,784 --> 00:23:06,852
So for instance,

447
00:23:06,852 --> 00:23:09,855
my clothing swap site
wouldn't have other sites,

448
00:23:09,855 --> 00:23:13,692
like apple.com,
reading its files.

449
00:23:13,692 --> 00:23:17,162
We then added to the API
with the getFile() method

450
00:23:17,162 --> 00:23:21,066
of FileSystemFileHandle,
which reads an existing file

451
00:23:21,066 --> 00:23:24,069
retrieved from your site's
root directory,

452
00:23:24,069 --> 00:23:26,538
like we're doing
with a draft file here

453
00:23:26,538 --> 00:23:29,908
that we also happened
to have just created.

454
00:23:29,908 --> 00:23:33,145
Now let's take a look
at our most vibrant

455
00:23:33,145 --> 00:23:37,716
API addition this year
with some new color richness.

456
00:23:37,716 --> 00:23:40,853
The Display P3 color space
makes it possible

457
00:23:40,853 --> 00:23:45,157
to represent colors
that just don't exist in RGB.

458
00:23:45,157 --> 00:23:48,294
Here, we've got some examples
of the color picker.

459
00:23:48,294 --> 00:23:50,462
On the left
of the squiggly white line

460
00:23:50,462 --> 00:23:53,265
is color that exists in RGB.

461
00:23:53,265 --> 00:23:58,237
And on the right of the line
are colors only available in P3.

462
00:23:58,237 --> 00:24:03,442
In 2016, we added P3 support
for videos and photos.

463
00:24:03,442 --> 00:24:06,945
Last year, we were thrilled to
be the first browser engine to

464
00:24:06,945 --> 00:24:12,351
implement the new color syntax
defined in CSS Color Level 4.

465
00:24:12,351 --> 00:24:15,487
This year,
we've added support for P3 color

466
00:24:15,487 --> 00:24:18,257
for content inside
the canvas element.

467
00:24:18,257 --> 00:24:21,460
So, no need to use
the colors based on devices

468
00:24:21,460 --> 00:24:24,563
all the way from the 90s,
when you can now start utilizing

469
00:24:24,563 --> 00:24:28,167
the full color capabilities
of all the amazing devices

470
00:24:28,167 --> 00:24:29,868
of today.

471
00:24:29,868 --> 00:24:33,739
But there's even more to
check out with our new Web APIs

472
00:24:33,739 --> 00:24:38,877
from this past year, including
shadow realms, web locks,

473
00:24:38,877 --> 00:24:42,915
and updated support
to the ResizeObserver API

474
00:24:42,915 --> 00:24:45,951
for the ResizeObserverSize
interface,

475
00:24:45,951 --> 00:24:47,286
which will help you observe

476
00:24:47,286 --> 00:24:50,356
changes to an element's
box-sizing properties.

477
00:24:50,356 --> 00:24:52,558
There's so much to try out

478
00:24:52,558 --> 00:24:55,260
across all of our
new API additions,

479
00:24:55,260 --> 00:24:58,697
and of course, with all of our
new features too.

480
00:24:58,697 --> 00:25:02,000
In fact, we've still
got more to cover.

481
00:25:02,000 --> 00:25:05,037
So let's next get into
all that's new

482
00:25:05,037 --> 00:25:08,140
in JavaScript & WebAssembly.

483
00:25:08,140 --> 00:25:11,143
If your website uses workers,
and you want instances

484
00:25:11,143 --> 00:25:14,680
of these workers to be shared
across tabs and windows,

485
00:25:14,680 --> 00:25:17,683
then the new shared workers
interface will definitely help

486
00:25:17,683 --> 00:25:20,886
and potentially
reduce memory usage.

487
00:25:20,886 --> 00:25:24,490
Instead of spawning new workers
for every task that you want

488
00:25:24,490 --> 00:25:27,559
to happen in the background,
you can have just one worker

489
00:25:27,559 --> 00:25:31,497
in use for each browsing context
with the same origin.

490
00:25:31,497 --> 00:25:35,200
Each script would create
a shared worker in the same way,

491
00:25:35,200 --> 00:25:37,603
and then they can receive
and post messages

492
00:25:37,603 --> 00:25:40,139
using the same port.

493
00:25:40,139 --> 00:25:42,441
The shared worker
would be able to receive

494
00:25:42,441 --> 00:25:44,376
and respond to messages

495
00:25:44,376 --> 00:25:47,646
sent from all
of the different scripts.

496
00:25:47,646 --> 00:25:50,749
This will result in less
demand on your servers,

497
00:25:50,749 --> 00:25:52,284
while also making your webpage

498
00:25:52,284 --> 00:25:56,221
fast and responsive
for your customers.

499
00:25:56,221 --> 00:26:00,359
We've also got a whole array
of array features to show you.

500
00:26:00,359 --> 00:26:03,762
Instead of having to mutate
an array using reverse()

501
00:26:03,762 --> 00:26:05,898
when you want to search
from the end,

502
00:26:05,898 --> 00:26:10,369
you now can use the findLast()
and findLastIndex() methods,

503
00:26:10,369 --> 00:26:13,272
like I've done here to find
the item and index

504
00:26:13,272 --> 00:26:17,342
for the last item
containing a "shoestring."

505
00:26:17,342 --> 00:26:19,878
The new at() method
also makes searching

506
00:26:19,878 --> 00:26:22,781
from the end
of an array even easier.

507
00:26:22,781 --> 00:26:26,385
Using braces works great
when the index is positive,

508
00:26:26,385 --> 00:26:28,921
but with at(),
we get the additional feature

509
00:26:28,921 --> 00:26:31,256
of indexing with negative values

510
00:26:31,256 --> 00:26:35,260
making your code
more concise and readable.

511
00:26:35,260 --> 00:26:39,498
But even with that good number
of new array features,

512
00:26:39,498 --> 00:26:41,967
nothing much can beat
the sheer number

513
00:26:41,967 --> 00:26:46,538
of new internationalization
features we got for you.

514
00:26:46,538 --> 00:26:49,675
WebKit has continued
to add regular updates

515
00:26:49,675 --> 00:26:54,146
to our Intl implementation
throughout this past year.

516
00:26:54,146 --> 00:26:57,616
There's been added support
for different numbering systems

517
00:26:57,616 --> 00:27:00,185
with new methods
in NumberFormat,

518
00:27:00,185 --> 00:27:03,555
calendars, thanks to updates
with Locale as well as

519
00:27:03,555 --> 00:27:09,628
DisplayNames, and currency
with the Intl Enumeration API.

520
00:27:09,628 --> 00:27:13,098
And like I said,
there's a lot that's been added

521
00:27:13,098 --> 00:27:15,834
to our Intl implementation
this year

522
00:27:15,834 --> 00:27:20,038
that you'll have no shortage
of things to try out and explore

523
00:27:20,038 --> 00:27:24,109
to cater to your users
across the world.

524
00:27:24,109 --> 00:27:27,679
And for all those that have
existing code in all sorts

525
00:27:27,679 --> 00:27:32,885
of different coding languages,
like C, Objective C, or Swift,

526
00:27:32,885 --> 00:27:34,987
that they'd like
to bring to the web,

527
00:27:34,987 --> 00:27:38,957
WebAssembly gets them running
without any need to rewrite.

528
00:27:38,957 --> 00:27:40,626
And with this year's
improvements,

529
00:27:40,626 --> 00:27:45,364
your web apps using WebAssembly
are only getting more powerful

530
00:27:45,364 --> 00:27:49,201
with the addressable memory
being expanded to 4GB,

531
00:27:49,201 --> 00:27:51,503
and the performance
gains that come

532
00:27:51,503 --> 00:27:54,573
with the new zero-cost
exception handling.

533
00:27:54,573 --> 00:27:58,010
Overall, there's definitely
some exciting stuff

534
00:27:58,010 --> 00:28:01,580
for JavaScript and WebAssembly
to try out here.

535
00:28:01,580 --> 00:28:05,517
And speaking of WebAssembly,
we also have some security

536
00:28:05,517 --> 00:28:08,153
and privacy enhancements
that not only

537
00:28:08,153 --> 00:28:11,256
will protect the users
of the web who we develop for,

538
00:28:11,256 --> 00:28:16,395
but will also bring new
potential for you as developers.

539
00:28:16,395 --> 00:28:19,831
With both of the new
Cross Origin Opener Policy

540
00:28:19,831 --> 00:28:25,304
and Cross Origin Embedder Policy
HTTP response headers,

541
00:28:25,304 --> 00:28:28,540
your site can opt in
to process isolation,

542
00:28:28,540 --> 00:28:30,108
which means your site will run

543
00:28:30,108 --> 00:28:33,679
in its own dedicated
webContent process.

544
00:28:33,679 --> 00:28:36,848
We know that a lot of apps
can benefit from running

545
00:28:36,848 --> 00:28:40,886
on multiple threads in parallel
using WebAssembly threading,

546
00:28:40,886 --> 00:28:46,024
and with these new headers,
you're able to do so securely.

547
00:28:46,024 --> 00:28:51,029
Our second security enhancement
also involves HTTP headers

548
00:28:51,029 --> 00:28:55,500
with our improved support for
content security policy level 3.

549
00:28:55,500 --> 00:28:58,270
CSP provides enhanced
security control

550
00:28:58,270 --> 00:29:01,306
over your loading content
and mitigates risk

551
00:29:01,306 --> 00:29:04,743
of cross-site scripting
and other vulnerabilities.

552
00:29:04,743 --> 00:29:08,013
With the level 3 updates,
the most exciting addition

553
00:29:08,013 --> 00:29:11,483
has been the new strict-dynamic
source expression.

554
00:29:11,483 --> 00:29:15,387
The designers of strict-dynamic
realized you can use nonces

555
00:29:15,387 --> 00:29:18,123
to allow certain scripts,
then extend that trust

556
00:29:18,123 --> 00:29:21,059
to scripts loaded
by the already trusted ones.

557
00:29:21,059 --> 00:29:24,329
No explicit allow list needed.

558
00:29:24,329 --> 00:29:26,765
Look how much simpler
the header becomes.

559
00:29:26,765 --> 00:29:29,301
Going from that original
long list of domains

560
00:29:29,301 --> 00:29:32,537
that could potentially end up
allowing too much.

561
00:29:32,537 --> 00:29:37,009
And with that, we wrap up our
security and privacy features,

562
00:29:37,009 --> 00:29:39,344
which also brings us to the end

563
00:29:39,344 --> 00:29:41,747
of all that we'll get
to cover today,

564
00:29:41,747 --> 00:29:45,017
but there's even more
to explore on your own.

565
00:29:45,017 --> 00:29:47,586
For instance,
we've had media updates

566
00:29:47,586 --> 00:29:51,556
including support for capturing
a specific Safari window

567
00:29:51,556 --> 00:29:57,562
with the getUserDisplay() API,
WebRTC Perfect Negotiation,

568
00:29:57,562 --> 00:30:03,001
In-band chapter tracks,
and requestVideoFrameCallback().

569
00:30:03,001 --> 00:30:06,171
As well as a lot of cool
additions for web extensions

570
00:30:06,171 --> 00:30:08,640
with manifest version 3 support,

571
00:30:08,640 --> 00:30:12,611
and a bunch of new
web extensions APIs.

572
00:30:12,611 --> 00:30:16,348
To dive deeper into all these
features covered here today,

573
00:30:16,348 --> 00:30:20,218
and to explore all the 162
features and improvements

574
00:30:20,218 --> 00:30:23,755
developed in Safari
and WebKit in the past year,

575
00:30:23,755 --> 00:30:26,458
make sure to download
Safari Technology Preview

576
00:30:26,458 --> 00:30:29,928
to keep up with what's
coming in the future,

577
00:30:29,928 --> 00:30:33,298
explore web technology by
checking out our release notes,

578
00:30:33,298 --> 00:30:37,069
blog posts, and all the great
content on webkit.org,

579
00:30:37,069 --> 00:30:41,640
including extensive
documentation for Web Inspector.

580
00:30:41,640 --> 00:30:44,176
And as always,
let us know what you think

581
00:30:44,176 --> 00:30:47,879
and what you'd like to see next
by filing your bug reports.

582
00:30:47,879 --> 00:30:50,282
If you come across
a bug in WebKit --

583
00:30:50,282 --> 00:30:55,887
something about HTML, CSS,
JavaScript, DOM APIs,

584
00:30:55,887 --> 00:30:58,590
or the Web Inspector --
make sure to send your feedback

585
00:30:58,590 --> 00:31:03,829
through WebKit's bug tracking
system at bugs.webkit.org.

586
00:31:03,829 --> 00:31:07,365
And for suggestions or bugs
with the Safari interface,

587
00:31:07,365 --> 00:31:11,169
file issues in Apple's
Feedback Assistant.

588
00:31:11,169 --> 00:31:14,773
We look forward to delivering
more of the amazing features

589
00:31:14,773 --> 00:31:17,042
that make the work
of web developers like you

590
00:31:17,042 --> 00:31:19,678
that much better
with all the Safari

591
00:31:19,678 --> 00:31:22,347
and Safari Technology Preview
releases

592
00:31:22,347 --> 00:31:24,449
to come in this next year.

593
00:31:24,449 --> 00:31:26,685
Thank you for joining me today,

594
00:31:26,685 --> 00:31:30,188
and I hope you have
the best time here at WWDC.

595
00:31:30,188 --> 00:31:32,257
Bye now!

596
00:31:32,257 --> 00:31:35,560
♪

