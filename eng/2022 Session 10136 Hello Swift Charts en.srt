1
00:00:00,000 --> 00:00:03,003
♪ instrumental hip hop music ♪

2
00:00:03,003 --> 00:00:09,776
♪

3
00:00:09,776 --> 00:00:11,545
Hello,
I am Dominik

4
00:00:11,545 --> 00:00:15,015
and I am thrilled to
introduce you to Swift Charts,

5
00:00:15,015 --> 00:00:18,185
Apple's new framework
for making informative

6
00:00:18,185 --> 00:00:21,154
and delightful charts
in SwiftUI.

7
00:00:21,154 --> 00:00:24,791
Data surrounds us and provides
an unprecedented resource

8
00:00:24,791 --> 00:00:28,996
for understanding the world
and making better decisions.

9
00:00:28,996 --> 00:00:32,032
Yet, data alone
is of little use.

10
00:00:32,032 --> 00:00:35,435
To make data useful,
we must make sense of it.

11
00:00:35,435 --> 00:00:38,805
A well-designed and accessible
data visualization

12
00:00:38,805 --> 00:00:41,441
can clearly communicate
complex data

13
00:00:41,441 --> 00:00:45,312
and turn data into understanding
and knowledge.

14
00:00:45,312 --> 00:00:49,016
At Apple, we spent years
studying the best practices

15
00:00:49,016 --> 00:00:51,351
for visualizations.

16
00:00:51,351 --> 00:00:53,787
We learned that charts work best

17
00:00:53,787 --> 00:00:57,691
when they show additional
useful context around data

18
00:00:57,691 --> 00:01:00,694
like the trends and fluctuations
of stock prices

19
00:01:00,694 --> 00:01:03,397
over some time range,

20
00:01:03,397 --> 00:01:07,567
your heart rate
during the last workout,

21
00:01:07,567 --> 00:01:12,039
and when the day
will cool off in the evening.

22
00:01:12,039 --> 00:01:14,241
And these are just some
of the many examples

23
00:01:14,241 --> 00:01:18,045
across all our platforms
where we use charts.

24
00:01:18,045 --> 00:01:21,982
Today, I'm excited to introduce
you to a new framework

25
00:01:21,982 --> 00:01:27,454
so you can make informative and
delightful charts in your apps.

26
00:01:27,454 --> 00:01:31,758
Say hello to Swift Charts.

27
00:01:31,758 --> 00:01:34,728
Swift Charts is
a flexible framework

28
00:01:34,728 --> 00:01:37,764
for making
Apple-designed charts.

29
00:01:37,764 --> 00:01:41,001
It uses the same
declarative syntax as SwiftUI,

30
00:01:41,001 --> 00:01:45,806
so you already know
the language of Swift Charts.

31
00:01:45,806 --> 00:01:49,943
So today, let's make
some informative, accessible,

32
00:01:49,943 --> 00:01:53,847
and delightful visualizations
with Swift Charts.

33
00:01:53,847 --> 00:01:55,382
In the team,
we've been helping

34
00:01:55,382 --> 00:02:00,320
a pop-up pancake food truck
track its sales with an app.

35
00:02:00,320 --> 00:02:02,456
The truck serves
an international variety

36
00:02:02,456 --> 00:02:09,363
of sweet and savory pancakes
like cachapa, injera, crêpe,

37
00:02:09,363 --> 00:02:16,069
jian bing, dosa,
or American pancakes.

38
00:02:16,069 --> 00:02:19,539
The food truck served
more than 4500 pancakes

39
00:02:19,539 --> 00:02:23,944
across these styles
in the last 30 days.

40
00:02:23,944 --> 00:02:27,914
Cachapa were the most popular
and the app already shows

41
00:02:27,914 --> 00:02:32,419
the most important
information in the title.

42
00:02:32,419 --> 00:02:35,088
Let's add a chart to show
a detailed breakdown

43
00:02:35,088 --> 00:02:38,492
for the six pancakes.

44
00:02:38,492 --> 00:02:41,161
To make this visualization
in Swift Charts,

45
00:02:41,161 --> 00:02:45,866
we can use the same
declarative syntax as SwiftUI.

46
00:02:45,866 --> 00:02:50,170
In Swift Charts,
you build charts by composition.

47
00:02:50,170 --> 00:02:55,108
The main components
of a bar chart are the bars,

48
00:02:55,108 --> 00:03:00,547
which are visual elements
for each item in your data.

49
00:03:00,547 --> 00:03:05,585
Swift Charts calls
these visual elements "marks."

50
00:03:05,585 --> 00:03:08,688
Let's jump into Xcode
to make this chart.

51
00:03:08,688 --> 00:03:11,558
We start with adding a chart.

52
00:03:11,558 --> 00:03:16,696
To make a bar, I add a BarMark
inside the Chart.

53
00:03:16,696 --> 00:03:19,132
To show a bar
for the number of cachapas,

54
00:03:19,132 --> 00:03:21,968
we have to set
the name and the sales.

55
00:03:23,837 --> 00:03:27,407
We set the x-position of the bar
to be derived from the value

56
00:03:27,407 --> 00:03:33,313
of the name of pancake --
in this case "Cachapa."

57
00:03:33,313 --> 00:03:36,450
The first argument
to the .value factory method

58
00:03:36,450 --> 00:03:38,919
is the description of the value,

59
00:03:38,919 --> 00:03:42,355
and the second
is the value itself.

60
00:03:42,355 --> 00:03:45,692
And now we get a single bar
in the preview.

61
00:03:45,692 --> 00:03:49,329
The height of each bar
described by the y attribute

62
00:03:49,329 --> 00:03:56,236
should be set by the number of
cachapas sold, which were 916.

63
00:03:56,236 --> 00:03:58,305
To indicate that we're not
setting the position

64
00:03:58,305 --> 00:04:03,610
or height of the bar directly,
we use .value.

65
00:04:03,610 --> 00:04:07,547
Swift Charts automatically
creates not only the bar

66
00:04:07,547 --> 00:04:11,718
but also a label
for the bars on the x-axis

67
00:04:11,718 --> 00:04:17,557
and a y-axis that shows
what the length of a bar means.

68
00:04:17,557 --> 00:04:19,693
Let's add a second bar
for injera,

69
00:04:19,693 --> 00:04:22,529
of which the truck sold 850.

70
00:04:24,564 --> 00:04:27,767
Now, it's cool to build
individual marks

71
00:04:27,767 --> 00:04:30,070
and see them appear in the app.

72
00:04:30,070 --> 00:04:32,172
However, we usually want
to create a chart

73
00:04:32,172 --> 00:04:35,308
driven by a collection
such as an array of structs.

74
00:04:35,308 --> 00:04:38,311
I'll start by adding a struct
for my pancake sales.

75
00:04:46,286 --> 00:04:49,756
It has a name --
which is a string --

76
00:04:49,756 --> 00:04:52,292
and how many pancakes
the truck sold --

77
00:04:52,292 --> 00:04:55,829
which is an int.

78
00:04:55,829 --> 00:04:58,198
Because we want
to use it to repeat,

79
00:04:58,198 --> 00:05:00,233
we make it identifiable...

80
00:05:04,538 --> 00:05:12,412
...and define an ID-computed
property that returns the name.

81
00:05:12,412 --> 00:05:17,551
Now we can create our data set
as an array of pancakes.

82
00:05:17,551 --> 00:05:20,320
We could load this
from an external data source

83
00:05:20,320 --> 00:05:22,556
but here we'll define it
in the code.

84
00:05:22,556 --> 00:05:27,227
Besides cachapa and injera,
we also add crêpe.

85
00:05:27,227 --> 00:05:30,931
We can make the bar chart
data driven with ForEach.

86
00:05:30,931 --> 00:05:33,500
First, remove the second bar.

87
00:05:37,370 --> 00:05:39,139
And all we need to do now

88
00:05:39,139 --> 00:05:42,042
is to repeat the BarMark
with a ForEach.

89
00:05:45,979 --> 00:05:49,115
I pick "element" as the name
of the variable in the loop.

90
00:05:54,621 --> 00:05:57,724
Then we can use
element.name for x...

91
00:06:02,028 --> 00:06:05,031
...and element.sales for y.

92
00:06:07,400 --> 00:06:10,637
If ForEach is the only
content in the chart,

93
00:06:10,637 --> 00:06:12,172
we can also put
the data directly

94
00:06:12,172 --> 00:06:14,474
into the chart initializer.

95
00:06:19,746 --> 00:06:21,848
We can now add the
remaining three entries

96
00:06:21,848 --> 00:06:25,218
for the jian bing, dosa,
and american pancakes.

97
00:06:28,622 --> 00:06:30,724
As we add more entries
to the array,

98
00:06:30,724 --> 00:06:33,860
we add new bar marks
to the chart.

99
00:06:33,860 --> 00:06:35,996
Lastly, we see that the labels

100
00:06:35,996 --> 00:06:38,198
are becoming close
to each other.

101
00:06:38,198 --> 00:06:42,168
By swapping x and y,
we transpose the chart

102
00:06:42,168 --> 00:06:45,872
and give the labels
for each bar more space.

103
00:06:45,872 --> 00:06:48,708
The Swift Charts framework
automatically chooses

104
00:06:48,708 --> 00:06:52,512
an appropriate axis style
to make your chart beautiful.

105
00:06:52,512 --> 00:06:55,415
And with that, we made
our first data visualization

106
00:06:55,415 --> 00:06:56,883
in Swift Charts.

107
00:06:56,883 --> 00:06:59,319
And using the new
variant feature in Xcode,

108
00:06:59,319 --> 00:07:02,622
we can see that this chart
looks beautiful in Dark Mode,

109
00:07:02,622 --> 00:07:04,891
adapts to different
font sizes,

110
00:07:08,695 --> 00:07:12,265
device sizes and orientations,

111
00:07:12,265 --> 00:07:14,434
and supports accessibility.

112
00:07:18,772 --> 00:07:21,875
To access the data
in a visual representation,

113
00:07:21,875 --> 00:07:24,477
you need to be able to see.

114
00:07:24,477 --> 00:07:28,448
Swift Charts exposes the data
in a visualization to VoiceOver

115
00:07:28,448 --> 00:07:33,186
so that everyone can explore the
details of the popular pancakes.

116
00:07:33,186 --> 00:07:35,221
When I navigate the chart
in VoiceOver,

117
00:07:35,221 --> 00:07:39,526
it speaks the name and
number of pancakes sold.

118
00:07:39,526 --> 00:07:43,930
VoiceOver: Cachapa, 916.
Injera, 850. Crêpes, 802.

119
00:07:43,930 --> 00:07:51,438
Jian Ping, 753. Dosa, 654.
American, 618.

120
00:07:51,438 --> 00:07:53,006
Dominik: And of course,
the chart supports

121
00:07:53,006 --> 00:07:56,476
the Audio Graphs feature
Apple presented in 2021,

122
00:07:56,476 --> 00:07:58,745
including the sonifications.

123
00:07:58,745 --> 00:08:01,448
VoiceOver: Describe chart.
Chart Details.

124
00:08:01,448 --> 00:08:03,049
Play Audio Graph.

125
00:08:03,049 --> 00:08:08,722
[DESCENDING BEEPS]

126
00:08:08,722 --> 00:08:11,224
Complete.

127
00:08:11,224 --> 00:08:13,026
Dominik: We just used
Swift Charts to add

128
00:08:13,026 --> 00:08:17,731
an informative and accessible
chart to the food truck app.

129
00:08:17,731 --> 00:08:19,399
The chart shows
how many pancakes

130
00:08:19,399 --> 00:08:23,570
the truck sold of each style.

131
00:08:23,570 --> 00:08:26,539
Besides the summaries
for each style of pancake,

132
00:08:26,539 --> 00:08:31,277
the food truck also
has per-day sales data.

133
00:08:31,277 --> 00:08:36,049
The truck can park in Cupertino
and San Francisco.

134
00:08:36,049 --> 00:08:38,451
We want to help the food truck
know where to park

135
00:08:38,451 --> 00:08:40,920
on different days of the week.

136
00:08:40,920 --> 00:08:43,890
To answer this question,
let's visualize the data

137
00:08:43,890 --> 00:08:48,361
as a time series
for our two cities.

138
00:08:48,361 --> 00:08:51,531
To see how easy it is
to explore different designs,

139
00:08:51,531 --> 00:08:55,335
we will make three iterations
of the chart.

140
00:08:55,335 --> 00:09:00,707
We will start by making
a bar graph for Cupertino.

141
00:09:00,707 --> 00:09:06,346
Then, we will add the data for
San Francisco and add a picker.

142
00:09:06,346 --> 00:09:08,448
And finally,
we will combine the data

143
00:09:08,448 --> 00:09:11,851
into one multiseries line chart.

144
00:09:11,851 --> 00:09:14,554
Let's start with the bar chart
showing the average number

145
00:09:14,554 --> 00:09:18,858
of pancakes sold
per day of the week.

146
00:09:18,858 --> 00:09:22,796
The sales data has the weekday
stored as a date

147
00:09:22,796 --> 00:09:27,267
and how many pancakes
the truck sold as an integer.

148
00:09:27,267 --> 00:09:33,106
The data for Cupertino is
in a variable, cupertinoData.

149
00:09:33,106 --> 00:09:38,411
As before, we start making
a chart with a BarMark.

150
00:09:38,411 --> 00:09:40,313
We set the x-position of the bar

151
00:09:40,313 --> 00:09:42,816
to be derived from
the day of the date...

152
00:09:45,485 --> 00:09:48,288
...and the height to be derived
from the sales.

153
00:09:52,292 --> 00:09:54,961
And this gives us
a first iteration of a chart

154
00:09:54,961 --> 00:09:59,866
that shows the sales data per
day of the week for Cupertino.

155
00:09:59,866 --> 00:10:04,938
For the second iteration, let's
add the data for San Francisco.

156
00:10:04,938 --> 00:10:07,807
Using this chart, we want
to help the pancake truck

157
00:10:07,807 --> 00:10:11,010
decide where to park
during the week.

158
00:10:11,010 --> 00:10:15,748
The sales data for San Francisco
is in the sfData variable.

159
00:10:15,748 --> 00:10:18,218
We want to toggle
between the two cities

160
00:10:18,218 --> 00:10:20,987
and see the bar chart
for each city.

161
00:10:20,987 --> 00:10:26,092
We start with adding
a state variable, city.

162
00:10:26,092 --> 00:10:30,730
And then we add a SwiftUI
picker for the city to the View.

163
00:10:35,568 --> 00:10:38,705
To toggle between the sales
summaries for the two cities

164
00:10:38,705 --> 00:10:40,740
via the city variable,

165
00:10:40,740 --> 00:10:43,576
we add a switch statement
for the data variable.

166
00:10:48,648 --> 00:10:52,752
And all we have to do now is to
replace the data for Cupertino

167
00:10:52,752 --> 00:10:54,888
with the one that toggles
between the two --

168
00:10:54,888 --> 00:10:59,359
Cupertino and San Francisco.

169
00:10:59,359 --> 00:11:01,628
If I switch the toggle,
the charts toggles

170
00:11:01,628 --> 00:11:03,696
between the two cities.

171
00:11:03,696 --> 00:11:07,166
Swift Charts works
with SwiftUI animations,

172
00:11:07,166 --> 00:11:10,169
so if we specify that the
transition should be animated

173
00:11:10,169 --> 00:11:11,938
with easeInOut,

174
00:11:11,938 --> 00:11:16,376
the bars animate as I toggle
between the two cities

175
00:11:16,376 --> 00:11:19,145
and also only shows
one location at a time.

176
00:11:21,481 --> 00:11:25,652
This gives our app
the right look and feel.

177
00:11:25,652 --> 00:11:28,955
As our final iteration,
we will show both series

178
00:11:28,955 --> 00:11:31,257
in a line chart.

179
00:11:31,257 --> 00:11:34,160
To make this line chart,
we start with the bar chart

180
00:11:34,160 --> 00:11:36,529
from Cupertino from before.

181
00:11:36,529 --> 00:11:39,065
The data for Cupertino
and San Francisco

182
00:11:39,065 --> 00:11:41,768
is in an array of series.

183
00:11:41,768 --> 00:11:46,739
Series structs have
the city and sales data.

184
00:11:46,739 --> 00:11:48,274
Before we show both series,

185
00:11:48,274 --> 00:11:53,079
let's focus on
the Cupertino data.

186
00:11:53,079 --> 00:11:57,617
In the chart, we can loop
over the series data.

187
00:11:57,617 --> 00:11:59,419
Remember,
the chart initializer

188
00:11:59,419 --> 00:12:01,354
acts just like a ForEach.

189
00:12:03,590 --> 00:12:07,293
Then we can replace
the specific data for Cupertino

190
00:12:07,293 --> 00:12:09,896
with the sales data
from the series.

191
00:12:12,031 --> 00:12:15,034
To distinguish the data
for the two cities,

192
00:12:15,034 --> 00:12:19,572
I want the color of the bars
to be derived from the city.

193
00:12:19,572 --> 00:12:21,574
For this, we set
the foregroundStyle

194
00:12:21,574 --> 00:12:24,577
to be derived from
the city in the series.

195
00:12:27,013 --> 00:12:29,482
To show what city
a color represents,

196
00:12:29,482 --> 00:12:33,086
Swift Charts creates
a legend below the chart.

197
00:12:33,086 --> 00:12:36,389
Now, I add the data
for the second location.

198
00:12:37,790 --> 00:12:39,826
As you can see in the preview,
Swift Charts

199
00:12:39,826 --> 00:12:42,996
automatically chooses
a color for San Francisco,

200
00:12:42,996 --> 00:12:47,200
and it shows the bars
for both cities in the chart.

201
00:12:47,200 --> 00:12:50,069
Charts show data
for a particular context

202
00:12:50,069 --> 00:12:51,804
and a visualization
may need to change

203
00:12:51,804 --> 00:12:55,942
as our data
or questions change.

204
00:12:55,942 --> 00:12:59,812
Swift Charts makes it easy
to quickly change your chart

205
00:12:59,812 --> 00:13:02,115
to explore different designs.

206
00:13:02,115 --> 00:13:03,483
The stacked bar chart is great

207
00:13:03,483 --> 00:13:06,753
for showing the total
average sales per day;

208
00:13:06,753 --> 00:13:08,388
but what if I wanted
to do a comparison

209
00:13:08,388 --> 00:13:10,423
between the two cities?

210
00:13:10,423 --> 00:13:14,060
Maybe a point or line chart
would be better.

211
00:13:14,060 --> 00:13:18,464
We change the mark type
from a BarMark to a PointMark

212
00:13:18,464 --> 00:13:21,300
to display the pancakes
sold as points,

213
00:13:21,300 --> 00:13:25,972
or to a LineMark to show
the data as a line chart.

214
00:13:25,972 --> 00:13:28,341
A line chart is a good fit
for the sales data

215
00:13:28,341 --> 00:13:33,579
since it lets us compare the two
cities in each day of the week.

216
00:13:33,579 --> 00:13:35,648
Charts can combine
multiple marks.

217
00:13:35,648 --> 00:13:38,017
For example,
I can add a PointMark.

218
00:13:44,090 --> 00:13:46,959
To make the series
differentiable without color,

219
00:13:46,959 --> 00:13:50,430
we set the symbol
to be derived from the city.

220
00:13:56,269 --> 00:14:01,207
Now each point indicates the
city by its color and symbol.

221
00:14:01,207 --> 00:14:03,643
Because it is common
to show points on a line,

222
00:14:03,643 --> 00:14:05,712
Swift Charts has
a shorthand for this

223
00:14:05,712 --> 00:14:09,682
where we apply the symbol
modifier to the LineMark.

224
00:14:09,682 --> 00:14:13,686
The style of the points
adapts to the line.

225
00:14:13,686 --> 00:14:15,221
This chart is great.

226
00:14:15,221 --> 00:14:19,058
We can easily compare the sales
trends throughout the week.

227
00:14:19,058 --> 00:14:21,427
We observe that the sales
are especially high

228
00:14:21,427 --> 00:14:24,630
in San Francisco on Sundays.

229
00:14:24,630 --> 00:14:26,332
Swift Charts made it
very easy for us

230
00:14:26,332 --> 00:14:31,571
to iterate through many designs
in just a few minutes.

231
00:14:31,571 --> 00:14:35,308
So to wrap up, let's look at
how Swift Charts makes it easy

232
00:14:35,308 --> 00:14:39,178
to iterate quickly and at the
same time be flexible enough

233
00:14:39,178 --> 00:14:43,249
to seamlessly integrate charts
into your app's unique style.

234
00:14:43,249 --> 00:14:45,184
In Swift Charts,
you build charts

235
00:14:45,184 --> 00:14:50,256
by composition of marks
with mark properties.

236
00:14:50,256 --> 00:14:52,859
In the Pancake app,
we composed charts

237
00:14:52,859 --> 00:14:57,363
with three different marks
and four mark properties.

238
00:14:57,363 --> 00:15:00,399
For example,
we made a simple bar chart

239
00:15:00,399 --> 00:15:05,371
as a bar mark
with x and y properties.

240
00:15:05,371 --> 00:15:08,174
We also changed the mark
to quickly explore designs,

241
00:15:08,174 --> 00:15:11,144
like charts with points,

242
00:15:11,144 --> 00:15:13,813
or line charts where
we used the line mark

243
00:15:13,813 --> 00:15:16,048
with x and y properties.

244
00:15:18,885 --> 00:15:21,487
We also saw
that we can add properties,

245
00:15:21,487 --> 00:15:27,193
like Foreground Style, to show
multiple series in a line chart.

246
00:15:27,193 --> 00:15:30,263
And a chart doesn't have
to have just one mark.

247
00:15:30,263 --> 00:15:35,134
We combined points and lines,

248
00:15:35,134 --> 00:15:40,773
and showed the same value
with two mark properties.

249
00:15:40,773 --> 00:15:44,177
Swift Charts supports even more
marks and mark properties

250
00:15:44,177 --> 00:15:46,345
than we used today.

251
00:15:46,345 --> 00:15:51,384
It's also extensible
and you can add custom marks.

252
00:15:51,384 --> 00:15:54,620
Marks and mark properties
is what allows Swift Charts

253
00:15:54,620 --> 00:15:57,456
to express a wide range
of chart designs

254
00:15:57,456 --> 00:16:02,061
with a small number
of declarative building blocks.

255
00:16:02,061 --> 00:16:03,996
There are many ways
in which you can combine

256
00:16:03,996 --> 00:16:06,999
these building block to create
great data visualizations

257
00:16:06,999 --> 00:16:09,202
for your apps.

258
00:16:09,202 --> 00:16:12,171
Together with what you can
already do in SwiftUI,

259
00:16:12,171 --> 00:16:16,475
the possibilities
are truly endless.

260
00:16:16,475 --> 00:16:19,846
And as I've showed you today,
you get support for Dark Mode,

261
00:16:19,846 --> 00:16:23,850
different device screen sizes,
Dynamic Type, VoiceOver,

262
00:16:23,850 --> 00:16:26,953
and Audio Graphs for free.

263
00:16:26,953 --> 00:16:31,524
In addition, Swift Charts
supports High-Contrast mode.

264
00:16:31,524 --> 00:16:34,894
And finally, Swift Charts
works across locales

265
00:16:34,894 --> 00:16:37,230
and is multiplatform.

266
00:16:37,230 --> 00:16:38,831
The chart with the same code

267
00:16:38,831 --> 00:16:41,500
works across all
Apple platforms.

268
00:16:41,500 --> 00:16:43,970
And the same customizations
work everywhere

269
00:16:43,970 --> 00:16:47,773
so you can tailor the chart
to each platform.

270
00:16:47,773 --> 00:16:50,309
Today, I showed you
how Swift Charts

271
00:16:50,309 --> 00:16:53,346
uses SwiftUI's powerful
compositional syntax

272
00:16:53,346 --> 00:16:57,049
so you can make more charts
with less code.

273
00:16:57,049 --> 00:16:58,284
Swift Charts also provides

274
00:16:58,284 --> 00:17:00,887
a rich set of
customization options,

275
00:17:00,887 --> 00:17:05,057
so you can style the chart
to match your application.

276
00:17:05,057 --> 00:17:07,360
And now that you know
how to chart new territory

277
00:17:07,360 --> 00:17:10,963
and make a chart, you can learn
how to customize it in the docs

278
00:17:10,963 --> 00:17:13,833
and in our follow-up talk
where you'll raise the bar.

279
00:17:13,833 --> 00:17:18,537
♪

