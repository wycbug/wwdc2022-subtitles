1
00:00:00,267 --> 00:00:03,337
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,337 --> 00:00:09,910
♪

3
00:00:09,910 --> 00:00:11,812
Lais Minchillo:
Hi, my name is Lais.

4
00:00:11,812 --> 00:00:13,847
David Silver: And I'm David.
And we will be presenting

5
00:00:13,847 --> 00:00:17,885
this year's new features
in Wallet and Apple Pay.

6
00:00:17,885 --> 00:00:20,520
We launched Apple Pay in 2014,

7
00:00:20,520 --> 00:00:23,657
setting a new benchmark
for making fast, secure,

8
00:00:23,657 --> 00:00:27,928
and private payments
in store, online and in-app.

9
00:00:27,928 --> 00:00:31,231
Since then, we've expanded
Apple Pay across the globe.

10
00:00:31,231 --> 00:00:35,202
Apple Pay is now available
in 72 countries and territories

11
00:00:35,202 --> 00:00:38,739
and handles more than a million
transactions every day.

12
00:00:38,739 --> 00:00:42,042
Today we're introducing exciting
new features and APIs

13
00:00:42,042 --> 00:00:43,710
into Wallet and Apple Pay.

14
00:00:43,710 --> 00:00:45,812
Lais will tell you more.

15
00:00:45,812 --> 00:00:47,180
Lais: Thank you, David!

16
00:00:47,180 --> 00:00:50,284
Let's take a look
at the main agenda for today.

17
00:00:50,284 --> 00:00:53,921
First, we'll talk about
some quick updates.

18
00:00:53,921 --> 00:00:56,823
We are adding support for
payments to multiple merchants

19
00:00:56,823 --> 00:00:59,293
in a single transaction.

20
00:00:59,293 --> 00:01:02,663
We are also greatly improving
support for automatic payments,

21
00:01:02,663 --> 00:01:05,299
including subscriptions,

22
00:01:05,299 --> 00:01:07,467
With order tracking,
you can enhance

23
00:01:07,467 --> 00:01:10,737
the postpurchase experience
for your customers.

24
00:01:10,737 --> 00:01:14,107
And finally, David will
talk about identity verification

25
00:01:14,107 --> 00:01:17,311
with IDs in Wallet.

26
00:01:17,311 --> 00:01:20,147
We have a few
exciting updates to share.

27
00:01:20,147 --> 00:01:23,250
Tap to Pay on iPhone
was announced earlier this year

28
00:01:23,250 --> 00:01:27,120
and launched
in iOS 15.4 in the US.

29
00:01:27,120 --> 00:01:29,990
Tap to Pay on iPhone
provides a secure, private,

30
00:01:29,990 --> 00:01:33,126
and easy way to accept
contactless payments.

31
00:01:33,126 --> 00:01:35,696
You can easily integrate
this into your app

32
00:01:35,696 --> 00:01:39,366
to seamlessly and securely
accept contactless payments.

33
00:01:39,366 --> 00:01:41,168
This includes Apple Pay,

34
00:01:41,168 --> 00:01:43,503
contactless credit
and debit cards,

35
00:01:43,503 --> 00:01:45,639
and other digital wallets.

36
00:01:45,639 --> 00:01:46,907
The transaction is completed

37
00:01:46,907 --> 00:01:49,009
through a simple tap
to the iPhone,

38
00:01:49,009 --> 00:01:51,044
removing the need
for additional hardware

39
00:01:51,044 --> 00:01:53,146
or payment terminals.

40
00:01:53,146 --> 00:01:55,582
Meanwhile, in macOS 13,

41
00:01:55,582 --> 00:01:58,885
we redesigned
the Apple Pay experience.

42
00:01:58,885 --> 00:02:01,321
The iOS payment sheet
redesign last year

43
00:02:01,321 --> 00:02:02,756
was a great success

44
00:02:02,756 --> 00:02:06,626
and this year we're bringing
a similar experience to macOS.

45
00:02:06,626 --> 00:02:09,029
We used SwiftUI
to implement this,

46
00:02:09,029 --> 00:02:11,365
which helped us
bring new features to macOS

47
00:02:11,365 --> 00:02:13,700
at the same time as iOS.

48
00:02:13,700 --> 00:02:16,370
All of the Apple Pay features
we are introducing today

49
00:02:16,370 --> 00:02:19,639
are also supported on Mac.

50
00:02:19,639 --> 00:02:23,110
We're introducing
new SwiftUI APIs.

51
00:02:23,110 --> 00:02:26,446
Integrating Add to Apple Wallet
or Apple Pay buttons

52
00:02:26,446 --> 00:02:29,282
in your SwiftUI app
will be much easier.

53
00:02:29,282 --> 00:02:31,651
These new APIs will
significantly reduce

54
00:02:31,651 --> 00:02:33,920
the amount of code
you need to write.

55
00:02:33,920 --> 00:02:36,056
Let's take a look at
how you can add a button

56
00:02:36,056 --> 00:02:39,192
to prompt the user
to add an airline pass.

57
00:02:39,192 --> 00:02:41,962
First, create the pass.

58
00:02:41,962 --> 00:02:45,365
You should handle the case where
it wasn't successfully loaded.

59
00:02:45,365 --> 00:02:47,901
This could happen
if the pass data is malformed

60
00:02:47,901 --> 00:02:51,338
or if it was not properly
signed, for example.

61
00:02:51,338 --> 00:02:56,109
Next, call AddPassToWalletButton
with an array of passes.

62
00:02:56,109 --> 00:02:59,479
In this example, we have
an array with only one element,

63
00:02:59,479 --> 00:03:02,983
but you can have multiple passes
on the same button.

64
00:03:02,983 --> 00:03:05,919
The result is passed
in as a Bool, and you can save,

65
00:03:05,919 --> 00:03:08,488
log, or trigger other actions
in your app

66
00:03:08,488 --> 00:03:12,025
based on whether the user
has added a pass or not.

67
00:03:12,025 --> 00:03:15,162
In this example,
I'm saving that to a state var.

68
00:03:15,162 --> 00:03:16,630
And that's it!

69
00:03:16,630 --> 00:03:19,599
You can also customize
the button's size and style

70
00:03:19,599 --> 00:03:21,935
within a set of minimum values.

71
00:03:21,935 --> 00:03:28,642
This is the default size:
width 250 and height 50.

72
00:03:28,642 --> 00:03:30,911
You could also make it
wider...

73
00:03:32,512 --> 00:03:33,880
...or taller.

74
00:03:35,882 --> 00:03:37,284
This wraps up how you can add

75
00:03:37,284 --> 00:03:40,854
an Add to Apple Wallet button
in SwiftUI.

76
00:03:40,854 --> 00:03:45,192
Now, let's see how you can add
a Pay with Apple Pay button.

77
00:03:45,192 --> 00:03:47,394
First, create a payment request

78
00:03:47,394 --> 00:03:49,863
using the PKPaymentRequest
class,

79
00:03:49,863 --> 00:03:52,899
setting your usual
configuration on it.

80
00:03:52,899 --> 00:03:57,037
Then, create an
authorizationChange method.

81
00:03:57,037 --> 00:03:59,005
Now that we have
these two pieces ready,

82
00:03:59,005 --> 00:04:01,741
let's add code
to show the button.

83
00:04:01,741 --> 00:04:04,344
Add a call to
PayWithApplePayButton,

84
00:04:04,344 --> 00:04:07,914
passing in the label,
the paymentRequest object,

85
00:04:07,914 --> 00:04:10,784
and the authorizationChange
method.

86
00:04:10,784 --> 00:04:13,086
To handle cases where
Apple Pay isn't supported

87
00:04:13,086 --> 00:04:16,656
by the current device,
you can pass in a fallback view.

88
00:04:16,656 --> 00:04:18,525
Just like the Add Pass button,

89
00:04:18,525 --> 00:04:23,463
you can also customize
its size and style.

90
00:04:23,463 --> 00:04:26,700
In total,
there are 17 different labels,

91
00:04:26,700 --> 00:04:28,635
so you are able to customize
the pay button

92
00:04:28,635 --> 00:04:31,371
to align with your use case.

93
00:04:31,371 --> 00:04:38,645
These are available on iOS,
iPadOS, macOS, and watchOS.

94
00:04:38,645 --> 00:04:42,949
Now, let's take a look
at multimerchant payments.

95
00:04:42,949 --> 00:04:46,286
In iOS 16, we're introducing
the ability to request

96
00:04:46,286 --> 00:04:48,922
multiple payment tokens
for different merchants

97
00:04:48,922 --> 00:04:50,724
in the same transaction.

98
00:04:50,724 --> 00:04:53,894
This is useful for things
like online marketplaces,

99
00:04:53,894 --> 00:04:56,596
travel bookings,
and ticketing services.

100
00:04:56,596 --> 00:04:59,199
Let's take a closer look
at an example.

101
00:04:59,199 --> 00:05:01,935
Imagine Allison
is planning a trip.

102
00:05:01,935 --> 00:05:04,504
She goes to a travel
agency's website

103
00:05:04,504 --> 00:05:06,072
and they conveniently offer her

104
00:05:06,072 --> 00:05:08,141
all of the things
she needs to book --

105
00:05:08,141 --> 00:05:12,412
flight tickets, a hotel stay,
and a car rental.

106
00:05:12,412 --> 00:05:16,049
Allison just needs to pay
a total of $500 dollars.

107
00:05:16,049 --> 00:05:18,084
Allison provides
the travel agency

108
00:05:18,084 --> 00:05:20,453
her full credit card
information.

109
00:05:20,453 --> 00:05:23,256
Now, you might imagine
that the travel agency

110
00:05:23,256 --> 00:05:26,293
will charge Allison's
credit card $500 dollars,

111
00:05:26,293 --> 00:05:29,196
and then pay
the other companies involved.

112
00:05:29,196 --> 00:05:31,865
But what typically happens
is the travel agency

113
00:05:31,865 --> 00:05:34,434
simply passes along
the credit card information

114
00:05:34,434 --> 00:05:38,605
to each company to make
their individual charges.

115
00:05:38,605 --> 00:05:40,740
This works,
but it's not great

116
00:05:40,740 --> 00:05:42,676
for Allison's
privacy and security

117
00:05:42,676 --> 00:05:46,413
to have her credit card
information shared around.

118
00:05:46,413 --> 00:05:49,749
Now, with the new
multimerchant payment API,

119
00:05:49,749 --> 00:05:52,018
it's possible to request
a payment token

120
00:05:52,018 --> 00:05:55,355
for each merchant involved
in a transaction.

121
00:05:55,355 --> 00:05:57,157
Using these payment tokens,

122
00:05:57,157 --> 00:06:00,327
the multiple companies involved
can each charge Allison

123
00:06:00,327 --> 00:06:03,263
for the relevant amount
she authorized.

124
00:06:03,263 --> 00:06:05,932
Allison can now book
and pay for her trip

125
00:06:05,932 --> 00:06:09,269
while taking advantage of the
privacy and security benefits

126
00:06:09,269 --> 00:06:12,005
that Apple Pay offers.

127
00:06:12,005 --> 00:06:14,541
The payment sheet has been
updated to show customers

128
00:06:14,541 --> 00:06:18,345
a breakdown of the submerchants
involved in a transaction.

129
00:06:18,345 --> 00:06:20,313
Customers can tap
on the total field

130
00:06:20,313 --> 00:06:22,549
to navigate
to the payment summary.

131
00:06:22,549 --> 00:06:25,051
Here, the customer
can see a breakdown

132
00:06:25,051 --> 00:06:27,520
of all the merchants involved
in the transaction,

133
00:06:27,520 --> 00:06:30,590
along with the amount authorized
for each one.

134
00:06:30,590 --> 00:06:32,392
Now, let's look
at how you can add

135
00:06:32,392 --> 00:06:35,528
multimerchant payments
to your app.

136
00:06:35,528 --> 00:06:37,764
First, create a payment request

137
00:06:37,764 --> 00:06:40,233
using the PKPaymentRequest
class,

138
00:06:40,233 --> 00:06:43,203
setting your usual
configuration on it.

139
00:06:43,203 --> 00:06:48,341
Then add summary items for your
payment, including the total.

140
00:06:48,341 --> 00:06:50,977
Next, create
a payment token context

141
00:06:50,977 --> 00:06:54,414
for each additional merchant
involved in the transaction,

142
00:06:54,414 --> 00:06:58,385
using the new
PKPaymentTokenContext class.

143
00:06:58,385 --> 00:07:01,121
Provide details
for each merchant,

144
00:07:01,121 --> 00:07:04,424
as well as the amount
to authorize for each.

145
00:07:04,424 --> 00:07:09,462
Finally, set the payment token
contexts on the payment request.

146
00:07:09,462 --> 00:07:11,631
Keep in mind that the sum
of the amounts

147
00:07:11,631 --> 00:07:14,167
for all of your
payment token contexts

148
00:07:14,167 --> 00:07:17,070
must be less than or equal
to the total amount

149
00:07:17,070 --> 00:07:19,506
of the payment request itself.

150
00:07:19,506 --> 00:07:23,043
Also, you should always use
the same external identifier

151
00:07:23,043 --> 00:07:26,012
for the same merchant any time
you request a payment token

152
00:07:26,012 --> 00:07:28,882
for that merchant in your app.

153
00:07:28,882 --> 00:07:30,917
For adopting
multi-merchant payments

154
00:07:30,917 --> 00:07:32,552
with Apple Pay on the web,

155
00:07:32,552 --> 00:07:36,656
check out the Apple Pay JS API
documentation.

156
00:07:36,656 --> 00:07:39,159
Now, let's take a look
at our improvements

157
00:07:39,159 --> 00:07:41,961
to automatic payments.

158
00:07:41,961 --> 00:07:45,732
In iOS 16, we're introducing
the ability for people to view

159
00:07:45,732 --> 00:07:48,702
and manage automatic payments
they've set up with merchants,

160
00:07:48,702 --> 00:07:50,670
right from the Wallet app.

161
00:07:50,670 --> 00:07:51,738
In this release,

162
00:07:51,738 --> 00:07:54,641
we're supporting two types
of automatic payments:

163
00:07:54,641 --> 00:07:57,043
recurring payments,
which includes things like

164
00:07:57,043 --> 00:08:00,547
subscriptions, installments,
or recurring billing;

165
00:08:00,547 --> 00:08:02,582
and automatic reload payments,

166
00:08:02,582 --> 00:08:05,418
such as store card
balance top-ups.

167
00:08:05,418 --> 00:08:08,221
We're introducing new APIs
to allow you to request

168
00:08:08,221 --> 00:08:12,125
to set up an automatic payment
when you make a payment request.

169
00:08:12,125 --> 00:08:15,562
We're also introducing
Apple Pay merchant tokens,

170
00:08:15,562 --> 00:08:19,532
a new kind of payment token
tied to a customer's Apple ID,

171
00:08:19,532 --> 00:08:22,168
which can help you more reliably
charge your customers

172
00:08:22,168 --> 00:08:24,437
on an ongoing basis.

173
00:08:24,437 --> 00:08:27,040
Let's take a closer look
at Apple Pay merchant tokens

174
00:08:27,040 --> 00:08:29,542
to see how
they can be useful.

175
00:08:29,542 --> 00:08:32,445
Imagine Julie is paying
for a book club membership

176
00:08:32,445 --> 00:08:34,981
using Apple Pay on her iPhone.

177
00:08:34,981 --> 00:08:37,350
The book club makes
a payment request,

178
00:08:37,350 --> 00:08:39,552
and when Julie authorizes
the payment,

179
00:08:39,552 --> 00:08:41,921
the book club receives
a payment token,

180
00:08:41,921 --> 00:08:44,524
and every month they can
use that to charge Julie

181
00:08:44,524 --> 00:08:46,526
her membership fee.

182
00:08:46,526 --> 00:08:49,796
This payment token is linked
to the device Julie used

183
00:08:49,796 --> 00:08:51,865
to authorize the payment.

184
00:08:51,865 --> 00:08:55,235
But what happens if Julie
gets a new iPhone?

185
00:08:55,235 --> 00:08:57,737
With the new
automatic payments feature,

186
00:08:57,737 --> 00:08:59,639
the book club
will instead receive

187
00:08:59,639 --> 00:09:01,641
an Apple Pay merchant token,

188
00:09:01,641 --> 00:09:04,544
if Julie's payment network
supports it.

189
00:09:04,544 --> 00:09:07,847
This payment token is tied
to Julie's Apple ID,

190
00:09:07,847 --> 00:09:09,649
rather than to her iPhone,

191
00:09:09,649 --> 00:09:14,220
which provides better assurances
for ongoing authorizations.

192
00:09:14,220 --> 00:09:16,823
This means that if Julie
upgrades her iPhone,

193
00:09:16,823 --> 00:09:18,758
or resets her current phone,

194
00:09:18,758 --> 00:09:21,594
the book club can continue
to reliably charge Julie

195
00:09:21,594 --> 00:09:23,997
her monthly membership fee.

196
00:09:23,997 --> 00:09:26,666
If you accept Apple Pay
for these types of payments,

197
00:09:26,666 --> 00:09:30,003
it's a great idea to adopt
automatic payments to ensure

198
00:09:30,003 --> 00:09:32,972
you can continue reliably
charging your customers,

199
00:09:32,972 --> 00:09:36,509
as well as avoid any
interruption to their services.

200
00:09:36,509 --> 00:09:38,978
The first type of automatic
payment we're supporting

201
00:09:38,978 --> 00:09:41,981
in this release
is recurring payments.

202
00:09:41,981 --> 00:09:45,218
Recurring payments have
a fixed or variable amount

203
00:09:45,218 --> 00:09:47,353
that is charged on
a regular schedule,

204
00:09:47,353 --> 00:09:51,157
such as weekly,
monthly, or annually.

205
00:09:51,157 --> 00:09:53,560
These payments can end
on a certain date

206
00:09:53,560 --> 00:09:57,063
or they can be ongoing
until canceled.

207
00:09:57,063 --> 00:10:01,568
A trial or introductory period
is also supported.

208
00:10:01,568 --> 00:10:03,970
Subscriptions,
installment plans,

209
00:10:03,970 --> 00:10:06,272
and regular billing
are perfect uses

210
00:10:06,272 --> 00:10:08,508
for this type of payment.

211
00:10:08,508 --> 00:10:11,010
Let's take a look at how you can
set up a recurring payment

212
00:10:11,010 --> 00:10:14,547
in your app using
automatic payments.

213
00:10:14,547 --> 00:10:17,183
Start by specifying
the amount and duration

214
00:10:17,183 --> 00:10:19,219
of the recurring payment,
using the

215
00:10:19,219 --> 00:10:22,655
PKRecurringPaymentSummaryItem
class.

216
00:10:22,655 --> 00:10:24,157
For recurring payments,

217
00:10:24,157 --> 00:10:27,126
you can specify
both a regular billing period

218
00:10:27,126 --> 00:10:30,997
as well as an introductory
or trial period.

219
00:10:30,997 --> 00:10:34,400
You can use the startDate
and endDate properties

220
00:10:34,400 --> 00:10:36,970
to indicate when
the trial period ends

221
00:10:36,970 --> 00:10:40,473
and the regular billing period
starts.

222
00:10:40,473 --> 00:10:43,710
Next, create a
recurringPaymentRequest

223
00:10:43,710 --> 00:10:47,514
using the new
PKRecurringPaymentRequest class.

224
00:10:47,514 --> 00:10:49,816
Provide a description
of the payment,

225
00:10:49,816 --> 00:10:51,784
the regular billing period,

226
00:10:51,784 --> 00:10:54,787
as well as a managementURL
to a web page

227
00:10:54,787 --> 00:10:57,891
where the customer can update
or delete the payment method

228
00:10:57,891 --> 00:10:59,926
for the recurring payment.

229
00:10:59,926 --> 00:11:03,429
You can also optionally
provide a trial billing period

230
00:11:03,429 --> 00:11:05,765
as well as
billingAgreement text

231
00:11:05,765 --> 00:11:09,302
to help explain the terms
of the payment to the customer.

232
00:11:09,302 --> 00:11:13,873
Finally, you can optionally
provide a tokenNotificationURL

233
00:11:13,873 --> 00:11:16,910
where your server can receive
life cycle notifications

234
00:11:16,910 --> 00:11:19,779
about the Apple Pay
merchant token for the payment,

235
00:11:19,779 --> 00:11:21,414
if one was issued.

236
00:11:21,414 --> 00:11:23,950
For example,
you can receive notifications

237
00:11:23,950 --> 00:11:27,687
if the card issuer or the user
deletes the token.

238
00:11:27,687 --> 00:11:30,056
For more information
about merchant token

239
00:11:30,056 --> 00:11:32,025
life cycle notifications,

240
00:11:32,025 --> 00:11:36,930
see the Apple Pay Merchant Token
Management API documentation.

241
00:11:36,930 --> 00:11:40,300
Finally, set the
recurringPaymentRequest

242
00:11:40,300 --> 00:11:42,335
on the paymentRequest object.

243
00:11:42,335 --> 00:11:45,605
A quick note on summary items,
your recurring payment

244
00:11:45,605 --> 00:11:48,575
will not be added to the payment
request's summary items

245
00:11:48,575 --> 00:11:49,776
automatically.

246
00:11:49,776 --> 00:11:54,080
So be sure to add items for it
to the summary items array.

247
00:11:54,080 --> 00:11:56,015
The total for
the payment request

248
00:11:56,015 --> 00:11:57,450
should be the first amount

249
00:11:57,450 --> 00:11:59,352
that the customer
will be charged.

250
00:11:59,352 --> 00:12:02,088
So in this example,
the total is set to display

251
00:12:02,088 --> 00:12:03,957
the trial period amount,

252
00:12:03,957 --> 00:12:07,794
as that's the first amount
the customer will be charged.

253
00:12:07,794 --> 00:12:09,529
The payment sheet
will show details

254
00:12:09,529 --> 00:12:11,965
of your recurring payment
to customers,

255
00:12:11,965 --> 00:12:14,300
and they can tap
on the Billing Details section

256
00:12:14,300 --> 00:12:17,136
to read further.

257
00:12:17,136 --> 00:12:20,306
Now, let's take a look at the
second type of automatic payment

258
00:12:20,306 --> 00:12:22,075
we're supporting
in this release:

259
00:12:22,075 --> 00:12:24,277
automatic reload payments.

260
00:12:24,277 --> 00:12:25,645
With this type of payment,

261
00:12:25,645 --> 00:12:27,580
a balance is
automatically topped up

262
00:12:27,580 --> 00:12:30,583
with a fixed amount whenever
the balance drops below

263
00:12:30,583 --> 00:12:32,852
a certain threshold amount.

264
00:12:32,852 --> 00:12:35,622
Automatic reload payments
are perfect for things like

265
00:12:35,622 --> 00:12:39,459
store card top-ups
and prepaid balances.

266
00:12:39,459 --> 00:12:42,595
To request to set up
an automatic reload payment,

267
00:12:42,595 --> 00:12:46,032
start by specifying the reload
and threshold amounts,

268
00:12:46,032 --> 00:12:51,237
using the new PKAutomatic
ReloadPaymentSummaryItem class.

269
00:12:51,237 --> 00:12:55,208
Next, create an
automaticReloadPaymentRequest

270
00:12:55,208 --> 00:12:59,579
using the new PKAutomatic
ReloadPaymentRequest class,

271
00:12:59,579 --> 00:13:02,915
passing in a description
of the payment, the billing,

272
00:13:02,915 --> 00:13:04,517
and a management URL,

273
00:13:04,517 --> 00:13:06,819
just like for
recurring payments.

274
00:13:06,819 --> 00:13:10,156
You can also optionally
provide billing agreement text

275
00:13:10,156 --> 00:13:13,660
and a token notification URL.

276
00:13:13,660 --> 00:13:16,829
Finally, set the automatic
reload payment request

277
00:13:16,829 --> 00:13:19,065
on the payment request object.

278
00:13:19,065 --> 00:13:22,435
Again, be sure to include
your automatic reload payment

279
00:13:22,435 --> 00:13:24,137
in the summary items

280
00:13:24,137 --> 00:13:27,940
and set the total of the
paymentRequest appropriately.

281
00:13:27,940 --> 00:13:31,044
For adopting automatic payments
with Apple Pay on the web,

282
00:13:31,044 --> 00:13:35,248
check out the Apple Pay JS API
documentation.

283
00:13:35,248 --> 00:13:37,550
Here's how the automatic reload
payment appears

284
00:13:37,550 --> 00:13:41,854
in the payment sheet
for your customers.

285
00:13:41,854 --> 00:13:44,223
Finally, here's
a few things to remember

286
00:13:44,223 --> 00:13:47,193
to help give your customers
the best possible experience

287
00:13:47,193 --> 00:13:50,229
when you adopt
automatic payments in your app.

288
00:13:50,229 --> 00:13:52,165
Remember to include
summary items

289
00:13:52,165 --> 00:13:56,469
for your automatic payment
as these are not added for you.

290
00:13:56,469 --> 00:13:59,038
The total amount of your
payment request should be

291
00:13:59,038 --> 00:14:02,341
the first amount
the customer will be charged.

292
00:14:02,341 --> 00:14:05,178
You should keep the billing
agreement text short.

293
00:14:05,178 --> 00:14:09,515
The payment sheet will only show
the first 500 characters.

294
00:14:09,515 --> 00:14:12,452
The billing agreement text
is not intended to replace

295
00:14:12,452 --> 00:14:14,987
your normal billing
and legal agreements.

296
00:14:14,987 --> 00:14:16,556
It's up to you to be compliant

297
00:14:16,556 --> 00:14:19,225
with your local
recurring billing laws.

298
00:14:19,225 --> 00:14:22,128
If you have a legal agreement
to show the customer,

299
00:14:22,128 --> 00:14:24,230
that might mean
displaying it to the customer

300
00:14:24,230 --> 00:14:27,166
before you present
the payment sheet.

301
00:14:27,166 --> 00:14:30,069
You can only request
one type of automatic payment

302
00:14:30,069 --> 00:14:32,438
in a single transaction.

303
00:14:32,438 --> 00:14:34,974
Also, automatic payments
cannot be used

304
00:14:34,974 --> 00:14:37,810
with multi-merchant payments.

305
00:14:37,810 --> 00:14:40,880
Finally, if you want to receive
life cycle notifications

306
00:14:40,880 --> 00:14:44,250
for the Apple Pay merchant token
issued for the payment,

307
00:14:44,250 --> 00:14:47,386
be sure to provide
a token notification URL

308
00:14:47,386 --> 00:14:50,923
and adopt the Apple Pay Merchant
Token Management API

309
00:14:50,923 --> 00:14:52,391
on your server.

310
00:14:52,391 --> 00:14:54,327
We think you'll love
these new APIs

311
00:14:54,327 --> 00:14:57,196
and the benefits
of Apple Pay merchant tokens.

312
00:14:57,196 --> 00:14:58,998
Here are just a few
of our partners

313
00:14:58,998 --> 00:15:03,536
that will also be adopting
support for automatic payments.

314
00:15:03,536 --> 00:15:06,105
Apple Pay merchant tokens
will be supported by

315
00:15:06,105 --> 00:15:10,009
American Express, Discover,
Mastercard, and Visa,

316
00:15:10,009 --> 00:15:14,313
with support for other payment
networks in the future.

317
00:15:14,313 --> 00:15:16,783
We are excited to introduce
Order Tracking

318
00:15:16,783 --> 00:15:20,253
to enhance the postpurchase
experience.

319
00:15:20,253 --> 00:15:24,457
New in iOS 16, order tracking
allows users to track orders

320
00:15:24,457 --> 00:15:26,893
placed with participating
merchants.

321
00:15:26,893 --> 00:15:29,295
Wallet now provides
an intuitive overview

322
00:15:29,295 --> 00:15:32,598
of active orders,
recently completed orders,

323
00:15:32,598 --> 00:15:34,300
and past orders.

324
00:15:34,300 --> 00:15:38,104
I currently have a single active
order for some bakery goods.

325
00:15:38,104 --> 00:15:42,241
My order is still in processing;
I'll get back to that later.

326
00:15:42,241 --> 00:15:46,012
For now, I want to buy some toys
and accessories for my cat

327
00:15:46,012 --> 00:15:47,580
from Pet Avenue.

328
00:15:47,580 --> 00:15:50,283
I choose to check out
with Apple Pay.

329
00:15:50,283 --> 00:15:52,485
Shortly after
I authorize the payment,

330
00:15:52,485 --> 00:15:55,922
I receive a notification
to track my order in Wallet.

331
00:15:55,922 --> 00:15:58,124
Interacting with
that notification

332
00:15:58,124 --> 00:16:00,393
takes me to the details
of my order

333
00:16:00,393 --> 00:16:02,628
where I can check
the current status.

334
00:16:02,628 --> 00:16:04,263
I can see the order status,

335
00:16:04,263 --> 00:16:06,899
including shipping
and tracking information,

336
00:16:06,899 --> 00:16:09,802
and the list of line items
I have ordered.

337
00:16:09,802 --> 00:16:13,973
Further below, I have multiple
options to contact Pet Avenue,

338
00:16:13,973 --> 00:16:18,678
check the payment information,
and go back to Pet Avenue's app.

339
00:16:18,678 --> 00:16:21,113
Now, imagine
Pet Avenue is really fast

340
00:16:21,113 --> 00:16:25,384
in processing incoming orders
and they just shipped my items.

341
00:16:25,384 --> 00:16:27,753
As soon as Pet Avenue
shipped my order,

342
00:16:27,753 --> 00:16:30,389
they have updated
the available information.

343
00:16:30,389 --> 00:16:33,192
I can see the status changed
to "On the Way,"

344
00:16:33,192 --> 00:16:36,362
with an estimated delivery date
of June 10th.

345
00:16:36,362 --> 00:16:38,397
They also included
a custom message

346
00:16:38,397 --> 00:16:41,667
and tracking information
for the shipment.

347
00:16:41,667 --> 00:16:43,569
Oh, remember my baking goods?

348
00:16:43,569 --> 00:16:46,272
I just got a notification
that they are ready for pickup.

349
00:16:46,272 --> 00:16:48,007
Let's check it out.

350
00:16:48,007 --> 00:16:50,610
I have ordered
my bakery goods for pick up.

351
00:16:50,610 --> 00:16:52,912
They are ready for pick up,
that's great!

352
00:16:52,912 --> 00:16:55,681
Bake My Breath Away
has provided my pickup window,

353
00:16:55,681 --> 00:16:57,183
pickup instructions,

354
00:16:57,183 --> 00:16:59,852
and a barcode
to present upon arrival.

355
00:16:59,852 --> 00:17:03,522
We've seen that order tracking
works seamlessly with Apple Pay.

356
00:17:03,522 --> 00:17:06,292
Let's have a look at how
you can integrate order tracking

357
00:17:06,292 --> 00:17:08,961
into your customer experience.

358
00:17:08,961 --> 00:17:10,997
To get started
with order tracking,

359
00:17:10,997 --> 00:17:13,733
first, you must create
an Order Type ID

360
00:17:13,733 --> 00:17:15,768
in your developer account.

361
00:17:15,768 --> 00:17:19,672
An Order Type ID identifies
your organization as an entity

362
00:17:19,672 --> 00:17:22,141
that provides order information.

363
00:17:22,141 --> 00:17:24,911
You can register
multiple Order Type IDs --

364
00:17:24,911 --> 00:17:26,979
for example,
to provide order information

365
00:17:26,979 --> 00:17:29,882
on behalf of multiple merchants.

366
00:17:29,882 --> 00:17:32,985
Also create an Order Type ID
Certificate.

367
00:17:32,985 --> 00:17:35,688
You will use the certificate
to build order packages

368
00:17:35,688 --> 00:17:38,157
and update orders.

369
00:17:38,157 --> 00:17:41,227
Orders are distributed
as order packages.

370
00:17:41,227 --> 00:17:44,664
An order package includes
all the metadata and information

371
00:17:44,664 --> 00:17:46,032
for an order.

372
00:17:46,032 --> 00:17:48,701
It can represent
a wide range of scenarios,

373
00:17:48,701 --> 00:17:53,105
including shipping, pickup,
and multifulfillment orders.

374
00:17:53,105 --> 00:17:55,775
An order package
also includes images,

375
00:17:55,775 --> 00:17:58,678
like your logo
and line item images.

376
00:17:58,678 --> 00:18:00,446
You can also add localizations

377
00:18:00,446 --> 00:18:03,950
to support your diverse
range of customers.

378
00:18:03,950 --> 00:18:06,786
Every order package must be
cryptographically signed

379
00:18:06,786 --> 00:18:08,955
to verify its origin.

380
00:18:08,955 --> 00:18:10,690
Once everything is in place,

381
00:18:10,690 --> 00:18:14,093
order packages are compressed
for distribution.

382
00:18:14,093 --> 00:18:15,695
Check out
the sample order packages

383
00:18:15,695 --> 00:18:17,296
attached to this session.

384
00:18:17,296 --> 00:18:19,398
And for more information
on order packages,

385
00:18:19,398 --> 00:18:22,234
see the developer
documentation.

386
00:18:22,234 --> 00:18:25,838
Adding an order to Wallet
works seamlessly with Apple Pay.

387
00:18:25,838 --> 00:18:28,040
When your customer
authorized a payment,

388
00:18:28,040 --> 00:18:31,444
your app or web page
receives payment information,

389
00:18:31,444 --> 00:18:34,847
then sends it to your server
for processing.

390
00:18:34,847 --> 00:18:37,550
If processing the payment
information succeeds,

391
00:18:37,550 --> 00:18:41,220
your server creates an order
and some metadata.

392
00:18:41,220 --> 00:18:43,789
Your server then returns details
about that order

393
00:18:43,789 --> 00:18:47,526
to your app or web page
to include in the result.

394
00:18:47,526 --> 00:18:50,997
The order details enable the
device to asynchronously request

395
00:18:50,997 --> 00:18:53,332
the order from your server.

396
00:18:53,332 --> 00:18:57,370
Your server then returns
the order package to the device.

397
00:18:57,370 --> 00:18:59,372
When your server
creates an order,

398
00:18:59,372 --> 00:19:01,407
assign an Order ID
that is unique

399
00:19:01,407 --> 00:19:04,477
within the namespace
of your Order Type ID.

400
00:19:04,477 --> 00:19:08,581
Your server must also generate
a secure authentication token.

401
00:19:08,581 --> 00:19:12,651
This is a shared secret that is
part of the order details.

402
00:19:12,651 --> 00:19:15,454
The device will use the token
to authenticate itself

403
00:19:15,454 --> 00:19:17,857
when it requests the order.

404
00:19:17,857 --> 00:19:19,291
Let's take a look at an example

405
00:19:19,291 --> 00:19:22,128
for returning a payment
authorization result.

406
00:19:22,128 --> 00:19:24,330
When your customer
authorized a payment,

407
00:19:24,330 --> 00:19:27,566
your app sends the payment
information to your server

408
00:19:27,566 --> 00:19:29,935
and asks it to create an order.

409
00:19:29,935 --> 00:19:32,938
Check whether the server
result indicates success

410
00:19:32,938 --> 00:19:36,042
and handle any error
returned by your server.

411
00:19:36,042 --> 00:19:39,278
If the server result
does indicate success,

412
00:19:39,278 --> 00:19:41,180
complete the payment
with an appropriate

413
00:19:41,180 --> 00:19:44,050
authorization result.

414
00:19:44,050 --> 00:19:46,252
To return a payment
authorization result

415
00:19:46,252 --> 00:19:47,987
with order details,

416
00:19:47,987 --> 00:19:51,624
first, extract them
from the server result.

417
00:19:51,624 --> 00:19:55,828
Then create a
PKPaymentOrderDetails object

418
00:19:55,828 --> 00:19:59,265
with the Order Ttype ID,
Order ID,

419
00:19:59,265 --> 00:20:03,502
the URL to your server,
and the authenticationToken.

420
00:20:03,502 --> 00:20:06,739
Assign the PKPaymentOrderDetails
object

421
00:20:06,739 --> 00:20:12,211
to the new orderDetails property
on PKPaymentAuthorizationResult.

422
00:20:12,211 --> 00:20:13,612
That's it!

423
00:20:13,612 --> 00:20:17,216
You can complete a payment with
order details on the web too.

424
00:20:17,216 --> 00:20:22,188
As before, extract the order
details from the server result.

425
00:20:22,188 --> 00:20:24,457
Then include the order details

426
00:20:24,457 --> 00:20:27,793
in the data you complete
the payment with.

427
00:20:27,793 --> 00:20:29,528
To be able to update an order,

428
00:20:29,528 --> 00:20:31,964
create an order package
that indicates support

429
00:20:31,964 --> 00:20:34,200
for automatic updates.

430
00:20:34,200 --> 00:20:36,068
When the order is added,

431
00:20:36,068 --> 00:20:38,871
the device will register
for updates to it.

432
00:20:38,871 --> 00:20:42,975
Your server must store
information about registrations.

433
00:20:42,975 --> 00:20:45,978
Later on, when your server
updates the order,

434
00:20:45,978 --> 00:20:49,215
use the registration information
to notify devices

435
00:20:49,215 --> 00:20:52,518
that registered for updates
to it.

436
00:20:52,518 --> 00:20:55,154
When the device receives
the push notification,

437
00:20:55,154 --> 00:20:58,757
it will again request the order
from your server.

438
00:20:58,757 --> 00:21:01,427
Your server then returns
the updated order package

439
00:21:01,427 --> 00:21:03,629
to the device.

440
00:21:03,629 --> 00:21:05,231
Only your customers and you

441
00:21:05,231 --> 00:21:07,266
should know
what they have ordered.

442
00:21:07,266 --> 00:21:10,269
We designed order tracking
with privacy in mind.

443
00:21:10,269 --> 00:21:12,972
Order information
is exchanged directly

444
00:21:12,972 --> 00:21:15,508
between devices and your server.

445
00:21:15,508 --> 00:21:18,077
When orders are synchronized
via iCloud,

446
00:21:18,077 --> 00:21:20,246
they are end-to-end encrypted.

447
00:21:20,246 --> 00:21:21,914
Follow these practices
to provide

448
00:21:21,914 --> 00:21:24,717
the best customer
experience possible.

449
00:21:24,717 --> 00:21:27,720
Associate your app
with orders that you provide.

450
00:21:27,720 --> 00:21:30,990
If your app delivers
notifications and is installed,

451
00:21:30,990 --> 00:21:34,026
you can disable order tracking
notifications.

452
00:21:34,026 --> 00:21:37,696
This helps to prevent
duplicate notifications.

453
00:21:37,696 --> 00:21:40,900
Use the knowledge you have
about your customer preferences

454
00:21:40,900 --> 00:21:44,203
to provide relevant
localizations only.

455
00:21:44,203 --> 00:21:46,872
Be mindful of
the order package size.

456
00:21:46,872 --> 00:21:48,374
Try to keep the size small

457
00:21:48,374 --> 00:21:51,043
to reduce expensive
networking cost.

458
00:21:51,043 --> 00:21:52,378
When you update an order,

459
00:21:52,378 --> 00:21:56,215
promptly notify devices that
registered for updates to it.

460
00:21:56,215 --> 00:22:00,186
Orders in Wallet should match
the actual state of the order.

461
00:22:00,186 --> 00:22:05,024
Make sure to also check out
the HIG for order tracking.

462
00:22:05,024 --> 00:22:07,793
Platforms can make your
integration of order tracking

463
00:22:07,793 --> 00:22:09,161
much simpler.

464
00:22:09,161 --> 00:22:12,998
We are happy to announce
Shopify, Narvar, and Route

465
00:22:12,998 --> 00:22:15,467
will support order tracking
by fall.

466
00:22:15,467 --> 00:22:18,170
Look out for more platforms
supporting order tracking

467
00:22:18,170 --> 00:22:19,838
in the coming months.

468
00:22:19,838 --> 00:22:21,840
Order tracking is
a great way to enhance

469
00:22:21,840 --> 00:22:24,944
the postpurchase experience
for your customers.

470
00:22:24,944 --> 00:22:26,579
With automatic updates,

471
00:22:26,579 --> 00:22:28,647
your customers
will always be up to date

472
00:22:28,647 --> 00:22:31,016
about the status
of their orders.

473
00:22:31,016 --> 00:22:33,953
We believe your customers
will love this experience

474
00:22:33,953 --> 00:22:36,722
and we look forward
to ordering with you soon!

475
00:22:36,722 --> 00:22:39,258
Now, I'll pass over to David.

476
00:22:39,258 --> 00:22:41,060
David: Thanks, Lais!

477
00:22:41,060 --> 00:22:44,363
I'm super excited to talk about
the new functionality

478
00:22:44,363 --> 00:22:48,300
we've added to IDs in Wallet
in iOS 16.

479
00:22:48,300 --> 00:22:52,938
We launched IDs in Wallet
earlier this year in iOS 15.4.

480
00:22:52,938 --> 00:22:55,307
It allows users
in supported US states

481
00:22:55,307 --> 00:22:58,677
to add their driver's license
or State ID to Wallet.

482
00:22:58,677 --> 00:23:01,981
IDs in Wallet are issued
by the same issuing authorities

483
00:23:01,981 --> 00:23:04,149
as users' physical IDs.

484
00:23:04,149 --> 00:23:07,419
in the US, that's their State's
Department of Motor Vehicles

485
00:23:07,419 --> 00:23:10,322
or equivalent organization.

486
00:23:10,322 --> 00:23:14,660
In iOS 16, we've added
a new API that allows apps

487
00:23:14,660 --> 00:23:17,930
and App Clips to request
information from IDs in Wallet

488
00:23:17,930 --> 00:23:21,634
in order to verify
a user's age or identity.

489
00:23:21,634 --> 00:23:24,103
Your app will request
the information,

490
00:23:24,103 --> 00:23:26,805
the user will review
and approve the request,

491
00:23:26,805 --> 00:23:29,341
Then your app will send
the response to your server

492
00:23:29,341 --> 00:23:32,244
for decryption and verification.

493
00:23:32,244 --> 00:23:34,179
You can request
a number of data elements

494
00:23:34,179 --> 00:23:35,781
from the user's ID.

495
00:23:35,781 --> 00:23:39,752
These include their name,
their address,

496
00:23:39,752 --> 00:23:42,154
their date of birth,
their photo --

497
00:23:42,154 --> 00:23:43,756
known as the portrait --

498
00:23:43,756 --> 00:23:46,625
the issuing authority
that issued their ID,

499
00:23:46,625 --> 00:23:49,995
the number and expiration
date of their physical ID,

500
00:23:49,995 --> 00:23:52,598
and the driving privileges
granted by their ID,

501
00:23:52,598 --> 00:23:54,667
if there are any.

502
00:23:54,667 --> 00:23:58,704
A very common use case for IDs
is to verify someone's age.

503
00:23:58,704 --> 00:24:02,641
With a physical ID, that means
looking at their date of birth.

504
00:24:02,641 --> 00:24:04,977
But the date of birth reveals
far more information

505
00:24:04,977 --> 00:24:08,113
than is necessary
just to verify age.

506
00:24:08,113 --> 00:24:10,616
If you're checking my age,
you don't actually need to know

507
00:24:10,616 --> 00:24:12,985
the exact day or year
I was born,

508
00:24:12,985 --> 00:24:14,753
or even how old I am.

509
00:24:14,753 --> 00:24:17,723
You just need to know
if I'm old enough.

510
00:24:17,723 --> 00:24:21,493
With IDs in Wallet, you can ask
that question directly.

511
00:24:21,493 --> 00:24:23,962
Your app can request
a Boolean data element

512
00:24:23,962 --> 00:24:27,099
indicating whether the user
is above a certain age,

513
00:24:27,099 --> 00:24:29,268
providing a more
privacy-preserving way

514
00:24:29,268 --> 00:24:33,505
to do age verification than
checking the full date of birth.

515
00:24:33,505 --> 00:24:36,775
When your app invokes the API,
a sheet will show the user

516
00:24:36,775 --> 00:24:39,378
what information
you're requesting.

517
00:24:39,378 --> 00:24:41,080
It will also show
whether you intend

518
00:24:41,080 --> 00:24:42,548
to store that information,

519
00:24:42,548 --> 00:24:44,817
and for how long
you intend to store it.

520
00:24:44,817 --> 00:24:47,119
This lets the user make
an informed decision

521
00:24:47,119 --> 00:24:49,822
about whether to share
the information with your app.

522
00:24:49,822 --> 00:24:52,091
No information is shared
until they give

523
00:24:52,091 --> 00:24:56,328
their explicit approval
using Face ID or Touch ID.

524
00:24:56,328 --> 00:24:58,831
The response you receive
contains just the elements

525
00:24:58,831 --> 00:25:00,199
you requested.

526
00:25:00,199 --> 00:25:02,501
Other identity verification
mechanisms,

527
00:25:02,501 --> 00:25:04,937
such as scanning
a physical ID card,

528
00:25:04,937 --> 00:25:07,272
share everything
that's on the ID.

529
00:25:07,272 --> 00:25:09,708
By limiting the sharing
to just what you need,

530
00:25:09,708 --> 00:25:12,945
IDs in Wallet is more
privacy-preserving for the user

531
00:25:12,945 --> 00:25:15,147
and reduces the amount
of sensitive information

532
00:25:15,147 --> 00:25:18,751
you need to keep secure
on your server.

533
00:25:18,751 --> 00:25:21,653
The response is signed
by the ID's issuing authority,

534
00:25:21,653 --> 00:25:23,555
making it straightforward
to verify

535
00:25:23,555 --> 00:25:26,725
that the information
in the response is authentic.

536
00:25:26,725 --> 00:25:29,228
Note that the issuing authority
creates the ID

537
00:25:29,228 --> 00:25:32,398
but is not involved
at the time you invoke the API.

538
00:25:32,398 --> 00:25:34,933
They do not learn when users
share their information

539
00:25:34,933 --> 00:25:39,204
or to whom they share it with.

540
00:25:39,204 --> 00:25:42,007
To use the API, you need
to request an entitlement

541
00:25:42,007 --> 00:25:44,910
through your developer account.

542
00:25:44,910 --> 00:25:46,745
You'll then need to set up
a merchant ID

543
00:25:46,745 --> 00:25:48,814
and encryption certificate.

544
00:25:48,814 --> 00:25:51,850
This process is very similar
to setting up in-app payment

545
00:25:51,850 --> 00:25:53,252
with Apple Pay.

546
00:25:53,252 --> 00:25:58,123
We'll talk more about how to use
the ID and certificate in a little bit.

547
00:25:58,123 --> 00:26:01,427
For now, let's talk about
the verification flow.

548
00:26:01,427 --> 00:26:04,296
At a high level,
it consists of four steps.

549
00:26:04,296 --> 00:26:07,966
First, your app will invoke the
API in the PassKit framework

550
00:26:07,966 --> 00:26:11,770
and specify the information
you're requesting.

551
00:26:11,770 --> 00:26:13,439
The system will then display
a sheet

552
00:26:13,439 --> 00:26:16,408
prompting the user
to approve the request.

553
00:26:16,408 --> 00:26:18,610
Once they do,
your app will receive

554
00:26:18,610 --> 00:26:21,113
an encrypted response.

555
00:26:21,113 --> 00:26:23,816
Your app will then pass
that response to your server

556
00:26:23,816 --> 00:26:27,186
for decryption and verification.

557
00:26:27,186 --> 00:26:32,124
First, let's talk about
how to use the API in PassKit.

558
00:26:32,124 --> 00:26:34,660
If your app uses SwiftUI,
you should use the

559
00:26:34,660 --> 00:26:37,963
VerifyIdentityWithWalletButton
SwiftUI view.

560
00:26:37,963 --> 00:26:39,665
This displays a button
that triggers

561
00:26:39,665 --> 00:26:43,101
the identity verification
flow when pressed.

562
00:26:43,101 --> 00:26:46,839
Just like the Pay with Apple Pay
and Add Pass to Wallet buttons,

563
00:26:46,839 --> 00:26:50,342
the Verify Identity with Wallet
button provides a familiar,

564
00:26:50,342 --> 00:26:54,179
consistent experience
across apps using the API.

565
00:26:54,179 --> 00:26:56,248
You can choose between
four different labels

566
00:26:56,248 --> 00:26:58,650
to display a button
that fits your use case.

567
00:26:58,650 --> 00:27:00,853
It automatically switches
between single

568
00:27:00,853 --> 00:27:05,924
and multiline versions depending
on the space available to it.

569
00:27:05,924 --> 00:27:07,426
When creating the button,

570
00:27:07,426 --> 00:27:10,896
you need to specify
a PKIdentityRequest object,

571
00:27:10,896 --> 00:27:13,665
which describes the information
you want to request

572
00:27:13,665 --> 00:27:15,534
and how it should be returned.

573
00:27:15,534 --> 00:27:18,770
Let's take a look
at how to create it.

574
00:27:18,770 --> 00:27:19,905
You begin by creating a

575
00:27:19,905 --> 00:27:22,841
PKIdentityDrivers
LicenseDescriptor,

576
00:27:22,841 --> 00:27:24,476
which describes
the data elements

577
00:27:24,476 --> 00:27:26,044
that you're looking for.

578
00:27:26,044 --> 00:27:28,480
Use the addElements method
to specify elements

579
00:27:28,480 --> 00:27:29,715
you want to request,

580
00:27:29,715 --> 00:27:32,417
along with whether you intend
to store them.

581
00:27:32,417 --> 00:27:35,387
You can invoke the addElements
method multiple times

582
00:27:35,387 --> 00:27:37,189
to specify different
sets of elements

583
00:27:37,189 --> 00:27:39,224
with different intents to store.

584
00:27:39,224 --> 00:27:42,427
In this example,
I'm calling it twice.

585
00:27:42,427 --> 00:27:45,364
First, I add an
age(atLeast: element,

586
00:27:45,364 --> 00:27:48,367
which is not going to be stored.

587
00:27:48,367 --> 00:27:51,303
Then, I call the addElements
method again to request

588
00:27:51,303 --> 00:27:54,640
the user's givenName,
familyName, and portrait,

589
00:27:54,640 --> 00:27:58,343
all of which may be stored
for up to 30 days.

590
00:27:58,343 --> 00:28:03,315
The descriptor then goes
into a PKIdentityRequest.

591
00:28:03,315 --> 00:28:07,185
The next step is to specify
a merchantIdentifier to use.

592
00:28:07,185 --> 00:28:08,754
The merchantIdentifier
indicates

593
00:28:08,754 --> 00:28:11,557
the encryption certificate
to which the API response

594
00:28:11,557 --> 00:28:13,425
will be encrypted.

595
00:28:13,425 --> 00:28:15,627
You'll configure both
the merchantIdentifier

596
00:28:15,627 --> 00:28:19,765
and its encryption certificate
through your developer account.

597
00:28:19,765 --> 00:28:22,200
Finally, you'll need
to specify a nonce,

598
00:28:22,200 --> 00:28:23,936
which will be tied
to the response you receive

599
00:28:23,936 --> 00:28:25,437
from the API.

600
00:28:25,437 --> 00:28:27,172
Its an important
security feature

601
00:28:27,172 --> 00:28:29,374
used to prevent replays
of a response

602
00:28:29,374 --> 00:28:32,611
and to bind it
to a specific user session.

603
00:28:32,611 --> 00:28:35,347
Exactly how you manage the nonce
is up to you,

604
00:28:35,347 --> 00:28:37,649
based on your own
security requirements.

605
00:28:37,649 --> 00:28:40,652
Often, it comes from
your server, because later on,

606
00:28:40,652 --> 00:28:42,854
your server will be
responsible for enforcing

607
00:28:42,854 --> 00:28:45,457
that the nonce is valid.

608
00:28:45,457 --> 00:28:47,059
With all of those
properties set,

609
00:28:47,059 --> 00:28:50,362
you have your
PKIdentityRequest.

610
00:28:50,362 --> 00:28:52,731
Now, let's get back
to the button.

611
00:28:52,731 --> 00:28:54,999
If identity verification
is available,

612
00:28:54,999 --> 00:28:57,002
the button will be displayed
in your app,

613
00:28:57,002 --> 00:28:59,671
and tapping it will start
the identity verification flow

614
00:28:59,671 --> 00:29:02,074
with your request.

615
00:29:02,074 --> 00:29:04,743
If identity verification
is not available,

616
00:29:04,743 --> 00:29:08,347
a fallback view you specify
will be displayed instead.

617
00:29:08,347 --> 00:29:11,416
For example, this will happen
if there isn't an ID in Wallet

618
00:29:11,416 --> 00:29:12,951
on this iPhone.

619
00:29:12,951 --> 00:29:14,252
You can use
the fallback view

620
00:29:14,252 --> 00:29:18,190
to offer other ways
to verify identity.

621
00:29:18,190 --> 00:29:20,993
Let's assume identity
verification is available,

622
00:29:20,993 --> 00:29:22,928
and the user taps the button.

623
00:29:22,928 --> 00:29:25,831
The system will then show
a sheet with your request,

624
00:29:25,831 --> 00:29:27,766
including the elements
you requested

625
00:29:27,766 --> 00:29:30,135
and your intent to store them.

626
00:29:30,135 --> 00:29:33,772
The user can approve the request
with Face ID or Touch ID,

627
00:29:33,772 --> 00:29:37,109
or close the sheet
without approving.

628
00:29:37,109 --> 00:29:39,378
Your code will then receive
a result object

629
00:29:39,378 --> 00:29:42,948
containing the outcome
of the request.

630
00:29:42,948 --> 00:29:46,818
If the request was approved,
you'll receive a success result.

631
00:29:46,818 --> 00:29:49,554
This comes with
a PKIdentityDocument object

632
00:29:49,554 --> 00:29:51,556
containing the
encrypted response,

633
00:29:51,556 --> 00:29:53,191
which your app
will send to your server

634
00:29:53,191 --> 00:29:56,895
for decryption and verification.

635
00:29:56,895 --> 00:29:58,897
If the request
was not successful,

636
00:29:58,897 --> 00:30:00,932
you'll receive a failure result.

637
00:30:00,932 --> 00:30:02,300
The most common cause
of failure

638
00:30:02,300 --> 00:30:04,269
is that the request
was not approved,

639
00:30:04,269 --> 00:30:07,606
in which case you'll receive
a cancelled error.

640
00:30:07,606 --> 00:30:10,275
That was
VerifyIdentityWithWalletButton,

641
00:30:10,275 --> 00:30:12,644
the SwiftUI version of the API.

642
00:30:12,644 --> 00:30:14,246
Use it to display a button

643
00:30:14,246 --> 00:30:16,648
that launches
the identity verification flow

644
00:30:16,648 --> 00:30:19,851
and requests information
from IDs in Wallet.

645
00:30:19,851 --> 00:30:22,287
If you're not using
SwiftUI in your app,

646
00:30:22,287 --> 00:30:24,790
you can also use
the PKIdentityButton

647
00:30:24,790 --> 00:30:27,793
and PKIdentityAuthorization
Controller classes

648
00:30:27,793 --> 00:30:31,096
to accomplish the same thing.

649
00:30:31,096 --> 00:30:34,533
OK, so, now you've
requested the information,

650
00:30:34,533 --> 00:30:36,802
the user's approved the request,

651
00:30:36,802 --> 00:30:38,704
and your app has sent
the encrypted response

652
00:30:38,704 --> 00:30:40,238
to your server.

653
00:30:40,238 --> 00:30:42,641
Now, let's talk about
what your server needs to do

654
00:30:42,641 --> 00:30:46,511
to decrypt and verify
that response.

655
00:30:46,511 --> 00:30:49,181
I'm only going to skim
the surface on this topic,

656
00:30:49,181 --> 00:30:53,218
so please check the developer
documentation for more details.

657
00:30:53,218 --> 00:30:56,188
The response format uses
several international standards,

658
00:30:56,188 --> 00:30:58,590
so I strongly recommend
familiarizing yourself

659
00:30:58,590 --> 00:31:01,493
with those as well.

660
00:31:01,493 --> 00:31:03,095
The response data you'll receive

661
00:31:03,095 --> 00:31:06,098
is in a CBOR-encoded
encryption envelope.

662
00:31:06,098 --> 00:31:10,235
CBOR is a data format
defined in RFC 8949.

663
00:31:10,235 --> 00:31:11,636
It's similar to JSON

664
00:31:11,636 --> 00:31:14,473
but uses binary data
to encode objects.

665
00:31:14,473 --> 00:31:16,675
The encryption envelope
contains metadata

666
00:31:16,675 --> 00:31:18,610
needed for
the decryption process,

667
00:31:18,610 --> 00:31:21,713
along with the encrypted data
itself.

668
00:31:21,713 --> 00:31:24,316
The data is encrypted
using HPKE,

669
00:31:24,316 --> 00:31:28,019
an encryption scheme
defined in RFC 9180.

670
00:31:28,019 --> 00:31:32,023
Your server will decrypt
this data using its private key.

671
00:31:32,023 --> 00:31:35,327
Once decrypted, you'll get
an mdoc response object.

672
00:31:35,327 --> 00:31:39,364
The mdoc response is defined
in ISO 18013 part five,

673
00:31:39,364 --> 00:31:44,002
the ISO standard for mobile
Driver's Licenses and State IDs.

674
00:31:44,002 --> 00:31:46,638
The mdoc response object
contains the data elements

675
00:31:46,638 --> 00:31:48,573
that you requested.

676
00:31:48,573 --> 00:31:51,076
It also includes a number
of security features

677
00:31:51,076 --> 00:31:52,711
that your server
needs to validate

678
00:31:52,711 --> 00:31:55,413
to ensure that the response
is authentic.

679
00:31:55,413 --> 00:31:57,682
Note that your server
will perform the decryption

680
00:31:57,682 --> 00:31:59,584
and validation itself.

681
00:31:59,584 --> 00:32:02,587
Neither Apple servers nor
the issuing authority's servers

682
00:32:02,587 --> 00:32:04,322
are involved.

683
00:32:04,322 --> 00:32:06,057
Before we can talk
about decryption

684
00:32:06,057 --> 00:32:07,526
and response validation,

685
00:32:07,526 --> 00:32:09,995
we need to talk about
the session transcript.

686
00:32:09,995 --> 00:32:13,131
This is a CBOR structure
that binds a response payload

687
00:32:13,131 --> 00:32:16,168
to a specific request
from a specific app.

688
00:32:16,168 --> 00:32:18,770
Your server will need to build
this structure and use it

689
00:32:18,770 --> 00:32:23,041
during both
decryption and validation.

690
00:32:23,041 --> 00:32:26,478
The session transcript contains
the same nonce and merchant ID

691
00:32:26,478 --> 00:32:29,681
you used earlier in your
PKIdentityRequest,

692
00:32:29,681 --> 00:32:32,184
as well as the team ID
of your developer team

693
00:32:32,184 --> 00:32:35,253
and the SHA256 hash
of your encryption certificate's

694
00:32:35,253 --> 00:32:37,756
public key.

695
00:32:37,756 --> 00:32:39,491
When building
the session transcript,

696
00:32:39,491 --> 00:32:41,793
your server should check
that the inputs you're using

697
00:32:41,793 --> 00:32:43,061
are all valid.

698
00:32:43,061 --> 00:32:45,630
That means the nonce shouldn't
have been used already,

699
00:32:45,630 --> 00:32:47,966
and should be tied
to the current user.

700
00:32:47,966 --> 00:32:50,068
The other values should
match what's expected

701
00:32:50,068 --> 00:32:52,270
on your developer account.

702
00:32:52,270 --> 00:32:55,574
Now let's talk about decrypting
the encrypted data.

703
00:32:55,574 --> 00:32:57,909
You'll need the session
transcript you just created,

704
00:32:57,909 --> 00:33:01,279
along with the metadata
from the encryption envelope.

705
00:33:01,279 --> 00:33:03,849
You'll also need
your private key.

706
00:33:03,849 --> 00:33:04,950
This is the private key

707
00:33:04,950 --> 00:33:07,786
corresponding to the certificate
you setup earlier

708
00:33:07,786 --> 00:33:09,454
in your developer account.

709
00:33:09,454 --> 00:33:12,290
To protect the confidentiality
of user information,

710
00:33:12,290 --> 00:33:15,260
you need to make sure
your private key stays private.

711
00:33:15,260 --> 00:33:17,162
Store it securely
on your server

712
00:33:17,162 --> 00:33:19,331
and never include it
in your app.

713
00:33:19,331 --> 00:33:21,600
If your private key
is ever compromised,

714
00:33:21,600 --> 00:33:25,871
revoke the certificate in your
developer account immediately.

715
00:33:25,871 --> 00:33:27,939
After decrypting
the encrypted data,

716
00:33:27,939 --> 00:33:30,108
you'll receive
an mdoc response object

717
00:33:30,108 --> 00:33:32,277
containing two
cryptographic signatures,

718
00:33:32,277 --> 00:33:34,479
plus the data elements
you requested.

719
00:33:34,479 --> 00:33:37,349
You need to check both
signatures in the mdoc response

720
00:33:37,349 --> 00:33:39,851
before you can use
its data elements.

721
00:33:39,851 --> 00:33:42,921
First, you need to check
the issuer signature.

722
00:33:42,921 --> 00:33:45,090
This is a signature
from the issuing authority

723
00:33:45,090 --> 00:33:46,958
of the user's ID.

724
00:33:46,958 --> 00:33:48,460
By checking this signature,

725
00:33:48,460 --> 00:33:50,662
you're verifying that the data
in the response

726
00:33:50,662 --> 00:33:52,697
came from the real
issuing authority

727
00:33:52,697 --> 00:33:54,599
and wasn't tampered with.

728
00:33:54,599 --> 00:33:57,535
You should check that not only
is the signature valid,

729
00:33:57,535 --> 00:34:01,273
but also that it is signed by
an issuer certificate you trust.

730
00:34:01,273 --> 00:34:03,842
Take a look at the documentation
for more details

731
00:34:03,842 --> 00:34:07,779
about the issuer certificates
used by IDs in Wallet.

732
00:34:07,779 --> 00:34:11,016
Next, you need to verify
the device signature.

733
00:34:11,016 --> 00:34:13,051
This is a signature
created by a key

734
00:34:13,051 --> 00:34:15,954
in the Secure Element
of the user's iPhone.

735
00:34:15,954 --> 00:34:18,156
It proves that the response
you received

736
00:34:18,156 --> 00:34:20,625
came from the same iPhone
that the issuing authority

737
00:34:20,625 --> 00:34:22,994
originally issued the ID to.

738
00:34:22,994 --> 00:34:25,730
Here, you'll need to use
your session transcript again,

739
00:34:25,730 --> 00:34:29,968
along with some information
covered by the issuer signature.

740
00:34:29,968 --> 00:34:32,404
Finally, you're ready
to use the data elements

741
00:34:32,404 --> 00:34:33,905
that you requested.

742
00:34:33,905 --> 00:34:35,407
You should never
use these elements

743
00:34:35,407 --> 00:34:38,710
without first verifying the
issuer and device signatures,

744
00:34:38,710 --> 00:34:41,713
because otherwise you don't know
whether the data you received

745
00:34:41,713 --> 00:34:44,115
is authentic.

746
00:34:44,115 --> 00:34:46,618
And with all those steps
completed, you're done!

747
00:34:46,618 --> 00:34:48,753
Your app has requested
the information,

748
00:34:48,753 --> 00:34:52,691
and your server has decrypted
and verified the response.

749
00:34:52,691 --> 00:34:55,260
You might be wondering
how to test your implementation

750
00:34:55,260 --> 00:34:57,262
if you don't have
an ID in Wallet.

751
00:34:57,262 --> 00:35:01,433
We've provided a few mechanisms
to help you do that.

752
00:35:01,433 --> 00:35:04,269
First, you can test
in the iOS Simulator,

753
00:35:04,269 --> 00:35:07,238
where the API will return
a mock response.

754
00:35:07,238 --> 00:35:09,641
This response is similar
to a real one,

755
00:35:09,641 --> 00:35:12,978
but lacks real signatures.

756
00:35:12,978 --> 00:35:15,480
Similarly, you can use
a test profile

757
00:35:15,480 --> 00:35:18,016
to receive a mock response
on a real iPhone,

758
00:35:18,016 --> 00:35:21,319
even If you don't have an ID
in Wallet on that iPhone.

759
00:35:21,319 --> 00:35:24,956
See the documentation for more
details about how to do this.

760
00:35:24,956 --> 00:35:26,691
Note that your server
should never treat

761
00:35:26,691 --> 00:35:30,495
either of these mock responses
like a real one.

762
00:35:30,495 --> 00:35:32,964
To help you with
your server implementation,

763
00:35:32,964 --> 00:35:36,167
the documentation also
includes an example response,

764
00:35:36,167 --> 00:35:41,439
along with everything you need
to decrypt and validate it.

765
00:35:41,439 --> 00:35:44,376
And that's how you can perform
identity verification

766
00:35:44,376 --> 00:35:47,178
with IDs in Wallet in iOS 16.

767
00:35:47,178 --> 00:35:49,948
We discussed how to use
the API in your app,

768
00:35:49,948 --> 00:35:52,083
how to process the response
on your server,

769
00:35:52,083 --> 00:35:54,886
and how to test
your implementation.

770
00:35:54,886 --> 00:35:57,622
Lais: This year, we introduced
many great new features

771
00:35:57,622 --> 00:35:59,391
to Wallet and Apple Pay.

772
00:35:59,391 --> 00:36:01,760
These include
multi-merchant payments,

773
00:36:01,760 --> 00:36:04,362
improved support
for automatic payments,

774
00:36:04,362 --> 00:36:07,565
order tracking,
and identity verification.

775
00:36:07,565 --> 00:36:09,434
Please check out
the developer documentation

776
00:36:09,434 --> 00:36:10,802
for more information.

777
00:36:10,802 --> 00:36:14,973
David: Thank you for watching,
and have a great WWDC!

778
00:36:14,973 --> 00:36:19,077
♪

