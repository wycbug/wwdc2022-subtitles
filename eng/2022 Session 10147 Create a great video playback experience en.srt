1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,710 --> 00:00:11,678
Jake: Hi, my name's Jake.

3
00:00:11,712 --> 00:00:13,313
I'm an engineer on the AVKit team,

4
00:00:13,347 --> 00:00:16,583
and welcome to Creating
a Great Video Playback Experience.

5
00:00:16,617 --> 00:00:21,021
In iOS and iPadOS 16,
we've built a completely new media player

6
00:00:21,054 --> 00:00:22,389
from the ground up

7
00:00:22,422 --> 00:00:24,658
bringing a whole new look and feel,

8
00:00:24,691 --> 00:00:27,594
designed to keep the focus
on the content

9
00:00:27,628 --> 00:00:30,364
and fit within a broader spectrum of apps.

10
00:00:30,397 --> 00:00:33,166
We've also built in
many novel interaction models

11
00:00:33,200 --> 00:00:37,905
that make using this new media player
feel even more intuitive and seamless,

12
00:00:37,938 --> 00:00:40,741
and we think you're are gonna love it.

13
00:00:40,774 --> 00:00:45,379
In this session, we'll take a deep dive
into the new system media player.

14
00:00:45,412 --> 00:00:49,449
We'll learn how to design
amazing playback experiences.

15
00:00:49,483 --> 00:00:51,952
We'll see some exciting new visual
intelligence features

16
00:00:51,985 --> 00:00:54,655
coming to macOS and iOS.

17
00:00:54,688 --> 00:00:56,990
I'll introduce
an all new interstitials experience

18
00:00:57,024 --> 00:00:59,092
coming with the new media player

19
00:00:59,126 --> 00:01:02,930
and go over some new APIs
we're bring over from tvOS.

20
00:01:02,963 --> 00:01:06,133
And lastly,
we'll go over a new feature in AVKit:

21
00:01:06,166 --> 00:01:08,869
selectable playback speeds.

22
00:01:08,902 --> 00:01:12,940
For tvOS 15.0
we redesigned the system player,

23
00:01:12,973 --> 00:01:14,608
bringing a whole new look and feel,

24
00:01:14,641 --> 00:01:17,611
as well as a host of new features
and usability improvements

25
00:01:17,644 --> 00:01:19,513
to the system player.

26
00:01:19,546 --> 00:01:21,648
Well, we heard your requests.

27
00:01:21,682 --> 00:01:25,919
I'm happy to say, we've revamped
the iOS system player as well.

28
00:01:25,953 --> 00:01:28,555
We've completely redesigned
the native media player,

29
00:01:28,589 --> 00:01:31,191
adopting the look and feel
of the tvOS player,

30
00:01:31,225 --> 00:01:35,095
but reimagined for a touch first device.

31
00:01:35,128 --> 00:01:37,631
We've removed the chrome
across the board,

32
00:01:37,664 --> 00:01:41,268
allowing the interface to feel native
within broader spectrum of apps

33
00:01:41,301 --> 00:01:44,304
and bringing a more modern feel
to the player.

34
00:01:44,338 --> 00:01:47,307
Let's dig deeper into some
of the changes we've made.

35
00:01:47,341 --> 00:01:51,712
First, we've brought the play/pause
and skip controls front and center

36
00:01:51,745 --> 00:01:54,681
to make them even easier to interact with.

37
00:01:54,715 --> 00:01:58,952
We've also adjusted the skip interval
from 15 seconds down to 10

38
00:01:58,986 --> 00:02:03,323
making it easier to track how far
you've jumped with consecutive skips.

39
00:02:03,357 --> 00:02:06,193
Next, we made some significant
improvements to the usability

40
00:02:06,226 --> 00:02:08,128
of the timeline as well.

41
00:02:08,161 --> 00:02:12,566
We're removing the slider knob
marking the timeline's current position.

42
00:02:12,599 --> 00:02:15,269
Instead, the timeline can now
be interacted with

43
00:02:15,302 --> 00:02:17,471
from anywhere along the slider.

44
00:02:17,504 --> 00:02:20,140
Drags no longer needs to begin
at the current time marker.

45
00:02:20,174 --> 00:02:24,344
This makes it even easier to find
exactly where you want to go.

46
00:02:24,378 --> 00:02:26,446
We've also replaced
the video aspect control

47
00:02:26,480 --> 00:02:29,016
with a more intuitive
pinch to zoom gesture,

48
00:02:29,049 --> 00:02:30,717
which I'll show in a moment.

49
00:02:30,751 --> 00:02:35,155
And of course, the new UI looks great
for portrait content as well.

50
00:02:37,257 --> 00:02:40,861
On iPadOS, the player
integrates seamlessly into the system

51
00:02:40,894 --> 00:02:43,797
with full support for keyboards,
trackpads,

52
00:02:43,830 --> 00:02:47,367
mice, game controllers, and much more!

53
00:02:47,401 --> 00:02:50,470
We also added a number of new ways
to interact with the controls

54
00:02:50,504 --> 00:02:53,807
that make navigating the content
and some common interactions

55
00:02:53,841 --> 00:02:56,109
even easier and more intuitive.

56
00:02:56,143 --> 00:02:58,145
Let's take a look at these.

57
00:02:58,178 --> 00:03:01,882
First, we've added a new way
to change the video's fill aspect.

58
00:03:01,915 --> 00:03:05,886
You can now use a pinch gesture
to move through the available zoom levels.

59
00:03:05,919 --> 00:03:09,990
Pinching in will bring the video within
the safe area of the display.

60
00:03:10,023 --> 00:03:13,627
Pinching out will zoom the video
in to fully fill the display.

61
00:03:13,660 --> 00:03:17,631
Next, we stream lined one of
the most common interactions,

62
00:03:17,664 --> 00:03:19,266
play/pause.

63
00:03:19,299 --> 00:03:21,468
You can now tap the center of the display,

64
00:03:21,502 --> 00:03:25,138
even while the controls are hidden
to play and pause the video.

65
00:03:25,172 --> 00:03:29,376
And lastly, we've added a new way
to navigate through the media timeline.

66
00:03:29,409 --> 00:03:32,880
You can now scroll through the timeline
from anywhere over the video

67
00:03:32,913 --> 00:03:37,050
using the same interactions
we all know and love in scroll views.

68
00:03:37,084 --> 00:03:39,253
As you begin to scroll
through the video frames,

69
00:03:39,286 --> 00:03:43,924
the interface drops away,
leaving only the most relevant UI,

70
00:03:43,957 --> 00:03:47,160
allowing the focus to stay on the content.

71
00:03:47,194 --> 00:03:50,931
We've also brought over some new features
from the tvOS player.

72
00:03:50,964 --> 00:03:54,134
AVPlayerViewController now supports
displaying a content title,

73
00:03:54,168 --> 00:03:58,605
subtitle, and description natively
from within the fullscreen UI.

74
00:03:59,406 --> 00:04:02,976
You can provide strings for each of these
by passing AVMetadataItems

75
00:04:03,010 --> 00:04:04,611
to an existing AVKit API.

76
00:04:04,645 --> 00:04:07,314
Let's see how this is done.

77
00:04:07,347 --> 00:04:11,218
By default, the title, subtitle,
and content description will be pulled

78
00:04:11,251 --> 00:04:13,287
from the media's metadata.

79
00:04:13,320 --> 00:04:16,757
However, the values in the media
can be overridden if needed

80
00:04:16,790 --> 00:04:19,426
through the externalMetadata API
on AVPlayerItem.

81
00:04:20,961 --> 00:04:24,131
A title can be added
by creating an AVMetadataItem

82
00:04:24,164 --> 00:04:26,900
with the identifier commonIdentifierTitle

83
00:04:26,934 --> 00:04:30,838
and adding it to the playerItems
externalMetadata property.

84
00:04:30,871 --> 00:04:35,342
Titles should be short and descriptive
to avoid cluttering the UI.

85
00:04:35,375 --> 00:04:39,780
Similarly, here we've added a subtitle
by creating an AVMetadataItem

86
00:04:39,813 --> 00:04:44,484
with the identifier
.iTunesMetadataTrackSubtitle.

87
00:04:44,518 --> 00:04:47,087
The subtitle will be displayed
above the content title

88
00:04:47,120 --> 00:04:49,790
and should be a few words
describing the content.

89
00:04:51,358 --> 00:04:53,126
Lastly, a description can be added

90
00:04:53,160 --> 00:04:56,964
with the identifier
.commonIdentifierDescription.

91
00:04:56,997 --> 00:05:00,901
This will display a chevron
to the right of the title and subtitle.

92
00:05:00,934 --> 00:05:05,973
Selecting the title will display the info
panel containing the content description.

93
00:05:06,006 --> 00:05:11,011
The description should be a few sentences
with more info about the content.

94
00:05:11,044 --> 00:05:13,714
Tapping anywhere
will dismiss the info panel.

95
00:05:15,816 --> 00:05:19,219
So to wrap up,
we've revamped the iOS system player

96
00:05:19,253 --> 00:05:23,924
with an all new look and feel, with new
streamlined touch first interaction models

97
00:05:23,957 --> 00:05:26,827
as well as a host of other improvements.

98
00:05:26,860 --> 00:05:29,429
Using AVPlayerViewController in your app,

99
00:05:29,463 --> 00:05:32,132
you'll have the full support
of the system player–

100
00:05:32,165 --> 00:05:36,403
support for Picture in Picture,
SharePlay, Visual Analysis,

101
00:05:36,436 --> 00:05:40,240
Native Catalyst Support,
New hardware and feature support,

102
00:05:40,274 --> 00:05:42,276
and much, much more.

103
00:05:42,309 --> 00:05:46,780
And of course, all of this
you get with just a few lines of code.

104
00:05:46,813 --> 00:05:52,653
Now, let's talk about how you can design
amazing playback experiences in your apps.

105
00:05:52,686 --> 00:05:55,255
When we set out to redesign
the system media player,

106
00:05:55,289 --> 00:05:57,958
we took a step back
from what we had built in the past

107
00:05:57,991 --> 00:05:59,826
and what we had built for other platforms

108
00:05:59,860 --> 00:06:04,431
and we asked ourselves,
"What makes for a good user experience?"

109
00:06:04,464 --> 00:06:06,767
We wanted to share this process with you;

110
00:06:06,800 --> 00:06:09,503
how we've gone about designing
the new players,

111
00:06:09,536 --> 00:06:11,839
why we designed them the way we did,

112
00:06:11,872 --> 00:06:15,909
and what we think defines
an amazing media experience.

113
00:06:15,943 --> 00:06:20,314
We think there are three things
that make a media experience great.

114
00:06:20,347 --> 00:06:23,016
The experience should be intuitive.

115
00:06:23,050 --> 00:06:26,854
It should feel easy, familiar, natural,

116
00:06:26,887 --> 00:06:29,656
even if you've never used it.

117
00:06:29,690 --> 00:06:31,725
It should be tightly integrated,

118
00:06:31,758 --> 00:06:35,262
both within your app and with the system.

119
00:06:35,295 --> 00:06:38,699
And lastly, it should be content forward.

120
00:06:38,732 --> 00:06:42,302
At the end of the day,
people are there to experience the media

121
00:06:42,336 --> 00:06:46,473
and your apps and designs
should reflect that.

122
00:06:46,507 --> 00:06:48,876
Now let's dig deeper into these three,

123
00:06:48,909 --> 00:06:52,779
starting with making your experience
intuitive.

124
00:06:52,813 --> 00:06:55,916
Oftentimes, when an app feels intuitive

125
00:06:55,949 --> 00:06:59,453
it can be hard to put your finger on why.

126
00:06:59,486 --> 00:07:02,289
You just know it when you see it.

127
00:07:02,322 --> 00:07:04,157
So what actually makes an interface

128
00:07:04,191 --> 00:07:06,927
or an experience feel intuitive?

129
00:07:06,960 --> 00:07:10,063
And how can you design for it?

130
00:07:10,097 --> 00:07:12,866
We think it starts with familiarity.

131
00:07:12,900 --> 00:07:17,704
When you can draw on your past experiences
to help understand something new,

132
00:07:17,738 --> 00:07:19,540
that's intuitive.

133
00:07:19,573 --> 00:07:22,242
When you don't need an explanation
of how it works

134
00:07:22,276 --> 00:07:24,278
or even need to think about how it works–

135
00:07:24,311 --> 00:07:28,115
it just works exactly as you expect.

136
00:07:29,483 --> 00:07:35,255
Every one of us builds experiences daily
interacting technology and the real world.

137
00:07:35,289 --> 00:07:38,759
Both of these are great sources
of experiential familiarity

138
00:07:38,792 --> 00:07:43,297
and is often where we started when
designing the new system media players.

139
00:07:43,330 --> 00:07:46,266
There are many types of experiences
to draw intuition from,

140
00:07:46,300 --> 00:07:48,635
but I want to focus on two;

141
00:07:48,669 --> 00:07:53,507
the two that we most often relied on
when designing the system media players.

142
00:07:53,540 --> 00:07:55,542
Platform paradigms

143
00:07:55,576 --> 00:07:57,444
and the real world.

144
00:07:57,477 --> 00:08:02,583
The first comes from our experiences
using technology every day.

145
00:08:02,616 --> 00:08:05,853
Years of using TV remotes tells you
that the arrow keys

146
00:08:05,886 --> 00:08:08,488
move focus left and right.

147
00:08:08,522 --> 00:08:13,694
Similarly, tapping a volume button on
a touch first device will mute the audio.

148
00:08:13,727 --> 00:08:17,464
These interactions feel intuitive
because they're familiar.

149
00:08:17,497 --> 00:08:20,968
You can use these types of familiar
interactions in your media experiences

150
00:08:21,001 --> 00:08:23,136
to help make your apps feel
more intuitive,

151
00:08:23,170 --> 00:08:26,273
engaging, and even natural to use.

152
00:08:26,306 --> 00:08:30,010
Conversely, finding unfamiliar
or unexpected interactions

153
00:08:30,043 --> 00:08:34,648
can be confusing
and sometimes even frustrating.

154
00:08:34,681 --> 00:08:38,752
Let's look at some examples where we drew
on this type of platform familiarity

155
00:08:38,785 --> 00:08:41,255
in the system players.

156
00:08:41,288 --> 00:08:44,658
A great example of this
is the presentation and dismissal model

157
00:08:44,691 --> 00:08:46,793
of the iOS system player.

158
00:08:46,827 --> 00:08:50,297
The player animates its presentation
in from the bottom,

159
00:08:50,330 --> 00:08:55,335
giving a subtle hit that the player
can be dismissed by pushing it back down.

160
00:08:55,369 --> 00:08:59,273
We see this model used extensively
across our touch first devices.

161
00:08:59,306 --> 00:09:02,142
For example, the now playing UI in Music

162
00:09:02,176 --> 00:09:03,777
presents from the mini bar at the bottom

163
00:09:03,810 --> 00:09:08,048
and can be dismissed
with an interactive swipe downwards.

164
00:09:08,081 --> 00:09:11,084
In some cases though,
we may draw on experiences

165
00:09:11,118 --> 00:09:14,922
not from our understanding of technology,
but from everyday life.

166
00:09:16,323 --> 00:09:20,027
These types of experiences
come from the real world.

167
00:09:20,060 --> 00:09:22,763
Millions of years of evolution
have helped us develop

168
00:09:22,796 --> 00:09:26,600
a deep instinctual understanding
of natural processes.

169
00:09:26,633 --> 00:09:28,235
You can tap in to this understanding

170
00:09:28,268 --> 00:09:32,172
to help build familiar and intuitive
experiences in your software.

171
00:09:32,206 --> 00:09:36,777
A great example of this is our new
scrolling gesture in the iOS player.

172
00:09:36,810 --> 00:09:39,413
Similar to rolling a toy car
across a table,

173
00:09:39,446 --> 00:09:42,216
each swipe over the video has momentum,

174
00:09:42,249 --> 00:09:46,186
continuing the movement of the timeline
past the direct interaction

175
00:09:46,220 --> 00:09:49,990
until the timeline slowly comes to a stop.

176
00:09:50,023 --> 00:09:52,459
The momentum here alone
builds an association

177
00:09:52,492 --> 00:09:54,995
with real world moving objects.

178
00:09:55,028 --> 00:09:59,499
This association helps you discover
the subtle depths of the interaction.

179
00:09:59,533 --> 00:10:02,402
Just like the toy car,
I can make it go faster

180
00:10:02,436 --> 00:10:04,471
by pushing it harder,

181
00:10:04,505 --> 00:10:06,773
or pushing it several times in a row.

182
00:10:06,807 --> 00:10:10,210
And if I grab it, it stops.

183
00:10:10,244 --> 00:10:15,148
It feels natural because it is natural.

184
00:10:15,182 --> 00:10:16,817
And the best part about this is,

185
00:10:16,850 --> 00:10:21,121
if you use the system players,
your app will feel intuitive.

186
00:10:21,154 --> 00:10:24,892
All the natural interactions
we've built and inherit intuition

187
00:10:24,925 --> 00:10:27,995
and familiarity people have
with the system player,

188
00:10:28,028 --> 00:10:30,597
all of the design paradigms
optimized in a way

189
00:10:30,631 --> 00:10:35,669
that tvOS, iOS, and macOS users
will understand natively–

190
00:10:35,702 --> 00:10:39,540
all of this you get
with just a few lines of code.

191
00:10:40,641 --> 00:10:46,313
Building an intuitive design is one aspect
of making your media experience great,

192
00:10:46,346 --> 00:10:50,217
but without all the features
and integration points people expect,

193
00:10:50,250 --> 00:10:55,088
your app can inadvertently pull focus
away from the content.

194
00:10:55,122 --> 00:11:00,027
This leads us to the second crucial aspect
of an amazing media experience–

195
00:11:00,527 --> 00:11:02,329
tight integration.

196
00:11:02,362 --> 00:11:06,600
When an experience is tightly integrated,
all the functionality,

197
00:11:06,633 --> 00:11:11,271
features, and devices
people expect to work just work.

198
00:11:11,305 --> 00:11:16,510
And importantly, they work in a way
that's consistent with their expectations.

199
00:11:16,543 --> 00:11:19,213
As people use their devices,
they become accustomed

200
00:11:19,246 --> 00:11:21,782
to relying on the features
of the platform.

201
00:11:21,815 --> 00:11:24,918
For example,
pulling down the Control Center

202
00:11:24,952 --> 00:11:30,390
and seeing your content populated
in the Now Playing media controls,

203
00:11:30,424 --> 00:11:33,894
or responding to a notification
while watching a TV show,

204
00:11:33,927 --> 00:11:38,432
and having the video continue smoothly
into Picture in Picture.

205
00:11:38,465 --> 00:11:41,268
Building this tight system integration
into your app

206
00:11:41,301 --> 00:11:46,173
is key to making your experience
feel seamless.

207
00:11:46,206 --> 00:11:48,709
Your app should feel like
a native part of the system

208
00:11:48,742 --> 00:11:52,679
and we work hard to provide you with
the tools needed to make that possible.

209
00:11:52,713 --> 00:11:56,350
This includes things like
CoreSpotlight integration

210
00:11:56,383 --> 00:11:58,652
to make your content searchable,

211
00:11:58,685 --> 00:12:03,257
Now Playing info so your content
can appear in the system media UIs,

212
00:12:03,290 --> 00:12:07,160
MediaRemote commands allowing your app
to respond to things like

213
00:12:07,194 --> 00:12:10,864
the play button being pressed
on a keyboard or TV remote.

214
00:12:10,898 --> 00:12:15,636
We even provide the ability to integrate
your media directly into the TV app,

215
00:12:15,669 --> 00:12:19,072
delivering your content
to an even wider audience.

216
00:12:19,106 --> 00:12:21,975
In addition to making your apps
feel native,

217
00:12:22,009 --> 00:12:26,079
it's important to provide
all the features that people love.

218
00:12:26,113 --> 00:12:31,018
Features like AirPlay, SharePlay,
and Picture in Picture.

219
00:12:31,051 --> 00:12:33,353
We think people will expect these features

220
00:12:33,387 --> 00:12:38,292
and providing them
enhances the experience in using your app.

221
00:12:38,325 --> 00:12:41,161
People will use your app
across many devices

222
00:12:41,195 --> 00:12:43,630
and even more input formats.

223
00:12:43,664 --> 00:12:46,266
Providing support for all these is crucial

224
00:12:46,300 --> 00:12:50,237
in ensuring your experience
is accessible to everyone.

225
00:12:50,270 --> 00:12:52,840
This is particularly important on tvOS,

226
00:12:52,873 --> 00:12:55,809
where supporting all available remotes
is critical

227
00:12:55,843 --> 00:12:59,012
to ensuring everyone can use your app.

228
00:12:59,046 --> 00:13:03,917
This is one reason we always recommend
using the system media player on tvOS.

229
00:13:03,951 --> 00:13:08,555
Your apps should ensure a fluid experience
with all TV remotes, keyboards,

230
00:13:08,589 --> 00:13:12,659
trackpads, game controllers,
and headphone controls.

231
00:13:12,693 --> 00:13:15,329
Additionally,
you should ensure your app's UI elements

232
00:13:15,362 --> 00:13:17,297
are drawn within the screen's safe area

233
00:13:17,331 --> 00:13:22,269
to avoid collision with rounded corners
or notches in the display.

234
00:13:22,302 --> 00:13:25,839
We recognize building support
for all of these integration points,

235
00:13:25,873 --> 00:13:30,577
features, and hardware configurations
can be daunting.

236
00:13:30,611 --> 00:13:33,280
This is why we built
AVPlayerViewController,

237
00:13:33,313 --> 00:13:35,415
so with just a few lines of code,

238
00:13:35,449 --> 00:13:39,052
anyone using your app
can have an amazing media experience.

239
00:13:40,621 --> 00:13:42,689
And all of this leads us, lastly,

240
00:13:42,723 --> 00:13:46,660
to the most important aspect in designing
a media experience;

241
00:13:46,693 --> 00:13:49,329
making it content forward.

242
00:13:49,363 --> 00:13:52,132
This should be the primary goal
in your design,

243
00:13:52,165 --> 00:13:56,603
and is what we considering the defining
aspect of a great media experience.

244
00:13:56,637 --> 00:13:58,605
When your app feels intuitive,

245
00:13:58,639 --> 00:14:00,574
when all of the integration points

246
00:14:00,607 --> 00:14:04,845
and all features people expect
just work,

247
00:14:04,878 --> 00:14:07,814
you bring your content into focus,

248
00:14:07,848 --> 00:14:10,817
and everything else
fades into the background.

249
00:14:12,152 --> 00:14:14,454
There are a few things
you should keep in mind, though,

250
00:14:14,488 --> 00:14:17,057
specific to designing your content.

251
00:14:17,090 --> 00:14:20,360
Make sure you provide
all of the appropriate metadata,

252
00:14:20,394 --> 00:14:23,697
both in your interface and to the system.

253
00:14:23,730 --> 00:14:26,667
Providing this info helps give context
to your media

254
00:14:26,700 --> 00:14:29,169
and allows the system to provide
better experiences

255
00:14:29,203 --> 00:14:31,872
in Control Center and the Lock Screen.

256
00:14:31,905 --> 00:14:35,075
This includes things like
a title and subtitle,

257
00:14:35,108 --> 00:14:39,146
a description, thumbnail,
season and episode information,

258
00:14:39,179 --> 00:14:41,582
or start and end dates for live streams.

259
00:14:41,615 --> 00:14:45,719
Always keep your media
in its original aspect ratio.

260
00:14:45,752 --> 00:14:48,722
This allows the system
to position your videos on screen

261
00:14:48,755 --> 00:14:50,891
in the correct location.

262
00:14:50,924 --> 00:14:55,762
Letter boxing your content
can lead to experiences like this

263
00:14:55,796 --> 00:14:57,831
or this.

264
00:14:57,865 --> 00:15:02,269
Make sure to include support for
the latest media standards where possible.

265
00:15:02,302 --> 00:15:06,240
For example, HDR and Dolby Atmos.

266
00:15:06,273 --> 00:15:09,910
And lastly, make sure to include
audio and subtitle tracks

267
00:15:09,943 --> 00:15:11,879
for multiple languages

268
00:15:11,912 --> 00:15:15,315
so your media is accessible
to as many people as possible.

269
00:15:17,384 --> 00:15:20,654
If there is one thing to take away
from this section of the talk,

270
00:15:20,687 --> 00:15:24,291
it's that you should keep the focus
on your content.

271
00:15:24,324 --> 00:15:28,362
We've built the system media players,
provided through AVPlayerViewController,

272
00:15:28,395 --> 00:15:32,699
to make that goal as easy as possible
for you as a developer.

273
00:15:32,733 --> 00:15:36,937
Now, let's go over some new features
we've added to AVPlayerViewController,

274
00:15:36,970 --> 00:15:40,040
starting with the new
visual intelligence features.

275
00:15:40,073 --> 00:15:45,812
In this example, we have a video paused
on a frame with a code snippet in it.

276
00:15:45,846 --> 00:15:48,615
Long pressing the code snippet
will select it.

277
00:15:48,649 --> 00:15:53,687
You can then copy and paste it
directly into playgrounds to try it out.

278
00:15:53,720 --> 00:15:55,956
This works great for macOS as well.

279
00:15:55,989 --> 00:15:59,293
Hovering your cursor over
the same code will show the I-beam

280
00:15:59,326 --> 00:16:01,595
indicating the text is selectable.

281
00:16:01,628 --> 00:16:03,997
You can then use your cursor
to highlight it

282
00:16:04,031 --> 00:16:06,767
or use CMD+A to Select All.

283
00:16:06,800 --> 00:16:10,938
We're introducing a new API
to go along with this functionality.

284
00:16:10,971 --> 00:16:16,009
Available in AVPlayerViewController
on iOS and AVPlayerView on macOS,

285
00:16:16,043 --> 00:16:19,913
allowsVideoFrameAnalysis
will toggle this feature.

286
00:16:19,947 --> 00:16:24,151
This will be enabled by for all apps
linking against the new SDKs.

287
00:16:24,184 --> 00:16:26,987
While allowsVideoFrameAnalysis
is set to true,

288
00:16:27,020 --> 00:16:28,755
and once the media is paused,

289
00:16:28,789 --> 00:16:33,927
AVKit will begin analyzing the current
video frame after a set period.

290
00:16:33,961 --> 00:16:36,597
Note that we will not analyze frames
while scrolling,

291
00:16:36,630 --> 00:16:38,131
for performance reasons,

292
00:16:38,165 --> 00:16:40,767
or for FairPlay protected content.

293
00:16:40,801 --> 00:16:46,039
In general, we think people will expect
this functionality in most situations.

294
00:16:46,073 --> 00:16:48,242
However, there are some instances

295
00:16:48,275 --> 00:16:50,878
where you may want to disable
visual analysis

296
00:16:50,911 --> 00:16:54,414
as is appropriate in your application.

297
00:16:54,448 --> 00:16:57,518
For example, in performance critical
applications,

298
00:16:57,551 --> 00:17:00,120
such as a collection view of videos,

299
00:17:00,153 --> 00:17:03,257
or in cases where interaction
with the video is not expected,

300
00:17:03,290 --> 00:17:05,459
like splash screens.

301
00:17:05,492 --> 00:17:08,495
For more info on how to integrate the
visual intelligence feature set

302
00:17:08,529 --> 00:17:12,866
into your apps,
see our related talks on VisionKit.

303
00:17:12,900 --> 00:17:17,971
Next, let's take a look some improvements
we made to interstitials.

304
00:17:18,005 --> 00:17:20,807
Up until now,
interstitials were only supported

305
00:17:20,841 --> 00:17:23,677
in AVPlayerViewController on tvOS.

306
00:17:23,710 --> 00:17:28,482
Well, I'm happy to announce we're bringing
the same level of support to iOS as well.

307
00:17:28,515 --> 00:17:32,186
Interstitials,
either in the stream or defined locally

308
00:17:32,219 --> 00:17:33,987
through AVPlayerInterstitialEvents,

309
00:17:34,021 --> 00:17:36,757
will now be marked along the timeline.

310
00:17:36,790 --> 00:17:40,527
When the timeline hits a marker,
we'll begin playing the interstitial.

311
00:17:40,561 --> 00:17:44,698
If your interstitials are already
fully defined within your HLS playlist,

312
00:17:44,731 --> 00:17:46,934
you'll get this behavior automatically–

313
00:17:46,967 --> 00:17:49,436
no adoption required.

314
00:17:49,469 --> 00:17:53,373
If not, or if you app requires
some more custom behavior,

315
00:17:53,407 --> 00:17:56,310
we're introducing some new API as well.

316
00:17:56,343 --> 00:18:01,481
AVInterstitialTimeRange is being brought
over from tvOS to iOS.

317
00:18:01,515 --> 00:18:05,085
These will be populated automatically
into the AVPlayerItem property,

318
00:18:05,118 --> 00:18:07,221
interstitialTimeRanges,

319
00:18:07,254 --> 00:18:10,657
which is also being brought over
from tvOS.

320
00:18:10,691 --> 00:18:13,560
When using an HLS stream,
an AVInterstitialTimeRange

321
00:18:13,594 --> 00:18:17,097
will be synthesized
for each interstitial in the stream.

322
00:18:17,130 --> 00:18:20,934
When creating interstitial events locally
through the AVFoundation API,

323
00:18:20,968 --> 00:18:23,103
an AVInterstitialTimeRange
will be synthesized

324
00:18:23,136 --> 00:18:26,740
for each AVPlayerInterstitialEvent.

325
00:18:26,773 --> 00:18:28,842
Unlike on tvOS however,

326
00:18:28,876 --> 00:18:32,446
interstitialTimeRanges
is a read-only property.

327
00:18:32,479 --> 00:18:35,816
Interstitials will either need to be
defined within the HLS stream

328
00:18:35,849 --> 00:18:38,385
or through AVPlayerInterstitialEvents.

329
00:18:38,418 --> 00:18:41,488
For those migrating
their support from their tvOS apps,

330
00:18:41,522 --> 00:18:46,827
this is in essence equivalent to setting
translatesPlayerInterstitialEvents to yes.

331
00:18:47,761 --> 00:18:52,533
We're also bringing over two
delegate methods from tvOS as well.

332
00:18:52,566 --> 00:18:55,068
These can be used to know
when an interstitial has begun

333
00:18:55,102 --> 00:18:57,538
or ended playback.

334
00:18:57,571 --> 00:19:00,440
Let's see how we can use these to APIs
to add a skip button

335
00:19:00,474 --> 00:19:03,043
for a pre-roll ad on iOS.

336
00:19:03,076 --> 00:19:05,979
First, we'll create an
AVPlayerInterstitialEventController

337
00:19:06,013 --> 00:19:08,549
for the primary media's player.

338
00:19:08,582 --> 00:19:12,052
Next, we'll create an interstitial event.

339
00:19:12,085 --> 00:19:14,288
We'll define some restrictions for it.

340
00:19:14,321 --> 00:19:17,357
These restrictions prevent seeking
within the interstitial

341
00:19:17,391 --> 00:19:20,761
and prevent skipping past
the interstitial.

342
00:19:20,794 --> 00:19:24,765
Then we'll add the interstitial
to the event controller.

343
00:19:24,798 --> 00:19:29,670
And lastly, we can implement the new
willPresentInterstitial delegate callback

344
00:19:29,703 --> 00:19:33,307
to bring up an ad skip button
after a set interval.

345
00:19:33,340 --> 00:19:36,944
And once the button is pressed,
we'll cancel the interstitial.

346
00:19:36,977 --> 00:19:38,979
It's that easy.

347
00:19:39,012 --> 00:19:42,950
Note that when adding any custom
UI elements to an AVPlayerViewController,

348
00:19:42,983 --> 00:19:45,185
such as this ad skip button,

349
00:19:45,219 --> 00:19:47,421
always make sure to add to them
as subviews

350
00:19:47,454 --> 00:19:49,423
of the contentOverlayView.

351
00:19:49,456 --> 00:19:51,892
To learn more about how
you can integrate your interstitials

352
00:19:51,925 --> 00:19:54,061
right into your HLS playlists

353
00:19:54,094 --> 00:19:57,231
or how you can use
the AVFoundation interstitials API,

354
00:19:57,264 --> 00:20:02,436
check out our related talks on exploring
HLS dynamic pre-rolls and mid-rolls.

355
00:20:02,469 --> 00:20:06,940
Now we'll go over a new feature we've
added this year across all our platforms;

356
00:20:06,974 --> 00:20:09,676
native support for playback speed control.

357
00:20:09,710 --> 00:20:12,079
Both AVPlayerView
and AVPlayerViewController

358
00:20:12,112 --> 00:20:16,717
can now optionally show a playback speed
menu using some new API we've added.

359
00:20:18,185 --> 00:20:22,523
We're making this available
on macOS, iOS, and tvOS.

360
00:20:22,556 --> 00:20:25,058
Let's take a look at what this looks like.

361
00:20:25,092 --> 00:20:29,563
On tvOS, you'll see a new control
in the transport bar.

362
00:20:29,596 --> 00:20:32,599
Selecting the control will display
a list of the available playback speeds

363
00:20:32,633 --> 00:20:34,968
to choose from.

364
00:20:35,002 --> 00:20:39,873
On iOS, this menu will appear
in the transport control overflow menu.

365
00:20:39,907 --> 00:20:45,212
And similarly, on macOS, the control
will appear in the overflow menu.

366
00:20:45,245 --> 00:20:49,816
All apps linking against the new iOS,
macOS, and tvOS SDKs

367
00:20:49,850 --> 00:20:52,119
will get this functionality automatically

368
00:20:52,152 --> 00:20:55,355
with no additional changes required.

369
00:20:55,389 --> 00:20:57,891
However, depending on your use case,

370
00:20:57,925 --> 00:21:01,495
some applications may want to modify
the list of speeds,

371
00:21:01,528 --> 00:21:05,632
programmatically select a speed,
or disable the menu entirely.

372
00:21:05,666 --> 00:21:08,869
To accommodate these use cases,
we've added some new APIs

373
00:21:08,902 --> 00:21:11,939
to AVPlayerView
and AVPlayerViewController.

374
00:21:11,972 --> 00:21:13,273
Let's take a look at these.

375
00:21:14,875 --> 00:21:20,514
First, we've added a new class in AVKit–
AVPlaybackSpeed.

376
00:21:20,547 --> 00:21:23,817
AVPlaybackSpeeds represent
user selectable speed options

377
00:21:23,851 --> 00:21:27,120
in a playback UI
and they have three properties.

378
00:21:27,154 --> 00:21:30,157
A rate value, defined on initialized,

379
00:21:30,190 --> 00:21:34,127
which will be set on the player
when the playback speed is selected.

380
00:21:34,161 --> 00:21:37,164
A localized name,
used to represent the playback speed

381
00:21:37,197 --> 00:21:39,533
within the accessibility system

382
00:21:39,566 --> 00:21:42,669
For example,
a speed of 2.5 might use a localizedName

383
00:21:42,703 --> 00:21:45,172
of "Two and a half times speeds."

384
00:21:45,205 --> 00:21:47,207
And a localized numeric name.

385
00:21:47,241 --> 00:21:50,010
This value is synthesized
from the rate property

386
00:21:50,043 --> 00:21:53,680
and will be the String displayed
in the playback speed menu

387
00:21:53,714 --> 00:21:56,016
If your app requires a custom
playback speed menu

388
00:21:56,049 --> 00:21:59,653
external to the player,
use this string to represent the speed.

389
00:22:01,021 --> 00:22:05,025
Lastly, AVPlaybackSpeed defines a list
of system default speeds

390
00:22:05,058 --> 00:22:08,362
that should be used whenever possible.

391
00:22:08,395 --> 00:22:12,799
You can use AVPlaybackSpeed in conjunction
with some new API on AVPlayerView

392
00:22:12,833 --> 00:22:17,938
and AVPlayerViewController to adapt
this feature to fit within your app.

393
00:22:17,971 --> 00:22:23,076
The speeds property allows defining
a custom list of playback speeds.

394
00:22:23,110 --> 00:22:26,680
By default this property will be set
to the AVPlaybackSpeed

395
00:22:26,713 --> 00:22:29,082
systemDefaultSpeeds list.

396
00:22:29,116 --> 00:22:32,953
Setting this to an empty list
will hide the menu.

397
00:22:32,986 --> 00:22:37,858
The selected speed property will return
the speed that's currently active.

398
00:22:37,891 --> 00:22:41,762
And lastly, the selectSpeed function
allows programmatic selection

399
00:22:41,795 --> 00:22:44,231
of the current speed.

400
00:22:44,264 --> 00:22:46,133
Note that you should only
use this function

401
00:22:46,166 --> 00:22:50,871
in response to explicit selection of
the speed outside of the player UI.

402
00:22:50,904 --> 00:22:54,808
Never implicitly override
the chosen playback speed.

403
00:22:54,842 --> 00:22:58,145
Let's take a look at an example.

404
00:22:58,178 --> 00:23:00,647
Here we're creating
a AVPlayerViewController

405
00:23:00,681 --> 00:23:02,583
and presenting it.

406
00:23:02,616 --> 00:23:07,287
By default this will use the system
provided list of playback speeds.

407
00:23:07,321 --> 00:23:11,625
You can add a new speed to the menu
by creating an AVPlaybackSpeed

408
00:23:11,658 --> 00:23:15,829
and appending it to the list of speeds
in AVPlayerViewController.

409
00:23:15,863 --> 00:23:20,601
We can also disable the menu
by setting an empty list of speeds.

410
00:23:20,634 --> 00:23:23,270
It's as easy as that.

411
00:23:23,303 --> 00:23:27,708
Note though, you should always call
AVPlayer play() to begin playback.

412
00:23:27,741 --> 00:23:30,744
Never start playback
by calling setRate:1.0,

413
00:23:30,777 --> 00:23:34,348
as the selected rate might not be 1.0.

414
00:23:34,381 --> 00:23:37,985
And with that,
I'd like to wrap up the session.

415
00:23:38,018 --> 00:23:41,688
We saw the new
redesigned iOS system player.

416
00:23:41,722 --> 00:23:46,026
We heard how you can design
amazing playback experiences of your own.

417
00:23:46,059 --> 00:23:49,062
We saw some cool
new visual intelligence features,

418
00:23:49,096 --> 00:23:53,200
and went over our new interstitials
and playback speed APIs.

419
00:23:53,233 --> 00:23:54,868
I hope you enjoyed the session

420
00:23:54,902 --> 00:23:58,338
and look forward to seeing
these features in your apps.

421
00:23:58,372 --> 00:24:00,374
Enjoy the rest of the conference.

