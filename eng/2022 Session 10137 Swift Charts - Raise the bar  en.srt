1
00:00:00,033 --> 00:00:03,036
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,036 --> 00:00:10,377
♪

3
00:00:10,377 --> 00:00:11,645
Hello, I'm Donghao.

4
00:00:11,645 --> 00:00:14,348
In this session, we are going
to learn more about how to build

5
00:00:14,348 --> 00:00:16,950
great data visualizations
with Swift Charts.

6
00:00:16,950 --> 00:00:18,886
In other words,
we will raise the bar

7
00:00:18,886 --> 00:00:21,855
of what you can do
with charts in your apps.

8
00:00:21,855 --> 00:00:25,225
A great data visualization
makes your app more informative

9
00:00:25,225 --> 00:00:26,927
and more engaging.

10
00:00:26,927 --> 00:00:29,129
In order to build
a great chart in our apps,

11
00:00:29,129 --> 00:00:31,431
there are many things
to consider.

12
00:00:31,431 --> 00:00:33,734
Of course, we would want
our charts to faithfully

13
00:00:33,734 --> 00:00:38,372
communicate the underlying data
and be accessible for everyone.

14
00:00:38,372 --> 00:00:41,241
But charts in an app
don't live in a vacuum.

15
00:00:41,241 --> 00:00:43,911
They are part of the app's
user interface.

16
00:00:43,911 --> 00:00:47,748
We have to support localization
and OS features like Dark Mode.

17
00:00:47,748 --> 00:00:50,517
A chart has to have a proper
layout that fits seamlessly

18
00:00:50,517 --> 00:00:52,519
into the rest of the UI;

19
00:00:52,519 --> 00:00:57,224
it should support Dynamic Type
and device screen sizes.

20
00:00:57,224 --> 00:01:00,160
We'll also want charts
to work in all platforms,

21
00:01:00,160 --> 00:01:04,164
and have great animation
for the best look and feel.

22
00:01:04,164 --> 00:01:06,633
Swift Charts takes care of
a lot of these basic features

23
00:01:06,633 --> 00:01:09,603
for you automatically,
so you can focus more

24
00:01:09,603 --> 00:01:12,806
on building the best charts to
communicate your unique data

25
00:01:12,806 --> 00:01:15,575
and make it accessible
for everyone.

26
00:01:15,575 --> 00:01:17,811
Swift Charts achieves
this by providing you

27
00:01:17,811 --> 00:01:21,882
with a declarative syntax
that feels just like SwiftUI.

28
00:01:21,882 --> 00:01:23,750
You specify what you want
in a chart

29
00:01:23,750 --> 00:01:26,653
with a small amount of code,
and Swift Charts will

30
00:01:26,653 --> 00:01:30,057
automatically produce
a great chart out of the box.

31
00:01:30,057 --> 00:01:31,158
Swift Charts also provides

32
00:01:31,158 --> 00:01:33,794
a rich set
of customization options,

33
00:01:33,794 --> 00:01:37,364
so you can style the chart to
match your unique application.

34
00:01:37,364 --> 00:01:38,665
This session is about giving you

35
00:01:38,665 --> 00:01:41,802
a deeper understanding
of Swift Charts.

36
00:01:41,802 --> 00:01:43,737
We will start by covering
the basic building blocks

37
00:01:43,737 --> 00:01:45,472
of the declarative syntax:

38
00:01:45,472 --> 00:01:48,642
marks and the composition
of marks.

39
00:01:48,642 --> 00:01:51,945
Here are some examples where
we use charts in Apple products.

40
00:01:51,945 --> 00:01:54,514
As you can see,
there is a wide variety of data,

41
00:01:54,514 --> 00:01:56,984
chart types, and styles.

42
00:01:56,984 --> 00:01:58,986
Instead of providing
a prebuilt component

43
00:01:58,986 --> 00:02:01,888
for each type of chart,
Swift Charts is built

44
00:02:01,888 --> 00:02:05,559
on the idea of creating charts
by composition.

45
00:02:05,559 --> 00:02:08,829
It provides a small number
of basic building blocks

46
00:02:08,829 --> 00:02:10,931
by combining them
in different ways,

47
00:02:10,931 --> 00:02:13,333
you can create
a wide range of charts.

48
00:02:13,333 --> 00:02:14,968
Let me show you how it works.

49
00:02:14,968 --> 00:02:17,371
To do that,
I'll need an example.

50
00:02:17,371 --> 00:02:19,439
All of my teammates
love pancakes,

51
00:02:19,439 --> 00:02:22,142
so we are having an app
to track orders for a food truck

52
00:02:22,142 --> 00:02:24,711
selling various
kinds of pancakes.

53
00:02:24,711 --> 00:02:27,080
Here is a chart showing
the number of pancakes delivered

54
00:02:27,080 --> 00:02:30,717
over the last 30 days,
broken down by style.

55
00:02:30,717 --> 00:02:33,887
This is widely known
as a bar chart.

56
00:02:33,887 --> 00:02:37,357
In Swift Charts, we consider
each of the six blue rectangles

57
00:02:37,357 --> 00:02:38,992
a mark.

58
00:02:38,992 --> 00:02:43,697
A mark is a graphical element
that represents data.

59
00:02:43,697 --> 00:02:45,966
This is a bar mark
showing the number of cachapas

60
00:02:45,966 --> 00:02:48,935
sold over the last 30 days.

61
00:02:48,935 --> 00:02:51,438
In this chart
we have six bar marks,

62
00:02:51,438 --> 00:02:53,673
each showing a pancake style

63
00:02:53,673 --> 00:02:56,943
and the corresponding
sales number.

64
00:02:56,943 --> 00:02:59,746
Let's see how
this is written in code.

65
00:02:59,746 --> 00:03:02,682
Here we have a SwiftUI view that
includes a descriptive title

66
00:03:02,682 --> 00:03:06,787
like "Most Sold Style, Cachapa,"
and an empty chart.

67
00:03:06,787 --> 00:03:08,989
The chart type here
is the top-level view

68
00:03:08,989 --> 00:03:11,324
that defines a single chart.

69
00:03:11,324 --> 00:03:13,727
You can add a chart
in your SwiftUI application

70
00:03:13,727 --> 00:03:16,363
just like adding any other view.

71
00:03:16,363 --> 00:03:19,633
For the rest of the talk,
we'll focus on the chart part.

72
00:03:19,633 --> 00:03:22,302
You can add marks to a chart.

73
00:03:22,302 --> 00:03:24,404
Here we have a single
BarMark showing cachapa

74
00:03:24,404 --> 00:03:26,440
and its sales number.

75
00:03:26,440 --> 00:03:29,142
This makes a chart
with a single bar mark.

76
00:03:29,142 --> 00:03:31,778
As shown in the screenshot,
the chart fits nicely

77
00:03:31,778 --> 00:03:33,880
into the rest
of the user interface

78
00:03:33,880 --> 00:03:36,249
and has a great default style.

79
00:03:36,249 --> 00:03:40,353
For example, nicely rounded
numbers in the X-axis.

80
00:03:40,353 --> 00:03:43,457
If you add another bar mark
with different name and sales,

81
00:03:43,457 --> 00:03:45,358
you'll get a second bar.

82
00:03:45,358 --> 00:03:48,161
You can repeat this
to add more bars.

83
00:03:48,161 --> 00:03:49,162
In a real app,

84
00:03:49,162 --> 00:03:51,965
we'll probably generate
these marks programmatically.

85
00:03:51,965 --> 00:03:54,601
You can do so by providing
an array of structs or tuples

86
00:03:54,601 --> 00:03:57,370
to the chart,
and use a ForEach

87
00:03:57,370 --> 00:04:00,707
to create the bar marks with
the values from each element.

88
00:04:00,707 --> 00:04:04,244
If ForEach is the only content
in the chart, like in this case,

89
00:04:04,244 --> 00:04:07,814
you can also put data
in the chart directly.

90
00:04:07,814 --> 00:04:10,717
Many SwiftUI modifiers
are available for marks.

91
00:04:10,717 --> 00:04:13,153
For example, you could set
the color of the bars

92
00:04:13,153 --> 00:04:15,856
with the .foregroundStyle
modifier.

93
00:04:15,856 --> 00:04:17,724
Here we are setting it
to a named color,

94
00:04:17,724 --> 00:04:21,862
which can be created
in Xcode as a named asset.

95
00:04:21,862 --> 00:04:23,964
It's very important
that the chart is accessible

96
00:04:23,964 --> 00:04:25,599
for everyone.

97
00:04:25,599 --> 00:04:28,869
By default, the chart will be
exposed to VoiceOver users

98
00:04:28,869 --> 00:04:32,672
with automatically generated
accessibility elements.

99
00:04:32,672 --> 00:04:35,142
You can customize these
with the .accessibilityLabel

100
00:04:35,142 --> 00:04:37,944
and .accessibilityValue
modifiers.

101
00:04:37,944 --> 00:04:40,480
Here for example,
we set the label to the name

102
00:04:40,480 --> 00:04:43,383
of the pancake,
and the value to the sales

103
00:04:43,383 --> 00:04:45,385
with the suffix "sold."

104
00:04:45,385 --> 00:04:50,123
As a result, we get a custom
experience for VoiceOver users.

105
00:04:50,123 --> 00:04:55,562
VoiceOver: Cachapa, 916 sold.
Injera, 850 sold.

106
00:04:55,562 --> 00:04:59,499
Crêpe, 802 sold.

107
00:04:59,499 --> 00:05:01,868
Donghao: Our app also tracks
pancake deliveries

108
00:05:01,868 --> 00:05:03,503
over the days.

109
00:05:03,503 --> 00:05:06,239
Here, we have a view showing
the number of pancakes sold

110
00:05:06,239 --> 00:05:08,141
in the last 30 days.

111
00:05:08,141 --> 00:05:12,512
The chart gives a detailed view
of each individual day.

112
00:05:12,512 --> 00:05:14,514
Let's see how
to make this chart.

113
00:05:14,514 --> 00:05:17,384
Here, we have a data array
with day and sales.

114
00:05:17,384 --> 00:05:19,386
The day is represented
by a Date value

115
00:05:19,386 --> 00:05:21,388
at the start of the day.

116
00:05:21,388 --> 00:05:23,723
We visualize the data
with bar marks,

117
00:05:23,723 --> 00:05:26,493
where x shows day,
and the unit parameter here

118
00:05:26,493 --> 00:05:28,595
means that the Date values
represent the duration

119
00:05:28,595 --> 00:05:30,697
of a calendar day,

120
00:05:30,697 --> 00:05:33,466
and y shows the sales
of the day.

121
00:05:33,466 --> 00:05:35,001
As you see on the right,

122
00:05:35,001 --> 00:05:38,838
we get a bar chart
showing sales over the days.

123
00:05:38,838 --> 00:05:41,875
Bar chart is not the only way
to visualize this data.

124
00:05:41,875 --> 00:05:43,677
Let's try a line chart.

125
00:05:43,677 --> 00:05:45,011
The only change we have to make

126
00:05:45,011 --> 00:05:48,048
is to replace BarMark
with LineMark.

127
00:05:48,048 --> 00:05:50,817
With a declarative syntax,
it is very easy to switch

128
00:05:50,817 --> 00:05:54,187
between chart types
in Swift Charts.

129
00:05:54,187 --> 00:05:57,557
The previous chart shows
total sales over time.

130
00:05:57,557 --> 00:06:00,827
But the food truck service has
been operating in two cities,

131
00:06:00,827 --> 00:06:03,530
and we would love to compare
the sales between the two cities

132
00:06:03,530 --> 00:06:07,801
on each weekday,
to help us decide where to go.

133
00:06:07,801 --> 00:06:11,705
The lines in this chart show
the sales from Monday to Sunday.

134
00:06:11,705 --> 00:06:13,974
Each line represents a city.

135
00:06:13,974 --> 00:06:16,776
Let's see how this is built.

136
00:06:16,776 --> 00:06:18,812
Now suppose we have
two cities' data

137
00:06:18,812 --> 00:06:21,748
defined here
with an array of tuples,

138
00:06:21,748 --> 00:06:25,819
each contains city name
and the sales of the weekdays.

139
00:06:25,819 --> 00:06:28,555
Then, we can wrap
the line chart we had before

140
00:06:28,555 --> 00:06:32,425
with a ForEach that loops
over the series data.

141
00:06:32,425 --> 00:06:34,794
In order to differentiate
the two cities,

142
00:06:34,794 --> 00:06:36,696
we use the
.foregroundStyle(by:) modifier

143
00:06:36,696 --> 00:06:39,799
to style the two lines
by the city name.

144
00:06:39,799 --> 00:06:42,769
As you can see, Swift Charts
automatically picks two colors

145
00:06:42,769 --> 00:06:45,205
for the two cities,
color the lines,

146
00:06:45,205 --> 00:06:48,742
and then add a legend to
indicate what each color means.

147
00:06:48,742 --> 00:06:51,278
The default colors are chosen
to be system colors

148
00:06:51,278 --> 00:06:54,147
that are easy to differentiate.

149
00:06:54,147 --> 00:06:55,715
To make the chart
easier to read

150
00:06:55,715 --> 00:06:59,319
for people with color blindness,
we can add symbols to the lines

151
00:06:59,319 --> 00:07:01,588
to further differentiate them.

152
00:07:01,588 --> 00:07:03,890
This can be done by adding
the .symbol(by:) modifier

153
00:07:03,890 --> 00:07:06,026
with city as the data.

154
00:07:06,026 --> 00:07:08,995
Finally, to make the lines
look smoother,

155
00:07:08,995 --> 00:07:11,197
we can use a curve
as the interpolation method

156
00:07:11,197 --> 00:07:13,199
for the lines.

157
00:07:13,199 --> 00:07:15,135
Even with the two series
line chart,

158
00:07:15,135 --> 00:07:19,005
we can still go back to bar mark
and see how it looks like.

159
00:07:19,005 --> 00:07:21,074
Changing the mark
type to BarMark,

160
00:07:21,074 --> 00:07:24,744
and remove the modifiers
that aren't relevant to bars,

161
00:07:24,744 --> 00:07:27,047
we get a stacked bar chart.

162
00:07:27,047 --> 00:07:28,648
The bars are
automatically stacked

163
00:07:28,648 --> 00:07:31,618
because we now have
two bars for each month.

164
00:07:31,618 --> 00:07:33,486
While the stacked bar chart
is great for showing

165
00:07:33,486 --> 00:07:35,889
the total sales value
for the two cities,

166
00:07:35,889 --> 00:07:39,526
it's not very good for comparing
between the two cities.

167
00:07:39,526 --> 00:07:42,028
To make it easier to compare,
we can turn this

168
00:07:42,028 --> 00:07:46,633
into a grouped bar chart with
the .position(by:) modifier.

169
00:07:46,633 --> 00:07:49,736
So far, we've seen
bar marks and line marks.

170
00:07:49,736 --> 00:07:52,472
Swift Charts supports a couple
of other mark types

171
00:07:52,472 --> 00:07:57,777
including point mark, area mark,
rule mark, and rectangle mark.

172
00:07:57,777 --> 00:08:00,914
You can combine these marks
to build more complex charts.

173
00:08:00,914 --> 00:08:03,616
Let's see an example.

174
00:08:03,616 --> 00:08:06,019
Let's start with a line chart
showing the average daily sales

175
00:08:06,019 --> 00:08:07,620
for each month.

176
00:08:07,620 --> 00:08:09,255
While the average is useful,

177
00:08:09,255 --> 00:08:11,825
we also want to see the minimum
and maximum daily sales

178
00:08:11,825 --> 00:08:15,095
to get an idea
of the more extreme values.

179
00:08:15,095 --> 00:08:18,164
Let's start by adding
these values to the data.

180
00:08:18,164 --> 00:08:21,034
We introduce daily min
and daily max to each element

181
00:08:21,034 --> 00:08:23,236
in the data array.

182
00:08:23,236 --> 00:08:26,573
We can then visualize the min
and the max with an area mark,

183
00:08:26,573 --> 00:08:30,043
where x is showing month,
and y starts at the daily min,

184
00:08:30,043 --> 00:08:32,011
and ends at the daily max.

185
00:08:32,011 --> 00:08:34,581
This way, we have a chart
showing daily average values

186
00:08:34,581 --> 00:08:36,783
with a line,
and daily min and max values

187
00:08:36,783 --> 00:08:39,419
with the area around the line.

188
00:08:39,419 --> 00:08:41,321
A line plus area
isn't the only way

189
00:08:41,321 --> 00:08:43,390
to visualize this kind of data.

190
00:08:43,390 --> 00:08:44,858
You can easily switch
to other mark types

191
00:08:44,858 --> 00:08:47,227
to explore more design options.

192
00:08:47,227 --> 00:08:49,996
For example,
here we are using a BarMark.

193
00:08:49,996 --> 00:08:54,200
However, the line doesn't seem
to fit very well with the bars.

194
00:08:54,200 --> 00:08:56,669
Let's change the line mark
to a RectangleMark,

195
00:08:56,669 --> 00:08:58,905
with a height of two points.

196
00:08:58,905 --> 00:09:02,008
This way, the rectangle mark
creates horizontal lines

197
00:09:02,008 --> 00:09:05,145
inside the bars
showing the average value.

198
00:09:05,145 --> 00:09:08,114
You can also adjust
the width of these marks.

199
00:09:08,114 --> 00:09:09,949
Here, for example,
we are setting width

200
00:09:09,949 --> 00:09:12,051
to be with a ratio of .6

201
00:09:12,051 --> 00:09:14,320
This means the width
of the bars and rectangles

202
00:09:14,320 --> 00:09:17,757
will be 60 percent
of the width of a whole month,

203
00:09:17,757 --> 00:09:20,393
as you can see
in the screenshot.

204
00:09:20,393 --> 00:09:22,095
Finally, we'd like
to have an option

205
00:09:22,095 --> 00:09:25,765
to show the average daily sales
among all the months.

206
00:09:25,765 --> 00:09:27,700
To do so, we first set
the foreground style

207
00:09:27,700 --> 00:09:31,137
to a fade gray color
to deemphasize them.

208
00:09:31,137 --> 00:09:33,506
Then, we add a rule mark
outside the ForEach,

209
00:09:33,506 --> 00:09:35,742
with y showing
the average value.

210
00:09:35,742 --> 00:09:38,144
This adds a horizontal rule.

211
00:09:38,144 --> 00:09:41,414
To make it clear that the rule
is showing the yearly average,

212
00:09:41,414 --> 00:09:43,383
we can add
an annotation to the rule

213
00:09:43,383 --> 00:09:45,685
using the .annotation modifier.

214
00:09:45,685 --> 00:09:48,521
This adds a text label
at the top of the rule mark,

215
00:09:48,521 --> 00:09:50,790
with leading alignment.

216
00:09:50,790 --> 00:09:52,492
We've discussed
a couple of examples

217
00:09:52,492 --> 00:09:54,727
of building charts
by composition.

218
00:09:54,727 --> 00:09:56,996
There are many different ways
to use and combine

219
00:09:56,996 --> 00:09:58,631
these basic marks.

220
00:09:58,631 --> 00:10:03,736
Like a box plot, multi-series
line chart, population pyramid,

221
00:10:03,736 --> 00:10:08,441
range plot, stream graph,
multi-series scatter plot,

222
00:10:08,441 --> 00:10:12,245
heat map, or even a plot
of a vector field.

223
00:10:12,245 --> 00:10:14,781
These are just some examples
of the wide variety of charts

224
00:10:14,781 --> 00:10:17,250
you can build with Swift Charts.

225
00:10:17,250 --> 00:10:18,885
Let's dive into the next topic.

226
00:10:18,885 --> 00:10:21,588
Plotting data
with mark properties.

227
00:10:21,588 --> 00:10:24,791
Swift Charts support
three major types or data:

228
00:10:24,791 --> 00:10:28,328
quantitative,
nominal, and temporal.

229
00:10:28,328 --> 00:10:30,897
Quantitative data
is a numerical value,

230
00:10:30,897 --> 00:10:33,199
such as the number
of products sold,

231
00:10:33,199 --> 00:10:36,936
the temperature of a room,
or the price of a stock.

232
00:10:36,936 --> 00:10:39,839
Swift Charts treats
Swift numerical types such as

233
00:10:39,839 --> 00:10:44,344
Int, Float, and Double
as quantitative data.

234
00:10:44,344 --> 00:10:46,613
Nominal data,
or categorical data,

235
00:10:46,613 --> 00:10:49,749
represent discrete
categories or groups.

236
00:10:49,749 --> 00:10:51,718
For example,
the name of a person,

237
00:10:51,718 --> 00:10:55,555
a continent,
or the type of a product.

238
00:10:55,555 --> 00:10:58,091
You can use a string
or a custom string-valued enum

239
00:10:58,091 --> 00:10:59,993
as nominal data.

240
00:10:59,993 --> 00:11:03,530
Temporal data represents
a point or interval in time.

241
00:11:03,530 --> 00:11:06,699
For example, the duration
of a particular day,

242
00:11:06,699 --> 00:11:09,469
or the exact time
of a transaction.

243
00:11:09,469 --> 00:11:12,772
Swift Charts treats
"Date" as temporal data.

244
00:11:12,772 --> 00:11:15,141
A chart works
by transforming abstract data,

245
00:11:15,141 --> 00:11:18,678
like sales value,
into the properties of marks.

246
00:11:18,678 --> 00:11:22,882
Let's take a look at BarMark,
which can plot data with X, Y,

247
00:11:22,882 --> 00:11:25,318
and Foreground Style properties.

248
00:11:25,318 --> 00:11:29,289
In this example, we plot sales
value, which is quantitative,

249
00:11:29,289 --> 00:11:33,059
with the x property,
and name, which is nominal,

250
00:11:33,059 --> 00:11:35,328
with the y property.

251
00:11:35,328 --> 00:11:37,864
The resulting chart
consists of horizontal bars,

252
00:11:37,864 --> 00:11:41,901
each showing Sales on X,
and Name on Y.

253
00:11:41,901 --> 00:11:45,772
If we swap Name and Sales,
such that Name is on X

254
00:11:45,772 --> 00:11:50,209
and Sales is on Y, we get
a vertical bar chart instead.

255
00:11:50,209 --> 00:11:52,312
As you can see,
the BarMark's behavior

256
00:11:52,312 --> 00:11:56,616
depends on the data type plotted
with its X and Y properties.

257
00:11:56,616 --> 00:11:58,084
The orientation of the bar

258
00:11:58,084 --> 00:12:01,454
depends on where
the quantitative property is.

259
00:12:01,454 --> 00:12:03,990
Now, let's look at another chart
with all three properties

260
00:12:03,990 --> 00:12:05,725
used to plot data.

261
00:12:05,725 --> 00:12:09,262
Here we plot Weekday,
which is temporal, with X,

262
00:12:09,262 --> 00:12:12,932
Sales with Y,
and City with Foreground Style.

263
00:12:12,932 --> 00:12:15,301
The resulting chart
is a stacked bar chart,

264
00:12:15,301 --> 00:12:18,938
where X-axis shows Weekday,
Y-axis shows Sales,

265
00:12:18,938 --> 00:12:21,240
and the bars
are colored by city.

266
00:12:21,240 --> 00:12:23,276
Swift Charts has six mark types,

267
00:12:23,276 --> 00:12:26,846
and six mark properties
that you can plot data with.

268
00:12:26,846 --> 00:12:29,649
Remember that data
can be of the three kinds,

269
00:12:29,649 --> 00:12:33,186
so there is a vast array
of possible combinations.

270
00:12:33,186 --> 00:12:35,588
This is what allows Swift Charts
to support a wide range

271
00:12:35,588 --> 00:12:40,493
of chart designs with a small
number of basic building blocks.

272
00:12:40,493 --> 00:12:42,161
When you plot data
with a mark property,

273
00:12:42,161 --> 00:12:45,698
for example, sales with Y,
Swift Charts creates a mapping

274
00:12:45,698 --> 00:12:47,567
that transforms
the abstract data

275
00:12:47,567 --> 00:12:50,503
into a proper value
of the property.

276
00:12:50,503 --> 00:12:52,639
In this case,
it will transform Sales value

277
00:12:52,639 --> 00:12:55,608
to Y coordinates
in screen space.

278
00:12:55,608 --> 00:12:57,810
We use the term "scale"
to refer to the mapping

279
00:12:57,810 --> 00:13:00,780
from abstract data, like sales,
to mark property,

280
00:13:00,780 --> 00:13:02,482
like Y position.

281
00:13:02,482 --> 00:13:04,283
You can think of Scale
as a function

282
00:13:04,283 --> 00:13:07,920
that takes data value
and returns a property value.

283
00:13:07,920 --> 00:13:11,824
For example, here is a yScale
function that takes sales

284
00:13:11,824 --> 00:13:14,694
and returns the Y position
of the bar.

285
00:13:14,694 --> 00:13:16,696
The name "scale"
comes from the fact

286
00:13:16,696 --> 00:13:20,233
that for position properties,
we often scale the input value

287
00:13:20,233 --> 00:13:24,537
by some factor to convert it to
a reasonable screen coordinate.

288
00:13:24,537 --> 00:13:26,706
When you plot data
with mark properties,

289
00:13:26,706 --> 00:13:28,741
a scale is created
to transform the data

290
00:13:28,741 --> 00:13:31,210
into the corresponding
mark property.

291
00:13:31,210 --> 00:13:34,147
For example, in this chart
we have three scales,

292
00:13:34,147 --> 00:13:37,684
each transforming
Weekday to X, Sales to Y,

293
00:13:37,684 --> 00:13:41,087
and City to Foreground Style,
respectively.

294
00:13:41,087 --> 00:13:44,490
By default, Swift Charts infers
the scales automatically

295
00:13:44,490 --> 00:13:48,661
from the data, so you get
a nice chart out of the box.

296
00:13:48,661 --> 00:13:49,929
You can use the scale modifiers

297
00:13:49,929 --> 00:13:52,398
to configure the scales
in a chart.

298
00:13:52,398 --> 00:13:54,801
Let's take a look
at a few examples.

299
00:13:54,801 --> 00:13:57,270
In this example,
the Y scale is automatically

300
00:13:57,270 --> 00:14:00,339
inferred to be zero to 150.

301
00:14:00,339 --> 00:14:02,742
However,
we'd like to fix the Y scale

302
00:14:02,742 --> 00:14:05,411
so that no matter what
the current sales looks like,

303
00:14:05,411 --> 00:14:08,281
we always have
a consistent Y scale.

304
00:14:08,281 --> 00:14:10,083
Let's change it
such that the Y scale

305
00:14:10,083 --> 00:14:13,619
always starts at zero
and ends at 200.

306
00:14:13,619 --> 00:14:16,989
To do so, we can use
the .chartYScale modifier,

307
00:14:16,989 --> 00:14:21,127
and set the domain
of the scale to be zero to 200.

308
00:14:21,127 --> 00:14:26,065
Now, as you can see,
the axis goes from zero to 200.

309
00:14:26,065 --> 00:14:28,167
Similarly, we can change
how the two cities

310
00:14:28,167 --> 00:14:30,069
map to foreground style using

311
00:14:30,069 --> 00:14:33,673
the .chartForegroundStyleScale
modifier.

312
00:14:33,673 --> 00:14:36,776
Now we have new colors
for the two cities.

313
00:14:36,776 --> 00:14:38,678
Now we know
how to compose marks

314
00:14:38,678 --> 00:14:40,680
and plot data
with mark properties.

315
00:14:40,680 --> 00:14:42,448
Let's dive into more
customization options

316
00:14:42,448 --> 00:14:44,951
that Swift Charts provides.

317
00:14:44,951 --> 00:14:47,920
A chart consists of axes,
possibly a legend,

318
00:14:47,920 --> 00:14:50,089
and a plot area.

319
00:14:50,089 --> 00:14:53,192
Axes and legends
help us interpret the chart.

320
00:14:53,192 --> 00:14:56,629
The plot area is the area
between the two axes.

321
00:14:56,629 --> 00:14:59,866
This is where we
plot data with marks.

322
00:14:59,866 --> 00:15:02,869
All of these elements are
customizable in Swift Charts.

323
00:15:02,869 --> 00:15:04,303
Let's first see a few examples

324
00:15:04,303 --> 00:15:07,306
on how to customize
axes and legends.

325
00:15:07,306 --> 00:15:10,276
Here is a chart showing
total monthly sales.

326
00:15:10,276 --> 00:15:12,612
Without customization,
Swift Charts generates

327
00:15:12,612 --> 00:15:16,215
a default axis that features
nicely rounded values.

328
00:15:16,215 --> 00:15:20,520
Right now, the X-axis shows
a label for every quarter.

329
00:15:20,520 --> 00:15:22,522
Let's change it to show
a label every month,

330
00:15:22,522 --> 00:15:24,857
and use a single-letter
month label.

331
00:15:24,857 --> 00:15:27,593
We'll start by adding
a .chartXAxis modifier

332
00:15:27,593 --> 00:15:32,665
to customize the X-axis,
with AxisMarks as the content.

333
00:15:32,665 --> 00:15:37,370
AxisMarks with no parameter
recreates the default axis.

334
00:15:37,370 --> 00:15:40,072
Let's start by changing
the axis values.

335
00:15:40,072 --> 00:15:42,742
Since we want to have
regular calendar intervals,

336
00:15:42,742 --> 00:15:45,311
we can use stride(by:),
similar to the stride function

337
00:15:45,311 --> 00:15:48,080
from the standard library.

338
00:15:48,080 --> 00:15:50,082
Now we have a label
for each month.

339
00:15:50,082 --> 00:15:52,485
However, the default labels
feel too crowded,

340
00:15:52,485 --> 00:15:54,053
as you see in the screenshot.

341
00:15:54,053 --> 00:15:55,621
Some labels get truncated

342
00:15:55,621 --> 00:15:58,658
because we don't have
enough space for them.

343
00:15:58,658 --> 00:16:02,495
Let's change the labels
to use a single-letter format.

344
00:16:02,495 --> 00:16:04,630
To do so, let's build up
the axis marks

345
00:16:04,630 --> 00:16:06,032
from the individual components,

346
00:16:06,032 --> 00:16:10,903
including AxisGridLine,
AxisTick, and AxisValueLabel.

347
00:16:10,903 --> 00:16:14,774
Let's set the format of the
label to use narrow month names.

348
00:16:14,774 --> 00:16:17,810
Now we have one letter
for each month.

349
00:16:17,810 --> 00:16:20,012
The value parameter passed
into the result builder

350
00:16:20,012 --> 00:16:23,349
provides information
about the current axis value.

351
00:16:23,349 --> 00:16:25,184
You can use this
to conditionally determine

352
00:16:25,184 --> 00:16:28,221
the existence and style
of axis marks.

353
00:16:28,221 --> 00:16:30,890
For example, here we have
a condition that tests

354
00:16:30,890 --> 00:16:35,027
whether the value as a date
is the first quarter of a month.

355
00:16:35,027 --> 00:16:37,797
If yes, we can highlight
the first month of each quarter

356
00:16:37,797 --> 00:16:40,199
with a different
foreground style.

357
00:16:40,199 --> 00:16:42,735
If not, we only display
a grid line,

358
00:16:42,735 --> 00:16:44,670
without tick and label.

359
00:16:44,670 --> 00:16:46,639
Since we are now
showing quarters,

360
00:16:46,639 --> 00:16:49,842
we can change the format
to quarter style.

361
00:16:49,842 --> 00:16:51,978
With the customizations
we just did,

362
00:16:51,978 --> 00:16:55,615
we get a more unique
X-axis showing quarter data,

363
00:16:55,615 --> 00:16:59,485
with subgrid lines
showing every month.

364
00:16:59,485 --> 00:17:00,586
In addition to values,

365
00:17:00,586 --> 00:17:02,688
axis marks have other properties
that allows you

366
00:17:02,688 --> 00:17:05,725
to configure the general
appearance and style.

367
00:17:05,725 --> 00:17:07,927
Suppose we'd like
to have the Y-axis appear

368
00:17:07,927 --> 00:17:09,228
at the leading edge of the chart

369
00:17:09,228 --> 00:17:12,031
instead of the default
trailing edge,

370
00:17:12,031 --> 00:17:14,033
we can set the position
parameter to leading

371
00:17:14,033 --> 00:17:17,169
to move them
to the leading edge.

372
00:17:17,169 --> 00:17:20,273
Swift Charts provides a default
preset for the axis marks

373
00:17:20,273 --> 00:17:24,176
based on the axis and the type
of data being visualized.

374
00:17:24,176 --> 00:17:27,146
You can override the default
using the preset parameter.

375
00:17:27,146 --> 00:17:29,749
For example, here we are using
the .extended preset

376
00:17:29,749 --> 00:17:32,685
for the Y-axis to help
with visual alignment

377
00:17:32,685 --> 00:17:35,721
with the rest
of the user interface.

378
00:17:35,721 --> 00:17:39,125
In some charts, you may not
want the axis to be visible.

379
00:17:39,125 --> 00:17:41,994
For example, the purpose
of the top sales chart here

380
00:17:41,994 --> 00:17:44,196
is to give people
a brief overview,

381
00:17:44,196 --> 00:17:47,133
so the axes aren't
really necessary.

382
00:17:47,133 --> 00:17:49,902
You can pass in .hidden
to the chart axis modifiers

383
00:17:49,902 --> 00:17:51,704
to hide an axis.

384
00:17:51,704 --> 00:17:54,473
Legend configuration
is similar to axis.

385
00:17:54,473 --> 00:17:55,608
For example,

386
00:17:55,608 --> 00:17:58,778
in this chart that highlights
the best day and location,

387
00:17:58,778 --> 00:18:01,681
we already use opacity
to highlight the best city,

388
00:18:01,681 --> 00:18:04,750
so we can hide the
automatically generated legend.

389
00:18:04,750 --> 00:18:07,420
To do so, we can add
the .chartLegend modifier

390
00:18:07,420 --> 00:18:09,922
with .hidden as parameter.

391
00:18:09,922 --> 00:18:12,758
Now let's talk
about the plot area.

392
00:18:12,758 --> 00:18:15,094
You can use
the .chartPlotStyle modifier

393
00:18:15,094 --> 00:18:17,964
to configure
the plot area of a chart.

394
00:18:17,964 --> 00:18:20,066
In the trailing closure,
we will write a function

395
00:18:20,066 --> 00:18:21,734
that takes original plot area,

396
00:18:21,734 --> 00:18:24,303
and returns
a modified plot area.

397
00:18:24,303 --> 00:18:27,039
Let's see a few examples.

398
00:18:27,039 --> 00:18:29,041
In some cases,
we might want the plot area

399
00:18:29,041 --> 00:18:32,078
to have an exact size
or aspect ratio.

400
00:18:32,078 --> 00:18:35,081
For example, in this case,
we want the plot area's height

401
00:18:35,081 --> 00:18:38,384
to be driven by the number
of categories in the chart.

402
00:18:38,384 --> 00:18:41,187
To achieve this, we can apply
a .frame modifier

403
00:18:41,187 --> 00:18:45,591
to the plot area, and return
the modified plot area.

404
00:18:45,591 --> 00:18:48,728
This will set the height
of the plot area.

405
00:18:48,728 --> 00:18:52,631
We can also use modifiers to
achieve a special visual effect.

406
00:18:52,631 --> 00:18:54,934
For example,
in this Dark Mode chart,

407
00:18:54,934 --> 00:18:57,436
we use the .background modifier
to add a pink background

408
00:18:57,436 --> 00:19:02,008
with opacity of .2 to make the
chart stand out a little bit.

409
00:19:02,008 --> 00:19:05,644
And then add a 1-pt border
with the same pink color.

410
00:19:05,644 --> 00:19:09,315
This creates a unique
visual effect for the chart.

411
00:19:09,315 --> 00:19:11,317
Earlier in the session
we mentioned scales,

412
00:19:11,317 --> 00:19:13,219
which are functions
that map data values

413
00:19:13,219 --> 00:19:17,223
to mark properties
such as X and Y.

414
00:19:17,223 --> 00:19:19,825
Swift Charts provides
a ChartProxy that allows you

415
00:19:19,825 --> 00:19:23,396
to access the X and Y scales
in a chart.

416
00:19:23,396 --> 00:19:26,399
You can use the ChartProxy's
position(for:) method

417
00:19:26,399 --> 00:19:29,468
to get the position
for a given data value,

418
00:19:29,468 --> 00:19:31,404
or use the value(at:) method

419
00:19:31,404 --> 00:19:34,840
to get the data value
at a given position.

420
00:19:34,840 --> 00:19:38,577
This allows you to coordinate
other views with the chart.

421
00:19:38,577 --> 00:19:41,013
Let's look at an example.

422
00:19:41,013 --> 00:19:43,382
We are going to build
this interactive brushing view.

423
00:19:43,382 --> 00:19:45,751
Here you can select
an interval from the chart

424
00:19:45,751 --> 00:19:48,354
with a drag gesture,
and that interval

425
00:19:48,354 --> 00:19:52,058
will then be used to filter
the rows in the details view.

426
00:19:52,058 --> 00:19:54,393
We can get a chart proxy
object from the .chartOverlay

427
00:19:54,393 --> 00:19:56,595
or .chartBackground modifiers.

428
00:19:56,595 --> 00:19:59,165
These two modifiers
are similar to SwiftUI's overlay

429
00:19:59,165 --> 00:20:00,966
and background modifiers,

430
00:20:00,966 --> 00:20:04,103
but they provide you
with a chart proxy.

431
00:20:04,103 --> 00:20:05,237
To build this example,

432
00:20:05,237 --> 00:20:09,108
we'll start by defining
the base chart just like before.

433
00:20:09,108 --> 00:20:10,943
We then add
a .chartOverlay modifier

434
00:20:10,943 --> 00:20:13,412
that provides us
with the chart proxy.

435
00:20:13,412 --> 00:20:16,348
Inside, we have a geometry
reader that gives us access

436
00:20:16,348 --> 00:20:19,051
to the geometry
of the overlay view.

437
00:20:19,051 --> 00:20:22,354
Then, we have a Rectangle view
that is configured to respond

438
00:20:22,354 --> 00:20:25,191
to SwiftUI's DragGesture.

439
00:20:25,191 --> 00:20:28,694
When the drag gesture happens,
we first find the x coordinates

440
00:20:28,694 --> 00:20:30,896
of the start
and the current locations

441
00:20:30,896 --> 00:20:32,998
inside the chart's plot area.

442
00:20:32,998 --> 00:20:35,434
This is done by subtracting
the plot area's origin

443
00:20:35,434 --> 00:20:39,138
from the locations
provided by the gestures.

444
00:20:39,138 --> 00:20:42,475
Once we have these coordinates,
we can then use the chart proxy

445
00:20:42,475 --> 00:20:45,344
to find the corresponding
Date values,

446
00:20:45,344 --> 00:20:47,746
and finally set it
to a SwiftUI state

447
00:20:47,746 --> 00:20:51,317
that keeps track of
the current date interval.

448
00:20:51,317 --> 00:20:54,220
With the range state, we can
then define a rectangle mark

449
00:20:54,220 --> 00:20:58,090
in the chart to visualize the
currently selected date range.

450
00:20:58,090 --> 00:21:00,192
This state can also be used
to control other parts

451
00:21:00,192 --> 00:21:01,994
of your application

452
00:21:01,994 --> 00:21:03,629
for example,
to filter the contents

453
00:21:03,629 --> 00:21:05,898
of the details view
below the chart.

454
00:21:05,898 --> 00:21:06,999
This is a simple example

455
00:21:06,999 --> 00:21:09,802
to illustrate how
chart proxy works.

456
00:21:09,802 --> 00:21:11,737
You can use it to build
many interesting features,

457
00:21:11,737 --> 00:21:13,973
for example,
this interactive chart

458
00:21:13,973 --> 00:21:16,475
that shows the selected day
and sales value

459
00:21:16,475 --> 00:21:19,545
with an overlay
that looks like a lollipop.

460
00:21:19,545 --> 00:21:20,980
In this session,
we have discussed

461
00:21:20,980 --> 00:21:23,482
how to create charts
by composing marks;

462
00:21:23,482 --> 00:21:25,417
how to plot data
with mark properties,

463
00:21:25,417 --> 00:21:27,887
and how to customize a chart.

464
00:21:27,887 --> 00:21:30,022
You can go to the design
sessions to learn more

465
00:21:30,022 --> 00:21:32,858
about how to design great
app experiences with charts

466
00:21:32,858 --> 00:21:35,761
and how to design
an effective chart.

467
00:21:35,761 --> 00:21:37,596
We think you will love
building data visualizations

468
00:21:37,596 --> 00:21:38,831
with Swift Charts.

469
00:21:38,831 --> 00:21:39,932
Thanks for watching.

470
00:21:39,932 --> 00:21:43,869
♪

