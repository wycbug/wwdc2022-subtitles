1
00:00:00,000 --> 00:00:03,003
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,003 --> 00:00:10,077
♪

3
00:00:10,077 --> 00:00:13,914
Welcome to "Meet WeatherKit"
at WWDC22.

4
00:00:13,914 --> 00:00:15,182
My name is Novall,

5
00:00:15,182 --> 00:00:17,885
and I'm an engineer
on the Weather team.

6
00:00:17,885 --> 00:00:20,721
We rely on weather data
day in and day out,

7
00:00:20,721 --> 00:00:23,557
and where we get
this information is important.

8
00:00:23,557 --> 00:00:25,459
From checking the weather
on your Apple Watch

9
00:00:25,459 --> 00:00:27,094
so you know to bring
an umbrella with you

10
00:00:27,094 --> 00:00:29,329
before you head out the door,

11
00:00:29,329 --> 00:00:32,733
to sustainable agriculture
where predicting rain and frost

12
00:00:32,733 --> 00:00:35,836
can help farmers
plan crop rotation,

13
00:00:35,836 --> 00:00:39,573
to staying safe and prepared
for winter storm travel --

14
00:00:39,573 --> 00:00:42,175
weather impacts everyone.

15
00:00:42,175 --> 00:00:44,778
Accurate weather data
has become even more critical

16
00:00:44,778 --> 00:00:48,315
in today's world affected
by our changing climate.

17
00:00:48,315 --> 00:00:50,517
And having access
to accurate forecasts

18
00:00:50,517 --> 00:00:53,287
is important now more than ever,

19
00:00:53,287 --> 00:00:55,923
which is why
we created WeatherKit.

20
00:00:55,923 --> 00:00:59,693
WeatherKit is powered by the
all-new Apple Weather Service,

21
00:00:59,693 --> 00:01:02,863
a world-class
global weather forecast.

22
00:01:02,863 --> 00:01:05,832
It uses high-resolution
weather models

23
00:01:05,832 --> 00:01:08,802
and machine learning
and prediction algorithms

24
00:01:08,802 --> 00:01:11,038
to give you hyperlocal
weather forecasts

25
00:01:11,038 --> 00:01:13,307
around the globe.

26
00:01:13,307 --> 00:01:16,944
With Apple Weather Service,
we have access to a lot of data,

27
00:01:16,944 --> 00:01:20,948
and all of this is available
to you through WeatherKit.

28
00:01:20,948 --> 00:01:24,284
Accurate weather data
requires location information.

29
00:01:24,284 --> 00:01:28,522
And keeping that data private
is a shared responsibility.

30
00:01:28,522 --> 00:01:30,824
In keeping with
our commitment to privacy,

31
00:01:30,824 --> 00:01:34,027
WeatherKit is designed
to give hyperlocal forecasts

32
00:01:34,027 --> 00:01:37,130
without compromising
user information.

33
00:01:37,130 --> 00:01:40,600
Location is used only
to provide weather forecasts

34
00:01:40,600 --> 00:01:41,768
and is not associated

35
00:01:41,768 --> 00:01:45,105
with any personally
identifying information

36
00:01:45,105 --> 00:01:48,008
and is never shared or sold.

37
00:01:48,008 --> 00:01:49,943
With WeatherKit,
we've made it easy for you

38
00:01:49,943 --> 00:01:52,279
to protect user privacy.

39
00:01:52,279 --> 00:01:55,515
Today I will be diving into
more detail about WeatherKit

40
00:01:55,515 --> 00:01:58,919
so you can get the most
out of our new API.

41
00:01:58,919 --> 00:02:00,887
First, I'll cover
the available data sets

42
00:02:00,887 --> 00:02:02,356
we offer through WeatherKit,

43
00:02:02,356 --> 00:02:05,525
backed by our own
Apple Weather Service.

44
00:02:05,525 --> 00:02:08,362
Next, I'll show you how
to request weather information

45
00:02:08,362 --> 00:02:10,330
using the WeatherKit framework

46
00:02:10,330 --> 00:02:13,133
and a REST API designed
so you can get weather data

47
00:02:13,133 --> 00:02:15,435
on any platform.

48
00:02:15,435 --> 00:02:16,370
And finally,

49
00:02:16,370 --> 00:02:18,839
I'll cover some additional
implementation requirements

50
00:02:18,839 --> 00:02:21,341
and best practices.

51
00:02:21,341 --> 00:02:25,746
Let me start with an overview of
the available weather data sets.

52
00:02:25,746 --> 00:02:29,983
As I mentioned, you have access
to a lot of data in WeatherKit.

53
00:02:29,983 --> 00:02:33,186
So let's talk about
each data set.

54
00:02:33,186 --> 00:02:36,156
The current weather data set
describes the "now" conditions

55
00:02:36,156 --> 00:02:38,658
at the requested location.

56
00:02:38,658 --> 00:02:40,794
It represents
a single point in time

57
00:02:40,794 --> 00:02:46,333
and includes conditions like
UV index, temperature, and wind.

58
00:02:46,333 --> 00:02:48,668
The minute forecast
contains minute-by-minute

59
00:02:48,668 --> 00:02:51,138
precipitation conditions
for the next hour,

60
00:02:51,138 --> 00:02:53,073
where available.

61
00:02:53,073 --> 00:02:55,475
This data set is useful
for deciding whether or not

62
00:02:55,475 --> 00:02:58,845
to bring an umbrella with you
as you walk out the door.

63
00:02:58,845 --> 00:03:01,281
The hourly forecast
is a collection of forecasts

64
00:03:01,281 --> 00:03:03,183
starting on the current hour

65
00:03:03,183 --> 00:03:07,154
and provides data
for up to 240 hours.

66
00:03:07,154 --> 00:03:09,956
Each hour in the hourly forecast
includes conditions

67
00:03:09,956 --> 00:03:15,362
like humidity, visibility,
pressure, and dew point.

68
00:03:15,362 --> 00:03:19,866
The daily forecast contains a
forecast collection of 10 days.

69
00:03:19,866 --> 00:03:21,468
Each day in the daily forecast

70
00:03:21,468 --> 00:03:24,371
provides information
about the entire day,

71
00:03:24,371 --> 00:03:26,540
like the high
and low temperature,

72
00:03:26,540 --> 00:03:29,042
sunrise, and sunset.

73
00:03:29,042 --> 00:03:31,445
Weather alerts contains
severe weather warnings

74
00:03:31,445 --> 00:03:34,247
issued for
the requested location.

75
00:03:34,247 --> 00:03:37,017
This data set contains
important information

76
00:03:37,017 --> 00:03:41,455
to keep your users safe,
informed, and prepared.

77
00:03:41,455 --> 00:03:45,258
And finally, historical weather
provides saved weather forecasts

78
00:03:45,258 --> 00:03:46,626
from the past,

79
00:03:46,626 --> 00:03:49,529
so you can see trends
in weather data.

80
00:03:49,529 --> 00:03:51,164
You can access historical data

81
00:03:51,164 --> 00:03:53,667
by specifying
a start and end date

82
00:03:53,667 --> 00:03:56,770
to the hourly
and daily requests.

83
00:03:56,770 --> 00:03:59,773
This gives you access
to a lot of data.

84
00:03:59,773 --> 00:04:03,009
We think there are a lot
of important and impactful ways

85
00:04:03,009 --> 00:04:05,779
you can use historical weather.

86
00:04:05,779 --> 00:04:09,282
Now that you've seen all of
the rich weather data available,

87
00:04:09,282 --> 00:04:11,585
I'll walk you through
how to request this weather data

88
00:04:11,585 --> 00:04:14,821
with the WeatherKit APIs.

89
00:04:14,821 --> 00:04:18,391
Apple Weather data is available
through both a native framework

90
00:04:18,391 --> 00:04:21,561
and a set of REST APIs.

91
00:04:21,561 --> 00:04:23,697
First, let me show you
how easy it is

92
00:04:23,697 --> 00:04:27,200
to access weather data
with our Swift framework.

93
00:04:27,200 --> 00:04:29,603
All it takes
is a few lines of code.

94
00:04:29,603 --> 00:04:33,540
And with Swift Concurrency,
requesting weather is simple.

95
00:04:33,540 --> 00:04:37,777
First, you'll import WeatherKit
and CoreLocation.

96
00:04:37,777 --> 00:04:40,046
Then you'll create
a weatherService object,

97
00:04:40,046 --> 00:04:43,383
as your entry point
for the Weather Service.

98
00:04:43,383 --> 00:04:45,719
You'll create a CLLocation
with coordinates

99
00:04:45,719 --> 00:04:48,288
for your location of interest.

100
00:04:48,288 --> 00:04:52,225
Here, I'm using my hometown
of Syracuse, New York.

101
00:04:52,225 --> 00:04:55,662
Then you’ll call weather(for:)
on the weatherService instance

102
00:04:55,662 --> 00:04:59,332
and pass in the location
created above.

103
00:04:59,332 --> 00:05:00,767
When the call completes,

104
00:05:00,767 --> 00:05:04,171
you can access the relevant data
you need for your app,

105
00:05:04,171 --> 00:05:08,575
like the current temperature
and UV Index in this example.

106
00:05:08,575 --> 00:05:10,410
Now that I've shown you
how easy it is

107
00:05:10,410 --> 00:05:12,779
to request weather data
with Swift,

108
00:05:12,779 --> 00:05:14,681
let me take you through
another example

109
00:05:14,681 --> 00:05:18,485
I'm using a travel app
that I'm building in SwiftUI.

110
00:05:18,485 --> 00:05:20,520
You can grab the completed
project from the link

111
00:05:20,520 --> 00:05:22,789
associated with this session.

112
00:05:22,789 --> 00:05:25,058
Since I'm really looking forward
to traveling again,

113
00:05:25,058 --> 00:05:27,093
I've decided to create
a flight planner app

114
00:05:27,093 --> 00:05:29,663
to plan my next trip.

115
00:05:29,663 --> 00:05:32,866
I've already created the logic
for my flight itinerary,

116
00:05:32,866 --> 00:05:34,768
but when I tap on each
of the flights in my trip,

117
00:05:34,768 --> 00:05:37,337
I want to show columns
containing the condition,

118
00:05:37,337 --> 00:05:43,109
precipitation, wind, and
temperature at each destination.

119
00:05:43,109 --> 00:05:45,378
First step is to enable
WeatherKit.

120
00:05:45,378 --> 00:05:48,348
Register the App ID
in the Developer Portal,

121
00:05:48,348 --> 00:05:51,084
then select the Capability
and App Services t  abs

122
00:05:51,084 --> 00:05:53,386
to enable WeatherKit.

123
00:05:53,386 --> 00:05:55,755
Then in Xcode,
add the WeatherKit capability

124
00:05:55,755 --> 00:05:57,958
to the project.

125
00:05:57,958 --> 00:05:59,626
With that prep out of the way,

126
00:05:59,626 --> 00:06:01,861
let me walk through how
I'll get the weather data

127
00:06:01,861 --> 00:06:04,764
for each of these locations.

128
00:06:04,764 --> 00:06:07,100
Here I have an Airport struct
already set up

129
00:06:07,100 --> 00:06:08,868
that contains
the latitude and longitude

130
00:06:08,868 --> 00:06:11,438
of my destination airports.

131
00:06:11,438 --> 00:06:14,374
I'll get the hourly forecast
by calling weather(for:)

132
00:06:14,374 --> 00:06:15,609
on our shared weather service

133
00:06:15,609 --> 00:06:18,979
and then pass in
our airport location.

134
00:06:22,983 --> 00:06:24,751
Because I just want
a subset of data,

135
00:06:24,751 --> 00:06:27,787
I've also specified to include
the hourly forecast

136
00:06:27,787 --> 00:06:29,823
in the request.

137
00:06:29,823 --> 00:06:32,726
Now, I'll build and run my app.

138
00:06:36,529 --> 00:06:38,565
Now I can see
my custom view updated

139
00:06:38,565 --> 00:06:41,601
to display the conditions
at each airport.

140
00:06:41,601 --> 00:06:43,603
The next thing I need to do
while building this app

141
00:06:43,603 --> 00:06:48,341
is to display attribution
for the data sources in my app.

142
00:06:51,678 --> 00:06:53,580
First, I'll get
the attribution URL from

143
00:06:53,580 --> 00:06:57,083
the attribution.legalPageURL
property.

144
00:06:57,083 --> 00:06:59,586
This is a link to
the legal attribution page

145
00:06:59,586 --> 00:07:01,388
that contains
copyright information

146
00:07:01,388 --> 00:07:03,723
about the weather data sources.

147
00:07:03,723 --> 00:07:05,425
I'll also need to get the URL

148
00:07:05,425 --> 00:07:07,494
for the combined
Apple Weather mark.

149
00:07:11,598 --> 00:07:14,100
It's available in both light
and dark variants,

150
00:07:14,100 --> 00:07:16,336
so I'll check the
colorScheme environment value

151
00:07:16,336 --> 00:07:18,905
to find out if the SwiftUI view
is currently displaying

152
00:07:18,905 --> 00:07:22,208
in light or dark appearance.

153
00:07:22,208 --> 00:07:24,811
Finally,
I'll build and run again.

154
00:07:29,816 --> 00:07:32,285
Note that the Apple Weather mark
and attribution link

155
00:07:32,285 --> 00:07:36,256
opens in an
SFSafariViewController.

156
00:07:36,256 --> 00:07:38,058
That's all it takes
to get the weather

157
00:07:38,058 --> 00:07:40,760
for our flight planner app,
and there are so many ways

158
00:07:40,760 --> 00:07:43,263
you can use the WeatherKit API
to add weather data

159
00:07:43,263 --> 00:07:45,265
to your apps.

160
00:07:45,265 --> 00:07:48,134
But that was only
the native framework.

161
00:07:48,134 --> 00:07:51,037
The REST API provides
the same rich weather data

162
00:07:51,037 --> 00:07:55,208
as the Swift framework
and can be used on any platform.

163
00:07:55,208 --> 00:07:58,678
In this example, I'm showing how
you can request weather alerts

164
00:07:58,678 --> 00:08:02,382
from the weatherkit.apple.com
endpoint.

165
00:08:02,382 --> 00:08:04,651
First, you request
an auth token.

166
00:08:04,651 --> 00:08:07,020
I'll discuss that more in a bit.

167
00:08:07,020 --> 00:08:10,457
Then, to get the weather object,
you first create a URL

168
00:08:10,457 --> 00:08:14,494
indicating the desired weather
data set for a given location.

169
00:08:14,494 --> 00:08:16,629
Be sure to set
the appropriate language

170
00:08:16,629 --> 00:08:19,032
for a localized response.

171
00:08:19,032 --> 00:08:21,501
Then, provide
the latitude and longitude

172
00:08:21,501 --> 00:08:24,037
of the location of interest.

173
00:08:24,037 --> 00:08:26,473
Indicate the desired data set.

174
00:08:26,473 --> 00:08:29,242
You may notice this parameter
is plural so you can request

175
00:08:29,242 --> 00:08:33,313
several at once by separating
each with a comma.

176
00:08:33,313 --> 00:08:36,916
And finally, the country code
for the requested location.

177
00:08:36,916 --> 00:08:39,185
But note, the country code
is only required

178
00:08:39,185 --> 00:08:43,156
if you're requesting
the weather alerts data set.

179
00:08:43,156 --> 00:08:44,724
Next, you'll fetch
the weather data

180
00:08:44,724 --> 00:08:48,328
using the URL and your auth
token from above,

181
00:08:48,328 --> 00:08:51,231
converting the results to JSON.

182
00:08:51,231 --> 00:08:53,366
With that, you can access
the weather alerts

183
00:08:53,366 --> 00:08:55,668
and their details.

184
00:08:55,668 --> 00:08:58,538
So again, another example
of how easy it is

185
00:08:58,538 --> 00:09:02,942
for you to access weather data,
only this time through REST.

186
00:09:02,942 --> 00:09:05,745
To go into more depth
about the setup you need,

187
00:09:05,745 --> 00:09:08,815
let's revisit auth.

188
00:09:08,815 --> 00:09:10,517
For the WeatherKit REST API,

189
00:09:10,517 --> 00:09:14,821
there are a few additional steps
to handle authentication.

190
00:09:14,821 --> 00:09:16,956
In the Developer Portal,
you'll enable access

191
00:09:16,956 --> 00:09:20,226
for WeatherKit requests by
creating an authentication key

192
00:09:20,226 --> 00:09:24,531
enabled for WeatherKit
and an associated services ID.

193
00:09:24,531 --> 00:09:25,999
The private key can be created

194
00:09:25,999 --> 00:09:29,269
in the Keys section
of the Developer Portal.

195
00:09:29,269 --> 00:09:32,172
WeatherKit requires tokens
to validate authorization

196
00:09:32,172 --> 00:09:33,706
on each request.

197
00:09:33,706 --> 00:09:36,242
So on your server,
you'll deploy a token service

198
00:09:36,242 --> 00:09:40,814
for creating a signed JSON web
token using your private key.

199
00:09:40,814 --> 00:09:43,883
For those familiar with JSON
web token authentication,

200
00:09:43,883 --> 00:09:46,853
this is a fairly standard
authorization flow,

201
00:09:46,853 --> 00:09:48,021
but let me share some details

202
00:09:48,021 --> 00:09:51,291
in case this is your first time
working with it.

203
00:09:51,291 --> 00:09:52,592
To generate a signed token

204
00:09:52,592 --> 00:09:55,762
you'll create the header
containing the fields and values

205
00:09:55,762 --> 00:09:59,165
described in the
developer documentation.

206
00:09:59,165 --> 00:10:02,068
Then create the payload
containing the information

207
00:10:02,068 --> 00:10:06,105
specific to the WeatherKit
REST API and your application,

208
00:10:06,105 --> 00:10:08,808
including items such
as the issuer, subject,

209
00:10:08,808 --> 00:10:11,311
and expiration time.

210
00:10:11,311 --> 00:10:13,246
And finally,
you'll sign the token

211
00:10:13,246 --> 00:10:17,617
for use with a subsequent call
to the WeatherKit REST API.

212
00:10:17,617 --> 00:10:20,086
Going back to
my weather alerts example,

213
00:10:20,086 --> 00:10:24,190
here's where you'll request the
token from your signing service,

214
00:10:24,190 --> 00:10:26,593
and add the token
to the Authorization header

215
00:10:26,593 --> 00:10:31,030
of your HTTP request
for weather data.

216
00:10:31,030 --> 00:10:33,633
So that's
the WeatherKit REST API.

217
00:10:33,633 --> 00:10:36,269
One of two great ways
for you to access weather data

218
00:10:36,269 --> 00:10:38,438
from the Apple Weather Service.

219
00:10:38,438 --> 00:10:41,007
Lastly, I'll cover a few
additional requirements

220
00:10:41,007 --> 00:10:44,110
for publishing on the App Store
or before you go live

221
00:10:44,110 --> 00:10:47,914
on any platform
using the REST API.

222
00:10:47,914 --> 00:10:50,049
Each of these requirements
apply regardless

223
00:10:50,049 --> 00:10:54,387
of whether you're using
the native Swift or REST APIs.

224
00:10:54,387 --> 00:10:57,090
The first requirement
is attribution.

225
00:10:57,090 --> 00:10:58,858
As you saw in my demo,
you'll get a link

226
00:10:58,858 --> 00:11:01,528
from our Attribution API
which you'll need to display

227
00:11:01,528 --> 00:11:04,163
in your native or web app.

228
00:11:04,163 --> 00:11:07,233
The second requirement
is an attribution logo.

229
00:11:07,233 --> 00:11:10,303
The WeatherKit API
makes this easy and convenient

230
00:11:10,303 --> 00:11:15,041
by providing the image assets
you need to display in your app.

231
00:11:15,041 --> 00:11:17,644
And finally, if you'll be
displaying weather alerts,

232
00:11:17,644 --> 00:11:19,512
you'll also need to link
to an event page

233
00:11:19,512 --> 00:11:21,848
provided in the response.

234
00:11:21,848 --> 00:11:24,284
So that's how easy it is
to prepare your app

235
00:11:24,284 --> 00:11:27,554
for publication
on the App Store or the web.

236
00:11:27,554 --> 00:11:28,888
So that's WeatherKit --

237
00:11:28,888 --> 00:11:32,559
hyperlocal forecasts powered
the Apple Weather Service

238
00:11:32,559 --> 00:11:36,663
accessible through our Swift
framework and our REST API.

239
00:11:36,663 --> 00:11:38,731
Both open up a world
of possibilities

240
00:11:38,731 --> 00:11:40,934
for you to use weather data
in your apps,

241
00:11:40,934 --> 00:11:43,670
on any platform or device.

242
00:11:43,670 --> 00:11:45,805
We hope you enjoyed
this session.

243
00:11:45,805 --> 00:11:48,741
Besides checking out the links
associated with this session,

244
00:11:48,741 --> 00:11:51,311
read the docs
and download the project.

245
00:11:51,311 --> 00:11:53,646
And of course,
we'd love your feedback.

246
00:11:53,646 --> 00:11:57,116
We can't wait to see all of
the creative and impactful ways

247
00:11:57,116 --> 00:11:58,818
you use WeatherKit.

248
00:11:58,818 --> 00:12:01,621
Thank you and have a great WWDC!

249
00:12:01,621 --> 00:12:05,725
♪

