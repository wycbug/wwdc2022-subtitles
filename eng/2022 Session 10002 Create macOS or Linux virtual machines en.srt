1
00:00:00,334 --> 00:00:06,340
[upbeat music]

2
00:00:09,009 --> 00:00:14,014
Benjamin Poulain: Hi everyone, and welcome
to our session about virtualization.

3
00:00:14,047 --> 00:00:17,451
This is what we are going
to do together today.

4
00:00:17,484 --> 00:00:22,222
We'll see how you can run macOS
and Linux inside virtual machines,

5
00:00:22,256 --> 00:00:24,258
on Apple silicon.

6
00:00:24,291 --> 00:00:28,896
By the end of this session, you will
be able to do the same on your own Mac.

7
00:00:28,929 --> 00:00:31,798
This may seem a little ambitious,
but stick with us,

8
00:00:31,832 --> 00:00:33,567
and we'll do it together.

9
00:00:33,600 --> 00:00:35,502
Here is our agenda for today.

10
00:00:35,536 --> 00:00:38,739
We will start with an overview
of virtualization technologies,

11
00:00:38,772 --> 00:00:43,744
and we'll see how to use Virtualization
framework to build virtual machines.

12
00:00:43,777 --> 00:00:47,114
Then we'll do a deep dive into macOS.

13
00:00:47,147 --> 00:00:51,919
We'll see how we can set up a virtual Mac
and install macOS into it.

14
00:00:51,952 --> 00:00:56,423
And finally, we'll do a second deep dive,
this time into Linux.

15
00:00:56,456 --> 00:00:58,825
We'll see how
to run full Linux distributions

16
00:00:58,859 --> 00:01:01,261
and some cool new features.

17
00:01:01,295 --> 00:01:03,830
Let’s get started with the overview.

18
00:01:03,864 --> 00:01:08,068
We'll first look into the stack
that enables virtualization.

19
00:01:08,101 --> 00:01:10,904
It all starts with hardware.

20
00:01:10,938 --> 00:01:14,608
Apple silicon has special hardware
that enables the virtualization

21
00:01:14,641 --> 00:01:16,143
of CPUs and memory.

22
00:01:16,176 --> 00:01:20,848
This means you can run multiple
operating systems on top of a single SoC.

23
00:01:20,881 --> 00:01:24,084
Next, we need software
to take advantage of this hardware.

24
00:01:24,117 --> 00:01:27,421
And this is built right
into the macOS kernel.

25
00:01:27,454 --> 00:01:30,424
You no longer need to write
kernel extensions, or KEXTs.

26
00:01:30,457 --> 00:01:32,993
It's all built in.

27
00:01:33,026 --> 00:01:35,162
To use those capabilities
from your application,

28
00:01:35,195 --> 00:01:37,698
you can use Hypervisor framework.

29
00:01:37,731 --> 00:01:43,537
Hypervisor framework is a low-level API
that lets you virtualize CPUs and memory.

30
00:01:43,570 --> 00:01:46,206
But, because it's
a low-level framework,

31
00:01:46,240 --> 00:01:50,377
you need to write every single detail
of the virtual environment.

32
00:01:50,410 --> 00:01:53,547
Oftentimes,
we want to run full operating systems.

33
00:01:53,580 --> 00:01:58,919
For this, there is a higher-level API,
which is Virtualization framework.

34
00:01:58,952 --> 00:02:02,022
Virtualization framework enables
the creation of virtual machines

35
00:02:02,055 --> 00:02:08,061
running macOS on Apple silicon
or Linux on both Apple silicon and Intel.

36
00:02:08,095 --> 00:02:11,064
Today, our session will focus
on Virtualization framework.

37
00:02:11,098 --> 00:02:14,668
When using Virtualization framework,
we'll deal with two kinds of objects.

38
00:02:14,701 --> 00:02:17,070
The first kind are configuration objects.

39
00:02:17,104 --> 00:02:20,107
They define all the properties
of our virtual machines.

40
00:02:20,140 --> 00:02:22,743
The second kind
are virtual machine objects.

41
00:02:22,776 --> 00:02:27,548
Those objects abstract virtual machines
and how to interact with them.

42
00:02:27,581 --> 00:02:31,185
We'll start
with looking at the configuration.

43
00:02:31,218 --> 00:02:34,221
The configuration defines the hardware.

44
00:02:34,254 --> 00:02:38,425
Creating a configuration is
like configuring a Mac on the Apple Store.

45
00:02:38,458 --> 00:02:42,863
We define how many CPUs we want,
how much memory, what kind of devices.

46
00:02:42,896 --> 00:02:45,532
We can start from a simple configuration.

47
00:02:45,566 --> 00:02:47,801
We can add a display,
and we get to see the content.

48
00:02:47,835 --> 00:02:50,404
We can add a keyboard, and we can type.

49
00:02:50,437 --> 00:02:53,707
We can add a trackpad,
and we can interact with the UI.

50
00:02:53,740 --> 00:02:57,211
Configuring a virtual machine
is just like that.

51
00:02:57,244 --> 00:02:59,313
But since we are dealing
with virtual machines,

52
00:02:59,346 --> 00:03:01,515
we'll do this in code.

53
00:03:01,548 --> 00:03:05,319
Let’s see how we can write
the configuration in Swift.

54
00:03:05,352 --> 00:03:07,921
Defining the hardware is very simple.

55
00:03:07,955 --> 00:03:12,025
We start with an object of type
VZVirtualMachineConfiguration.

56
00:03:12,059 --> 00:03:15,762
This is the root object
of all configurations.

57
00:03:15,796 --> 00:03:19,700
Next, we define how many CPUs
our machine should have.

58
00:03:19,733 --> 00:03:22,102
Here we give four CPUs.

59
00:03:22,135 --> 00:03:24,571
Then, we set how much memory we want.

60
00:03:24,605 --> 00:03:27,975
In this case,
we give four gigabytes of memory.

61
00:03:28,008 --> 00:03:31,578
Finally, we define the devices
our machine will have.

62
00:03:31,612 --> 00:03:34,515
In this example,
we set a single storage device,

63
00:03:34,548 --> 00:03:38,952
the disk to boot from,
and a pointing device, like a mouse.

64
00:03:38,986 --> 00:03:40,721
There are many devices available.

65
00:03:40,754 --> 00:03:44,558
The ones you set up depend
on the problem you want to solve.

66
00:03:44,591 --> 00:03:46,059
Now we've seen the configuration.

67
00:03:46,093 --> 00:03:48,629
It starts
with VZVirtualMachineConfiguration,

68
00:03:48,662 --> 00:03:53,333
on which we add the CPUs,
the memory, and the devices.

69
00:03:53,367 --> 00:03:56,970
Next, we'll look
into the virtual machine objects.

70
00:03:58,205 --> 00:04:00,874
After we have configured our Mac,
we get it by the mail.

71
00:04:00,908 --> 00:04:03,677
It's time to unbox it and start it.

72
00:04:03,710 --> 00:04:06,079
But since we are dealing
with virtual machine,

73
00:04:06,113 --> 00:04:08,515
we need to do that in code.

74
00:04:08,549 --> 00:04:11,585
Let’s see how we can do it in Swift.

75
00:04:11,618 --> 00:04:14,688
First, we'll create an instance
of VZVirtualMachine

76
00:04:14,721 --> 00:04:16,223
from our configuration.

77
00:04:16,256 --> 00:04:20,627
A VZVirtualMachine abstracts
an instance of the virtual hardware.

78
00:04:20,661 --> 00:04:23,397
Now that we have the virtual machine,
we can operate on it.

79
00:04:23,430 --> 00:04:27,901
For example, in this case,
we call start() to start it.

80
00:04:27,935 --> 00:04:30,237
We'll often want to interact
with our virtual machines.

81
00:04:30,270 --> 00:04:33,507
For this,
we have other objects to help us.

82
00:04:33,540 --> 00:04:36,410
For example,
if we want to show our virtual display,

83
00:04:36,443 --> 00:04:39,680
we can use an object
of type VZVirtualMachineView.

84
00:04:39,713 --> 00:04:41,648
We start by creating a view.

85
00:04:41,682 --> 00:04:45,619
Then we set our virtual machine as
the virtualMachine property on the view,

86
00:04:45,652 --> 00:04:47,154
and it's ready.

87
00:04:47,187 --> 00:04:51,525
Now we can use this VZVirtualMachineView
object like any NSView.

88
00:04:51,558 --> 00:04:55,395
We can integrate it in our app
to see the content of the virtual machine.

89
00:04:56,964 --> 00:04:59,967
To wrap up,
we've seen the configuration.

90
00:05:00,000 --> 00:05:03,770
The configuration starts
with VZVirtualMachineConfiguration,

91
00:05:03,804 --> 00:05:08,208
from which we define the CPUs,
memory, and our devices.

92
00:05:08,242 --> 00:05:10,878
From the configuration,
we will create a virtual machine,

93
00:05:10,911 --> 00:05:13,480
and we will use virtual machine objects.

94
00:05:13,514 --> 00:05:17,651
We've seen VZVirtualMachine
to abstract the VM itself,

95
00:05:17,684 --> 00:05:20,554
VZVirtualMachineView to display content,

96
00:05:20,587 --> 00:05:23,624
and there are other objects
that can help us use the VM.

97
00:05:23,657 --> 00:05:26,927
We have seen that the configuration
gives a lot of flexibility

98
00:05:26,960 --> 00:05:29,162
in how we define virtual machines.

99
00:05:29,196 --> 00:05:33,667
Unfortunately, there are
too many features to cover in one session.

100
00:05:33,700 --> 00:05:37,437
In this session, we will look
into some of the core capabilities.

101
00:05:37,471 --> 00:05:39,873
For everything else,
we have documentation,

102
00:05:39,907 --> 00:05:42,943
and I invite you to check it out.

103
00:05:42,976 --> 00:05:46,647
In the overview,
we just saw how to build virtual machines.

104
00:05:46,680 --> 00:05:50,684
Now it is time to look into how we can
run a full operating system in them.

105
00:05:50,717 --> 00:05:52,953
And we will start with macOS.

106
00:05:52,986 --> 00:05:56,790
Virtualization framework supports macOS
on Apple silicon.

107
00:05:56,823 --> 00:05:59,126
When we built Virtualization framework
on Apple silicon,

108
00:05:59,159 --> 00:06:03,163
we've developed macOS
and Virtualization framework together.

109
00:06:03,197 --> 00:06:05,966
What this gives us
is incredible efficiency

110
00:06:05,999 --> 00:06:08,735
when running macOS
inside virtual machines.

111
00:06:08,769 --> 00:06:11,038
Here is what we are going to see:

112
00:06:11,071 --> 00:06:12,973
First, we will look into what we need

113
00:06:13,006 --> 00:06:16,376
to turn a virtual machine
into a virtual Mac.

114
00:06:16,410 --> 00:06:20,914
Then we'll look into the steps
to install macOS on our virtual Mac.

115
00:06:20,948 --> 00:06:25,352
Next, we'll see some
of the special devices we have for macOS.

116
00:06:25,385 --> 00:06:28,822
And finally, we will look
into a very important use case,

117
00:06:28,856 --> 00:06:32,826
which is sharing files between
the host system and the virtual Mac.

118
00:06:34,261 --> 00:06:36,830
Let’s start with the configuration.

119
00:06:36,864 --> 00:06:40,167
We have seen before how
to build a generic virtual machine.

120
00:06:40,200 --> 00:06:45,706
Now we want to add the special properties
that will make a virtual machine a Mac.

121
00:06:45,739 --> 00:06:48,976
So how do we make a virtual Mac?

122
00:06:49,009 --> 00:06:51,879
First, we will define a special platform.

123
00:06:51,912 --> 00:06:55,315
A platform is an object
that holds all the properties

124
00:06:55,349 --> 00:06:57,684
of a particular type of virtual machine.

125
00:06:57,718 --> 00:07:02,122
There are three properties that are unique
to the virtual Mac hardware.

126
00:07:02,155 --> 00:07:04,358
First, we have the hardware model.

127
00:07:04,391 --> 00:07:09,196
The hardware model specifies
which version of the virtual Mac we want.

128
00:07:09,229 --> 00:07:11,265
Second, there is the auxiliary storage.

129
00:07:11,298 --> 00:07:15,969
The auxiliary storage is a form
of non-volatile memory used by the system.

130
00:07:16,003 --> 00:07:19,239
And third,
there is the machine identifier.

131
00:07:19,273 --> 00:07:22,676
The machine identifier is
a unique number representing the machine,

132
00:07:22,709 --> 00:07:26,113
just like a physical Mac
has a unique serial number.

133
00:07:26,146 --> 00:07:29,883
Once we have the platform, we have
all the pieces to describe the hardware,

134
00:07:29,917 --> 00:07:34,621
but we need one more piece,
which is a way to boot macOS.

135
00:07:34,655 --> 00:07:36,890
For this, we will use
a special boot loader,

136
00:07:36,924 --> 00:07:39,126
the macOS boot loader.

137
00:07:39,159 --> 00:07:43,063
Let’s see how to do all of this in Swift.

138
00:07:43,096 --> 00:07:44,932
We start from the same base as before.

139
00:07:44,965 --> 00:07:48,635
This code is what
we have seen in the overview.

140
00:07:48,669 --> 00:07:52,506
Then we create
a VZMacPlatformConfiguration.

141
00:07:52,539 --> 00:07:56,043
This is our platform object
for virtual Macs.

142
00:07:56,076 --> 00:07:58,011
We need a hardware model for this Mac.

143
00:07:58,045 --> 00:08:01,315
Here we use one we previously saved.

144
00:08:01,348 --> 00:08:03,650
In virtual machines,
the auxiliary storage is backed

145
00:08:03,684 --> 00:08:06,119
by a file on the local filesystem.

146
00:08:06,153 --> 00:08:09,957
Here, we initialize our auxiliary storage
from a file URL.

147
00:08:09,990 --> 00:08:13,760
For the unique identifier,
we initialize a VZMacMachineIdentifier

148
00:08:13,794 --> 00:08:15,762
from one we previously saved.

149
00:08:15,796 --> 00:08:19,633
For a new install,
we can also create a new identifier.

150
00:08:19,666 --> 00:08:23,470
We have set all three properties.
Our platform is ready.

151
00:08:23,504 --> 00:08:27,107
All we have to do is set it
on the configuration object.

152
00:08:27,140 --> 00:08:31,011
This gives us the hardware.
Next we need a way to boot it.

153
00:08:31,912 --> 00:08:36,383
To do that, we set up the boot loader
with VZMacBootLoader.

154
00:08:36,416 --> 00:08:38,719
Now our machine is ready to boot.

155
00:08:38,752 --> 00:08:43,123
What we have done so far is define
the virtual Mac and how to start it.

156
00:08:43,156 --> 00:08:45,125
But we still need to get software on it,

157
00:08:45,158 --> 00:08:48,395
which brings us to the installation.

158
00:08:48,428 --> 00:08:51,265
Installing macOS is done in three steps.

159
00:08:51,298 --> 00:08:54,501
First, we need to download
a restore image with the version

160
00:08:54,535 --> 00:08:56,703
of macOS we want to install.

161
00:08:56,737 --> 00:08:58,939
Then we need to create a configuration

162
00:08:58,972 --> 00:09:01,942
that is compatible
with that version of macOS.

163
00:09:01,975 --> 00:09:04,645
And finally,
we’ll install our restore image

164
00:09:04,678 --> 00:09:07,114
in the compatible virtual machine.

165
00:09:07,147 --> 00:09:10,117
So first,
we need to download a restore image.

166
00:09:10,150 --> 00:09:12,753
You can download restore images
from the developer website,

167
00:09:12,786 --> 00:09:15,989
but Virtualization can also help us.

168
00:09:16,023 --> 00:09:19,927
You can call
VZMacOSRestoreImage.latestSupported

169
00:09:19,960 --> 00:09:25,032
to get a restore image object
for the latest stable version of macOS.

170
00:09:25,065 --> 00:09:29,570
This object has a URL property
that we can use to download the file.

171
00:09:29,603 --> 00:09:32,739
Then we want to create a virtual machine
that is compatible

172
00:09:32,773 --> 00:09:35,409
with the version of macOS we downloaded.

173
00:09:35,442 --> 00:09:37,811
Virtualization can also help us here.

174
00:09:37,845 --> 00:09:42,249
We can ask the restore image object
for the configuration requirements.

175
00:09:42,282 --> 00:09:44,985
If the restore image can be run
on the current system,

176
00:09:45,018 --> 00:09:47,888
we get an object listing the requirements.

177
00:09:47,921 --> 00:09:50,858
From the requirements,
we can obtain the hardware model needed

178
00:09:50,891 --> 00:09:52,993
needed to run this version of macOS.

179
00:09:53,026 --> 00:09:55,929
We have seen previously how
to restore a hardware model.

180
00:09:55,963 --> 00:09:58,665
This is how we obtain a new one.

181
00:09:59,800 --> 00:10:03,470
The requirements
also contain two useful properties.

182
00:10:03,504 --> 00:10:07,808
The object can tell us how many CPUs
and how much memory is required

183
00:10:07,841 --> 00:10:10,410
to run this version of macOS.

184
00:10:11,345 --> 00:10:14,348
Finally, we are ready
to start installation.

185
00:10:14,381 --> 00:10:18,218
We start by creating a new virtual machine
from our configuration.

186
00:10:18,252 --> 00:10:20,354
Then we create an installer.

187
00:10:20,387 --> 00:10:22,789
The installer takes two arguments,

188
00:10:22,823 --> 00:10:25,392
the compatible virtual machine we created

189
00:10:25,425 --> 00:10:28,662
and the path
to the restore image we downloaded.

190
00:10:28,695 --> 00:10:32,933
Now we can just call install(),
and voilà, we are ready to run macOS.

191
00:10:33,901 --> 00:10:37,104
Now that we can set up a virtual Mac
and install macOS,

192
00:10:37,137 --> 00:10:41,241
let’s see some
of the special devices for the Mac.

193
00:10:41,275 --> 00:10:44,912
A first cool capability
is GPU acceleration.

194
00:10:44,945 --> 00:10:48,582
We have built a graphic device
that exposes the GPU capabilities

195
00:10:48,615 --> 00:10:50,184
to the virtual Mac.

196
00:10:50,217 --> 00:10:53,020
This means you can run Metal
in the virtual machine,

197
00:10:53,053 --> 00:10:56,156
and get great graphics performance
in macOS.

198
00:10:56,190 --> 00:10:58,125
Let’s see how to set it up.

199
00:10:59,626 --> 00:11:02,496
We start by creating
the graphics device configuration.

200
00:11:02,529 --> 00:11:06,333
Here, we will use
the VZMacGraphicsDeviceConfiguration.

201
00:11:06,366 --> 00:11:08,402
Next, we want to give it a display.

202
00:11:08,435 --> 00:11:13,040
We set up the display
by defining its size and pixel density.

203
00:11:13,073 --> 00:11:15,342
Now our device configuration is ready.

204
00:11:15,375 --> 00:11:18,712
As usual, we set it
on the main configuration object.

205
00:11:18,745 --> 00:11:22,249
We set it as the graphics device
for our virtual machine.

206
00:11:23,383 --> 00:11:26,553
Next, we have a new device
for interacting with the Mac.

207
00:11:26,587 --> 00:11:29,890
In macOS Ventura,
we are adding the Mac trackpad support

208
00:11:29,923 --> 00:11:31,558
to the virtual Mac.

209
00:11:31,592 --> 00:11:34,127
With the new trackpad,
it is possible to use gestures

210
00:11:34,161 --> 00:11:37,431
like rotation, pinch to zoom, and so on.

211
00:11:37,464 --> 00:11:40,300
This new device uses new drivers in macOS.

212
00:11:40,334 --> 00:11:42,236
So to use it,
you will need macOS 13

213
00:11:42,269 --> 00:11:45,572
both on the host system
and in the virtual machine.

214
00:11:45,606 --> 00:11:48,208
Let’s see how to set it up.

215
00:11:48,242 --> 00:11:50,210
It’s very easy.

216
00:11:50,244 --> 00:11:54,181
We create a new object
of type VZMacTrackpadConfiguration.

217
00:11:54,214 --> 00:11:58,218
Then we set it as the pointing device
on the virtual machine.

218
00:11:58,252 --> 00:12:03,557
Now when we’ll use the view
with our virtual Mac, we can use gestures.

219
00:12:03,590 --> 00:12:06,627
Finally, let’s look into a common use case
for many of us,

220
00:12:06,660 --> 00:12:10,998
sharing files between the host system
and the virtual machine.

221
00:12:11,031 --> 00:12:14,635
In macOS 12,
we introduced the Virtio file-system device

222
00:12:14,668 --> 00:12:16,637
to share files on Linux.

223
00:12:16,670 --> 00:12:20,407
In macOS Ventura,
we are adding support for macOS.

224
00:12:20,440 --> 00:12:23,744
You can now pick folders that you want
to share with the virtual machine.

225
00:12:23,777 --> 00:12:26,980
Any change you make from the host system
is instantly reflected

226
00:12:27,014 --> 00:12:29,850
within the virtual machine
and vice versa.

227
00:12:29,883 --> 00:12:32,152
Let’s see how to set it up.

228
00:12:32,186 --> 00:12:37,324
First, we create a VZShareDirectory
with a directory we want to share.

229
00:12:37,357 --> 00:12:39,726
Then we create a share object.

230
00:12:39,760 --> 00:12:43,931
Here we'll use VZSingleDirectoryShare
to share a single directory.

231
00:12:43,964 --> 00:12:48,802
You can also share multiple directories
by using VZMultipleDirectoryShare.

232
00:12:48,836 --> 00:12:51,438
Now that we have the share,
we need to create a device.

233
00:12:51,471 --> 00:12:54,241
But we will start we something special.

234
00:12:54,274 --> 00:12:56,810
File system devices
are identified by a tag.

235
00:12:56,844 --> 00:12:59,913
In macOS Ventura,
we have added a special tag

236
00:12:59,947 --> 00:13:03,217
to tell the virtual machine
to automount this device.

237
00:13:03,250 --> 00:13:07,521
Here, we take this special tag,
macOSGuestAutomountTag.

238
00:13:07,554 --> 00:13:11,325
Then we create the device
and use our special tag.

239
00:13:11,358 --> 00:13:14,995
We set the share
from the single directory we configured.

240
00:13:15,028 --> 00:13:19,266
And finally, we add the device
to the configuration as usual.

241
00:13:19,299 --> 00:13:23,737
Finally, let’s look
at everything together in a demo.

242
00:13:23,770 --> 00:13:26,273
We start from a basic configuration.

243
00:13:26,306 --> 00:13:28,342
We have a VZVirtualMachineConfiguration

244
00:13:28,375 --> 00:13:33,814
with just CPU,
memory, a keyboard, and a disk.

245
00:13:33,847 --> 00:13:35,449
We want a virtual Mac.

246
00:13:35,482 --> 00:13:39,086
To do that, we need to start
by setting up the platform.

247
00:13:39,119 --> 00:13:43,524
We'll use createMacPlatform
that is defined above to do that.

248
00:13:43,557 --> 00:13:46,426
The second piece
of a virtual Mac is the boot loader.

249
00:13:46,460 --> 00:13:49,997
We need a boot loader
that knows how to boot macOS.

250
00:13:50,030 --> 00:13:52,699
To get that,
we set the platform's boot loader

251
00:13:52,733 --> 00:13:55,536
to VZMacOSBootLoader().

252
00:13:55,569 --> 00:13:58,238
Next, we want to set up the devices.

253
00:13:58,272 --> 00:14:00,507
We want accelerated graphics.

254
00:14:00,541 --> 00:14:04,711
To get it, we will set up
a VZMacGraphicsConfiguration.

255
00:14:04,745 --> 00:14:06,413
We create the object,

256
00:14:06,446 --> 00:14:09,383
define the display size and pixel density,

257
00:14:09,416 --> 00:14:12,186
and we add it to the configuration.

258
00:14:12,219 --> 00:14:14,755
Next, we want to use the new trackpad.

259
00:14:14,788 --> 00:14:17,224
All we need to do
is set the pointing device

260
00:14:17,257 --> 00:14:19,426
to VZMacTrackpadConfiguration.

261
00:14:19,459 --> 00:14:20,694
That's it.

262
00:14:20,727 --> 00:14:24,765
Now, we could start the VM,
but let's add the cherry on top.

263
00:14:24,798 --> 00:14:27,134
We have seen how we can share directories.

264
00:14:27,167 --> 00:14:29,169
Let's do it here.

265
00:14:29,203 --> 00:14:32,406
We start by creating
the filesystem device configuration.

266
00:14:32,439 --> 00:14:37,010
Here, notice we use the special tag
to automount it into macOS.

267
00:14:37,044 --> 00:14:38,879
Then we define our share.

268
00:14:38,912 --> 00:14:42,649
Here we use a single directory share
from a path on the file system.

269
00:14:42,683 --> 00:14:46,019
Here, we will share this project
we are editing right now.

270
00:14:47,254 --> 00:14:50,457
We add the device to our configuration,
and we are done.

271
00:14:51,391 --> 00:14:55,128
Everything is ready.
We launch our app.

272
00:14:55,162 --> 00:14:57,598
Since we configured
the Mac graphics device,

273
00:14:57,631 --> 00:15:01,101
the VZVirtualMachineView
can show the content.

274
00:15:01,134 --> 00:15:04,271
This is what you see here in the window.

275
00:15:04,304 --> 00:15:08,008
And here it is.
We have configured macOS from scratch.

276
00:15:08,041 --> 00:15:11,678
We can see the shared directory
and the project we were editing right now.

277
00:15:11,712 --> 00:15:14,915
Finally, we will turn our eyes onto Linux.

278
00:15:14,948 --> 00:15:17,150
Virtualization framework has
supported Linux

279
00:15:17,184 --> 00:15:20,020
since the very beginning in macOS Big Sur.

280
00:15:20,053 --> 00:15:23,357
In macOS Ventura, we have
added some pretty cool new features,

281
00:15:23,390 --> 00:15:25,359
and we want
to share some of them with you.

282
00:15:26,660 --> 00:15:29,830
First, we will see how we can
install full Linux distributions,

283
00:15:29,863 --> 00:15:33,066
completely unmodified,
in virtual machines.

284
00:15:33,100 --> 00:15:37,604
Then we will look at a new device
we are adding to show UI from Linux.

285
00:15:37,638 --> 00:15:41,375
And finally, we will look at how
we can take advantage of Rosetta 2

286
00:15:41,408 --> 00:15:44,878
to run Linux binaries in virtual machines.

287
00:15:44,912 --> 00:15:47,181
Let’s start with installation.

288
00:15:47,214 --> 00:15:49,616
If we wanted to install Linux
on a physical machine,

289
00:15:49,650 --> 00:15:52,819
we'd start by downloading an ISO file
with the installer.

290
00:15:52,853 --> 00:15:55,923
Then we'd erase a flash drive
with the ISO.

291
00:15:55,956 --> 00:15:59,893
And finally, we'd plug the drive
in the computer and boot from it.

292
00:15:59,927 --> 00:16:03,363
When dealing with virtual machines,
we will go through the same flow.

293
00:16:03,397 --> 00:16:07,868
But instead of using a physical USB drive,
we will use a virtual one.

294
00:16:07,901 --> 00:16:09,970
Let’s see how it works.

295
00:16:10,003 --> 00:16:14,775
We start by creating an URL from the path
to the ISO file we downloaded.

296
00:16:14,808 --> 00:16:18,779
Then we create a disk image attachment
from the file.

297
00:16:18,812 --> 00:16:24,651
A disk image attachment represents a piece
of storage that we can attach to a device.

298
00:16:24,685 --> 00:16:28,155
Next, we configure
a virtual storage device.

299
00:16:28,188 --> 00:16:30,624
In this case, we want USB storage,

300
00:16:30,657 --> 00:16:35,028
so we use
VZUSBMassStorageDeviceConfiguration.

301
00:16:35,062 --> 00:16:37,030
Finally, as always,

302
00:16:37,064 --> 00:16:39,533
we add our device
in the main configuration.

303
00:16:39,566 --> 00:16:42,736
Here, the USB device appears
next to another storage device,

304
00:16:42,769 --> 00:16:45,706
the main disk
on which we will install Linux.

305
00:16:45,739 --> 00:16:49,343
Now we have a USB drive,
but we need a way to boot from it.

306
00:16:50,310 --> 00:16:54,081
In macOS Ventura,
we have added support for EFI.

307
00:16:54,114 --> 00:16:58,952
EFI is an industry standard
for booting both ARM and Intel hardware.

308
00:16:58,986 --> 00:17:02,556
We are bringing the same support
to virtual machines.

309
00:17:02,589 --> 00:17:05,259
EFI has a boot discovery mechanism.

310
00:17:05,292 --> 00:17:09,496
What this will allow is discovering
the installer on our USB drive.

311
00:17:09,530 --> 00:17:13,100
EFI looks at each drive
for one that can be booted.

312
00:17:13,133 --> 00:17:16,003
It will find the installer
and start from there.

313
00:17:16,036 --> 00:17:19,373
The installer itself will
tell EFI what drive to use next.

314
00:17:19,406 --> 00:17:23,577
After the installation,
EFI can then start the Linux distribution.

315
00:17:23,610 --> 00:17:26,847
Let’s see how to set up EFI in code.

316
00:17:26,880 --> 00:17:31,018
First, we create a boot loader
of type VZEFIBootLoader.

317
00:17:31,051 --> 00:17:35,355
EFI requires non-volatile memory
to store information between boots.

318
00:17:35,389 --> 00:17:38,258
This is called the EFI variable store.

319
00:17:38,292 --> 00:17:40,761
With virtual machines,
we can back such storage

320
00:17:40,794 --> 00:17:42,863
by a file on the filesystem.

321
00:17:42,896 --> 00:17:46,033
Here, we create
a new variable store from scratch.

322
00:17:46,066 --> 00:17:47,568
Now EFI is ready.

323
00:17:47,601 --> 00:17:51,705
We just need to set it
as the boot loader on the configuration.

324
00:17:51,738 --> 00:17:57,010
Next, we will look into a new capability
for Linux VMs, graphics.

325
00:17:57,044 --> 00:18:01,515
In macOS Ventura,
we have added support for Virtio GPU 2D.

326
00:18:01,548 --> 00:18:05,285
Virtio GPU 2D is a paravirtualized device
that allows Linux

327
00:18:05,319 --> 00:18:08,455
to provide surfaces to the host macOS.

328
00:18:08,488 --> 00:18:11,325
Linux renders the content,
gives the rendered frame

329
00:18:11,358 --> 00:18:14,494
to Virtualization framework,
which can then display it.

330
00:18:14,528 --> 00:18:18,765
You can now show this content
in your app with VZVirtualMachineView

331
00:18:18,799 --> 00:18:21,201
just like on macOS.

332
00:18:21,235 --> 00:18:23,237
Let’s see how to set it up.

333
00:18:24,571 --> 00:18:28,542
Setting up the device is similar
to what we did for macOS.

334
00:18:28,575 --> 00:18:32,946
We start by creating
a VZVirtioGraphicsDeviceConfiguration.

335
00:18:32,980 --> 00:18:36,149
We need to define the size
of our virtual display.

336
00:18:36,183 --> 00:18:39,953
In Virtio terminology,
a virtual display is a "scanout."

337
00:18:39,987 --> 00:18:44,892
So we create one scanout
with the size of the display.

338
00:18:44,925 --> 00:18:48,262
Finally, we set the new device
as the graphics device

339
00:18:48,295 --> 00:18:49,963
of our configuration.

340
00:18:49,997 --> 00:18:54,168
Now our VM is ready to display content
with VZVirtualMachineView.

341
00:18:54,201 --> 00:18:58,405
Next, let’s see everything
together in a demo.

342
00:18:58,438 --> 00:19:00,040
We start from where we left off.

343
00:19:00,073 --> 00:19:03,143
Let's delete the code
that is specific to the Mac.

344
00:19:03,177 --> 00:19:05,479
Then let's change the disk
we are booting from.

345
00:19:05,512 --> 00:19:09,950
We'll swap the path
from our Mac drive to our Linux drive.

346
00:19:09,983 --> 00:19:12,386
Next, we need a boot loader.

347
00:19:12,419 --> 00:19:16,156
We set up EFI with VZEFIBootLoader.

348
00:19:16,924 --> 00:19:19,326
We first create
the EFI boot loader object.

349
00:19:19,359 --> 00:19:22,129
Then we load
the variable store from its file.

350
00:19:22,162 --> 00:19:27,401
And finally, we set EFI
as the boot loader on our configuration.

351
00:19:27,434 --> 00:19:31,238
Now we can boot,
but it'd be nice to show the UI.

352
00:19:31,271 --> 00:19:35,008
Let's add Virtio GPU to our configuration.

353
00:19:35,042 --> 00:19:36,643
We simply create a graphics device

354
00:19:36,677 --> 00:19:40,013
of type
VZVirtioGraphicsDeviceConfiguration.

355
00:19:40,047 --> 00:19:43,884
Then we define a scanout
with the size of the virtual display.

356
00:19:43,917 --> 00:19:49,389
And we set the Virtio GPU as
a graphics device on our configuration.

357
00:19:49,423 --> 00:19:52,993
The last touch
is getting the mouse to work.

358
00:19:53,026 --> 00:19:56,330
We just use a virtual
USB screen coordinate pointer device,

359
00:19:56,363 --> 00:19:58,665
and we'll have a mouse in Linux.

360
00:19:58,699 --> 00:20:01,335
That's it.
We can run the project.

361
00:20:01,368 --> 00:20:04,471
EFI looks at the disk
and finds it bootable.

362
00:20:04,505 --> 00:20:09,977
Then Linux shows the content of the UI
through the Virtio GPU device.

363
00:20:10,010 --> 00:20:12,946
And we can use the mouse
to interact with Linux.

364
00:20:12,980 --> 00:20:15,983
Last but not least,
we'll see how we can take advantage

365
00:20:16,016 --> 00:20:19,119
of the Rosetta 2 technology inside Linux.

366
00:20:20,053 --> 00:20:23,490
For many of us,
we love developing services on our Mac,

367
00:20:23,524 --> 00:20:25,025
but once our work is ready,

368
00:20:25,058 --> 00:20:29,162
the binaries we create may need
to run on x86 servers.

369
00:20:29,196 --> 00:20:32,332
x86 instruction emulation
has been great for this,

370
00:20:32,366 --> 00:20:35,035
but we can do better.

371
00:20:35,068 --> 00:20:37,204
In macOS Ventura,
we are bringing the power

372
00:20:37,237 --> 00:20:39,673
of Rosetta 2 to Linux binaries.

373
00:20:40,807 --> 00:20:44,378
What Rosetta 2 does is translate
the Linux x86-64 binaries

374
00:20:44,411 --> 00:20:46,446
inside your virtual machine.

375
00:20:46,480 --> 00:20:49,750
This means you can run
your favorite ARM Linux distribution,

376
00:20:49,783 --> 00:20:53,253
and its x86-64 apps can run with Rosetta.

377
00:20:53,287 --> 00:20:54,755
And it's fast.

378
00:20:54,788 --> 00:20:57,658
It's the same technology
we have been using on the Mac,

379
00:20:57,691 --> 00:21:00,460
which means
we have incredible performance.

380
00:21:00,494 --> 00:21:03,530
Let’s see how to use it.

381
00:21:03,564 --> 00:21:07,000
First, we need
to give Linux access to Rosetta.

382
00:21:07,034 --> 00:21:11,705
To do this, we use the same file sharing
technology we have seen on macOS.

383
00:21:11,738 --> 00:21:15,175
Instead of sharing a folder,
we use a special kind of object,

384
00:21:15,209 --> 00:21:18,912
a VZLinuxRosettaDirectoryShare.

385
00:21:18,946 --> 00:21:24,151
Then we create a sharing device
and set up Rosetta directory share.

386
00:21:24,184 --> 00:21:28,455
Finally, we set up our device
on the configuration as usual.

387
00:21:28,488 --> 00:21:32,059
Now our virtual machine
is ready to use Rosetta.

388
00:21:32,092 --> 00:21:35,696
Next, let’s see how Linux
can take advantage of it.

389
00:21:36,930 --> 00:21:41,335
In Linux, we start by mounting
the shared directory in the file system.

390
00:21:41,368 --> 00:21:46,240
What we see from Linux is a Rosetta binary
that can translate applications.

391
00:21:46,273 --> 00:21:50,511
Then we can use update-binfmts
to tell the system to use Rosetta

392
00:21:50,544 --> 00:21:53,847
to handle any x86-64 binary.

393
00:21:53,881 --> 00:21:55,849
Don’t worry
about remembering this command.

394
00:21:55,883 --> 00:21:58,685
It's all in the documentation.

395
00:21:58,719 --> 00:22:00,921
Now Linux is ready.

396
00:22:00,954 --> 00:22:05,926
Every x86-64 binary launched
will be translated by Rosetta.

397
00:22:07,361 --> 00:22:11,832
Before we end our Linux section,
let’s see everything together.

398
00:22:11,865 --> 00:22:15,602
Here, we have a full Linux
distribution installed from scratch.

399
00:22:15,636 --> 00:22:18,705
We can show its UI with Virtio GPU 2D.

400
00:22:18,739 --> 00:22:22,776
From within the VM,
we run a PHP server with Rosetta.

401
00:22:22,809 --> 00:22:26,079
And we can just connect
to it from macOS host.

402
00:22:27,381 --> 00:22:31,518
We've seen that creating
virtual machines has never been simpler.

403
00:22:31,552 --> 00:22:34,488
With Virtualization framework,
you can get virtual machines running

404
00:22:34,521 --> 00:22:37,191
with just a few lines of code.

405
00:22:37,224 --> 00:22:42,062
We have also seen that virtual machines
are ridiculously fast on macOS.

406
00:22:42,095 --> 00:22:43,931
To learn more about Virtualization,

407
00:22:43,964 --> 00:22:47,534
I invite you to check out
the code samples and documentation.

408
00:22:47,568 --> 00:22:49,603
And on behalf of the team,
we cannot wait

409
00:22:49,636 --> 00:22:51,772
to see what you will do next
with this technology.

410
00:22:51,805 --> 00:22:57,110
[upbeat music]

