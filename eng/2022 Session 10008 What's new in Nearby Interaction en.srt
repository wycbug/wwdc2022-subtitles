1
00:00:00,033 --> 00:00:03,003
♪ instrumental hip hop music ♪

2
00:00:03,003 --> 00:00:09,910
♪

3
00:00:09,910 --> 00:00:12,713
Hi, I'm Jon Schoenberg,
and I'm an engineer

4
00:00:12,713 --> 00:00:15,082
on the Location Technologies
team at Apple.

5
00:00:15,082 --> 00:00:18,018
In this session, I'll cover
the new features we've brought

6
00:00:18,018 --> 00:00:20,721
to Nearby Interaction,
that are going to enable you

7
00:00:20,721 --> 00:00:23,123
to build richer
and more diverse experiences

8
00:00:23,123 --> 00:00:25,259
with spatial awareness.

9
00:00:25,259 --> 00:00:27,928
The Nearby Interaction
framework makes it simple

10
00:00:27,928 --> 00:00:31,398
to take advantage
of the capabilities of U1 --

11
00:00:31,398 --> 00:00:34,935
Apple's chip for Ultra Wideband
technology --

12
00:00:34,935 --> 00:00:39,139
and enables creating precise
and spatially aware interactions

13
00:00:39,139 --> 00:00:42,276
between nearby Apple devices
or accessories

14
00:00:42,276 --> 00:00:47,014
compatible with Apple's U1 chip
for Ultra Wideband.

15
00:00:47,014 --> 00:00:48,749
Let's get started
with a quick review

16
00:00:48,749 --> 00:00:52,519
of what's been available to you
over the last two years.

17
00:00:52,519 --> 00:00:56,189
When Nearby Interaction
was introduced at WWDC 2020,

18
00:00:56,189 --> 00:00:58,258
the functionality
focused on creating

19
00:00:58,258 --> 00:01:02,462
and running a session
between two iPhones with U1.

20
00:01:02,462 --> 00:01:06,333
At WWDC 2021,
the functionality was extended

21
00:01:06,333 --> 00:01:09,569
to support running sessions
with Apple Watch and third-party

22
00:01:09,569 --> 00:01:13,240
Ultra Wideband-compatible
accessories.

23
00:01:13,240 --> 00:01:14,875
If you're interested
in a deep dive

24
00:01:14,875 --> 00:01:17,511
into the Nearby Interaction
framework's APIs,

25
00:01:17,511 --> 00:01:20,847
please review the WWDC talk
"Meet Nearby Interaction"

26
00:01:20,847 --> 00:01:22,082
from 2020

27
00:01:22,082 --> 00:01:25,285
and "Explore Nearby Interaction
with third-party accessories"

28
00:01:25,285 --> 00:01:27,354
from 2021.

29
00:01:27,354 --> 00:01:29,489
We've been blown away
by the community's response

30
00:01:29,489 --> 00:01:31,992
to Nearby Interaction,
and in this session,

31
00:01:31,992 --> 00:01:34,227
I'm excited to unveil
the new capabilities

32
00:01:34,227 --> 00:01:36,530
and improvements for you.

33
00:01:36,530 --> 00:01:39,099
I will focus on two main topics:

34
00:01:39,099 --> 00:01:42,135
enhancing Nearby Interaction
with ARKit

35
00:01:42,135 --> 00:01:44,404
and background sessions.

36
00:01:44,404 --> 00:01:46,573
Along the way,
I'll share some improvements

37
00:01:46,573 --> 00:01:50,610
that make it easier to use
the Nearby Interaction framework

38
00:01:50,610 --> 00:01:54,314
and I'll conclude with an update
on third-party hardware support

39
00:01:54,314 --> 00:01:56,450
that was announced
last year.

40
00:01:56,450 --> 00:01:58,018
We're excited about
what you will do

41
00:01:58,018 --> 00:01:59,519
with the new capabilities,

42
00:01:59,519 --> 00:02:02,556
so let's dive right
into the details.

43
00:02:02,556 --> 00:02:04,992
I'll start with an exciting
new capability

44
00:02:04,992 --> 00:02:09,062
that tightly integrates ARKit
with Nearby Interaction.

45
00:02:09,062 --> 00:02:12,532
This new capability
enhances Nearby Interaction

46
00:02:12,532 --> 00:02:17,371
by leveraging the device
trajectory computed from ARKit.

47
00:02:17,371 --> 00:02:19,406
ARKit-enhanced
Nearby Interaction

48
00:02:19,406 --> 00:02:22,109
leverages the same
underlying technology

49
00:02:22,109 --> 00:02:25,345
that powers Precision Finding
with AirTag,

50
00:02:25,345 --> 00:02:29,783
and we're making it available
to you via Nearby Interaction.

51
00:02:29,783 --> 00:02:32,619
The best use cases are
experiences that guide a user

52
00:02:32,619 --> 00:02:36,189
to a specific nearby object
such as a misplaced item,

53
00:02:36,189 --> 00:02:37,524
object of interest,

54
00:02:37,524 --> 00:02:41,461
or object that the user
wants to interact with.

55
00:02:41,461 --> 00:02:44,231
By integrating ARKit
and Nearby Interaction,

56
00:02:44,231 --> 00:02:46,366
the distance and direction
information

57
00:02:46,366 --> 00:02:48,235
is more consistently available

58
00:02:48,235 --> 00:02:50,537
than using
Nearby Interaction alone,

59
00:02:50,537 --> 00:02:55,342
effectively broadening the
Ultra Wideband field of view.

60
00:02:55,342 --> 00:02:58,245
Finally, this new capability
is best used

61
00:02:58,245 --> 00:03:02,049
for interacting with
stationary devices.

62
00:03:02,049 --> 00:03:04,384
Let's jump right
into a demonstration

63
00:03:04,384 --> 00:03:07,687
of the possibilities
this new integration of ARKit

64
00:03:07,687 --> 00:03:11,358
and Nearby Interaction
enable with your application.

65
00:03:11,358 --> 00:03:14,428
I've got an application here
for my Jetpack Museum

66
00:03:14,428 --> 00:03:16,430
that has
Ultra Wideband accessories

67
00:03:16,430 --> 00:03:18,532
to help guide users
to the exhibits.

68
00:03:18,532 --> 00:03:21,968
Let's go find the next jetpack.

69
00:03:21,968 --> 00:03:24,271
As the user selects
to go to the next exhibit,

70
00:03:24,271 --> 00:03:27,307
the application discovers
the Ultra Wideband accessory

71
00:03:27,307 --> 00:03:29,142
and performs
the necessary exchanges

72
00:03:29,142 --> 00:03:31,645
to start using
Nearby Interaction.

73
00:03:31,645 --> 00:03:33,914
The application
then instructs the user

74
00:03:33,914 --> 00:03:37,584
to move the phone side to side
while it begins to determine

75
00:03:37,584 --> 00:03:40,387
the physical location
of the next exhibit,

76
00:03:40,387 --> 00:03:45,058
using the enhanced Nearby
Interaction mode with ARKit.

77
00:03:45,058 --> 00:03:47,727
Now that the application
understands the direction

78
00:03:47,727 --> 00:03:49,996
that corresponds
to the next exhibit,

79
00:03:49,996 --> 00:03:52,499
a simple arrow icon
telling the user

80
00:03:52,499 --> 00:03:55,869
the direction to head
to check it out appears.

81
00:03:55,869 --> 00:03:58,505
This rich, spatially-aware
information

82
00:03:58,505 --> 00:04:02,576
utilizing the combination
of ARKit and Nearby Interaction

83
00:04:02,576 --> 00:04:06,313
can even indicate when
the exhibit is behind the user

84
00:04:06,313 --> 00:04:10,250
and the user is heading in a
direction away from the exhibit.

85
00:04:10,250 --> 00:04:12,719
Finally, the application
can display,

86
00:04:12,719 --> 00:04:16,690
in the AR world, an overlay
of the next exhibit's location,

87
00:04:16,690 --> 00:04:19,159
and the application prompts
the user to move the iPhone

88
00:04:19,159 --> 00:04:22,262
up and down slightly
to resolve where the exhibit is

89
00:04:22,262 --> 00:04:23,964
in the AR world.

90
00:04:23,964 --> 00:04:26,566
Once the AR content
is placed in the scene,

91
00:04:26,566 --> 00:04:29,769
the powerful combination
of Nearby Interaction --

92
00:04:29,769 --> 00:04:31,705
with its Ultra Wideband
measurements --

93
00:04:31,705 --> 00:04:35,642
and ARKit, allows the user
to easily head over

94
00:04:35,642 --> 00:04:38,111
to check out the next jetpack.

95
00:04:38,111 --> 00:04:42,349
I may not have found a jetpack,
but I found a queen.

96
00:04:42,349 --> 00:04:44,818
Let's turn now
to how you can enable

97
00:04:44,818 --> 00:04:47,287
this enhanced
Nearby Interaction mode.

98
00:04:47,287 --> 00:04:50,757
With iOS 15, you probably have
a method in your application

99
00:04:50,757 --> 00:04:52,559
that accepts
the NIDiscoveryToken

100
00:04:52,559 --> 00:04:55,829
from a nearby peer,
creates a session configuration,

101
00:04:55,829 --> 00:04:57,964
and runs the NISession.

102
00:04:57,964 --> 00:05:01,067
Enabling the enhanced mode
with ARKit is easy

103
00:05:01,067 --> 00:05:04,938
on new and existing uses of
Nearby Interaction with a new

104
00:05:04,938 --> 00:05:08,375
isCameraAssistanceEnabled
property on the subclasses

105
00:05:08,375 --> 00:05:11,244
of NIConfiguration.

106
00:05:11,244 --> 00:05:13,079
Setting the
isCameraAssistanceEnabled

107
00:05:13,079 --> 00:05:16,650
property is all that's required
to leverage the enhanced mode

108
00:05:16,650 --> 00:05:18,451
with ARKit.

109
00:05:18,451 --> 00:05:20,353
Camera assistance is available
when interacting

110
00:05:20,353 --> 00:05:23,723
between two Apple devices,
and an Apple device

111
00:05:23,723 --> 00:05:27,694
to third-party
Ultra Wideband accessories.

112
00:05:27,694 --> 00:05:30,063
Let's look at the details
of what happens

113
00:05:30,063 --> 00:05:34,401
when an NISession is run
with camera assistance enabled.

114
00:05:34,401 --> 00:05:35,902
When camera assistance
is enabled,

115
00:05:35,902 --> 00:05:38,872
an ARSession
is automatically created

116
00:05:38,872 --> 00:05:41,808
within the Nearby Interaction
framework.

117
00:05:41,808 --> 00:05:46,413
You are not responsible
for creating this ARSession.

118
00:05:46,413 --> 00:05:49,082
Running an NISession
with camera assistance enabled

119
00:05:49,082 --> 00:05:52,819
will also run the ARSession
that was automatically created

120
00:05:52,819 --> 00:05:56,423
within the Nearby Interaction
framework.

121
00:05:56,423 --> 00:06:00,393
The ARSession is running
within the application process.

122
00:06:00,393 --> 00:06:01,795
As a result,

123
00:06:01,795 --> 00:06:06,199
the application must provide
a camera usage description key

124
00:06:06,199 --> 00:06:09,336
within the application's
Info.plist.

125
00:06:09,336 --> 00:06:13,673
Be sure to make this a useful
string to inform your users

126
00:06:13,673 --> 00:06:19,379
why the camera is necessary
to provide a good experience.

127
00:06:19,379 --> 00:06:23,717
Only a single ARSession can be
running for a given application.

128
00:06:23,717 --> 00:06:26,620
This means that if you already
have an ARKit experience

129
00:06:26,620 --> 00:06:31,424
in your app, it is necessary to
share the ARSession you create

130
00:06:31,424 --> 00:06:34,160
with the NISession.

131
00:06:34,160 --> 00:06:36,429
To share the ARSession
with the NISession,

132
00:06:36,429 --> 00:06:39,466
a new setARSession method
is available

133
00:06:39,466 --> 00:06:41,601
on the NISession class.

134
00:06:41,601 --> 00:06:46,306
When setARSession is called,
prior to run, on the NISession,

135
00:06:46,306 --> 00:06:49,943
an ARSession will not be
automatically created

136
00:06:49,943 --> 00:06:51,978
within the Nearby Interaction
framework

137
00:06:51,978 --> 00:06:54,247
when the session is run.

138
00:06:54,247 --> 00:06:57,284
This ensures the application
ARKit experience

139
00:06:57,284 --> 00:07:00,553
happens concurrently
to the camera assistance

140
00:07:00,553 --> 00:07:02,722
in Nearby Interaction.

141
00:07:02,722 --> 00:07:06,893
In this SwiftUI example, as part
of the makeUIView function,

142
00:07:06,893 --> 00:07:09,996
the underlying ARSession
within the ARView

143
00:07:09,996 --> 00:07:16,303
is shared with the NISession
via the new setARSession method.

144
00:07:16,303 --> 00:07:19,072
If you are using
an ARSession directly,

145
00:07:19,072 --> 00:07:22,475
it is necessary to call run
on the ARSession

146
00:07:22,475 --> 00:07:26,313
with
an ARWorldTrackingConfiguration.

147
00:07:26,313 --> 00:07:29,449
In addition, several properties
must be configured

148
00:07:29,449 --> 00:07:32,952
in a specific manner
within this ARConfiguration

149
00:07:32,952 --> 00:07:35,188
to ensure high-quality
performance

150
00:07:35,188 --> 00:07:37,924
from camera assistance.

151
00:07:37,924 --> 00:07:41,127
The worldAlignment
should be set to gravity,

152
00:07:41,127 --> 00:07:44,698
collaboration and
userFaceTracking disabled,

153
00:07:44,698 --> 00:07:47,767
a nil initialWorldMap,
and a delegate

154
00:07:47,767 --> 00:07:50,670
whose sessionShouldAttempt
Relocalization method

155
00:07:50,670 --> 00:07:52,672
returns false.

156
00:07:52,672 --> 00:07:54,240
Let's turn to some
best practices

157
00:07:54,240 --> 00:07:57,277
when sharing an ARSession
you created.

158
00:07:57,277 --> 00:08:01,014
In your NISessionDelegate
didInvalidateWith error method,

159
00:08:01,014 --> 00:08:04,784
always inspect the error code.

160
00:08:04,784 --> 00:08:08,855
If the ARConfiguration used
to run the shared ARSession

161
00:08:08,855 --> 00:08:11,725
does not conform
to the outlined properties,

162
00:08:11,725 --> 00:08:14,694
the NISession
will be invalidated.

163
00:08:14,694 --> 00:08:18,665
A new NIError code
invalidARConfiguration

164
00:08:18,665 --> 00:08:21,534
will be returned.

165
00:08:21,534 --> 00:08:24,471
To receive nearby object updates
in your app,

166
00:08:24,471 --> 00:08:28,141
continue to use the
didUpdateNearbyObjects method

167
00:08:28,141 --> 00:08:30,577
in your NISessionDelegate.

168
00:08:30,577 --> 00:08:32,946
In your didUpdateNearbyObjects
method,

169
00:08:32,946 --> 00:08:36,616
you probably check the nearby
objects for your desired peer

170
00:08:36,616 --> 00:08:38,852
and update the UI
based on distance

171
00:08:38,852 --> 00:08:43,323
and direction properties of the
NINearbyObject when available,

172
00:08:43,323 --> 00:08:47,460
always being careful
to recall these can be nil.

173
00:08:47,460 --> 00:08:49,496
When camera assistance
is enabled,

174
00:08:49,496 --> 00:08:54,401
two new properties are available
within the NINearbyObject.

175
00:08:54,401 --> 00:08:57,704
The first is horizontalAngle.

176
00:08:57,704 --> 00:08:59,639
This is the 1D angle in radians

177
00:08:59,639 --> 00:09:03,376
indicating the azimuthal
direction to the nearby object.

178
00:09:03,376 --> 00:09:07,447
When unavailable,
this value will be nil.

179
00:09:07,447 --> 00:09:10,016
Second,
verticalDirectionEstimate

180
00:09:10,016 --> 00:09:13,219
is the positional relationship
to the nearby object

181
00:09:13,219 --> 00:09:14,954
in the vertical dimension.

182
00:09:14,954 --> 00:09:19,526
This is a new
VerticalDirectionEstimate type.

183
00:09:19,526 --> 00:09:23,496
Distance and direction represent
the key spatial relationship

184
00:09:23,496 --> 00:09:27,066
between the user's device
and a nearby object.

185
00:09:27,066 --> 00:09:31,304
Distance is measured in meters
and direction is a 3D vector

186
00:09:31,304 --> 00:09:34,974
from your device
to the nearby object.

187
00:09:34,974 --> 00:09:38,478
Horizontal angle is defined
as the angle between the device

188
00:09:38,478 --> 00:09:41,214
running the NISession
and the nearby object

189
00:09:41,214 --> 00:09:44,250
within a local
horizontal plane.

190
00:09:44,250 --> 00:09:46,419
This accounts for any
vertical displacement

191
00:09:46,419 --> 00:09:50,590
offset between the two devices
and any horizontal rotation

192
00:09:50,590 --> 00:09:52,926
of the device itself.

193
00:09:52,926 --> 00:09:55,962
While direction is 3D,
horizontal angle

194
00:09:55,962 --> 00:10:02,469
is a 1D representation of the
heading between the two devices.

195
00:10:02,469 --> 00:10:04,471
This horizontal angle property

196
00:10:04,471 --> 00:10:07,574
is complimentary
to the direction property,

197
00:10:07,574 --> 00:10:09,709
and if the direction
cannot be resolved,

198
00:10:09,709 --> 00:10:12,212
the horizontal angle
can be available

199
00:10:12,212 --> 00:10:16,716
to help you guide your user
to a nearby object.

200
00:10:16,716 --> 00:10:20,253
Vertical direction estimate
is a qualitative assessment

201
00:10:20,253 --> 00:10:22,822
of the vertical position
information.

202
00:10:22,822 --> 00:10:27,160
You should use it to guide
the user between floor levels.

203
00:10:27,160 --> 00:10:32,599
Let's look now at the new
VerticalDirectionEstimate type.

204
00:10:32,599 --> 00:10:35,702
VerticalDirectionEstimate
is a nested enum

205
00:10:35,702 --> 00:10:38,705
within the NINearbyObject
and represents

206
00:10:38,705 --> 00:10:41,808
a qualitative assessment
of the vertical relationship

207
00:10:41,808 --> 00:10:44,611
to the nearby object.

208
00:10:44,611 --> 00:10:47,146
Be sure to check if
the VerticalDirectionEstimate

209
00:10:47,146 --> 00:10:50,517
is unknown
before using the property.

210
00:10:50,517 --> 00:10:55,755
The vertical relationship
can be same, above, below,

211
00:10:55,755 --> 00:10:58,925
or a special
aboveOrBelow value

212
00:10:58,925 --> 00:11:02,996
that represents the nearby
object is not on the same level,

213
00:11:02,996 --> 00:11:07,967
but not clearly above
or below the device.

214
00:11:07,967 --> 00:11:11,070
The Ultra Wideband measurements
are subject to field of view

215
00:11:11,070 --> 00:11:12,505
and obstructions.

216
00:11:12,505 --> 00:11:14,574
The field of view
for direction information

217
00:11:14,574 --> 00:11:19,746
corresponds to a cone projecting
from the rear of the device.

218
00:11:19,746 --> 00:11:22,315
The device trajectory
computed from ARKit

219
00:11:22,315 --> 00:11:26,085
when camera assistance
is enabled allows the distance,

220
00:11:26,085 --> 00:11:30,390
direction, horizontal angle,
and vertical direction estimate

221
00:11:30,390 --> 00:11:35,495
to be available in more
scenarios, effectively expanding

222
00:11:35,495 --> 00:11:39,098
the Ultra Wideband sensor
field of view.

223
00:11:39,098 --> 00:11:42,936
Let's turn now to leveraging
this integration of ARKit

224
00:11:42,936 --> 00:11:48,474
and Nearby Interaction to place
AR objects in your scene.

225
00:11:48,474 --> 00:11:52,579
To make it easier for you
to overlay 3D virtual content

226
00:11:52,579 --> 00:11:54,547
that represents
the nearby object

227
00:11:54,547 --> 00:11:56,783
onto a camera feed
visualization,

228
00:11:56,783 --> 00:12:02,388
we've added a helper method:
worldTransform on NISession.

229
00:12:02,388 --> 00:12:05,058
This method returns
a worldTransform

230
00:12:05,058 --> 00:12:07,860
in ARKit's coordinate space
that represents

231
00:12:07,860 --> 00:12:10,330
the given nearby
object's position

232
00:12:10,330 --> 00:12:13,466
in the physical environment
when it's available.

233
00:12:13,466 --> 00:12:18,271
When not available,
this method returns nil.

234
00:12:18,271 --> 00:12:20,173
We used this method
in the demonstration

235
00:12:20,173 --> 00:12:23,843
to place the floating spheres
above the next exhibit.

236
00:12:23,843 --> 00:12:26,512
We want to make it as easy
as possible for you

237
00:12:26,512 --> 00:12:29,916
to leverage Nearby Interaction
positional output

238
00:12:29,916 --> 00:12:34,220
to manipulate content
in the AR world in your app.

239
00:12:34,220 --> 00:12:38,858
Two powerful systems in iOS,
combined.

240
00:12:38,858 --> 00:12:42,428
Your users must sweep the
device sufficiently in vertical

241
00:12:42,428 --> 00:12:46,032
and horizontal directions
to allow the camera assistance

242
00:12:46,032 --> 00:12:49,402
to adequately compute
the world transform.

243
00:12:49,402 --> 00:12:52,472
This method can return nil
when the user motion

244
00:12:52,472 --> 00:12:55,541
is insufficient to allow
the camera assistance

245
00:12:55,541 --> 00:12:59,946
to fully converge
to an ARKit world transform.

246
00:12:59,946 --> 00:13:04,250
When this transform is important
to your app experience,

247
00:13:04,250 --> 00:13:07,887
it is important to coach
the user to take action

248
00:13:07,887 --> 00:13:11,290
to generate this transform.

249
00:13:11,290 --> 00:13:14,027
Let's look now at some
additions we've made

250
00:13:14,027 --> 00:13:17,063
to the NISessionDelegate
to make it possible

251
00:13:17,063 --> 00:13:20,400
for you to guide the user
similar to what you saw

252
00:13:20,400 --> 00:13:22,035
in the demonstration.

253
00:13:22,035 --> 00:13:24,504
To aid in guiding the user
towards your object,

254
00:13:24,504 --> 00:13:27,440
an NISessionDelegate callback
provides information

255
00:13:27,440 --> 00:13:30,977
about the Nearby Interaction
algorithm convergence

256
00:13:30,977 --> 00:13:33,880
via the new
didUpdateAlgorithmConvergence

257
00:13:33,880 --> 00:13:36,149
delegate method.

258
00:13:36,149 --> 00:13:39,285
Algorithm convergence
can help you understand why

259
00:13:39,285 --> 00:13:42,388
horizontal angle,
vertical direction estimate,

260
00:13:42,388 --> 00:13:45,024
and worldTransform
are unavailable

261
00:13:45,024 --> 00:13:47,727
and what actions
the user can take

262
00:13:47,727 --> 00:13:50,129
to resolve those properties.

263
00:13:50,129 --> 00:13:51,230
The delegate provides

264
00:13:51,230 --> 00:13:54,734
a new NIAlgorithmConvergence
object

265
00:13:54,734 --> 00:13:58,604
and an optional NINearbyObject.

266
00:13:58,604 --> 00:14:02,975
This delegate method is only
called when you have enabled

267
00:14:02,975 --> 00:14:07,046
camera assistance
in your NIConfiguration.

268
00:14:07,046 --> 00:14:11,517
Let's look at the new
NIAlgorithmConvergence type.

269
00:14:11,517 --> 00:14:15,054
NIAlgorithmConvergence
has a single-status property

270
00:14:15,054 --> 00:14:18,791
that is an NIAlgorithm
ConvergenceStatus type.

271
00:14:18,791 --> 00:14:22,795
The NIAlgorithmConvergenceStatus
type is an enum that represents

272
00:14:22,795 --> 00:14:26,232
whether the algorithm
is converged or not.

273
00:14:26,232 --> 00:14:28,434
If the algorithm
is not converged,

274
00:14:28,434 --> 00:14:30,269
an array of associated values

275
00:14:30,269 --> 00:14:36,109
NIAlgorithmConvergenceStatus
.Reasons is provided.

276
00:14:36,109 --> 00:14:38,177
Let's return
to the new delegate method

277
00:14:38,177 --> 00:14:39,412
and say you want to update

278
00:14:39,412 --> 00:14:43,015
the status of the camera
assistance to the user,

279
00:14:43,015 --> 00:14:44,984
you can switch on
the convergence status

280
00:14:44,984 --> 00:14:46,519
and if unknown or converged,

281
00:14:46,519 --> 00:14:49,856
display that information
to the user.

282
00:14:49,856 --> 00:14:53,459
Be sure to inspect
the NINearbyObject.

283
00:14:53,459 --> 00:14:54,894
When the object is nil,

284
00:14:54,894 --> 00:14:59,732
the NIAlgorithmConvergence state
applies to the session itself,

285
00:14:59,732 --> 00:15:04,270
rather than a specific
NINearbyObject.

286
00:15:04,270 --> 00:15:06,472
When the status is
notConverged,

287
00:15:06,472 --> 00:15:10,610
it also includes an associated
value that describes the reasons

288
00:15:10,610 --> 00:15:13,112
the algorithm is not converged.

289
00:15:13,112 --> 00:15:16,015
A localized description
is available for this reason

290
00:15:16,015 --> 00:15:19,619
to help you communicate better
with your users.

291
00:15:19,619 --> 00:15:23,389
Let's look next
at how to use these values.

292
00:15:23,389 --> 00:15:26,125
Inspecting the notConverged
case more closely

293
00:15:26,125 --> 00:15:28,027
and the associated
reasons value,

294
00:15:28,027 --> 00:15:31,264
it is possible to guide
the user to take actions

295
00:15:31,264 --> 00:15:33,766
that helps produce
the desired information

296
00:15:33,766 --> 00:15:36,536
about a nearby object.

297
00:15:36,536 --> 00:15:38,905
The associated value
is an array of

298
00:15:38,905 --> 00:15:41,941
NIAlgorithmConvergence
StatusReasons.

299
00:15:41,941 --> 00:15:45,344
The reason can indicate there's
insufficient total motion,

300
00:15:45,344 --> 00:15:48,648
insufficient motion in the
horizontal or vertical sweep,

301
00:15:48,648 --> 00:15:51,050
and insufficient lighting.

302
00:15:51,050 --> 00:15:56,088
Be mindful that multiple reasons
may exist at the same time

303
00:15:56,088 --> 00:15:59,592
and guide the user sequentially
through each action

304
00:15:59,592 --> 00:16:03,763
based on which is most important
for your application.

305
00:16:03,763 --> 00:16:06,766
Recall how I moved the phone
in the demonstration

306
00:16:06,766 --> 00:16:09,468
and needed to sweep
in both the horizontal

307
00:16:09,468 --> 00:16:13,406
and vertical direction
to resolve the world transform.

308
00:16:13,406 --> 00:16:15,174
That's the most
important bits about

309
00:16:15,174 --> 00:16:18,711
the enhanced Nearby Interaction
mode with camera assistance.

310
00:16:18,711 --> 00:16:20,379
We've made some
additional changes

311
00:16:20,379 --> 00:16:23,316
to help you better
leverage this mode.

312
00:16:23,316 --> 00:16:27,954
Previously, a single isSupported
class variable on the NISession

313
00:16:27,954 --> 00:16:31,390
was all that was necessary
to check if Nearby Interaction

314
00:16:31,390 --> 00:16:33,826
was supported on a given device.

315
00:16:33,826 --> 00:16:36,195
This is now deprecated.

316
00:16:36,195 --> 00:16:38,164
With the addition
of camera assistance,

317
00:16:38,164 --> 00:16:40,099
we've made
the device capabilities

318
00:16:40,099 --> 00:16:43,669
supported by Nearby Interaction
more descriptive

319
00:16:43,669 --> 00:16:48,040
with a new deviceCapabilities
class member on the NISession

320
00:16:48,040 --> 00:16:52,879
that returns a new
NIDeviceCapability object.

321
00:16:52,879 --> 00:16:54,580
At a minimum, checking the

322
00:16:54,580 --> 00:16:57,450
supportsPreciseDistance
Measurement property

323
00:16:57,450 --> 00:16:59,986
is the equivalent
of the now deprecated

324
00:16:59,986 --> 00:17:03,222
isSupported class variable.

325
00:17:03,222 --> 00:17:05,892
Once you've established
that the device supports

326
00:17:05,892 --> 00:17:07,960
the precise distance
measurement,

327
00:17:07,960 --> 00:17:10,396
you should use
NIDeviceCapability

328
00:17:10,396 --> 00:17:13,566
to fully understand
the capabilities available

329
00:17:13,566 --> 00:17:18,504
from Nearby Interaction on the
device running your application.

330
00:17:18,504 --> 00:17:22,074
It is recommended
you tailor your app experience

331
00:17:22,074 --> 00:17:23,976
to the capabilities
of the device

332
00:17:23,976 --> 00:17:27,880
by checking the additional
supportsDirectionMeasurement

333
00:17:27,880 --> 00:17:30,349
and supportsCameraAssistance
properties

334
00:17:30,349 --> 00:17:33,986
of the NIDeviceCapability
object.

335
00:17:33,986 --> 00:17:36,923
Not all devices will support
direction measurements

336
00:17:36,923 --> 00:17:39,091
nor camera assistance,

337
00:17:39,091 --> 00:17:41,961
so be sure to include
experiences that are tailored

338
00:17:41,961 --> 00:17:45,131
to the capabilities
of this device.

339
00:17:45,131 --> 00:17:48,367
In particular,
be mindful to include

340
00:17:48,367 --> 00:17:50,636
distance-only experiences

341
00:17:50,636 --> 00:17:53,806
in order to best support
Apple Watch.

342
00:17:53,806 --> 00:17:56,475
That's all for camera assistance
as a way to enhance

343
00:17:56,475 --> 00:18:00,579
Nearby Interaction with ARKit.
So let's turn our attention now

344
00:18:00,579 --> 00:18:03,649
to accessory background
sessions.

345
00:18:03,649 --> 00:18:07,186
Today, you can use
Nearby Interaction in your app

346
00:18:07,186 --> 00:18:11,324
to allow users to point
to other devices, find friends,

347
00:18:11,324 --> 00:18:13,359
and show controls or other UI

348
00:18:13,359 --> 00:18:16,829
based on distance and direction
to an accessory.

349
00:18:16,829 --> 00:18:20,299
However, when your app
transitions to the background

350
00:18:20,299 --> 00:18:24,236
or when the user locks
the screen on iOS and watchOS,

351
00:18:24,236 --> 00:18:27,073
any running NISessions
are suspended

352
00:18:27,073 --> 00:18:30,443
until the application
returns to the foreground.

353
00:18:30,443 --> 00:18:34,714
This means you needed to focus
on hands-on user experiences

354
00:18:34,714 --> 00:18:38,017
when interacting
with your accessory.

355
00:18:38,017 --> 00:18:43,422
Starting in iOS 16, Nearby
Interaction has gone hands-free.

356
00:18:43,422 --> 00:18:45,658
You're now able to use
Nearby Interaction

357
00:18:45,658 --> 00:18:47,860
to start playing music
when you walk into a room

358
00:18:47,860 --> 00:18:51,731
with a smart speaker, turn on
your eBike when you get on it,

359
00:18:51,731 --> 00:18:56,168
or trigger other hands-free
actions on an accessory.

360
00:18:56,168 --> 00:18:58,371
You can do this
even when the user

361
00:18:58,371 --> 00:19:00,606
isn't actively using your app

362
00:19:00,606 --> 00:19:03,909
via accessory
background sessions.

363
00:19:03,909 --> 00:19:05,945
Let's look at
how you can accomplish

364
00:19:05,945 --> 00:19:09,615
this exciting new capability.

365
00:19:09,615 --> 00:19:11,884
Let's spend just a minute
reviewing the sequence

366
00:19:11,884 --> 00:19:15,921
for how to configure and run
an NISession with an accessory.

367
00:19:15,921 --> 00:19:17,590
You might recognize
this sequence

368
00:19:17,590 --> 00:19:20,893
from last year's
WWDC presentation.

369
00:19:20,893 --> 00:19:23,062
The accessory sends
its Ultra Wideband

370
00:19:23,062 --> 00:19:26,399
accessory configuration data
over to your application

371
00:19:26,399 --> 00:19:29,168
via a data channel,
and you create an

372
00:19:29,168 --> 00:19:33,105
NINearbyAccessoryConfiguration
from this data.

373
00:19:33,105 --> 00:19:36,876
You create an NISession,
set an NISessionDelegate

374
00:19:36,876 --> 00:19:40,279
to get Ultra Wideband
measurements from the accessory.

375
00:19:40,279 --> 00:19:43,049
You run the NISession
with your configuration

376
00:19:43,049 --> 00:19:46,685
and the session will return
sharable configuration data

377
00:19:46,685 --> 00:19:48,921
to setup the accessory
to interoperate

378
00:19:48,921 --> 00:19:51,023
with your application.

379
00:19:51,023 --> 00:19:53,559
After sending this sharable
configuration data

380
00:19:53,559 --> 00:19:55,194
back to the accessory,

381
00:19:55,194 --> 00:19:58,264
you are now able to receive
Ultra Wideband measurements

382
00:19:58,264 --> 00:20:01,901
in your application
and at the accessory.

383
00:20:01,901 --> 00:20:04,036
For all the details
on configuring and running

384
00:20:04,036 --> 00:20:06,872
Nearby Interaction
with third-party accessories,

385
00:20:06,872 --> 00:20:10,509
please review
last year's WWDC session.

386
00:20:10,509 --> 00:20:14,513
Let's look now at how you set up
the new background sessions.

387
00:20:14,513 --> 00:20:17,583
The previous sequence diagram
showed data flowing

388
00:20:17,583 --> 00:20:21,153
between your application
and the accessory.

389
00:20:21,153 --> 00:20:24,090
It is very common to have
the communication channel

390
00:20:24,090 --> 00:20:29,261
between an accessory and your
application use Bluetooth LE.

391
00:20:29,261 --> 00:20:32,298
When paired to the accessory
using Bluetooth LE,

392
00:20:32,298 --> 00:20:34,066
you can enable
Nearby Interaction

393
00:20:34,066 --> 00:20:37,903
to start and continue sessions
in the background.

394
00:20:37,903 --> 00:20:40,573
Let's look closely
at how this is possible.

395
00:20:40,573 --> 00:20:43,976
Today, you can configure
your app to use Core Bluetooth

396
00:20:43,976 --> 00:20:46,779
to discover, connect to,
and exchange data

397
00:20:46,779 --> 00:20:48,681
with Bluetooth LE accessories

398
00:20:48,681 --> 00:20:51,417
while your app
is in the background.

399
00:20:51,417 --> 00:20:54,386
Check out the existing
Core Bluetooth Programming Guide

400
00:20:54,386 --> 00:20:59,425
or the WWDC session from 2017
for more details.

401
00:20:59,425 --> 00:21:02,294
Taking advantage of the powerful
background operations

402
00:21:02,294 --> 00:21:05,431
from Core Bluetooth
to efficiently discover

403
00:21:05,431 --> 00:21:08,868
the accessory and run your
application in the background,

404
00:21:08,868 --> 00:21:12,304
your application can start
an NISession

405
00:21:12,304 --> 00:21:14,073
with a Bluetooth LE accessory

406
00:21:14,073 --> 00:21:18,344
that also supports Ultra
Wideband in the background.

407
00:21:18,344 --> 00:21:21,380
Let's look now at how
the sequence diagram updates

408
00:21:21,380 --> 00:21:24,283
to reflect this new mode.

409
00:21:24,283 --> 00:21:25,951
To interact with this accessory,

410
00:21:25,951 --> 00:21:29,889
first, ensure that it is
Bluetooth LE-paired.

411
00:21:29,889 --> 00:21:32,691
Then, connect to the accessory.

412
00:21:32,691 --> 00:21:34,260
When the accessory generates

413
00:21:34,260 --> 00:21:37,830
its accessory Ultra Wideband
configuration data,

414
00:21:37,830 --> 00:21:40,799
it should both
send it to your application

415
00:21:40,799 --> 00:21:44,270
and populate the Nearby
Interaction GATT service;

416
00:21:44,270 --> 00:21:46,071
more on this next.

417
00:21:46,071 --> 00:21:48,174
Finally, when your
application receives

418
00:21:48,174 --> 00:21:51,076
the accessory's
configuration data, construct an

419
00:21:51,076 --> 00:21:55,681
NINearbyAccessoryConfiguration
object using a new initializer

420
00:21:55,681 --> 00:21:59,451
providing both your accessory's
UWB configuration data

421
00:21:59,451 --> 00:22:02,154
and its Bluetooth
peer identifier.

422
00:22:02,154 --> 00:22:04,657
Run your NISession
with this configuration

423
00:22:04,657 --> 00:22:07,293
and ensure you complete
the setup by receiving

424
00:22:07,293 --> 00:22:11,163
the sharable configuration
in your NISessionDelegate

425
00:22:11,163 --> 00:22:15,501
and send the sharable
configuration to the accessory.

426
00:22:15,501 --> 00:22:18,637
In order for your accessory
to create a relationship

427
00:22:18,637 --> 00:22:20,773
between its Bluetooth identifier

428
00:22:20,773 --> 00:22:23,275
and the Ultra Wideband
configuration,

429
00:22:23,275 --> 00:22:27,780
it must implement the new
Nearby Interaction GATT service.

430
00:22:27,780 --> 00:22:31,283
The Nearby Interaction service
contains a single encrypted

431
00:22:31,283 --> 00:22:35,287
characteristic called
Accessory Configuration Data.

432
00:22:35,287 --> 00:22:38,490
It contains the same
UWB configuration data

433
00:22:38,490 --> 00:22:42,394
used to initialize the
NINearbyAccessoryConfiguration

434
00:22:42,394 --> 00:22:43,696
object.

435
00:22:43,696 --> 00:22:48,867
iOS uses this characteristic
to verify the association

436
00:22:48,867 --> 00:22:53,472
between your Bluetooth peer
identifier and your NISession.

437
00:22:53,472 --> 00:22:57,843
Your app cannot read from
this characteristic directly.

438
00:22:57,843 --> 00:23:00,112
You can find out more
about the details

439
00:23:00,112 --> 00:23:02,881
of this new Nearby Interaction
GATT service

440
00:23:02,881 --> 00:23:07,786
on developer.apple.com/
nearby-interaction.

441
00:23:07,786 --> 00:23:11,590
If your accessory supports
multiple NISessions in parallel,

442
00:23:11,590 --> 00:23:15,661
create multiple instances of
Accessory Configuration Data,

443
00:23:15,661 --> 00:23:20,165
each with a different
NISession's UWB configuration.

444
00:23:20,165 --> 00:23:23,202
That's what's necessary
on the accessory.

445
00:23:23,202 --> 00:23:27,206
Let's turn to what you need
to implement in your application

446
00:23:27,206 --> 00:23:30,276
by diving into some code!

447
00:23:30,276 --> 00:23:33,712
Accessory background sessions
require that the accessory

448
00:23:33,712 --> 00:23:37,016
is LE-paired
to the user's iPhone.

449
00:23:37,016 --> 00:23:40,953
Your app is responsible
for triggering this process.

450
00:23:40,953 --> 00:23:44,957
To do this, implement methods
to scan for your accessory,

451
00:23:44,957 --> 00:23:50,362
connect to it, and discover its
services and characteristics.

452
00:23:50,362 --> 00:23:52,998
Then, implement
a method to read

453
00:23:52,998 --> 00:23:56,302
one of your accessory's
encrypted characteristics.

454
00:23:56,302 --> 00:23:59,271
You only need to do this once.

455
00:23:59,271 --> 00:24:03,842
It will show the user
a prompt to accept pairing.

456
00:24:03,842 --> 00:24:06,478
Accessory background sessions
also require

457
00:24:06,478 --> 00:24:09,548
a Bluetooth connection
to your accessory.

458
00:24:09,548 --> 00:24:12,384
Your app must be able
to form this connection

459
00:24:12,384 --> 00:24:15,054
even when it's backgrounded.

460
00:24:15,054 --> 00:24:18,824
To do this, implement a method
to initiate a connection attempt

461
00:24:18,824 --> 00:24:20,426
to your accessory.

462
00:24:20,426 --> 00:24:22,828
You should do this
even if the accessory

463
00:24:22,828 --> 00:24:26,498
is not within Bluetooth range.

464
00:24:26,498 --> 00:24:29,635
Then, implement
CBManagerDelegate methods

465
00:24:29,635 --> 00:24:35,174
to restore state after your app
is relaunched by Core Bluetooth

466
00:24:35,174 --> 00:24:38,510
and handle when your
connection is established.

467
00:24:38,510 --> 00:24:42,848
Now you're ready to run
an accessory background session.

468
00:24:42,848 --> 00:24:45,351
Create an
NINearbyAccessoryConfiguration

469
00:24:45,351 --> 00:24:48,354
object by providing
both the accessory's

470
00:24:48,354 --> 00:24:53,058
UWB configuration data and its
Bluetooth peer identifier

471
00:24:53,058 --> 00:24:55,894
from the CBPeripheral
identifier.

472
00:24:55,894 --> 00:24:58,697
Run an NISession
with that configuration

473
00:24:58,697 --> 00:25:02,101
and it will run while your app
is backgrounded.

474
00:25:02,101 --> 00:25:03,402
That's it!

475
00:25:03,402 --> 00:25:05,871
Well, there is one more setting

476
00:25:05,871 --> 00:25:09,441
you need to update
for your app in Xcode.

477
00:25:09,441 --> 00:25:13,078
This background mode requires
the Nearby Interaction string

478
00:25:13,078 --> 00:25:17,616
in the UIBackgroundModes array
in your app's Info.plist.

479
00:25:17,616 --> 00:25:20,719
You can also use
Xcode capabilities editor

480
00:25:20,719 --> 00:25:23,155
to add this background mode.

481
00:25:23,155 --> 00:25:25,190
You will also want to ensure
you have

482
00:25:25,190 --> 00:25:29,261
"Uses Bluetooth LE accessories"
enabled to ensure your app

483
00:25:29,261 --> 00:25:33,732
can connect with the accessory
in the background.

484
00:25:33,732 --> 00:25:35,501
One important note

485
00:25:35,501 --> 00:25:38,537
about this new accessory
background session.

486
00:25:38,537 --> 00:25:41,206
When your application
is in the background,

487
00:25:41,206 --> 00:25:45,377
the NISession will continue to
run and will not be suspended,

488
00:25:45,377 --> 00:25:49,615
so Ultra Wideband measurements
are available on the accessory.

489
00:25:49,615 --> 00:25:53,252
You must consume and act on
the Ultra Wideband measurements

490
00:25:53,252 --> 00:25:54,987
on the accessory.

491
00:25:54,987 --> 00:25:58,190
Your application
will not receive runtime,

492
00:25:58,190 --> 00:26:00,926
and you will not receive
didUpdateNearbyObject

493
00:26:00,926 --> 00:26:02,261
delegate callbacks

494
00:26:02,261 --> 00:26:06,064
until your application
returns to the foreground.

495
00:26:06,064 --> 00:26:08,200
When using this new
background mode,

496
00:26:08,200 --> 00:26:11,370
let's review the following
best practices.

497
00:26:11,370 --> 00:26:13,972
Triggering LE pairing
with your accessory

498
00:26:13,972 --> 00:26:17,342
will show the user a prompt
to accept the pairing.

499
00:26:17,342 --> 00:26:20,312
Do this at a time
that is intuitive to the user

500
00:26:20,312 --> 00:26:23,282
why they want to pair
the accessory.

501
00:26:23,282 --> 00:26:26,151
This could be in the setup flow
that it creates the relationship

502
00:26:26,151 --> 00:26:29,154
with the accessory or when
the user clearly indicates

503
00:26:29,154 --> 00:26:32,758
their desire to interact
with the accessory.

504
00:26:32,758 --> 00:26:34,927
While your app is backgrounded,

505
00:26:34,927 --> 00:26:37,863
your NISession
will not be suspended,

506
00:26:37,863 --> 00:26:40,466
but it will not receive
didUpdateNearbyObject

507
00:26:40,466 --> 00:26:42,367
delegate callbacks.

508
00:26:42,367 --> 00:26:45,537
However, your accessory
will receive

509
00:26:45,537 --> 00:26:47,539
Ultra Wideband measurements.

510
00:26:47,539 --> 00:26:50,676
Process these measurements
directly on your accessory

511
00:26:50,676 --> 00:26:54,513
to determine what action
should happen for the user.

512
00:26:54,513 --> 00:26:56,882
Finally, manage battery usage

513
00:26:56,882 --> 00:27:00,419
by only sending data
from your accessory to your app

514
00:27:00,419 --> 00:27:02,821
during a significant
user interaction;

515
00:27:02,821 --> 00:27:06,458
for example, to show
a notification to the user.

516
00:27:06,458 --> 00:27:09,394
That's all you need to know
on background sessions

517
00:27:09,394 --> 00:27:14,333
and leads me to the last topic
on third-party hardware support.

518
00:27:14,333 --> 00:27:17,836
Today, I'm happy to announce
that the previously available

519
00:27:17,836 --> 00:27:20,906
beta U1-compatible
development kits

520
00:27:20,906 --> 00:27:26,044
are now out of beta
and available for wider use.

521
00:27:26,044 --> 00:27:29,615
Please visit developer.apple.com
/nearby-interaction

522
00:27:29,615 --> 00:27:31,083
to find out more about

523
00:27:31,083 --> 00:27:35,053
compatible Ultra Wideband
development kits.

524
00:27:35,053 --> 00:27:36,855
We've also updated
the specification

525
00:27:36,855 --> 00:27:39,258
for accessory manufacturers
to support

526
00:27:39,258 --> 00:27:41,793
the new accessory
background sessions,

527
00:27:41,793 --> 00:27:44,696
including the Nearby Interaction
GATT service,

528
00:27:44,696 --> 00:27:47,699
and it is available
on the same website.

529
00:27:47,699 --> 00:27:52,638
So, let's summarize what we've
discussed in this session.

530
00:27:52,638 --> 00:27:56,875
Nearby Interaction now includes
a new camera-assisted mode

531
00:27:56,875 --> 00:28:00,379
that tightly integrates ARKit
and Nearby Interaction

532
00:28:00,379 --> 00:28:02,548
to provide a seamless experience

533
00:28:02,548 --> 00:28:05,918
for you to create
spatially aware experiences

534
00:28:05,918 --> 00:28:09,821
that guide users
to a nearby object.

535
00:28:09,821 --> 00:28:13,292
The accessory background
sessions enable you to initiate

536
00:28:13,292 --> 00:28:16,061
and extend sessions
into the background

537
00:28:16,061 --> 00:28:19,197
for you to build
a more hands-off experience

538
00:28:19,197 --> 00:28:21,767
for your users.

539
00:28:21,767 --> 00:28:23,735
We've announced
exciting updates

540
00:28:23,735 --> 00:28:28,507
to the third-party compatible
Ultra Wideband hardware support.

541
00:28:28,507 --> 00:28:31,843
That's it for the Nearby
Interaction updates this year.

542
00:28:31,843 --> 00:28:33,445
Download the demos,

543
00:28:33,445 --> 00:28:36,415
reach out with feedback
on the updated capabilities,

544
00:28:36,415 --> 00:28:39,217
review the updated
third-party specification,

545
00:28:39,217 --> 00:28:43,188
and go build amazing apps
with spatial experiences.

546
00:28:43,188 --> 00:28:44,890
Thank you.

547
00:28:44,890 --> 00:28:48,927
♪

