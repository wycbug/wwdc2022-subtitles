1
00:00:00,000 --> 00:00:03,003
♪ instrumental hip hop music ♪

2
00:00:03,003 --> 00:00:10,310
♪

3
00:00:10,310 --> 00:00:12,446
Hi, I'm Nick.

4
00:00:12,446 --> 00:00:13,480
And I'm Franck,

5
00:00:13,480 --> 00:00:15,382
and we are SwiftUI engineers.

6
00:00:15,382 --> 00:00:19,753
Today, we're going to
cover "What's new in SwiftUI."

7
00:00:19,753 --> 00:00:23,891
SwiftUI is growing alongside
our operating systems,

8
00:00:23,891 --> 00:00:28,028
each pushing the bounds
of the other.

9
00:00:28,028 --> 00:00:31,164
We continue to be amazed
and delighted

10
00:00:31,164 --> 00:00:34,301
by what you are making
with SwiftUI.

11
00:00:34,301 --> 00:00:38,472
We take to heart all flavors of
feedback from the community.

12
00:00:38,472 --> 00:00:40,607
That's why we're especially
excited to share

13
00:00:40,607 --> 00:00:44,411
what we've focused
on this year.

14
00:00:44,411 --> 00:00:47,814
With this year's APIs,
we've gone deeper.

15
00:00:47,814 --> 00:00:50,784
We've made more custom
experiences possible.

16
00:00:50,784 --> 00:00:54,688
We've introduced some amazing
new graphical techniques.

17
00:00:54,688 --> 00:01:01,261
We've architected a new SwiftUI
app structure, and much more.

18
00:01:01,261 --> 00:01:04,965
SwiftUI enabled us to build
designs and features

19
00:01:04,965 --> 00:01:07,834
that reflect the future
of our platforms.

20
00:01:07,834 --> 00:01:11,838
From redesigns of classic apps
to completely new features

21
00:01:11,838 --> 00:01:14,508
to deep system integrations.

22
00:01:14,508 --> 00:01:17,311
This comprehensive adoption
within Apple

23
00:01:17,311 --> 00:01:20,747
further pushes evolution
of SwiftUI.

24
00:01:20,747 --> 00:01:23,150
Many of these new designs
and features

25
00:01:23,150 --> 00:01:26,954
are only possible because
of how SwiftUI has evolved

26
00:01:26,954 --> 00:01:29,890
how we write apps at Apple.

27
00:01:29,890 --> 00:01:32,726
Today we're celebrating
these APIs,

28
00:01:32,726 --> 00:01:34,328
[NOISE MAKER BLOWS]

29
00:01:34,328 --> 00:01:37,597
And we're also celebrating
SwiftUI's birthday,

30
00:01:37,597 --> 00:01:40,167
[NOISE MAKER BLOWS]

31
00:01:40,167 --> 00:01:42,402
Franck and I are
the lucky cochairs

32
00:01:42,402 --> 00:01:44,338
of the party-planning committee.

33
00:01:44,338 --> 00:01:46,306
Let me tell you
about the activities

34
00:01:46,306 --> 00:01:49,042
we've got planned
for the party.

35
00:01:49,042 --> 00:01:51,611
I'll introduce you
to a brand-new framework

36
00:01:51,611 --> 00:01:54,348
called Swift Charts
that allows you to create

37
00:01:54,348 --> 00:02:00,187
delightful data visualizations
across all of our platforms.

38
00:02:00,187 --> 00:02:02,756
I'll show off SwiftUI's
data-driven,

39
00:02:02,756 --> 00:02:05,892
strongly-typed model
for navigation

40
00:02:05,892 --> 00:02:09,029
and new window techniques.

41
00:02:09,029 --> 00:02:12,065
Franck will take you
through a suite of new controls

42
00:02:12,065 --> 00:02:16,269
and deeper customizations
of existing controls.

43
00:02:16,269 --> 00:02:19,306
Then he'll show you how
we've brought sharing elegantly

44
00:02:19,306 --> 00:02:24,378
into the universe of SwiftUI
with the Transferable protocol.

45
00:02:24,378 --> 00:02:27,347
Finally, I'll close with
whimsical new graphics APIs

46
00:02:27,347 --> 00:02:31,351
and advanced
new layout APIs.

47
00:02:31,351 --> 00:02:35,122
Let's get going
with Swift Charts.

48
00:02:35,122 --> 00:02:37,824
Swift Charts
is a declarative framework

49
00:02:37,824 --> 00:02:42,162
for building beautiful
state-driven charts.

50
00:02:42,162 --> 00:02:44,097
The fundamental
design principles

51
00:02:44,097 --> 00:02:48,735
that make SwiftUI great
and the process of plotting data

52
00:02:48,735 --> 00:02:52,606
have been composed harmoniously
to create Swift Charts --

53
00:02:52,606 --> 00:02:57,744
a world-class data-visualization
framework.

54
00:02:57,744 --> 00:03:01,114
This is a bar chart plotting
the number of party tasks

55
00:03:01,114 --> 00:03:04,818
Franck and I need to complete
before the party can start.

56
00:03:04,818 --> 00:03:07,254
Swift Charts has built
a magnificent,

57
00:03:07,254 --> 00:03:11,291
customizable chart from
only a few lines of code.

58
00:03:11,291 --> 00:03:15,495
Like SwiftUI, Swift Charts
picks intelligent defaults.

59
00:03:15,495 --> 00:03:18,565
Here, the framework chose
satisfyingly round numbers

60
00:03:18,565 --> 00:03:20,767
for the y-axis values,

61
00:03:20,767 --> 00:03:23,370
and provided a default color
for the bar marks.

62
00:03:26,273 --> 00:03:30,210
If you know SwiftUI, you can
already read the declarative,

63
00:03:30,210 --> 00:03:33,580
state-driven syntax
of Swift Charts.

64
00:03:33,580 --> 00:03:36,950
Chart is just some View,

65
00:03:36,950 --> 00:03:40,587
and you declare it just like
you do lists and tables --

66
00:03:40,587 --> 00:03:44,024
by providing data and then
building the chart content

67
00:03:44,024 --> 00:03:47,627
with that data.

68
00:03:47,627 --> 00:03:50,397
For this chart,
I've chosen a BarMark,

69
00:03:50,397 --> 00:03:54,367
but if I switch to a LineMark
and add a foreground style

70
00:03:54,367 --> 00:03:57,771
to group by category,
I can see more to the story

71
00:03:57,771 --> 00:04:02,576
as Swift Charts draws individual
lines for each category

72
00:04:02,576 --> 00:04:07,347
and adds a legend
to the chart automatically.

73
00:04:07,347 --> 00:04:10,517
It's fun to give these
charts a little personality.

74
00:04:10,517 --> 00:04:13,553
I can add points to the line
with the symbol modifier

75
00:04:13,553 --> 00:04:16,223
on the LineMark.

76
00:04:16,223 --> 00:04:21,328
These modifiers are no different
from SwiftUI modifiers.

77
00:04:21,328 --> 00:04:25,832
You can even use
SwiftUI views within a chart.

78
00:04:25,832 --> 00:04:28,435
Like List,
the data argument to Chart

79
00:04:28,435 --> 00:04:32,606
can instead be passed
to a ForEach.

80
00:04:32,606 --> 00:04:36,343
This allows adding
more marks to the Chart builder,

81
00:04:36,343 --> 00:04:39,179
like a RuleMark
to show our daily goal.

82
00:04:41,715 --> 00:04:44,851
The spirit of SwiftUI
shines through again,

83
00:04:44,851 --> 00:04:48,688
as Swift Charts handles
localization, Dark Mode,

84
00:04:48,688 --> 00:04:51,658
and Dynamic Type automatically,

85
00:04:51,658 --> 00:04:56,563
and of course, works across
all of our platforms.

86
00:04:56,563 --> 00:04:59,032
If you want to see how
to make your own charts,

87
00:04:59,032 --> 00:05:01,334
check out "Hello
Swift Charts."

88
00:05:01,334 --> 00:05:04,237
If you're interested in advanced
plotting techniques,

89
00:05:04,237 --> 00:05:07,941
follow it up with
the "Raise the bar" session.

90
00:05:07,941 --> 00:05:11,978
Next up, let's talk about
navigation and windows.

91
00:05:11,978 --> 00:05:13,847
SwiftUI already supports

92
00:05:13,847 --> 00:05:16,583
the most common app
navigation patterns,

93
00:05:16,583 --> 00:05:20,820
such as immersive
push-and-pop navigation stacks;

94
00:05:20,820 --> 00:05:24,024
expansive,
detail-rich split views;

95
00:05:24,024 --> 00:05:27,027
and powerful,
multi-window experiences.

96
00:05:31,131 --> 00:05:34,267
This year,
SwiftUI has big updates

97
00:05:34,267 --> 00:05:37,304
for all three of these patterns.

98
00:05:37,304 --> 00:05:40,674
Let's start with stacks.

99
00:05:40,674 --> 00:05:43,944
SwiftUI is introducing
a new container view,

100
00:05:43,944 --> 00:05:46,947
simply called
NavigationStack,

101
00:05:46,947 --> 00:05:51,218
for supporting
push-and-pop-style navigation.

102
00:05:51,218 --> 00:05:54,321
A NavigationStack wraps
a root content view,

103
00:05:54,321 --> 00:05:58,992
like this food inventory list
for our party-planning app.

104
00:05:58,992 --> 00:06:02,495
As you'd expect, it works great
with existing APIs

105
00:06:02,495 --> 00:06:06,700
like NavigationLink
and navigationTitle().

106
00:06:06,700 --> 00:06:08,134
When we select a link,

107
00:06:08,134 --> 00:06:14,874
SwiftUI pushes its detail view
on top of the stack.

108
00:06:14,874 --> 00:06:18,511
In our app, each detail view
contains more links

109
00:06:18,511 --> 00:06:21,047
for related food items
for quick browsing.

110
00:06:25,819 --> 00:06:28,521
This approach might be
all you need.

111
00:06:28,521 --> 00:06:31,024
But there is a new way
to present views

112
00:06:31,024 --> 00:06:35,762
and have programmatic control
over that presented state.

113
00:06:35,762 --> 00:06:39,733
If you need control
of a navigation stack's state,

114
00:06:39,733 --> 00:06:43,970
adopt the new data-driven APIs.

115
00:06:43,970 --> 00:06:47,140
The new navigationDestination()
modifier

116
00:06:47,140 --> 00:06:49,876
lets us associate
navigation destinations

117
00:06:49,876 --> 00:06:52,279
with specific data types.

118
00:06:54,914 --> 00:06:57,484
And this year,
we taught NavigationLink

119
00:06:57,484 --> 00:07:01,588
a new party trick:
instead of a destination view,

120
00:07:01,588 --> 00:07:04,958
it can take a value
that represents a destination.

121
00:07:04,958 --> 00:07:11,598
When tapping on a link, SwiftUI
will use its value's type

122
00:07:11,598 --> 00:07:14,968
to find the right destination
and push it on the stack,

123
00:07:14,968 --> 00:07:18,838
just like before.

124
00:07:18,838 --> 00:07:21,841
Because we now use data
to drive our stack,

125
00:07:21,841 --> 00:07:24,844
it's possible to represent
the current navigation path

126
00:07:24,844 --> 00:07:27,247
as explicit state.

127
00:07:27,247 --> 00:07:30,817
In this case, the navigation
path is simply an array

128
00:07:30,817 --> 00:07:35,555
of all the food items
that we've visited.

129
00:07:35,555 --> 00:07:37,724
With direct access
to this state,

130
00:07:37,724 --> 00:07:39,993
it couldn't be easier
to add a button

131
00:07:39,993 --> 00:07:45,031
for quickly jumping back
to the first selected item.

132
00:07:45,031 --> 00:07:47,400
As views are pushed
onto the stack,

133
00:07:47,400 --> 00:07:50,870
items are appended to
the selectedFoodItems array.

134
00:07:50,870 --> 00:07:54,774
In the button's action,
we can just remove all the items

135
00:07:54,774 --> 00:07:57,811
from the path
except for the first one.

136
00:08:00,547 --> 00:08:04,017
And with a tap, we're right back
where we started.

137
00:08:07,687 --> 00:08:13,760
Now let's talk about split views
for multicolumn navigation.

138
00:08:13,760 --> 00:08:15,762
We're introducing
another new container

139
00:08:15,762 --> 00:08:20,333
called NavigationSplitView
for multicolumn navigation.

140
00:08:20,333 --> 00:08:25,004
NavigationSplitView can declare
two- and three-column layouts.

141
00:08:25,004 --> 00:08:27,507
Party Planner uses
a simple two-column layout,

142
00:08:27,507 --> 00:08:31,077
wrapping a sidebar list
of our party-planning tasks

143
00:08:31,077 --> 00:08:33,680
and a detail view
that changes its content

144
00:08:33,680 --> 00:08:37,450
with the selected task.

145
00:08:37,450 --> 00:08:41,788
Split views work great with the
new value-based NavigationLinks

146
00:08:41,788 --> 00:08:44,557
we saw earlier,
using the link's value

147
00:08:44,557 --> 00:08:49,362
to drive
the list's selection.

148
00:08:49,362 --> 00:08:52,065
NavigationSplitView will
automatically collapse

149
00:08:52,065 --> 00:08:55,802
into a stack on smaller-size
classes or devices,

150
00:08:55,802 --> 00:08:58,705
making it a great tool
for building adaptive,

151
00:08:58,705 --> 00:09:02,409
multiplatform apps.

152
00:09:02,409 --> 00:09:05,278
NavigationSplitView
and NavigationStack

153
00:09:05,278 --> 00:09:09,916
are designed to work together
and can be directly composed

154
00:09:09,916 --> 00:09:15,455
to build more complex
navigation structures.

155
00:09:15,455 --> 00:09:19,426
We use this in the Party Planner
app to turn the detail column

156
00:09:19,426 --> 00:09:23,563
into its own, self-contained
navigation stack,

157
00:09:23,563 --> 00:09:25,865
which also shows off
the new support

158
00:09:25,865 --> 00:09:29,202
for navigation stacks
on macOS.

159
00:09:35,141 --> 00:09:38,044
Well, we've talked a lot
about food,

160
00:09:38,044 --> 00:09:41,314
but I hear that my colleague
Curt is cooking up a storm

161
00:09:41,314 --> 00:09:45,418
over in his talk, "The SwiftUI
cookbook for navigation."

162
00:09:45,418 --> 00:09:49,055
Check it out to learn even
more about navigation stacks

163
00:09:49,055 --> 00:09:51,624
and navigation split views.

164
00:09:51,624 --> 00:09:54,461
But for now,
let's step outside the box

165
00:09:54,461 --> 00:09:58,331
and talk about new scene APIs.

166
00:09:58,331 --> 00:10:00,800
You're likely already familiar
with WindowGroup,

167
00:10:00,800 --> 00:10:04,037
which is a great way to build
the main interface of your app,

168
00:10:04,037 --> 00:10:06,105
and can generate
multiple windows

169
00:10:06,105 --> 00:10:10,743
to allow different perspectives
into your app's data.

170
00:10:10,743 --> 00:10:13,980
New this year,
we're adding window,

171
00:10:13,980 --> 00:10:16,950
which -- you guessed it --
declares a single,

172
00:10:16,950 --> 00:10:19,853
unique window for your app.

173
00:10:19,853 --> 00:10:22,222
Here, I've added
a Party Budget window

174
00:10:22,222 --> 00:10:24,624
that shows the total cost
of the party.

175
00:10:26,893 --> 00:10:30,363
By default the window
is available and can be shown

176
00:10:30,363 --> 00:10:34,868
by selecting its name
in the app's Window menu.

177
00:10:34,868 --> 00:10:37,570
But we can make
that even easier by assigning

178
00:10:37,570 --> 00:10:43,009
a Command-0 keyboard
shortcut to open the window.

179
00:10:43,009 --> 00:10:45,879
To make sure I stay a
budget-conscious party planner,

180
00:10:45,879 --> 00:10:47,680
I'll add a toolbar button

181
00:10:47,680 --> 00:10:50,884
with an action
that also shows this window.

182
00:10:50,884 --> 00:10:53,453
Using the environment action
openWindow,

183
00:10:53,453 --> 00:11:00,393
I can now programmatically open
new SwiftUI-managed windows.

184
00:11:00,393 --> 00:11:03,029
In fact, we've added
a whole suite

185
00:11:03,029 --> 00:11:05,665
of new window customizations
this year,

186
00:11:05,665 --> 00:11:08,101
including modifiers
for default size,

187
00:11:08,101 --> 00:11:13,406
position, resizability,
and more.

188
00:11:13,406 --> 00:11:15,909
I don't want the party budget
getting in the way,

189
00:11:15,909 --> 00:11:19,479
so by default it appears
as a small corner window.

190
00:11:19,479 --> 00:11:22,248
But if I adjust
its position or size,

191
00:11:22,248 --> 00:11:24,450
SwiftUI will automatically
remember that

192
00:11:24,450 --> 00:11:27,654
across app launches.

193
00:11:27,654 --> 00:11:30,056
The new standalone
window scene is great

194
00:11:30,056 --> 00:11:33,426
for little auxiliary windows
like this one on the Mac,

195
00:11:33,426 --> 00:11:36,429
but Party Planner
is a multiplatform app,

196
00:11:36,429 --> 00:11:40,500
and we need a better design
for smaller screens.

197
00:11:40,500 --> 00:11:44,470
For example, on iOS we've chosen
to display our budget

198
00:11:44,470 --> 00:11:47,340
within a resizable sheet
instead.

199
00:11:47,340 --> 00:11:51,544
This is possible with the new
presentationDetents() modifier.

200
00:11:51,544 --> 00:11:53,947
In this case, I configured
a resizable sheet

201
00:11:53,947 --> 00:11:59,152
that sticks to two different
sizes: one at 250 points,

202
00:11:59,152 --> 00:12:03,856
and another at a system-defined
medium height.

203
00:12:03,856 --> 00:12:06,960
It is simple to iterate
between platforms this year

204
00:12:06,960 --> 00:12:09,329
with multiplatform targets
in Xcode

205
00:12:09,329 --> 00:12:12,532
powering up
your SwiftUI-based apps.

206
00:12:12,532 --> 00:12:17,003
One target can be deployed
to multiple platforms.

207
00:12:17,003 --> 00:12:19,973
Just pick your platform
from the usual pull-down menu

208
00:12:19,973 --> 00:12:23,142
in Xcode's toolbar.

209
00:12:23,142 --> 00:12:26,045
Watch "What's new in Xcode"
and follow it up

210
00:12:26,045 --> 00:12:28,881
with "Use Xcode to develop
a multiplatform app"

211
00:12:28,881 --> 00:12:31,951
to learn more.

212
00:12:31,951 --> 00:12:33,786
For the final new scene type,

213
00:12:33,786 --> 00:12:36,322
we can turn our attention
to the menu bar.

214
00:12:36,322 --> 00:12:39,759
With macOS Ventura, you can
now build MenuBarExtras

215
00:12:39,759 --> 00:12:44,163
entirely in SwiftUI!

216
00:12:44,163 --> 00:12:46,399
These can be defined
alongside other scene types

217
00:12:46,399 --> 00:12:49,969
in your application and will
always be shown in the menu bar

218
00:12:49,969 --> 00:12:53,206
while your app is running.

219
00:12:53,206 --> 00:12:57,777
Or, you can build an entire app
using just a MenuBarExtra!

220
00:12:57,777 --> 00:13:01,247
These are such a fun way to
bring even the simplest of ideas

221
00:13:01,247 --> 00:13:04,450
to life on macOS.

222
00:13:04,450 --> 00:13:07,053
"Bring Multiple Windows
to your SwiftUI App"

223
00:13:07,053 --> 00:13:09,122
has more detail
on how to take advantage

224
00:13:09,122 --> 00:13:12,392
of all the new scene types
and features.

225
00:13:12,392 --> 00:13:14,627
Now that we've got control
of windows,

226
00:13:14,627 --> 00:13:18,331
I'll pass it over to Franck,
to put controls in windows.

227
00:13:18,331 --> 00:13:19,499
Franck: Thanks, Nick!

228
00:13:19,499 --> 00:13:21,934
This year, we have
a variety of enhancements

229
00:13:21,934 --> 00:13:26,806
across all our APIs for building
interactive content.

230
00:13:26,806 --> 00:13:30,109
We have a lot to cover,
so let's get this party started

231
00:13:30,109 --> 00:13:33,413
with some fun enhancements
to forms.

232
00:13:33,413 --> 00:13:36,949
macOS Ventura comes with a
brand-new System Settings app,

233
00:13:36,949 --> 00:13:40,219
that features a streamlined
navigation structure,

234
00:13:40,219 --> 00:13:42,722
built using the navigation
split view and stacks

235
00:13:42,722 --> 00:13:46,192
that Nick just
walked us through.

236
00:13:46,192 --> 00:13:50,263
It also sports a fresh
and modern interface style.

237
00:13:50,263 --> 00:13:53,099
Settings interfaces
are control-heavy,

238
00:13:53,099 --> 00:13:55,802
so this style was
specifically designed

239
00:13:55,802 --> 00:13:58,204
to present forms
containing many controls

240
00:13:58,204 --> 00:14:02,341
in a consistent and
well-organized fashion.

241
00:14:02,341 --> 00:14:04,177
We've also adopted
this new design

242
00:14:04,177 --> 00:14:06,112
within our Party Planner app.

243
00:14:06,112 --> 00:14:08,381
Let's take a look.

244
00:14:08,381 --> 00:14:10,783
Our Event Details view
also features

245
00:14:10,783 --> 00:14:13,920
many different types of controls
grouped into sections,

246
00:14:13,920 --> 00:14:18,825
serving a similar purpose
as a settings interface.

247
00:14:18,825 --> 00:14:22,228
This makes it a great candidate
to adopt the new visual style

248
00:14:22,228 --> 00:14:23,596
from System Settings.

249
00:14:25,865 --> 00:14:27,633
You can enable this design

250
00:14:27,633 --> 00:14:31,838
using the new grouped
formStyle on macOS.

251
00:14:31,838 --> 00:14:35,842
And thanks to the flexibility
of SwiftUI's declarative APIs,

252
00:14:35,842 --> 00:14:38,211
content and controls
within the form

253
00:14:38,211 --> 00:14:42,482
will automatically adapt
to the new style.

254
00:14:42,482 --> 00:14:45,785
For example, sections will
visually group their content

255
00:14:45,785 --> 00:14:47,653
below their headers;

256
00:14:47,653 --> 00:14:51,390
and controls will consistently
align their labels and values

257
00:14:51,390 --> 00:14:54,594
to the leading
and trailing edges.

258
00:14:54,594 --> 00:14:57,964
Some controls may adapt
their visual appearance as well,

259
00:14:57,964 --> 00:15:01,768
such as how toggles display
as trailing mini switches

260
00:15:01,768 --> 00:15:05,905
for consistent layout
and alignment.

261
00:15:05,905 --> 00:15:07,406
And since the form
itself provides

262
00:15:07,406 --> 00:15:09,575
a lot of visual structure,

263
00:15:09,575 --> 00:15:10,743
other controls adapt
to this context

264
00:15:10,743 --> 00:15:14,247
with a lighter-weight
visual appearance,

265
00:15:14,247 --> 00:15:18,317
and reveal more prominent
control backings on rollover.

266
00:15:18,317 --> 00:15:21,154
SwiftUI makes it easy to align
other types of content

267
00:15:21,154 --> 00:15:25,224
to this new style, using the new
LabeledContent view,

268
00:15:25,224 --> 00:15:27,693
which can be used
to build new controls

269
00:15:27,693 --> 00:15:32,031
or even just display
some read-only information.

270
00:15:32,031 --> 00:15:33,166
In this case,

271
00:15:33,166 --> 00:15:36,269
we're displaying some text
for the location of the event,

272
00:15:36,269 --> 00:15:39,138
and SwiftUI automatically
adjusts the styling

273
00:15:39,138 --> 00:15:41,340
and allows selection
of that text.

274
00:15:43,976 --> 00:15:48,014
But LabeledContent can
also wrap any kind of view,

275
00:15:48,014 --> 00:15:50,516
like if we wanted
to use a custom view

276
00:15:50,516 --> 00:15:54,587
for displaying
more entire addresses.

277
00:15:54,587 --> 00:15:58,424
SwiftUI is now smarter about
applying default styling to text

278
00:15:58,424 --> 00:16:00,860
in other cases too.

279
00:16:00,860 --> 00:16:04,363
It will hierarchically format
multiple pieces of text

280
00:16:04,363 --> 00:16:10,469
within a control's label
to form titles and subtitles.

281
00:16:10,469 --> 00:16:13,239
This new form design
looks great on macOS,

282
00:16:13,239 --> 00:16:15,842
but we can also share
a lot of this same code

283
00:16:15,842 --> 00:16:17,777
with the iOS version of our app.

284
00:16:19,846 --> 00:16:23,349
You'll notice some improved
designs on iOS as well,

285
00:16:23,349 --> 00:16:26,219
like these pop-up menu
pickers with a visual style

286
00:16:26,219 --> 00:16:29,989
inspired by macOS,
but with their interactions

287
00:16:29,989 --> 00:16:32,825
and appearance optimized
to fit beautifully

288
00:16:32,825 --> 00:16:37,496
within a touch-based interface.

289
00:16:37,496 --> 00:16:42,001
Of course, the same code works
great on iPad's larger screen,

290
00:16:42,001 --> 00:16:43,502
and together with the Mac,

291
00:16:43,502 --> 00:16:46,505
you can see how SwiftUI's
declarative model helps you

292
00:16:46,505 --> 00:16:49,642
share code when building
shared interfaces,

293
00:16:49,642 --> 00:16:53,980
helping you bring the party
to every platform.

294
00:16:53,980 --> 00:16:56,148
Of course, we're also
improving controls

295
00:16:56,148 --> 00:16:59,185
beyond just form styles.

296
00:16:59,185 --> 00:17:00,920
So let's take
a lightning-round tour

297
00:17:00,920 --> 00:17:03,589
of some other new control
features we're using

298
00:17:03,589 --> 00:17:06,392
in the Party Planner app.

299
00:17:06,392 --> 00:17:10,963
Let's start with the New
Activity page in our iOS app.

300
00:17:10,963 --> 00:17:14,166
Text fields can be configured
to expand vertically

301
00:17:14,166 --> 00:17:16,669
using the new axis parameter,

302
00:17:16,669 --> 00:17:19,272
growing their height
to fit the text

303
00:17:19,272 --> 00:17:24,343
and, if specified, capping
their height to the line limit.

304
00:17:24,343 --> 00:17:27,046
But the lineLimit modifier
now also supports

305
00:17:27,046 --> 00:17:30,783
more advanced behaviors,
like reserving a minimum amount

306
00:17:30,783 --> 00:17:35,187
of space and expanding
as more content is added,

307
00:17:35,187 --> 00:17:41,394
and then scrolling once the
content exceeds the upper limit.

308
00:17:41,394 --> 00:17:44,664
Below our text fields,
we also see an example

309
00:17:44,664 --> 00:17:47,833
of the new
MultiDatePicker control,

310
00:17:47,833 --> 00:17:50,569
supporting noncontiguous
date selection

311
00:17:50,569 --> 00:17:53,673
to help us spread our party
activities throughout the week.

312
00:17:55,608 --> 00:17:58,711
Now at this point, maybe you're
having some mixed feelings

313
00:17:58,711 --> 00:18:01,614
about the party theme
for this talk.

314
00:18:01,614 --> 00:18:04,250
The great news is you can
now express those feelings

315
00:18:04,250 --> 00:18:08,955
in SwiftUI,
using mixed-state controls!

316
00:18:08,955 --> 00:18:12,058
Here we have a group of toggles
that can be collapsed

317
00:18:12,058 --> 00:18:16,062
into a single aggregate toggle.

318
00:18:16,062 --> 00:18:19,398
The inner toggles
each take a single binding

319
00:18:19,398 --> 00:18:22,435
whereas the aggregate Toggle
takes a collection

320
00:18:22,435 --> 00:18:25,738
of all the bindings
displaying a mixed state

321
00:18:25,738 --> 00:18:27,974
if their values don't all match.

322
00:18:30,109 --> 00:18:32,645
Pickers work the same way.

323
00:18:32,645 --> 00:18:35,247
This decoration theme picker
changes its value

324
00:18:35,247 --> 00:18:38,851
to reflect the currently
selected decoration.

325
00:18:38,851 --> 00:18:41,587
But if we select
multiple decorations,

326
00:18:41,587 --> 00:18:43,789
it will show the themes
for all them

327
00:18:43,789 --> 00:18:47,159
using a mixed-state indicator.

328
00:18:47,159 --> 00:18:51,998
Now, let's switch back
to our iOS app.

329
00:18:51,998 --> 00:18:54,166
We have a few
button-style toggles

330
00:18:54,166 --> 00:18:57,870
for choosing the event hashtags.

331
00:18:57,870 --> 00:18:59,872
We can help
differentiate each toggle

332
00:18:59,872 --> 00:19:04,010
by simply adding
a bordered button style.

333
00:19:04,010 --> 00:19:07,213
Button styles like this will
now apply to any control

334
00:19:07,213 --> 00:19:10,116
that supports
a button-like appearance,

335
00:19:10,116 --> 00:19:15,054
including toggles,
menus, and pickers.

336
00:19:15,054 --> 00:19:17,023
Moving on to steppers,

337
00:19:17,023 --> 00:19:20,893
you can now provide
a format for its value.

338
00:19:20,893 --> 00:19:24,964
On macOS, a formatted stepper
will display its value

339
00:19:24,964 --> 00:19:27,733
in an editable field.

340
00:19:27,733 --> 00:19:33,506
And steppers are also now
available on watchOS.

341
00:19:33,506 --> 00:19:36,709
Apple Watch sports
one of my favorite new features:

342
00:19:36,709 --> 00:19:40,246
Accessibility Quick Actions,
an alternative way

343
00:19:40,246 --> 00:19:44,683
to perform actions
by clenching your hand.

344
00:19:44,683 --> 00:19:49,688
A Quick Action can be defined
just like any other UI action,

345
00:19:49,688 --> 00:19:53,793
using a button, allowing us
to share the same code

346
00:19:53,793 --> 00:19:59,298
for both visible buttons and
their equivalent Quick Actions.

347
00:19:59,298 --> 00:20:03,436
All right, we just covered
a lot of different controls,

348
00:20:03,436 --> 00:20:06,272
but of course, controls
are not the only sources

349
00:20:06,272 --> 00:20:08,240
of interactivity.

350
00:20:08,240 --> 00:20:09,742
So let's take a look
at what's new

351
00:20:09,742 --> 00:20:12,144
with larger interactive
containers,

352
00:20:12,144 --> 00:20:13,779
like tables and lists.

353
00:20:14,847 --> 00:20:15,881
I am excited to share

354
00:20:15,881 --> 00:20:20,586
that tables are now
supported on iPadOS.

355
00:20:20,586 --> 00:20:24,256
As you would expect,
tables on iPadOS are defined

356
00:20:24,256 --> 00:20:29,228
using the same Table API we
introduced last year for macOS,

357
00:20:29,228 --> 00:20:32,865
making it easy to share code
between platforms.

358
00:20:32,865 --> 00:20:36,702
Our Invitations table shows
three columns for the name,

359
00:20:36,702 --> 00:20:40,539
city, and invitation status
of each person,

360
00:20:40,539 --> 00:20:45,644
taking advantage
of the iPad's large display.

361
00:20:45,644 --> 00:20:48,681
But this table will also render
appropriately

362
00:20:48,681 --> 00:20:52,318
in compact size classes,
including on iPhone,

363
00:20:52,318 --> 00:20:58,090
showing just the primary column
within the smaller screen space.

364
00:20:58,090 --> 00:21:02,561
Let's switch contexts and
check out this table on macOS.

365
00:21:02,561 --> 00:21:03,896
It's looking great!

366
00:21:03,896 --> 00:21:07,633
But speaking on contexts, I'd
love to add some context menus

367
00:21:07,633 --> 00:21:11,904
for performing common actions
within the table.

368
00:21:11,904 --> 00:21:12,805
This is a job

369
00:21:12,805 --> 00:21:17,376
for the new selection-based
contentMenu modifier.

370
00:21:17,376 --> 00:21:19,745
The modifier takes
a selection type,

371
00:21:19,745 --> 00:21:22,781
and will be enabled
within any compatible table

372
00:21:22,781 --> 00:21:26,519
or list that supports selection.

373
00:21:26,519 --> 00:21:29,655
Within the menu builder,
you are given a collection

374
00:21:29,655 --> 00:21:32,758
of the current selection,
allowing you to build

375
00:21:32,758 --> 00:21:35,661
advanced context menus
that can operate

376
00:21:35,661 --> 00:21:39,198
on a single selected row,
multiple selected rows,

377
00:21:39,198 --> 00:21:41,267
or even no row selected,

378
00:21:41,267 --> 00:21:46,005
such as when clicking
on the empty area of the table.

379
00:21:46,005 --> 00:21:49,608
Context menus reveal actions
directly within the table,

380
00:21:49,608 --> 00:21:52,778
which is great for speed
and efficiency.

381
00:21:52,778 --> 00:21:57,149
But I would also like to make
these actions more discoverable.

382
00:21:57,149 --> 00:21:59,919
A great way to improve
discoverability

383
00:21:59,919 --> 00:22:04,023
is by displaying common actions
as buttons in the toolbar,

384
00:22:04,023 --> 00:22:07,626
and iPadOS has a new
and improved toolbar design

385
00:22:07,626 --> 00:22:12,932
to help achieve
that extra level of polish.

386
00:22:12,932 --> 00:22:16,302
iPad toolbars can now support
user customization

387
00:22:16,302 --> 00:22:18,103
and reordering,

388
00:22:18,103 --> 00:22:22,341
which your app can implement by
providing explicit identifiers

389
00:22:22,341 --> 00:22:28,681
for each toolbar item,
the same API available on macOS.

390
00:22:28,681 --> 00:22:32,351
These identifiers allow SwiftUI
to automatically save

391
00:22:32,351 --> 00:22:35,287
and restore custom
toolbar configurations

392
00:22:35,287 --> 00:22:37,790
across app launches.

393
00:22:37,790 --> 00:22:39,558
Note that on iPadOS,

394
00:22:39,558 --> 00:22:44,196
not all toolbar items
allow customization.

395
00:22:44,196 --> 00:22:46,365
Customizable actions
are configured

396
00:22:46,365 --> 00:22:50,703
using the new secondaryAction
toolbar item placement,

397
00:22:50,703 --> 00:22:54,139
which shows up in the center
of the toolbar by default,

398
00:22:54,139 --> 00:22:58,577
or in an overflow menu
in compact-size classes.

399
00:22:58,577 --> 00:22:59,778
All right!

400
00:22:59,778 --> 00:23:02,014
The word is spreading around
and it looks like

401
00:23:02,014 --> 00:23:06,352
the number of attendees
is growing exponentially.

402
00:23:06,352 --> 00:23:08,487
Let's help our table
manage the scale

403
00:23:08,487 --> 00:23:12,191
by adding support for search.

404
00:23:12,191 --> 00:23:14,660
SwiftUI already
supports basic search

405
00:23:14,660 --> 00:23:17,930
with a searchable modifier.

406
00:23:17,930 --> 00:23:21,900
And new this year, search fields
can support tokenized inputs

407
00:23:21,900 --> 00:23:28,007
and suggestions to help build
more structured search queries.

408
00:23:28,007 --> 00:23:31,543
To help with filtering results,
SwiftUI now supports

409
00:23:31,543 --> 00:23:34,780
search scopes,
which appear in a scope bar

410
00:23:34,780 --> 00:23:39,485
beneath the toolbar on macOS
and as a segmented control

411
00:23:39,485 --> 00:23:43,289
within the navigation bar
on iOS.

412
00:23:43,289 --> 00:23:45,057
We have only scratched
the surface

413
00:23:45,057 --> 00:23:48,794
of what is possible with SwiftUI
on iPad this year.

414
00:23:48,794 --> 00:23:52,531
Check out the "SwiftUI on iPad"
series and learn more.

415
00:23:52,531 --> 00:23:55,067
Now that we have a bit more
control over the event details

416
00:23:55,067 --> 00:23:57,603
and logistics,
let's share the news

417
00:23:57,603 --> 00:24:00,873
and get people
even more excited.

418
00:24:00,873 --> 00:24:02,975
Sharing content
with other people,

419
00:24:02,975 --> 00:24:05,611
as well as sharing data
across applications

420
00:24:05,611 --> 00:24:09,148
are essential parts
of many apps.

421
00:24:09,148 --> 00:24:11,150
Taking advantage
of these features

422
00:24:11,150 --> 00:24:13,719
makes your app even more
integrated into the workflows

423
00:24:13,719 --> 00:24:16,889
of the people who use them.

424
00:24:16,889 --> 00:24:19,892
This year we have
a few exciting areas

425
00:24:19,892 --> 00:24:22,928
to make that even easier.

426
00:24:22,928 --> 00:24:26,265
Let's start with PhotosPicker,
a new multiplatform

427
00:24:26,265 --> 00:24:31,737
and privacy-preserving API
for picking photos and videos.

428
00:24:31,737 --> 00:24:35,708
Since photos are an essential
part of any party,

429
00:24:35,708 --> 00:24:38,544
I've added a feature
to the Party Planner app

430
00:24:38,544 --> 00:24:43,716
that adds fun birthday effects
to photos that were taken.

431
00:24:43,716 --> 00:24:48,220
The new PhotosPicker view can
be placed anywhere in your app,

432
00:24:48,220 --> 00:24:52,424
and on activation, presents
the standard photos-picking UI

433
00:24:52,424 --> 00:24:57,696
to select photos or videos
from the user's library.

434
00:24:57,696 --> 00:25:01,900
PhotosPicker take a binding
to a selected item,

435
00:25:01,900 --> 00:25:05,671
which provides access to
the actual photo and video data.

436
00:25:07,206 --> 00:25:10,676
It also has additional
rich configuration options,

437
00:25:10,676 --> 00:25:13,345
such as filtering
the type of content,

438
00:25:13,345 --> 00:25:16,181
preferred photo encoding,
and more.

439
00:25:18,450 --> 00:25:22,454
This is the most photogenic
cupcake I have ever seen.

440
00:25:22,454 --> 00:25:25,324
But one cupcake
isn't enough.

441
00:25:25,324 --> 00:25:29,762
Let's apply the special effect
as we move on.

442
00:25:29,762 --> 00:25:32,231
Now that we have
our customized photo,

443
00:25:32,231 --> 00:25:36,769
we're ready to share it
with the new ShareLink API.

444
00:25:36,769 --> 00:25:40,706
Each platform has a standard
interface for allowing people

445
00:25:40,706 --> 00:25:43,742
to share content from your apps.

446
00:25:43,742 --> 00:25:47,813
With watchOS 9, you can now
also present the share sheet

447
00:25:47,813 --> 00:25:50,883
from within your watch apps.

448
00:25:50,883 --> 00:25:53,585
The new ShareLink view
enables presenting

449
00:25:53,585 --> 00:25:57,423
that system share sheet
from within your app.

450
00:25:57,423 --> 00:26:00,592
You can simply provide it
with the content to be shared

451
00:26:00,592 --> 00:26:04,029
and a preview to use
in the share sheet,

452
00:26:04,029 --> 00:26:08,033
and it automatically creates
a standard share icon button.

453
00:26:10,068 --> 00:26:13,071
On tap, it presents
the standard share sheet

454
00:26:13,071 --> 00:26:15,774
to send off the content.

455
00:26:15,774 --> 00:26:18,811
Share links adapt to the
context they're applied to,

456
00:26:18,811 --> 00:26:23,782
such as in context menus
and across platforms.

457
00:26:23,782 --> 00:26:28,086
PhotosPicker, ShareLink,
and more all take advantage

458
00:26:28,086 --> 00:26:30,823
of the new
Transferable protocol,

459
00:26:30,823 --> 00:26:34,693
a Swift-first declarative way
to describe how types

460
00:26:34,693 --> 00:26:37,563
are transferred
across applications.

461
00:26:37,563 --> 00:26:41,266
Transferable types are used
to power SwiftUI features

462
00:26:41,266 --> 00:26:45,571
like drag-and-drop, which
makes it easy to drop images

463
00:26:45,571 --> 00:26:50,375
from other apps into
the Party Planner gallery.

464
00:26:50,375 --> 00:26:53,846
This makes use of the new
dropDestination API,

465
00:26:53,846 --> 00:26:58,617
which accepts a payload type,
in this case, just an image.

466
00:26:58,617 --> 00:27:00,986
The completion block
provides a collection

467
00:27:00,986 --> 00:27:04,957
of the received images together
with the drop location.

468
00:27:07,493 --> 00:27:10,796
Many standard types,
such as string and image,

469
00:27:10,796 --> 00:27:14,066
already conform to Transferable.

470
00:27:14,066 --> 00:27:17,836
So it wasn't much work to get
the ball rolling in our app,

471
00:27:17,836 --> 00:27:20,038
but you can easily
take things further

472
00:27:20,038 --> 00:27:23,575
and implement Transferable
in your own custom types.

473
00:27:23,575 --> 00:27:26,879
When it's time to do that,
your conformance declares

474
00:27:26,879 --> 00:27:29,982
the representations
appropriate for your type,

475
00:27:29,982 --> 00:27:34,853
such as using Codable support
and a custom content type.

476
00:27:34,853 --> 00:27:36,955
To learn more
about Transferable,

477
00:27:36,955 --> 00:27:41,026
other representations,
and advanced tips and tricks,

478
00:27:41,026 --> 00:27:44,029
check out the
"Meet Transferable" talk.

479
00:27:44,029 --> 00:27:46,365
While we were preparing
the cupcakes,

480
00:27:46,365 --> 00:27:49,067
Nick was laying out
all the supplies.

481
00:27:49,067 --> 00:27:51,336
Nick, how's it
going over there?

482
00:27:51,336 --> 00:27:53,672
Nick: Almost done!

483
00:27:53,672 --> 00:27:56,775
I'm arranging these party horns
in a completely custom layout,

484
00:27:56,775 --> 00:27:59,077
but I'll need
a little more time.

485
00:27:59,077 --> 00:28:02,481
Let's talk graphics first.

486
00:28:02,481 --> 00:28:04,550
ShapeStyle has new APIs

487
00:28:04,550 --> 00:28:08,253
to achieve rich
graphical effects this year.

488
00:28:08,253 --> 00:28:14,159
We'll use these APIs to give
this guest card some party pop!

489
00:28:14,159 --> 00:28:16,361
Color has a new
gradient property

490
00:28:16,361 --> 00:28:21,099
that adds a subtle gradient
derived from the color.

491
00:28:21,099 --> 00:28:23,769
These look great
with the system colors.

492
00:28:25,837 --> 00:28:30,208
ShapeStyle also got
a new shadow modifier.

493
00:28:30,208 --> 00:28:32,144
Adding it to the white
foreground style

494
00:28:32,144 --> 00:28:36,315
adds a shadow to the text
and to the symbol.

495
00:28:36,315 --> 00:28:39,418
And the detail of this shadow
is remarkable.

496
00:28:39,418 --> 00:28:42,220
The drop shadow has applied
to every element

497
00:28:42,220 --> 00:28:43,855
of the Calendar symbol.

498
00:28:47,192 --> 00:28:49,828
With the whole world
of SF Symbols

499
00:28:49,828 --> 00:28:52,564
and the new SwiftUI
ShapeStyle extensions,

500
00:28:52,564 --> 00:28:55,567
you can make some
absolutely gorgeous icons.

501
00:28:57,736 --> 00:29:03,208
Now, it's time to bring that
grid of SF Symbols to the party.

502
00:29:03,208 --> 00:29:06,945
We'll iterate quickly on it
using SwiftUI Previews,

503
00:29:06,945 --> 00:29:10,916
which has some fantastic
improvements this year.

504
00:29:10,916 --> 00:29:13,318
Previews have always been
a convenient way

505
00:29:13,318 --> 00:29:17,823
to see a view in multiple
configurations at the same time.

506
00:29:17,823 --> 00:29:21,493
With Xcode 14, we're making
this easier than ever

507
00:29:21,493 --> 00:29:23,929
with preview variants.

508
00:29:23,929 --> 00:29:27,432
These let you develop your view
in multiple appearances,

509
00:29:27,432 --> 00:29:30,669
type sizes, or orientations
at the same time

510
00:29:30,669 --> 00:29:34,840
without writing
any configuration code.

511
00:29:34,840 --> 00:29:37,009
We can use that
same gradient again,

512
00:29:37,009 --> 00:29:39,344
or we can style it
as an elliptical gradient

513
00:29:39,344 --> 00:29:41,213
to give these images
a soft glow.

514
00:29:41,213 --> 00:29:43,815
and preview it in dark
and light appearances.

515
00:29:46,985 --> 00:29:50,489
Previews now runs
in live mode by default.

516
00:29:50,489 --> 00:29:52,224
It can't be a great
birthday party

517
00:29:52,224 --> 00:29:54,259
without a little dancing,

518
00:29:54,259 --> 00:29:57,696
so let's get these
SF Symbols dancing.

519
00:29:57,696 --> 00:30:01,867
♪ Electronic dance music ♪

520
00:30:01,867 --> 00:30:10,442
♪

521
00:30:12,010 --> 00:30:16,682
Those jovial icons
demonstrate something profound.

522
00:30:16,682 --> 00:30:22,054
SwiftUI has taken text and image
animations to the next level.

523
00:30:22,054 --> 00:30:26,358
Let's watch that text animate
again in slow motion.

524
00:30:26,358 --> 00:30:29,828
Text can now be beautifully
animated between weights,

525
00:30:29,828 --> 00:30:32,164
styles, and even layouts.

526
00:30:32,164 --> 00:30:34,900
And the best part:
this takes advantage

527
00:30:34,900 --> 00:30:40,439
of the same animation APIs used
throughout the rest of SwiftUI.

528
00:30:40,439 --> 00:30:43,675
Let's close by talking about
my absolute favorite part

529
00:30:43,675 --> 00:30:46,912
of UI programming,
applied geometry --

530
00:30:46,912 --> 00:30:49,114
or as we call it, Layout.

531
00:30:49,114 --> 00:30:53,085
SwiftUI has added new ways
to lay out views.

532
00:30:53,085 --> 00:30:56,621
Grid is a new container view
that arranges views

533
00:30:56,621 --> 00:30:59,024
in a two-dimensional grid.

534
00:30:59,024 --> 00:31:01,626
Grid will measure its subviews
up front to enable cells

535
00:31:01,626 --> 00:31:05,530
that span multiple columns
and enable automatic alignments

536
00:31:05,530 --> 00:31:07,999
across rows and columns.

537
00:31:07,999 --> 00:31:11,703
In fact, you already
got a look at grid earlier.

538
00:31:14,973 --> 00:31:19,444
Using Grid, GridRow, and
the gridCellColumns modifier,

539
00:31:19,444 --> 00:31:21,980
you can build up
a grid piecemeal.

540
00:31:21,980 --> 00:31:24,883
Of course, just like all
layouts in SwiftUI,

541
00:31:24,883 --> 00:31:27,919
they're built for composition.

542
00:31:27,919 --> 00:31:31,490
We introduced SwiftUI's layout
model with the first release,

543
00:31:31,490 --> 00:31:34,226
providing a toolbox
of primitive layout types

544
00:31:34,226 --> 00:31:38,630
to achieve some
of the most common layouts.

545
00:31:38,630 --> 00:31:41,666
Most of the time,
you can get the job done

546
00:31:41,666 --> 00:31:45,604
with these primitive layout
types, but sometimes,

547
00:31:45,604 --> 00:31:48,106
sometimes, you want
that imperative layout code:

548
00:31:48,106 --> 00:31:50,108
the size, the minX,

549
00:31:50,108 --> 00:31:56,848
the frame.origin.x minus
frame.midX divided by 2 plus 3.

550
00:31:56,848 --> 00:31:58,483
It's times like these

551
00:31:58,483 --> 00:32:03,155
when you should reach
for the new Layout protocol.

552
00:32:03,155 --> 00:32:07,225
With it, you have the full power
and flexibility we used

553
00:32:07,225 --> 00:32:10,395
to implement SwiftUI's
stacks and grids

554
00:32:10,395 --> 00:32:15,200
to build your own first-class
layout abstractions.

555
00:32:15,200 --> 00:32:18,403
Using Layout, I built this
bespoke seating chart layout

556
00:32:18,403 --> 00:32:21,940
for the guests
at our birthday party.

557
00:32:21,940 --> 00:32:25,076
Should our party guests
sit in rows or pods?

558
00:32:25,076 --> 00:32:29,281
With the power of Layout,
we don't have to choose.

559
00:32:29,281 --> 00:32:31,950
Using the Layout protocol,
you can build

560
00:32:31,950 --> 00:32:36,221
all kinds of efficient layouts,
tailored to the specific needs

561
00:32:36,221 --> 00:32:39,391
of your view hierarchies.

562
00:32:39,391 --> 00:32:40,992
To learn how to adopt Layout

563
00:32:40,992 --> 00:32:44,563
and about other new,
great layout techniques,

564
00:32:44,563 --> 00:32:49,301
check out the "Compose custom
layouts with SwiftUI" session.

565
00:32:49,301 --> 00:32:53,905
I've prepared a taste of Layout
especially for you.

566
00:32:53,905 --> 00:32:56,074
Using the new AnyLayout type,

567
00:32:56,074 --> 00:32:58,310
I can switch
between the Grid layout

568
00:32:58,310 --> 00:33:01,513
and a custom scattered
layout I've written.

569
00:33:01,513 --> 00:33:03,481
As this session
draws to a close,

570
00:33:03,481 --> 00:33:06,017
there's one surprise left:

571
00:33:06,017 --> 00:33:08,353
You're invited!

572
00:33:08,353 --> 00:33:10,522
♪

573
00:33:10,522 --> 00:33:13,725
You are invited to celebrate
SwiftUI's birthday

574
00:33:13,725 --> 00:33:17,896
and all of the new APIs
with us this week.

575
00:33:17,896 --> 00:33:21,600
There is a lot of detail left to
explore in the APIs we covered,

576
00:33:21,600 --> 00:33:25,804
and even more APIs that
we didn't have time to include.

577
00:33:25,804 --> 00:33:29,741
Enjoy the party,
and enjoy WWDC 2022.

578
00:33:29,741 --> 00:33:36,314
And we are going
to enjoy some cake.

579
00:33:36,314 --> 00:33:38,550
♪ instrumental hip hop music ♪

580
00:33:38,550 --> 00:33:41,219
♪

