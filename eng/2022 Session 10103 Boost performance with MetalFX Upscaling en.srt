1
00:00:00,334 --> 00:00:03,837
♪ ♪

2
00:00:10,043 --> 00:00:11,411
Hello and welcome.

3
00:00:11,445 --> 00:00:14,948
My name is Kelvin Chiu from
the GPU Software team here at Apple.

4
00:00:14,982 --> 00:00:17,985
Today, I'll talk about how to
boost your Metal application performance

5
00:00:18,018 --> 00:00:20,087
with MetalFX Upscaling.

6
00:00:20,721 --> 00:00:23,090
MetalFX is a new API that provides

7
00:00:23,123 --> 00:00:26,627
platform optimized graphics effects
for Metal applications.

8
00:00:27,361 --> 00:00:29,730
It enables high performance upscaling,

9
00:00:29,763 --> 00:00:31,865
which will boost
your application performance

10
00:00:31,899 --> 00:00:34,868
while retaining its rendering quality.

11
00:00:34,902 --> 00:00:38,172
Rendering a frame
at high resolution costs GPU time.

12
00:00:38,205 --> 00:00:41,041
To reduce that time,
rendering at a lower resolution will

13
00:00:41,074 --> 00:00:42,910
usually do the trick.

14
00:00:42,943 --> 00:00:45,879
However, the tradeoff is
a lower rendering quality.

15
00:00:45,913 --> 00:00:47,748
With MetalFX Upscaling,

16
00:00:47,781 --> 00:00:49,716
your application can now render frames

17
00:00:49,750 --> 00:00:52,686
at a lower resolution,
reducing rendering time,

18
00:00:52,719 --> 00:00:55,923
without compromising rendering quality.

19
00:00:55,956 --> 00:00:58,292
MetalFX Upscaling is optimized

20
00:00:58,325 --> 00:01:00,928
to run best on Apple devices.

21
00:01:00,961 --> 00:01:04,364
and it is also easy
to adopt in your game.

22
00:01:04,398 --> 00:01:07,000
MetalFX provides
two upscaling effects,

23
00:01:07,034 --> 00:01:09,236
which I will describe in detail.

24
00:01:09,269 --> 00:01:11,338
Spatial upscaling is simple to use

25
00:01:11,371 --> 00:01:13,674
and gives a great performance boost.

26
00:01:14,541 --> 00:01:17,611
Temporal anti-aliasing
and upscaling integrates information

27
00:01:17,644 --> 00:01:20,914
from multiple frames
to produce a higher quality output.

28
00:01:22,216 --> 00:01:24,418
I will then talk about best practices

29
00:01:24,451 --> 00:01:27,020
for using these effects.

30
00:01:27,054 --> 00:01:29,022
Finally, I will end the session

31
00:01:29,056 --> 00:01:31,625
with demos showing them in action.

32
00:01:32,893 --> 00:01:35,329
Let's start with Spatial upscaling.

33
00:01:36,096 --> 00:01:37,865
MetalFX Spatial upscaling

34
00:01:37,898 --> 00:01:40,167
analyzes the input’s spatial information

35
00:01:40,200 --> 00:01:43,003
to produce new, upscaled samples.

36
00:01:43,036 --> 00:01:45,506
Integrating Spatial upscaling is simple.

37
00:01:45,539 --> 00:01:48,475
It only requires anti-aliased
input color to produce

38
00:01:48,509 --> 00:01:51,445
a spatially upscaled color output.

39
00:01:51,478 --> 00:01:54,248
In a typical game rendering pipeline,

40
00:01:54,281 --> 00:01:57,484
there are various rendering passes
including anti-aliased render

41
00:01:57,518 --> 00:02:00,721
and various post processing effects.

42
00:02:00,754 --> 00:02:02,623
Add MetalFX spatial upscaling

43
00:02:02,656 --> 00:02:04,725
right after
the game's tone-mapping process

44
00:02:04,758 --> 00:02:05,792
is completed.

45
00:02:05,826 --> 00:02:08,595
It will perform best if the input
has been tone mapped and is

46
00:02:08,629 --> 00:02:10,497
in a perceptual color space.

47
00:02:10,531 --> 00:02:13,634
Let’s checkout MetalFX
spatial upscaling in action.

48
00:02:15,135 --> 00:02:18,505
This chess scene is produced
with a high quality reference renderer

49
00:02:18,539 --> 00:02:20,140
in 4K resolution.

50
00:02:20,174 --> 00:02:23,076
It is path traced,
with complex graphics effects,

51
00:02:23,110 --> 00:02:26,413
like ray-traced reflections and shadows.

52
00:02:26,446 --> 00:02:28,882
Here is a side by side comparison,

53
00:02:28,916 --> 00:02:31,451
with 540p input on the left...

54
00:02:32,553 --> 00:02:36,023
…and 1080p output with MetalFX
spatial upscaling on the right.

55
00:02:38,926 --> 00:02:41,595
If I zoom in on the queen, on the left,

56
00:02:41,628 --> 00:02:44,965
the image lacks details
and is low resolution.

57
00:02:44,998 --> 00:02:47,568
On the right,
the spatially upscaled output

58
00:02:47,601 --> 00:02:50,938
has sharper reflections
and more refined edges.

59
00:02:52,439 --> 00:02:55,943
Next, I'll walk you through how
to implement MetalFX spatial upscaling.

60
00:02:57,044 --> 00:03:00,080
In Metal, you would
normally create a command encoder

61
00:03:00,113 --> 00:03:02,382
to encode commands into a command buffer

62
00:03:02,416 --> 00:03:04,885
and produce input for the effect.

63
00:03:04,918 --> 00:03:08,388
Similarly,
you can create a MetalFX effect object

64
00:03:08,422 --> 00:03:11,758
to encode commands into a command buffer
and perform the effect.

65
00:03:12,226 --> 00:03:15,362
Finally, create a third command encoder
to encode commands

66
00:03:15,395 --> 00:03:17,965
that make use of the MetalFX output.

67
00:03:17,998 --> 00:03:20,634
You should only create
a new spatial scaler object

68
00:03:20,667 --> 00:03:22,302
when your application first starts

69
00:03:22,336 --> 00:03:24,505
or when a display switches resolutions

70
00:03:24,538 --> 00:03:26,507
because they are expensive to create.

71
00:03:27,541 --> 00:03:29,676
First, create and configure

72
00:03:29,710 --> 00:03:32,846
a MTLFXSpatialScalerDescriptor.

73
00:03:32,880 --> 00:03:34,948
Then, create a scaler object

74
00:03:34,982 --> 00:03:37,818
by calling the makeSpatialScaler() method.

75
00:03:37,851 --> 00:03:39,720
In the initialization code,

76
00:03:39,753 --> 00:03:41,822
start with the descriptor.

77
00:03:41,855 --> 00:03:43,290
Fill both the width and height

78
00:03:43,323 --> 00:03:45,559
of the input and output texture.

79
00:03:45,592 --> 00:03:48,662
Then, set the texture format
for the textures that will be set later

80
00:03:48,695 --> 00:03:50,597
on the scaler object.

81
00:03:50,631 --> 00:03:53,200
Set the color processing mode.

82
00:03:53,233 --> 00:03:55,435
This tells the API which color space

83
00:03:55,469 --> 00:03:57,804
the input and output is in.

84
00:03:57,838 --> 00:04:00,474
You can set the value
to be in either perceptual,

85
00:04:00,507 --> 00:04:03,310
linear, or HDR color space.

86
00:04:03,343 --> 00:04:06,647
Once the descriptor is filled,
create the scaler object.

87
00:04:08,549 --> 00:04:11,985
Once the scaler object is created,
you can modify the properties

88
00:04:12,019 --> 00:04:14,354
of the object as frequently as you want

89
00:04:14,388 --> 00:04:17,491
and call the encode() method
to start the upscaling process.

90
00:04:18,458 --> 00:04:21,628
In your per frame draw code,
make sure the correct input

91
00:04:21,662 --> 00:04:24,331
and output textures are being set
on the scaler object

92
00:04:24,364 --> 00:04:27,501
before encoding the scaling effect
into the command buffer.

93
00:04:28,335 --> 00:04:31,839
Spatial upscaling offers
a simple way to boost performance.

94
00:04:32,906 --> 00:04:35,209
And when you want
even higher quality rendering,

95
00:04:35,242 --> 00:04:37,377
that's where
MetalFX temporal anti-aliasing

96
00:04:37,411 --> 00:04:39,479
and upscaling comes in.

97
00:04:39,513 --> 00:04:42,583
Temporal AA and upscaling
is a technique that uses data

98
00:04:42,616 --> 00:04:45,819
from previous frames to produce
high-quality upscaled output.

99
00:04:46,286 --> 00:04:49,089
This means, the output of upscaling
from the previous frame

100
00:04:49,122 --> 00:04:52,559
will be used as one of the inputs
for the current frame upscaling.

101
00:04:53,961 --> 00:04:57,364
To better understand why Temporal AA
and upscaling requires data

102
00:04:57,397 --> 00:04:58,565
from the previous frames,

103
00:04:58,599 --> 00:05:01,368
I'll first review the concept
of supersampling.

104
00:05:02,536 --> 00:05:03,937
In supersampling,

105
00:05:03,971 --> 00:05:06,707
multiple samples are calculated per pixel,

106
00:05:06,740 --> 00:05:09,877
which is then integrated
into a single pixel value.

107
00:05:09,910 --> 00:05:12,279
The more samples
that we integrate per pixel,

108
00:05:12,312 --> 00:05:14,548
the better the result will be.

109
00:05:14,581 --> 00:05:16,783
However, it comes at a great cost

110
00:05:16,817 --> 00:05:18,652
to calculate multiple samples per pixel

111
00:05:18,685 --> 00:05:21,121
within a single frame.

112
00:05:21,154 --> 00:05:23,524
Instead of sampling multiple locations

113
00:05:23,557 --> 00:05:25,292
per pixel in a single frame,

114
00:05:25,325 --> 00:05:27,995
you can perform temporal sampling.

115
00:05:28,028 --> 00:05:30,430
Temporal sampling
is the concept of rendering

116
00:05:30,464 --> 00:05:31,865
a different sample location

117
00:05:31,899 --> 00:05:34,368
for all the pixels in a given frame.

118
00:05:34,401 --> 00:05:37,004
This enables you to achieve
supersampling quality

119
00:05:37,037 --> 00:05:40,507
over multiple frames
at a significantly lower cost.

120
00:05:41,308 --> 00:05:44,378
By accumulating samples
from multiple frames and accounting

121
00:05:44,411 --> 00:05:46,113
for sample positions,

122
00:05:46,146 --> 00:05:47,948
temporal AA & upscaling can

123
00:05:47,981 --> 00:05:49,683
integrate samples appropriately

124
00:05:49,716 --> 00:05:51,919
in target resolution pixels,

125
00:05:52,052 --> 00:05:55,556
resulting in a high quality
anti-aliased upscaled output.

126
00:05:56,323 --> 00:05:59,760
However, since content
often changes between frames,

127
00:05:59,793 --> 00:06:02,963
it will require more input data
to detect these changes.

128
00:06:03,931 --> 00:06:06,133
Besides the previous frame output,

129
00:06:06,166 --> 00:06:08,569
Temporal AA and upscaling also requires

130
00:06:08,602 --> 00:06:10,871
a color input that is jittered,

131
00:06:10,904 --> 00:06:14,341
as well as motion
and depth data from the scene.

132
00:06:14,942 --> 00:06:18,245
I'll go through each of them
to explain why they are required.

133
00:06:19,613 --> 00:06:21,982
Let's start with the jittered color input.

134
00:06:23,383 --> 00:06:26,820
Here is a red triangle rendered
without jitter.

135
00:06:26,854 --> 00:06:30,123
The bright white outline represents
the triangle being rendered.

136
00:06:30,757 --> 00:06:33,760
Each one of the small squares
represent a pixel.

137
00:06:33,794 --> 00:06:37,130
And the gray dot in the middle
is where the pixel is sampled.

138
00:06:38,999 --> 00:06:40,868
This is the output of the same triangle

139
00:06:40,901 --> 00:06:43,270
when rendered with a small jitter.

140
00:06:43,303 --> 00:06:46,573
The gray dots show
the sampling location for a given pixel.

141
00:06:47,174 --> 00:06:50,377
The jitter offset should be unique
for a set number of frames

142
00:06:50,410 --> 00:06:53,380
in order to fully gather
the desired number of samples.

143
00:06:54,147 --> 00:06:57,451
I will cover the topic
of jitter sequence in detail later.

144
00:06:58,685 --> 00:07:01,889
Next is the motion information
from the scene.

145
00:07:01,922 --> 00:07:03,824
Motion data from the scene indicates

146
00:07:03,857 --> 00:07:05,559
how much and which direction

147
00:07:05,592 --> 00:07:09,096
the objects had moved
from the previous frame.

148
00:07:09,129 --> 00:07:12,566
Temporal AA and upscaling uses
the motion information to back track

149
00:07:12,599 --> 00:07:15,102
and find corresponding locations
in the previous frame

150
00:07:15,135 --> 00:07:17,437
in order to correctly gather samples.

151
00:07:18,739 --> 00:07:21,842
Another input is the depth information
from the scene.

152
00:07:22,476 --> 00:07:23,744
Depth data from the scene

153
00:07:23,777 --> 00:07:26,914
indicates what's in the foreground
and what's in the background.

154
00:07:26,947 --> 00:07:30,217
This is important when prioritizing
foreground edge anti-aliasing

155
00:07:30,651 --> 00:07:33,887
and provides clues on what
other objects might be newly exposed

156
00:07:33,921 --> 00:07:37,257
when gathering samples
from previous frames.

157
00:07:37,291 --> 00:07:40,627
The last piece of input data is
the previous frame’s output.

158
00:07:42,729 --> 00:07:45,365
The previous frame’s output contains all

159
00:07:45,399 --> 00:07:48,836
of the samples that have been
integrated previously,

160
00:07:48,869 --> 00:07:52,139
and it will be blended with
the current frame’s jittered color input

161
00:07:52,172 --> 00:07:55,409
in order to increase the number
of samples per pixel.

162
00:07:56,176 --> 00:07:59,513
By combining information
from both the current and previous frame,

163
00:07:59,546 --> 00:08:02,649
the resulting image now has more details.

164
00:08:02,683 --> 00:08:05,552
MetalFX keeps track
of the upscaled output,

165
00:08:05,586 --> 00:08:07,521
so you only need to pass the color,

166
00:08:07,554 --> 00:08:10,490
motion, and depth
from the current rendered frame.

167
00:08:11,191 --> 00:08:13,861
Going back to a typical
game’s rendering pipeline,

168
00:08:13,894 --> 00:08:16,697
MetalFX temporal AA
and upscaling should run

169
00:08:16,730 --> 00:08:18,832
before any post processing effects,

170
00:08:18,866 --> 00:08:20,834
since these effects will interfere

171
00:08:20,868 --> 00:08:23,103
with the result of the upscaling.

172
00:08:24,371 --> 00:08:26,306
Here's the chess rendering again,

173
00:08:26,340 --> 00:08:29,810
this time using
MetalFX Temporal AA and upscaling.

174
00:08:29,843 --> 00:08:33,347
This is a side by side comparison
of 1080p input on the left

175
00:08:34,248 --> 00:08:36,583
and 4K upscaled output on the right.

176
00:08:41,488 --> 00:08:44,258
Zooming in closer to the queen,

177
00:08:44,291 --> 00:08:47,361
the input is low resolution and aliased,

178
00:08:47,394 --> 00:08:50,430
while the temporally upscaled output
on the right is high resolution

179
00:08:50,464 --> 00:08:53,934
with a smooth outline and has
more fine details in the reflections.

180
00:08:55,068 --> 00:08:58,372
Just as with spatial scaler,
creating a new temporal scaler

181
00:08:58,405 --> 00:09:00,440
is expensive and should only be done

182
00:09:00,474 --> 00:09:02,209
when your application first starts

183
00:09:02,242 --> 00:09:05,312
or when a display switches resolutions.

184
00:09:05,345 --> 00:09:07,247
First, you'll need to allocate and fill in

185
00:09:07,281 --> 00:09:10,117
a MTLFXTemporalScalerDescriptor.

186
00:09:10,851 --> 00:09:14,354
Then call makeTemporalScaler() method
to create the scaler object.

187
00:09:15,656 --> 00:09:19,092
In your initialization code,
start with the descriptor.

188
00:09:19,726 --> 00:09:23,230
Fill in both the width and height
of the input and output textures.

189
00:09:23,897 --> 00:09:25,632
Then set the jittered color,

190
00:09:25,666 --> 00:09:27,501
depth, and motion texture formats

191
00:09:27,534 --> 00:09:30,971
for the textures that will be bound later
on the scaler object as inputs.

192
00:09:32,339 --> 00:09:35,042
Finally, set the format
for the output texture

193
00:09:35,075 --> 00:09:38,378
where MetalFX will store
the upscaled output.

194
00:09:38,412 --> 00:09:41,515
Once the descriptor is filled,
create the scaler object.

195
00:09:42,482 --> 00:09:45,686
On the scaler object,
set the motion scale properties.

196
00:09:45,719 --> 00:09:49,223
This helps you scale the app's motion data
to what the API expects.

197
00:09:50,057 --> 00:09:51,992
MetalFX expects motion data

198
00:09:52,025 --> 00:09:54,661
in the render resolution pixel space

199
00:09:54,695 --> 00:09:57,497
with direction that goes
from the current frame’s position

200
00:09:57,531 --> 00:09:59,733
to the previous frame’s position.

201
00:09:59,766 --> 00:10:01,034
As an example,

202
00:10:01,068 --> 00:10:03,637
I'll use a render resolution of 1080p.

203
00:10:03,670 --> 00:10:06,707
Suppose you have an object
that moves from clip space coordinate

204
00:10:06,740 --> 00:10:09,243
(-0.75, -0.75).

205
00:10:09,276 --> 00:10:12,346
to clip space coordinate (0.25, 0.25).

206
00:10:12,913 --> 00:10:15,582
The motion data is stored as (1, 1).

207
00:10:17,150 --> 00:10:19,119
Set the motion vector scale property

208
00:10:19,152 --> 00:10:21,021
to (-960, 540)

209
00:10:21,054 --> 00:10:24,358
so that MetalFX can interpret
your game's motion data correctly.

210
00:10:26,660 --> 00:10:29,530
You can modify the properties
of the scaler object as frequently

211
00:10:29,563 --> 00:10:30,464
as you want.

212
00:10:30,497 --> 00:10:33,934
And call the encode() method
to start the upscaling process.

213
00:10:35,402 --> 00:10:37,304
For your per frame draw code,

214
00:10:37,337 --> 00:10:39,606
first set the resetHistory property.

215
00:10:39,640 --> 00:10:42,476
Set this to true when your application
loads the first frame

216
00:10:42,509 --> 00:10:44,745
or when there is a scene cut.

217
00:10:44,778 --> 00:10:48,148
Then set the textures
that are inputs for the effect,

218
00:10:48,182 --> 00:10:50,984
followed by the output texture.

219
00:10:51,018 --> 00:10:53,253
Next, set the reversedDepth property

220
00:10:53,287 --> 00:10:56,323
to indicate whether the depth values are
in reversed-Z mapping.

221
00:10:57,558 --> 00:10:58,825
The last property to set

222
00:10:58,859 --> 00:11:02,062
before encoding the scaling effect
is the current jitter offset.

223
00:11:03,263 --> 00:11:05,465
Getting jitter offset correctly
is essential

224
00:11:05,499 --> 00:11:06,967
to the quality of the output.

225
00:11:07,000 --> 00:11:10,103
Let us take a quick look
on how to set jitter offset.

226
00:11:11,371 --> 00:11:14,775
As an example, on the left
is a triangle rendered with jitter.

227
00:11:16,376 --> 00:11:19,379
On the right
is a zoomed in view of a pixel.

228
00:11:19,413 --> 00:11:22,716
The sample is located at (0.625, 0.78).

229
00:11:23,150 --> 00:11:26,153
The pixel center is represented
by the orange dot.

230
00:11:26,186 --> 00:11:28,889
It is located at (0.5, 0.5).

231
00:11:30,357 --> 00:11:31,425
In this example,

232
00:11:31,458 --> 00:11:34,895
the jitter offset is (-0.125, -0.28).

233
00:11:35,796 --> 00:11:37,431
Note that jitter offsets are always

234
00:11:37,464 --> 00:11:40,634
in the range of -0.5 to 0.5.

235
00:11:40,667 --> 00:11:43,670
To verify that you are providing
the correct jitter offset,

236
00:11:43,704 --> 00:11:46,340
render a scene
without camera and object motion

237
00:11:46,373 --> 00:11:49,343
using a sequence
of different jitter offsets.

238
00:11:49,376 --> 00:11:51,445
On the left is an example

239
00:11:51,478 --> 00:11:53,881
when incorrect jitter offset is specified.

240
00:11:53,914 --> 00:11:57,050
Static objects could shift,
and fine lines are fuzzy.

241
00:11:57,718 --> 00:11:59,453
On the right is the output

242
00:11:59,486 --> 00:12:01,688
when correct jitter offset is specified.

243
00:12:01,722 --> 00:12:03,056
Objects stay in place,

244
00:12:03,090 --> 00:12:05,626
and fine lines are resolved progressively.

245
00:12:05,659 --> 00:12:08,328
The MetalFX
“temporal AA and upscaling” effect

246
00:12:08,362 --> 00:12:09,930
boosts your application performance

247
00:12:09,963 --> 00:12:13,033
and gives an upscaling quality
that’s comparable to the quality

248
00:12:13,066 --> 00:12:16,069
of the native target resolution rendering.

249
00:12:16,103 --> 00:12:18,672
In order to get optimal quality
and performance

250
00:12:18,705 --> 00:12:20,607
when using both upscaling effects,

251
00:12:20,641 --> 00:12:24,011
l’ll now cover
implementation best practices.

252
00:12:25,245 --> 00:12:28,081
Starting with spatial upscaling.

253
00:12:28,115 --> 00:12:30,584
For the best spatial upscaling quality,

254
00:12:30,617 --> 00:12:33,754
the color input should be
anti-aliased and noise free.

255
00:12:33,787 --> 00:12:35,289
This is because noise effects

256
00:12:35,322 --> 00:12:38,325
and aliased images
prevent good edge determination,

257
00:12:38,358 --> 00:12:41,094
which will worsen
the spatial upscaling quality.

258
00:12:41,929 --> 00:12:43,597
For the best performance,

259
00:12:43,630 --> 00:12:46,066
use the perceptual color processing mode.

260
00:12:46,099 --> 00:12:48,702
This means,
your input color should be tone mapped,

261
00:12:48,735 --> 00:12:52,172
with values from 0-1,
in the sRGB color space.

262
00:12:53,073 --> 00:12:56,043
And finally,
set the appropriate negative mip bias

263
00:12:56,076 --> 00:12:58,712
for higher texture detail.

264
00:12:58,745 --> 00:13:00,848
The recommended mip bias calculation

265
00:13:00,881 --> 00:13:03,450
for spatial upscaling is to apply log2

266
00:13:03,483 --> 00:13:05,018
of the render resolution width,

267
00:13:05,052 --> 00:13:07,187
divided by the target resolution width.

268
00:13:08,388 --> 00:13:11,525
For example,
scaling each render resolution dimension

269
00:13:11,558 --> 00:13:15,062
by 2x will result in -1 mip bias,

270
00:13:15,095 --> 00:13:17,865
while scaling each dimension by 1.5x

271
00:13:17,898 --> 00:13:20,801
will result in -0.58 mip bias.

272
00:13:21,602 --> 00:13:24,838
Note that lower mip levels
might result in flickering for textures

273
00:13:24,872 --> 00:13:26,573
with high frequency patterns.

274
00:13:26,607 --> 00:13:28,876
You should adjust the mip bias
for certain textures

275
00:13:28,909 --> 00:13:31,378
if you spot such artifacts.

276
00:13:31,411 --> 00:13:33,514
I will talk next about TemporalAA

277
00:13:33,547 --> 00:13:35,449
and upscaling best practices.

278
00:13:36,183 --> 00:13:39,486
To get the best quality
from Temporal AA and upscaling,

279
00:13:39,520 --> 00:13:42,990
it's important to choose
a good jitter sequence.

280
00:13:43,023 --> 00:13:44,324
Look for a jitter sequence

281
00:13:44,358 --> 00:13:46,560
that will provide
a good distribution of samples

282
00:13:46,593 --> 00:13:47,628
across all the pixels

283
00:13:47,661 --> 00:13:50,230
in an upscaled target resolution.

284
00:13:50,264 --> 00:13:53,333
Usually, eight jittered samples
per output pixel

285
00:13:53,367 --> 00:13:56,703
produces a high-quality
anti-aliased upscaled output.

286
00:13:57,671 --> 00:14:00,908
In the case of 2x upscaling,
the recommendation is to use

287
00:14:00,941 --> 00:14:03,710
a Halton (2,3) sequence with 32 jitters

288
00:14:03,744 --> 00:14:06,513
to produce your jittered color input.

289
00:14:06,547 --> 00:14:09,483
Here’s a plot
of the first 32 sample locations

290
00:14:09,516 --> 00:14:11,318
from Halton (2,3) sequence,

291
00:14:11,351 --> 00:14:14,521
producing approximately
eight samples per output pixel.

292
00:14:15,322 --> 00:14:18,525
It's also important to set
the appropriate negative mip bias

293
00:14:18,559 --> 00:14:20,661
for higher texture detail.

294
00:14:20,694 --> 00:14:22,529
The recommended mip bias calculation

295
00:14:22,563 --> 00:14:24,498
for temporal AA and upscaling

296
00:14:24,531 --> 00:14:27,367
is to apply log2
of render resolution width,

297
00:14:27,401 --> 00:14:30,771
divided by target resolution width,
subtracted by 1.

298
00:14:31,538 --> 00:14:34,808
For example,
scaling each render resolution dimension

299
00:14:34,842 --> 00:14:38,011
by 2x will result in a -2 mip bias,

300
00:14:38,045 --> 00:14:40,480
while scaling each dimension

301
00:14:40,514 --> 00:14:43,483
by 1.5x will result in a -1.58 mip bias.

302
00:14:44,318 --> 00:14:47,487
Next, I will show you examples
of how mip bias affects your output

303
00:14:47,521 --> 00:14:49,656
in different situations.

304
00:14:50,524 --> 00:14:52,659
Here are MetalFX temporal AA

305
00:14:52,693 --> 00:14:54,461
and upscaling outputs of the same scene

306
00:14:54,494 --> 00:14:57,998
using mip bias of 0, -1, and -2.

307
00:15:00,167 --> 00:15:01,869
Mip bias of -2 produces

308
00:15:01,902 --> 00:15:03,904
the sharpest and clearest output,

309
00:15:03,937 --> 00:15:05,639
while mip bias of 0 produces

310
00:15:05,672 --> 00:15:08,175
the softest and most blurry output.

311
00:15:09,610 --> 00:15:11,712
Here are three renderings
of a circuit board

312
00:15:11,745 --> 00:15:14,381
that use the temporal upscaling effect.

313
00:15:14,414 --> 00:15:16,984
From top to bottom,
the mip bias values applied

314
00:15:17,017 --> 00:15:19,319
when sampling textures are 0,

315
00:15:19,353 --> 00:15:21,922
-1, and -2.

316
00:15:21,955 --> 00:15:25,359
Because the circuit board’s textures
have high-frequency patterns,

317
00:15:25,392 --> 00:15:27,661
such as its tiny trace wires,

318
00:15:27,694 --> 00:15:30,264
mip bias of -2 generates flickering

319
00:15:30,297 --> 00:15:31,865
and moire effects.

320
00:15:31,899 --> 00:15:34,134
However, mip bias of -1

321
00:15:34,168 --> 00:15:35,769
greatly reduces these effects,

322
00:15:35,802 --> 00:15:38,705
and mip bias of 0
completely eliminates them.

323
00:15:39,673 --> 00:15:43,143
Lower mip levels
generally result in more details.

324
00:15:43,177 --> 00:15:45,913
Use our mip bias suggestion
as a starting point,

325
00:15:45,946 --> 00:15:47,948
but be mindful when choosing a mip bias

326
00:15:47,981 --> 00:15:50,150
for textures with high-frequency patterns.

327
00:15:50,184 --> 00:15:53,120
Follow these practices
to ensure an anti-aliased,

328
00:15:53,153 --> 00:15:54,621
high-quality upscaled output

329
00:15:54,655 --> 00:15:57,858
from MetalFX Temporal AA and upscaling.

330
00:16:00,561 --> 00:16:02,863
Finally, I will cover
performance best practice

331
00:16:02,896 --> 00:16:05,399
when using MetalFX Upscaling.

332
00:16:05,432 --> 00:16:08,468
To get the best performance
with MetalFX Upscaling,

333
00:16:08,502 --> 00:16:11,338
you should be careful
to avoid binding the same resources

334
00:16:11,371 --> 00:16:14,174
for reading and writing
in two non-dependent render

335
00:16:14,208 --> 00:16:16,043
or compute passes.

336
00:16:16,076 --> 00:16:18,879
Doing so creates false dependencies.

337
00:16:18,912 --> 00:16:21,014
In Metal, it's always a good idea

338
00:16:21,048 --> 00:16:22,816
to avoid false dependencies.

339
00:16:22,850 --> 00:16:25,786
But this is especially important
for MetalFX Upscaling,

340
00:16:25,819 --> 00:16:27,688
as I will describe next.

341
00:16:27,721 --> 00:16:30,424
In this example, there are two frames.

342
00:16:30,457 --> 00:16:33,794
The shadow and the post processing passes
are completely unrelated

343
00:16:33,827 --> 00:16:36,997
and have no resource dependencies.

344
00:16:37,030 --> 00:16:39,666
Metal will overlap the next frame’s
shadow pass

345
00:16:39,700 --> 00:16:42,369
with the current frame’s
post processing pass.

346
00:16:43,504 --> 00:16:45,906
However,
if the post processing pass writes

347
00:16:45,939 --> 00:16:48,475
to a Metal buffer while the shadow pass

348
00:16:48,509 --> 00:16:50,410
also reads from the same buffer,

349
00:16:50,444 --> 00:16:53,347
Metal will prevent the GPU
from running these two passes

350
00:16:53,380 --> 00:16:56,617
in parallel in order
to avoid the potential hazard of reading

351
00:16:56,650 --> 00:16:59,786
and writing to the same resource
at the same time.

352
00:16:59,820 --> 00:17:01,555
False dependencies between frames

353
00:17:01,588 --> 00:17:03,223
can negatively affect performance

354
00:17:03,257 --> 00:17:05,492
of MetalFX Upscaling.

355
00:17:05,526 --> 00:17:07,160
Notice that if there is no

356
00:17:07,194 --> 00:17:09,496
false dependency between frames,

357
00:17:09,530 --> 00:17:11,965
the next frame’s shadow pass
could have overlapped

358
00:17:11,999 --> 00:17:14,935
with the previous frame's MetalFX Upscaling.

359
00:17:14,968 --> 00:17:17,204
However, because of the false dependency

360
00:17:17,237 --> 00:17:18,272
between frames,

361
00:17:18,305 --> 00:17:19,540
the performance loss now

362
00:17:19,573 --> 00:17:20,674
also includes the time

363
00:17:20,707 --> 00:17:22,109
it takes for MetalFX Upscaling

364
00:17:22,142 --> 00:17:23,944
to finish its process.

365
00:17:23,977 --> 00:17:25,479
Ideally, you should ensure that

366
00:17:25,512 --> 00:17:26,847
there are no false dependencies

367
00:17:26,880 --> 00:17:28,715
between frames to allow overlapping

368
00:17:28,749 --> 00:17:30,851
of workloads between different frames,

369
00:17:30,884 --> 00:17:32,786
ensuring the most optimal performance

370
00:17:32,819 --> 00:17:35,822
when using MetalFX Upscaling.

371
00:17:35,856 --> 00:17:36,957
In this example,

372
00:17:36,990 --> 00:17:38,725
you can instead create a separate buffer

373
00:17:38,759 --> 00:17:40,894
for the post processing and shadow passes

374
00:17:40,928 --> 00:17:44,264
to prevent the false dependency,

375
00:17:44,298 --> 00:17:46,233
resulting in parallel execution

376
00:17:46,266 --> 00:17:48,435
of independent passes.

377
00:17:49,436 --> 00:17:52,306
Avoiding false dependencies
is something you always want

378
00:17:52,339 --> 00:17:55,142
to keep in mind
when adopting MetalFX Upscaling.

379
00:17:55,175 --> 00:17:57,978
When deciding which
of these two effects to choose,

380
00:17:58,011 --> 00:18:01,215
there are some considerations
you should also keep in mind.

381
00:18:01,949 --> 00:18:05,152
With ever-increasing shading costs
and pixel counts,

382
00:18:05,185 --> 00:18:07,855
temporal AA and upscaling
is here to stay.

383
00:18:07,888 --> 00:18:11,058
Amortizing pixels temporally
increases visual fidelity

384
00:18:11,091 --> 00:18:12,993
and boosts performance.

385
00:18:13,026 --> 00:18:15,996
If you don’t already have
a great temporal AA solution

386
00:18:16,029 --> 00:18:17,664
and can render jittered color,

387
00:18:17,698 --> 00:18:19,933
motion, and depth buffers,

388
00:18:19,967 --> 00:18:22,336
MetalFX temporal AA and upscaling provides

389
00:18:22,369 --> 00:18:24,438
a compelling platform-optimized solution

390
00:18:24,471 --> 00:18:26,206
that you should consider.

391
00:18:26,240 --> 00:18:28,275
If you don’t have the necessary inputs

392
00:18:28,308 --> 00:18:30,644
or already have a well tuned AA solution,

393
00:18:30,677 --> 00:18:34,114
consider using MetalFX spatial upscaling.

394
00:18:34,147 --> 00:18:36,917
With that, hopefully you now
have a better understanding

395
00:18:36,950 --> 00:18:39,219
of which upscaling effect to choose.

396
00:18:39,253 --> 00:18:42,256
I will next show examples
of both of these effects running live

397
00:18:42,289 --> 00:18:44,658
in Metal applications.

398
00:18:44,691 --> 00:18:47,361
Here’s a side by side comparison
of the “Bistro” scene

399
00:18:47,394 --> 00:18:50,130
from our “Modern Rendering with Metal”
sample code,

400
00:18:50,163 --> 00:18:52,666
which features
real-time rendering algorithms,

401
00:18:52,699 --> 00:18:56,203
like ambient occlusion and volumetric fog.

402
00:18:56,236 --> 00:18:58,839
Native rendering at 1080p on the left

403
00:18:58,872 --> 00:19:00,140
versus 4K output

404
00:19:00,174 --> 00:19:02,876
with MetalFX Spatial upscaling
on the right.

405
00:19:02,910 --> 00:19:06,246
Note that this sample has
its own temporal anti-aliasing solution,

406
00:19:06,280 --> 00:19:09,550
which we use as input
for MetalFX spatial upscaling.

407
00:19:10,584 --> 00:19:13,520
Zooming in more closely at the scooter...

408
00:19:15,422 --> 00:19:18,692
On the left, the image is a bit blurry,
while on the right,

409
00:19:18,725 --> 00:19:20,894
the spatially upscaled output results

410
00:19:20,928 --> 00:19:23,697
in a sharper image with cleaner edges.

411
00:19:23,730 --> 00:19:26,967
The straight line
on the handle bar is nicely antialiased.

412
00:19:28,268 --> 00:19:31,305
The curve on the body
is also much smoother.

413
00:19:32,239 --> 00:19:35,509
Let's do a performance comparison.

414
00:19:35,542 --> 00:19:38,512
On the left is a native rendering at 4K.

415
00:19:38,545 --> 00:19:40,547
On the right is the 4K output

416
00:19:40,581 --> 00:19:42,850
from MetalFX Spatial upscaling.

417
00:19:44,184 --> 00:19:46,954
As the camera moves,
the native rendering on the left

418
00:19:46,987 --> 00:19:48,956
is running at a choppy frame rate,

419
00:19:48,989 --> 00:19:50,891
while the spatially upscaled output

420
00:19:50,924 --> 00:19:53,060
on the right is much smoother.

421
00:19:55,429 --> 00:19:57,531
Next is a side-by-side comparison

422
00:19:57,564 --> 00:20:00,400
of a ray-traced scene
with many reflections and shadows.

423
00:20:01,235 --> 00:20:04,438
On the left is
a native rendering at 1080p.

424
00:20:04,471 --> 00:20:06,507
On the right is the 4K output

425
00:20:06,540 --> 00:20:08,976
with MetalFX Temporal AA and upscaling.

426
00:20:10,310 --> 00:20:13,347
Zooming in more closely
at the chandelier...

427
00:20:14,448 --> 00:20:17,651
The native output
on the left has an aliased look,

428
00:20:17,684 --> 00:20:19,720
while the temporally upscaled output
on the right

429
00:20:19,753 --> 00:20:22,890
has sharp edges with more fine details.

430
00:20:22,923 --> 00:20:26,393
The shadow is nice and crisp
rather than fuzzy looking.

431
00:20:26,426 --> 00:20:29,396
And fine details on the chandelier
can now be recognized.

432
00:20:32,266 --> 00:20:34,201
Performance gains are also apparent

433
00:20:34,234 --> 00:20:37,037
with MetalFX Temporal AA and upscaling.

434
00:20:37,070 --> 00:20:40,007
On the left is native rendering at 4K.

435
00:20:40,040 --> 00:20:41,909
On the right is the 4K output

436
00:20:41,942 --> 00:20:44,978
with MetalFX Temporal AA and upscaling.

437
00:20:45,012 --> 00:20:47,748
As the camera moves,
the native rendering on the left

438
00:20:47,781 --> 00:20:49,983
is running at a very low frame rate,

439
00:20:50,017 --> 00:20:51,585
while the temporally upscaled output

440
00:20:51,618 --> 00:20:53,654
on the right is much smoother.

441
00:21:06,967 --> 00:21:08,836
Leading game developers are excited

442
00:21:08,869 --> 00:21:11,605
by the capabilities of MetalFX Upscaling

443
00:21:11,638 --> 00:21:13,807
and will be bringing "Grid: Legends,"

444
00:21:13,841 --> 00:21:15,576
"Resident Evil: Village,"

445
00:21:15,609 --> 00:21:18,512
and "No Man’s Sky" to Mac later this year.

446
00:21:18,545 --> 00:21:21,682
Next, I’ll show you some early work
using the framework.

447
00:21:21,715 --> 00:21:24,718
[rumbling and impacts]

448
00:21:25,986 --> 00:21:28,689
In this scene,
we can see the incredible visuals

449
00:21:28,722 --> 00:21:30,824
and fluid gameplay of "No Man’s Sky"

450
00:21:30,858 --> 00:21:33,794
using MetalFX Temporal AA and Upscaling.

451
00:21:33,827 --> 00:21:34,795
[ship beeps]

452
00:21:34,828 --> 00:21:37,331
[engine rumbles]

453
00:21:41,301 --> 00:21:42,269
To recap,

454
00:21:42,302 --> 00:21:45,639
MetalFX is a new API
with a focus on upscaling.

455
00:21:45,672 --> 00:21:47,841
Spatial upscaling is easy to adopt

456
00:21:47,875 --> 00:21:50,043
and delivers
substantial performance gains,

457
00:21:50,077 --> 00:21:52,246
and you can use Temporal AA and upscaling

458
00:21:52,279 --> 00:21:54,715
to deliver higher quality rendering.

459
00:21:54,748 --> 00:21:57,818
Following the best practices
I talked about earlier will ensure

460
00:21:57,851 --> 00:22:01,121
you get the most out of MetalFX Upscaling.

461
00:22:01,154 --> 00:22:02,656
Thank you for watching.

462
00:22:02,689 --> 00:22:06,193
♪ ♪

