1
00:00:00,334 --> 00:00:06,340
♪ instrumental hip hop music ♪

2
00:00:09,309 --> 00:00:11,245
Hi, I’m David Wendland,

3
00:00:11,278 --> 00:00:14,414
a Commerce Technical Advocate
for the App Store.

4
00:00:14,448 --> 00:00:18,452
Today, I’ll show you how your app
can deliver a first class experience

5
00:00:18,485 --> 00:00:21,555
by proactively identifying
a customer's new, current,

6
00:00:21,588 --> 00:00:25,859
and past purchases,
without the customer taking any action.

7
00:00:25,893 --> 00:00:30,330
I’ll cover how to do this with StoreKit 2
and the original StoreKit,

8
00:00:30,364 --> 00:00:33,100
so you can optimize
your app's onboarding experience

9
00:00:33,133 --> 00:00:36,003
for all your customers.

10
00:00:36,036 --> 00:00:39,907
Let me start by defining
proactive in-app purchase restore.

11
00:00:39,940 --> 00:00:42,309
This means that when
a customer launches your app,

12
00:00:42,342 --> 00:00:45,946
you use the data readily available,
on device,

13
00:00:45,979 --> 00:00:48,582
to proactively check for the transactions

14
00:00:48,615 --> 00:00:53,420
in order to determine
if they are a new or existing customer

15
00:00:53,453 --> 00:00:56,557
and doing so
without requiring any customer action,

16
00:00:56,590 --> 00:01:01,328
not even tapping a "Restore Purchases"
button or entering a password.

17
00:01:01,361 --> 00:01:04,164
This enables you
to tailor your app experience

18
00:01:04,198 --> 00:01:07,801
to your customer's purchase history
and state

19
00:01:07,835 --> 00:01:12,039
so your app unlocks products or services
for your current customers,

20
00:01:12,072 --> 00:01:16,743
or your app merchandises your latest
product offering to new customers,

21
00:01:16,777 --> 00:01:18,345
or for those past subscribers,

22
00:01:18,378 --> 00:01:21,815
you present them subscription offers
to win them back.

23
00:01:21,849 --> 00:01:24,418
This is what proactive restore is about,

24
00:01:24,451 --> 00:01:27,221
using StoreKit to optimize
your app's experience

25
00:01:27,254 --> 00:01:33,360
for new, existing, and past customers,
on all of their devices, automatically.

26
00:01:33,393 --> 00:01:35,462
Let’s look at this example.

27
00:01:35,495 --> 00:01:38,232
Here we have our Ocean Journal app.

28
00:01:38,265 --> 00:01:40,667
This is a common merchandising experience,

29
00:01:40,701 --> 00:01:44,304
where the customer has a few different
calls to action to choose from.

30
00:01:44,338 --> 00:01:47,107
Either I can attempt
to buy the in-app purchase

31
00:01:47,140 --> 00:01:50,777
and authenticate with biometrics,
such as FaceID,

32
00:01:50,811 --> 00:01:52,412
or if I’ve created an app account,

33
00:01:52,446 --> 00:01:56,250
I could sign in and possibly use Keychain
to enter my password,

34
00:01:56,283 --> 00:01:58,652
or if I believe I’m an active subscriber,

35
00:01:58,685 --> 00:02:01,388
I could use the "Restore Purchases"
button.

36
00:02:01,421 --> 00:02:03,757
For your active subscribers
on a new device,

37
00:02:03,790 --> 00:02:07,427
knowing which option to choose
isn’t always clear to them.

38
00:02:07,461 --> 00:02:10,297
And with the data readily available
to your app,

39
00:02:10,330 --> 00:02:12,199
this experience can be streamlined

40
00:02:12,232 --> 00:02:15,469
with our proactive in-app
purchase restore best practice.

41
00:02:16,036 --> 00:02:21,475
So, if I launched this app on a new device
but was already an active subscriber,

42
00:02:21,508 --> 00:02:26,013
upon launch, the app would proactively
restore my service, automatically,

43
00:02:26,046 --> 00:02:28,649
without requiring any action from me.

44
00:02:28,682 --> 00:02:31,318
So here the app recognized
my Pro subscription

45
00:02:31,351 --> 00:02:34,488
and loaded my favorite beach,
complete with surf conditions

46
00:02:34,521 --> 00:02:36,990
and enabled the live cam feature.

47
00:02:37,024 --> 00:02:41,061
This experience differentiates
your app from the others

48
00:02:41,094 --> 00:02:45,899
and I will cover how to do this
with StoreKit 2 on iOS 15 and newer.

49
00:02:45,933 --> 00:02:49,636
Additionally, if your app supports
previous versions of iOS,

50
00:02:49,670 --> 00:02:51,905
I will cover how to create this same
great experience

51
00:02:51,939 --> 00:02:55,542
with original StoreKit
and the verifyReceipt endpoint.

52
00:02:55,576 --> 00:02:58,178
With that background,
here’s what I’ll cover.

53
00:02:58,212 --> 00:03:02,149
First, I’ll describe in detail
the core customer product states

54
00:03:02,182 --> 00:03:06,019
that your app uses
to generate personalized experiences

55
00:03:06,053 --> 00:03:10,257
based on the customer's in-app purchases
with StoreKit.

56
00:03:10,290 --> 00:03:14,194
Then I'll review the steps to implement,
using StoreKit 2,

57
00:03:14,228 --> 00:03:19,132
complete with sample code
using the SK Demo app.

58
00:03:19,166 --> 00:03:21,335
Let’s look at each in-app purchase type,
their core customer product states,

59
00:03:23,370 --> 00:03:27,975
and review a few examples of
a personalized onboarding experience.

60
00:03:28,008 --> 00:03:30,711
To start,
the in-app purchase types that apply

61
00:03:30,744 --> 00:03:35,148
to proactive restore are non-consumables,
non-renewing subscriptions,

62
00:03:35,182 --> 00:03:37,217
and auto-renewable subscriptions,

63
00:03:37,251 --> 00:03:40,454
as they are all persistent
in the customer's transaction history

64
00:03:40,487 --> 00:03:43,056
and will always be available
with StoreKit.

65
00:03:43,090 --> 00:03:46,994
Therefore your app can identify
per customer their purchase state

66
00:03:47,027 --> 00:03:51,298
for each product or subscription group.

67
00:03:51,331 --> 00:03:54,001
For non-renewing and auto-renewable
subscriptions,

68
00:03:54,034 --> 00:03:57,104
I will use the term "subscriptions"
to reference them both

69
00:03:57,137 --> 00:04:01,608
as we review the customer product states.

70
00:04:01,642 --> 00:04:05,078
Here are the three core states your app
can personalize against.

71
00:04:05,112 --> 00:04:08,549
Let’s review in-depth new customers.

72
00:04:08,582 --> 00:04:11,785
This state represents
a signed in App Store Apple ID

73
00:04:11,818 --> 00:04:16,456
that does not have any current
or past in-app purchase transactions.

74
00:04:16,490 --> 00:04:21,328
This state is typically used as the app’s
default merchandising experience.

75
00:04:21,361 --> 00:04:25,599
Our Ocean Journal app is merchandising
its monthly and annual subscription

76
00:04:25,632 --> 00:04:28,268
with a one month free trial.

77
00:04:28,302 --> 00:04:33,307
Looking at our second core state,
we have Purchased and Active Subscriber.

78
00:04:33,340 --> 00:04:36,210
In this state,
a customer has an active transaction

79
00:04:36,243 --> 00:04:39,046
and your app is obligated
to grant the customer access

80
00:04:39,079 --> 00:04:41,548
to the purchased product or service.

81
00:04:41,582 --> 00:04:44,852
Here, our Ocean Journal app
immediately presents the customer

82
00:04:44,885 --> 00:04:48,722
their preferred beach
with the premium live beach cam.

83
00:04:48,755 --> 00:04:53,560
No buy buttons are visible,
as service was proactively restored.

84
00:04:53,594 --> 00:04:56,263
For each purchased product
or active subscription,

85
00:04:56,296 --> 00:05:00,501
the transaction has a static
and unique original transaction ID,

86
00:05:00,534 --> 00:05:04,505
which persists for the customer's
Apple ID and storefront.

87
00:05:04,538 --> 00:05:07,274
To maintain status
of the customer's transactions,

88
00:05:07,307 --> 00:05:12,012
associate the original transaction IDs
with an account on your system.

89
00:05:12,045 --> 00:05:14,147
It can be either an anonymous account,

90
00:05:14,181 --> 00:05:17,017
or an account that the user created
with your system.

91
00:05:17,050 --> 00:05:20,053
Knowing the original transaction ID
is critical

92
00:05:20,087 --> 00:05:23,290
when leveraging the power
of App Store Server Notifications,

93
00:05:23,323 --> 00:05:27,194
allowing your server to remain current
on the transaction status.

94
00:05:27,227 --> 00:05:30,397
One scenario to highlight
is when a customer's subscription

95
00:05:30,430 --> 00:05:32,199
failed to auto-renew,

96
00:05:32,232 --> 00:05:35,836
therefore it falls into
what we call the billing retry state,

97
00:05:35,869 --> 00:05:39,740
where we attempt to recover
the subscription for up to 60 days.

98
00:05:39,773 --> 00:05:43,544
If you have opted in to the Billing
grace period feature in App Store Connect,

99
00:05:43,577 --> 00:05:46,046
then subscribers in billing retry
with grace period

100
00:05:46,079 --> 00:05:48,949
would continue to have access
to their subscription service,

101
00:05:48,982 --> 00:05:52,119
while we attempt to recover
their subscription.

102
00:05:52,152 --> 00:05:54,688
And while they have still access
to your service,

103
00:05:54,721 --> 00:05:57,291
be sure to present them
a simple call to action

104
00:05:57,324 --> 00:05:59,459
to resolve their payment issue.

105
00:05:59,493 --> 00:06:02,596
To learn more about Billing retry and
Billing grace period,

106
00:06:02,629 --> 00:06:04,598
check out our sessions links and resources

107
00:06:04,631 --> 00:06:08,569
about reducing involuntary
subscriber loss.

108
00:06:08,602 --> 00:06:13,574
The final core state is the inactive
purchase or inactive subscriber.

109
00:06:13,607 --> 00:06:17,678
This state represents customers
who previously made in-app purchases,

110
00:06:17,711 --> 00:06:20,747
but are no longer entitled
to that product or service,

111
00:06:20,781 --> 00:06:23,984
due to expiry or if revoked.

112
00:06:24,017 --> 00:06:28,188
These transactions are persistent
and contain an original transaction ID,

113
00:06:28,222 --> 00:06:32,893
which allows you to maintain status
across devices and platforms.

114
00:06:32,926 --> 00:06:37,130
For Subscriptions, inactive is determined
by the expires date.

115
00:06:37,164 --> 00:06:38,966
And for all in-app purchase types,

116
00:06:38,999 --> 00:06:42,135
they can be inactive
if there is a revocation date.

117
00:06:42,169 --> 00:06:44,638
This occurs when a transaction
has been refunded

118
00:06:44,671 --> 00:06:48,575
or if access granted through
Family Sharing has been revoked.

119
00:06:48,609 --> 00:06:52,746
For your inactive subscribers,
due to expiration or revoked,

120
00:06:52,779 --> 00:06:56,250
consider presenting
subscription offers to win them back.

121
00:06:56,283 --> 00:06:58,519
And for those in the billing retry state,

122
00:06:58,552 --> 00:07:01,221
don’t forget to present them
that same call to action

123
00:07:01,255 --> 00:07:03,891
to resolve their payment details.

124
00:07:03,924 --> 00:07:08,562
In review, here are the three core
customer product states your app will use

125
00:07:08,595 --> 00:07:11,465
to proactively restore in-app purchases

126
00:07:11,498 --> 00:07:15,068
and tailor your app's experience
to your customers.

127
00:07:15,102 --> 00:07:19,473
Let's see how these experiences look
side-by-side with our Ocean Journal app.

128
00:07:21,475 --> 00:07:26,146
New customers will see your latest
product offering and introductory offers.

129
00:07:26,180 --> 00:07:29,616
Your current active customers
will have the feeling it just works,

130
00:07:29,650 --> 00:07:33,187
as your app has streamlined access
to your products and services

131
00:07:33,220 --> 00:07:35,289
on all of their devices.

132
00:07:35,322 --> 00:07:37,257
And for your inactive subscribers,

133
00:07:37,291 --> 00:07:39,826
you can present them
your latest win-back offers

134
00:07:39,860 --> 00:07:42,763
using offer codes or promotional offers.

135
00:07:43,363 --> 00:07:46,967
Okay, we’ve covered
the three core customer product states,

136
00:07:47,000 --> 00:07:50,971
and how supporting these states alone
is a huge win for your customers.

137
00:07:51,004 --> 00:07:54,775
But of course, there are opportunities
to take the experience further.

138
00:07:54,808 --> 00:07:57,611
Your app could expand
or refine the customer experience

139
00:07:57,644 --> 00:08:00,414
to fit your product offering,
business model,

140
00:08:00,447 --> 00:08:02,883
policies, and prioritizations.

141
00:08:02,916 --> 00:08:04,885
But here are few things to consider

142
00:08:04,918 --> 00:08:08,655
when preparing to implement
proactive restore into your app.

143
00:08:09,756 --> 00:08:12,726
If you support multiple products
or subscription groups,

144
00:08:12,759 --> 00:08:18,098
the customer's state is determined for
each product and each subscription group.

145
00:08:18,131 --> 00:08:20,567
Therefore, you may need
to account for hybrid states

146
00:08:20,601 --> 00:08:23,937
or any other dependencies.

147
00:08:23,971 --> 00:08:26,240
Consider any off-platform activity

148
00:08:26,273 --> 00:08:30,377
and how that factors into
your customer's product state.

149
00:08:30,410 --> 00:08:33,280
And be sure to check out
App Store Server Notifications,

150
00:08:33,313 --> 00:08:36,683
as these are critical to maintaining
status, server-to-server,

151
00:08:36,717 --> 00:08:39,319
for all in-app purchase types.

152
00:08:39,353 --> 00:08:43,090
And with Version
2, the new notification types and subtypes

153
00:08:43,123 --> 00:08:45,292
support 28 unique events,

154
00:08:45,325 --> 00:08:48,929
sent securely to your server
in near real time.

155
00:08:48,962 --> 00:08:52,399
Learn more about integrating
or migrating to Version 2

156
00:08:52,432 --> 00:08:56,970
in the session, "Explore in-app purchase
integration and migration."

157
00:08:57,004 --> 00:09:00,274
Alex and Gabriel also cover compatibility
with StoreKit 2

158
00:09:00,307 --> 00:09:04,278
and the original StoreKit framework,
and best practices.

159
00:09:04,311 --> 00:09:07,614
We’ve talked through
the customer product states to support

160
00:09:07,648 --> 00:09:11,151
and what that experience can be
for your customers.

161
00:09:11,185 --> 00:09:14,221
Now let’s walk through
the implementation details.

162
00:09:14,254 --> 00:09:16,323
I’ll be using our SK Demo App

163
00:09:16,356 --> 00:09:20,027
that we’ve updated with proactive restore
using StoreKit 2.

164
00:09:20,060 --> 00:09:24,565
Note that the SK Demo app will be
available for download with this session.

165
00:09:24,598 --> 00:09:28,569
Let's review the SK Demo’s
default experience for new customers,

166
00:09:28,602 --> 00:09:31,405
those without any active in-app purchases.

167
00:09:31,438 --> 00:09:34,942
To view our products,
tap the “Shop” button,

168
00:09:34,975 --> 00:09:38,045
where up top we have our inventory
of available cars

169
00:09:38,078 --> 00:09:41,114
as non-consumable in-app purchases.

170
00:09:41,148 --> 00:09:45,519
And then we have our navigation service
as a monthly auto-renewable subscription,

171
00:09:45,552 --> 00:09:50,190
which offers three different levels
of service for customers to choose from.

172
00:09:50,224 --> 00:09:53,293
And down below, we have
a non-renewing subscription option,

173
00:09:53,327 --> 00:09:55,729
providing one-time access.

174
00:09:55,762 --> 00:09:58,398
This covers our app's
new customer experience,

175
00:09:58,432 --> 00:10:00,901
when no products have been purchased.

176
00:10:00,934 --> 00:10:03,904
Now let's look at
how our app is able to determine

177
00:10:03,937 --> 00:10:07,708
if the customer has current
or past purchases.

178
00:10:07,741 --> 00:10:10,310
It requires your app
to execute three steps

179
00:10:10,344 --> 00:10:12,646
immediately upon app launch.

180
00:10:12,679 --> 00:10:15,649
What is most important
is that these steps are completed

181
00:10:15,682 --> 00:10:19,119
before a "Buy" button is merchandised
to the customer.

182
00:10:19,853 --> 00:10:22,456
The first step is your app
will need to begin listening

183
00:10:22,489 --> 00:10:25,425
for transactions from the App Store.

184
00:10:25,459 --> 00:10:30,430
This is an App Store best practice,
as transactions can show up at any time

185
00:10:30,464 --> 00:10:33,166
from features such as
Family Sharing Ask to Buy,

186
00:10:33,200 --> 00:10:35,936
code redemptions,
subscription auto-renewals,

187
00:10:35,969 --> 00:10:38,539
or when a purchase gets interrupted.

188
00:10:38,572 --> 00:10:41,975
In addition, your app can receive revoked
transactions,

189
00:10:42,009 --> 00:10:44,211
where access is lost due to a refund

190
00:10:44,244 --> 00:10:47,347
or is no longer shared via Family sharing.

191
00:10:47,381 --> 00:10:49,883
This will apply more
in subsequent app launches,

192
00:10:49,917 --> 00:10:52,152
when access has already been granted

193
00:10:52,186 --> 00:10:56,356
and their state is moving
from active to inactive.

194
00:10:56,390 --> 00:11:00,527
If transactions are found, they are
considered unfinished transactions,

195
00:11:00,561 --> 00:11:03,330
and need to be validated,
delivered to the customer,

196
00:11:03,363 --> 00:11:05,599
and marked as finished.

197
00:11:05,632 --> 00:11:08,435
This ensures your app
won’t miss any transactions

198
00:11:08,468 --> 00:11:10,971
and delivers a great customer experience.

199
00:11:11,004 --> 00:11:16,043
Now let’s look at how our SK Demo app
listens for transactions in StoreKit 2.

200
00:11:16,076 --> 00:11:18,946
Here I’m using the function
listenForTransactions.

201
00:11:18,979 --> 00:11:23,684
It will return any unfinished transactions
or updates to a transaction

202
00:11:23,717 --> 00:11:26,787
for the signed-in App Store customer.

203
00:11:26,820 --> 00:11:28,622
For any transactions found,

204
00:11:28,655 --> 00:11:32,626
here, StoreKit 2 will verify
the authenticity of these transactions.

205
00:11:32,659 --> 00:11:35,696
And then,
after my app delivers the content,

206
00:11:35,729 --> 00:11:38,765
grants access,
or updates the customer product status,

207
00:11:38,799 --> 00:11:40,667
I will then finish the transaction

208
00:11:40,701 --> 00:11:44,872
to indicate to the App Store
that the purchase has been delivered.

209
00:11:44,905 --> 00:11:48,642
Once a transaction is finished,
it will no longer be returned to your app,

210
00:11:48,675 --> 00:11:51,812
on any device, via StoreKit.

211
00:11:51,845 --> 00:11:54,448
That first step is critical for all apps

212
00:11:54,481 --> 00:11:58,185
and will occur on every app launch
going forward.

213
00:11:58,218 --> 00:12:01,922
Step 2 is determining
that customer product state,

214
00:12:01,955 --> 00:12:06,326
and this is done by proactively requesting
the customer's active transactions

215
00:12:06,360 --> 00:12:08,529
using currentEntitlements.

216
00:12:08,562 --> 00:12:11,365
And specifically for auto-renewable
subscriptions,

217
00:12:11,398 --> 00:12:13,367
to account for
the customer's renewal state,

218
00:12:13,400 --> 00:12:16,737
such as cancelled,
billing retry, or pending downgrades,

219
00:12:16,770 --> 00:12:22,576
you will additionally use
Product.SubscriptionInfo.RenewalState.

220
00:12:22,609 --> 00:12:27,214
Let’s look at the SK Demo app
and see how we accomplish this.

221
00:12:27,247 --> 00:12:30,651
This starts with the function,
updateCustomerProductStatus,

222
00:12:30,684 --> 00:12:33,687
which keeps track
of the customer's product states

223
00:12:33,720 --> 00:12:37,758
for each of our persistent
in-app purchase types.

224
00:12:37,791 --> 00:12:40,427
I then loop through
each of the purchase types

225
00:12:40,460 --> 00:12:43,997
using StoreKit 2’s
currentEntitlements method.

226
00:12:44,031 --> 00:12:49,603
This returns transactions for products
that the customer may be entitled to.

227
00:12:49,636 --> 00:12:52,940
And we record these transactions
per product type.

228
00:12:52,973 --> 00:12:55,642
Here, for our non-consumables products,

229
00:12:55,676 --> 00:12:58,846
and here for our non-renewing
subscription product.

230
00:12:58,879 --> 00:13:03,350
In order to determine if they are
an active, or inactive subscriber,

231
00:13:03,383 --> 00:13:06,553
I’ve added additional logic
to calculate an expiration date

232
00:13:06,587 --> 00:13:09,423
for our non-renewing subscription.

233
00:13:09,456 --> 00:13:14,294
And lastly, I will check for
an active auto-renewable subscription,

234
00:13:14,328 --> 00:13:17,731
and apply that state to
the subscription group.

235
00:13:17,764 --> 00:13:22,202
To account for inactive states such as
billing retry, expired, and revoked,

236
00:13:22,236 --> 00:13:24,738
our variable subscription
group status uses

237
00:13:24,771 --> 00:13:29,176
Product.SubscriptionInfo.RenewalState

238
00:13:29,209 --> 00:13:31,411
Now that we've retrieved
the user's transactions

239
00:13:31,445 --> 00:13:35,682
and determined the customer status
for each product or subscription group,

240
00:13:35,716 --> 00:13:38,519
our app has logic
to personalize the app experience

241
00:13:38,552 --> 00:13:40,687
for the various use cases.

242
00:13:40,721 --> 00:13:44,791
Let’s take a look at
the SK Demo app source code.

243
00:13:44,825 --> 00:13:46,994
If no active transactions are determined

244
00:13:47,027 --> 00:13:49,796
for all three in-app purchase
product types,

245
00:13:49,830 --> 00:13:52,900
the customer will then see
the default new customer experience

246
00:13:52,933 --> 00:13:54,868
that we reviewed earlier,

247
00:13:54,902 --> 00:13:58,672
where they will have a simple
call to action to our "Shop" page.

248
00:13:58,705 --> 00:14:01,175
If the customer has any active purchases,

249
00:14:01,208 --> 00:14:04,144
then upon app launch,
they will see their purchases

250
00:14:04,178 --> 00:14:08,015
and update "Buy" buttons
on all products accordingly.

251
00:14:08,048 --> 00:14:11,585
So here for non-consumables,
we present what they’ve purchased

252
00:14:11,618 --> 00:14:14,421
and the app either shows
their purchased non-consumables,

253
00:14:14,454 --> 00:14:16,190
or the app provides a call to action

254
00:14:16,223 --> 00:14:19,092
for the customer to visit
the shop experience.

255
00:14:19,126 --> 00:14:21,695
For active products,
here we handle if the customer is

256
00:14:21,728 --> 00:14:25,199
an active subscriber
of the navigation service

257
00:14:25,232 --> 00:14:29,102
for non-renewable subscriptions
and auto-renewable subscriptions.

258
00:14:29,136 --> 00:14:32,439
And in our last portion,
we account for inactive subscribers.

259
00:14:32,472 --> 00:14:35,676
Those with subscriptions
that have expired, been revoked,

260
00:14:35,709 --> 00:14:38,612
or are in the billing retry state.

261
00:14:38,645 --> 00:14:41,915
Okay, let's now go to the SK Demo app.

262
00:14:41,949 --> 00:14:44,184
We want to simulate an active customer

263
00:14:44,218 --> 00:14:48,422
for both a non-consumable
and auto-renewable subscription.

264
00:14:48,455 --> 00:14:52,226
So if I purchase the race car
and subscribe to the pro navigation,

265
00:14:52,259 --> 00:14:54,595
the demo app will apply green checkmarks

266
00:14:54,628 --> 00:14:59,132
to indicate the app has confirmed
those purchases were successful, verified,

267
00:14:59,166 --> 00:15:01,068
and has enabled them.

268
00:15:01,101 --> 00:15:03,570
With these purchases,
my customer product state

269
00:15:03,604 --> 00:15:06,440
for the non-consumable is purchased.

270
00:15:06,473 --> 00:15:10,177
And for our subscription,
I’m an active subscriber.

271
00:15:10,210 --> 00:15:12,546
Now, if I install the app on a new device,

272
00:15:12,579 --> 00:15:15,349
when I launch the SK Demo app
for the first time,

273
00:15:15,382 --> 00:15:19,720
it will proactively perform
steps one, two, and three.

274
00:15:19,753 --> 00:15:24,324
Here you see our demo app has proactively
restored access to both of my purchases,

275
00:15:24,358 --> 00:15:26,360
without any action from me.

276
00:15:26,393 --> 00:15:27,828
As this is a demo app,

277
00:15:27,861 --> 00:15:30,597
that is the extent of products
being delivered.

278
00:15:30,631 --> 00:15:33,800
But in your app, this process would ensure
these active customers

279
00:15:33,834 --> 00:15:37,337
are not offered products to purchase
that they already own,

280
00:15:37,371 --> 00:15:41,308
and that those products and services
are enabled for them automatically.

281
00:15:41,875 --> 00:15:44,111
For your current customers, this is great.

282
00:15:44,144 --> 00:15:48,015
No need to require customers to sign-in
or tap "Restore Purchases."

283
00:15:48,048 --> 00:15:49,316
It just worked.

284
00:15:49,349 --> 00:15:53,921
Your app can use
the APIs and data readily available.

285
00:15:53,954 --> 00:15:57,391
So we’ve covered the three steps
to do this with StoreKit 2.

286
00:15:57,424 --> 00:16:01,328
Now I want to discuss how to implement
this same experience for your customers

287
00:16:01,361 --> 00:16:03,430
on previous versions of iOS

288
00:16:03,463 --> 00:16:05,999
where you cannot leverage
the power of StoreKit 2.

289
00:16:06,800 --> 00:16:10,437
With original StoreKit, you will perform
the same steps as StoreKit 2

290
00:16:10,470 --> 00:16:12,172
to determine the customer product state

291
00:16:12,206 --> 00:16:17,411
by proactively restoring in-app purchases
on iOS 7 or later.

292
00:16:17,444 --> 00:16:22,015
To do this, it will require your server
to use the verifyReceipt endpoint

293
00:16:22,049 --> 00:16:25,352
to validate and retrieve
the latest transactions

294
00:16:25,385 --> 00:16:29,556
in order to determine
customer's product state.

295
00:16:29,590 --> 00:16:34,294
The app receipt is present on-device
when an app is installed from App Store.

296
00:16:34,328 --> 00:16:37,998
But keep in mind,
when testing with Sandbox or TestFlight,

297
00:16:38,031 --> 00:16:39,867
the app receipt is only present

298
00:16:39,900 --> 00:16:43,704
after an in-app purchase
has been completed or restored.

299
00:16:43,737 --> 00:16:48,509
If your app finds no app receipt present,
this should only occur in Sandbox

300
00:16:48,542 --> 00:16:52,312
and your app can consider this scenario
the same as a new customer

301
00:16:52,346 --> 00:16:55,883
where no in-app purchases are found.

302
00:16:55,916 --> 00:16:58,252
An app receipt
created in the past is sufficient

303
00:16:58,285 --> 00:17:01,555
to retrieve the latest transactions
from the App Store.

304
00:17:01,588 --> 00:17:04,424
Therefore, no customer actions
like a "Restore Purchase,"

305
00:17:04,458 --> 00:17:06,693
or receiptRefresh are necessary.

306
00:17:06,727 --> 00:17:10,631
Just include the shared secret
with your request to verifyReceipt

307
00:17:10,664 --> 00:17:13,367
in order to receive
transactions

308
00:17:13,400 --> 00:17:16,136
for non-consumables,
non-renewing subscriptions,

309
00:17:16,170 --> 00:17:19,006
and auto-renewable subscriptions.

310
00:17:19,039 --> 00:17:23,610
Let’s look back at the three
implementation steps we reviewed earlier.

311
00:17:23,644 --> 00:17:25,712
The difference lies within Step 2,

312
00:17:25,746 --> 00:17:29,683
where you identify
the customer's product state.

313
00:17:29,716 --> 00:17:34,121
How we determine customer product state
starts with the app receipt on device,

314
00:17:34,154 --> 00:17:38,992
that, in turn, your server validates
with the App Store verifyReceipt endpoint.

315
00:17:39,026 --> 00:17:41,528
Let’s look at this process.

316
00:17:41,562 --> 00:17:44,031
First, we need to retrieve
the App Receipt,

317
00:17:44,064 --> 00:17:48,335
and be sure you are using
the appStoreReceiptURL property,

318
00:17:48,368 --> 00:17:52,706
as you can see in this sample
from our developer documentation.

319
00:17:52,739 --> 00:17:55,976
With the app receipt,
let’s see how this is sent from the device

320
00:17:56,009 --> 00:18:00,047
to your server and the App Store.

321
00:18:00,080 --> 00:18:02,683
Your app on a device is here on the left.

322
00:18:02,716 --> 00:18:05,686
it will first, retrieve the app receipt,

323
00:18:05,719 --> 00:18:08,088
and send it to your server,

324
00:18:08,121 --> 00:18:12,159
then validate it with
the App Store verifyReceipt endpoint.

325
00:18:12,192 --> 00:18:16,129
From that response,
you will determine customer product state,

326
00:18:16,163 --> 00:18:19,867
and send those states to your app.

327
00:18:19,900 --> 00:18:22,002
To determine customer product state,

328
00:18:22,035 --> 00:18:23,904
we used the Entitlement Engine

329
00:18:23,937 --> 00:18:26,673
from WWDC2020.

330
00:18:26,707 --> 00:18:31,011
It’s updated to support non-consumables
and non-renewing subscriptions,

331
00:18:31,044 --> 00:18:35,182
and now handles the new customer state
when there are no in-app purchases.

332
00:18:36,517 --> 00:18:39,119
To learn more about
using our Entitlement Engine,

333
00:18:39,152 --> 00:18:42,990
I encourage you to check out the
"Architecting for subscriptions" session

334
00:18:43,023 --> 00:18:45,092
and download the sample project.

335
00:18:45,125 --> 00:18:50,364
You can find links to this session
and more with this video’s resources.

336
00:18:50,864 --> 00:18:52,533
That completes Step 2,

337
00:18:52,566 --> 00:18:55,769
where your app will receive the customer
product state from your server.

338
00:18:56,336 --> 00:19:00,507
Now your app will personalize
the app experience immediately on launch

339
00:19:00,541 --> 00:19:05,345
using the StoreKit 2
and original StoreKit frameworks.

340
00:19:05,379 --> 00:19:08,148
I want to share some final best practices.

341
00:19:08,182 --> 00:19:12,653
First, continue providing a "Restore
Purchases" button within your app.

342
00:19:12,686 --> 00:19:13,854
While not used often,

343
00:19:13,887 --> 00:19:16,723
it does give customers an opportunity to
force an app

344
00:19:16,757 --> 00:19:20,694
to restore their Apple ID’s transactions
in case of an issue

345
00:19:20,727 --> 00:19:24,831
or if the customer uses
a different Apple ID.

346
00:19:24,865 --> 00:19:29,770
When your app first proactively restores
a customer's in-app purchases on a device,

347
00:19:29,803 --> 00:19:33,574
it’s recommended to optimize your app
and store data securely

348
00:19:33,607 --> 00:19:36,643
to assist in determining
customer product state.

349
00:19:36,677 --> 00:19:40,647
CloudKit is a feature to consider
with its flexibility, security,

350
00:19:40,681 --> 00:19:45,052
and ability to sync
across a customer's devices.

351
00:19:45,085 --> 00:19:48,388
Testing your implementation
is critical when using StoreKit.

352
00:19:48,422 --> 00:19:52,259
And with StoreKit 2, you can test
your proactive restore implementation

353
00:19:52,292 --> 00:19:57,364
with Sandbox, TestFlight
and Xcode StoreKit testing.

354
00:19:57,397 --> 00:19:59,766
And if you are using original StoreKit,

355
00:19:59,800 --> 00:20:03,070
it’s important to remember an app receipt
may not be present

356
00:20:03,103 --> 00:20:06,206
when testing in Sandbox and TestFlight,

357
00:20:06,240 --> 00:20:10,077
while it is always present when the app
is installed from the App Store.

358
00:20:10,110 --> 00:20:11,945
If an app receipt isn’t present,

359
00:20:11,979 --> 00:20:16,083
it is suggested your app uses
its default new customer experience,

360
00:20:16,116 --> 00:20:20,220
and ensure you have a Restore Purchases
button readily available.

361
00:20:20,254 --> 00:20:23,857
In conclusion, update your app
to proactively check for purchases

362
00:20:23,891 --> 00:20:28,529
without any customer action,
no taps or authentication.

363
00:20:28,562 --> 00:20:33,300
Allow your app to tailor the customer's
experience immediately at launch

364
00:20:33,333 --> 00:20:38,839
to fit your new, active,
and inactive customers' product states.

365
00:20:38,872 --> 00:20:42,009
Maintain status on
all your customer's transactions,

366
00:20:42,042 --> 00:20:45,145
server to server,
for all in-app purchase types,

367
00:20:45,179 --> 00:20:49,583
by implementing App Store
Server Notifications Version 2.

368
00:20:49,616 --> 00:20:52,886
This enables your backend
to know in near real-time

369
00:20:52,920 --> 00:20:55,556
any change that has occurred
with a transaction,

370
00:20:55,589 --> 00:20:58,625
such as refunds, or revoked transactions,

371
00:20:58,659 --> 00:21:02,963
or subscription renewals,
billing retry, and expirations.

372
00:21:03,597 --> 00:21:05,933
Thank you for watching,
and be sure to check out

373
00:21:05,966 --> 00:21:09,069
this additional session,
"What's new with in-app purchases”,

374
00:21:09,102 --> 00:21:11,772
where Dani and Ian will tell you
about all the great updates

375
00:21:11,805 --> 00:21:15,776
to StoreKit, the Server API,
and Server Notifications Version 2.

376
00:21:16,243 --> 00:21:18,111
Thank you. Take care.

377
00:21:18,145 --> 00:21:21,148
♪ ♪

