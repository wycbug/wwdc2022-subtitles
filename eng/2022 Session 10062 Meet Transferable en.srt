1
00:00:00,200 --> 00:00:03,370
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,370 --> 00:00:09,643
♪

3
00:00:09,643 --> 00:00:13,347
Hello and welcome to the session
"Meet Transferable."

4
00:00:13,347 --> 00:00:16,717
My name is Julia.
I am a SwiftUI engineer,

5
00:00:16,717 --> 00:00:19,152
and I am excited to introduce
Transferable,

6
00:00:19,152 --> 00:00:21,889
a declarative way
to support drag and drop,

7
00:00:21,889 --> 00:00:26,226
copy/paste, and other
functionality in your app.

8
00:00:26,226 --> 00:00:29,997
Apart from SwiftUI and
developing applications for Mac,

9
00:00:29,997 --> 00:00:32,566
I'm also interested
in the story of women

10
00:00:32,566 --> 00:00:34,601
in computer science.

11
00:00:34,601 --> 00:00:38,538
I think it's important
that we know our heroes.

12
00:00:38,538 --> 00:00:41,208
So I decided to create
a catalog application

13
00:00:41,208 --> 00:00:46,580
where I can view, add, and edit
a list of the female inventors',

14
00:00:46,580 --> 00:00:50,484
engineers',
and scientists' profiles.

15
00:00:50,484 --> 00:00:54,187
I want this application to
seamlessly support drag and drop

16
00:00:54,187 --> 00:00:58,659
of the scientists' portraits
to and from the app,

17
00:00:58,659 --> 00:01:01,528
being able to use
the clipboard content

18
00:01:01,528 --> 00:01:04,798
to paste interesting facts.

19
00:01:04,798 --> 00:01:06,366
And for the first time,

20
00:01:06,366 --> 00:01:10,003
my app can support sharing
on watchOS!

21
00:01:10,003 --> 00:01:12,606
My potential users say
that they would love

22
00:01:12,606 --> 00:01:15,208
to be able to share
a personality profile

23
00:01:15,208 --> 00:01:17,577
from their watch.

24
00:01:17,577 --> 00:01:23,884
Also, via SwiftUI, sharing is
now available on iOS and Mac,

25
00:01:23,884 --> 00:01:29,523
which also got this brand-new
design for ShareSheet this year.

26
00:01:29,523 --> 00:01:32,726
Under the hood,
enabling all these features

27
00:01:32,726 --> 00:01:35,829
require the models
that we already have

28
00:01:35,829 --> 00:01:39,599
to support being sent over
to a receiver inside our app

29
00:01:39,599 --> 00:01:42,336
or even in other applications.

30
00:01:42,336 --> 00:01:46,039
The profile structure
contains all the information

31
00:01:46,039 --> 00:01:49,476
that we have
about a single personality.

32
00:01:49,476 --> 00:01:52,212
All the profiles
packed in an archive

33
00:01:52,212 --> 00:01:54,982
can be shared among friends.

34
00:01:54,982 --> 00:01:58,685
We store fun facts
about the personality in strings

35
00:01:58,685 --> 00:02:01,455
and even can attach videos.

36
00:02:01,455 --> 00:02:06,059
And there's a great new easy way
to make all these model types

37
00:02:06,059 --> 00:02:07,828
to be shared.

38
00:02:07,828 --> 00:02:09,863
Meet Transferable!

39
00:02:09,863 --> 00:02:14,401
It is a Swift-first declarative
way to describe how your models

40
00:02:14,401 --> 00:02:17,571
can be serialized
and deserialized

41
00:02:17,571 --> 00:02:20,240
for sharing and data transfer.

42
00:02:20,240 --> 00:02:22,809
Today, we are going
to be talking about

43
00:02:22,809 --> 00:02:24,611
what Transferable is

44
00:02:24,611 --> 00:02:28,448
and what is going on behind
the scenes when we use it;

45
00:02:28,448 --> 00:02:32,786
how to conform custom types;
and at the end,

46
00:02:32,786 --> 00:02:35,188
I'll share some
advanced tips and tricks

47
00:02:35,188 --> 00:02:37,657
that can help
to customize Transferable

48
00:02:37,657 --> 00:02:40,827
to do exactly what you need.

49
00:02:40,827 --> 00:02:43,196
Let's start!

50
00:02:43,196 --> 00:02:46,633
Say there are
two applications running,

51
00:02:46,633 --> 00:02:50,337
and the user wants to pass
some information from one app

52
00:02:50,337 --> 00:02:54,975
to another via copy/paste,
ShareSheet, just drag,

53
00:02:54,975 --> 00:02:58,578
or use some other app feature.

54
00:02:58,578 --> 00:03:02,149
When you send something
between two different apps,

55
00:03:02,149 --> 00:03:05,986
there's all this binary data
that goes across.

56
00:03:05,986 --> 00:03:08,755
An important part
of sending this data

57
00:03:08,755 --> 00:03:12,225
is determining
what it corresponds to.

58
00:03:12,225 --> 00:03:15,662
It could be text, a video,

59
00:03:15,662 --> 00:03:21,234
my favorite female engineer
profile, or whole archive.

60
00:03:21,234 --> 00:03:26,073
And there's the UTType that
describes what the data is for.

61
00:03:26,073 --> 00:03:31,144
Let's take a closer look at how
apps generate this binary data.

62
00:03:31,144 --> 00:03:34,448
All the types that can be
shared with other apps,

63
00:03:34,448 --> 00:03:36,750
or even within
a single application,

64
00:03:36,750 --> 00:03:40,253
have to provide
two pieces of information:

65
00:03:40,253 --> 00:03:45,525
ways to convert them
to and from binary data,

66
00:03:45,525 --> 00:03:48,562
and the content type that
corresponds to the structure

67
00:03:48,562 --> 00:03:55,001
of the binary data and tells the
receiver what they actually got.

68
00:03:55,001 --> 00:03:56,536
The content type --

69
00:03:56,536 --> 00:03:59,606
otherwise known as
uniform type identifiers --

70
00:03:59,606 --> 00:04:03,276
is an Apple-specific technology
that describes identifiers

71
00:04:03,276 --> 00:04:07,814
for different binary structures
as well as abstract concepts.

72
00:04:07,814 --> 00:04:09,983
The identifiers form a tree,

73
00:04:09,983 --> 00:04:13,453
and we can also define
custom identifiers.

74
00:04:13,453 --> 00:04:18,959
For example, one for the binary
structure used by our profiles.

75
00:04:18,959 --> 00:04:21,828
In order to declare
a custom identifier,

76
00:04:21,828 --> 00:04:26,366
first, add its declaration
to the Info.plist file.

77
00:04:26,366 --> 00:04:30,303
It is also a good idea
to add a file extension.

78
00:04:30,303 --> 00:04:32,739
If the data is saved on disk,

79
00:04:32,739 --> 00:04:37,110
the system will know that
your app can open that file.

80
00:04:37,110 --> 00:04:40,981
Secondly, declare it in code.

81
00:04:40,981 --> 00:04:43,483
To learn more about
content types,

82
00:04:43,483 --> 00:04:45,585
I invite you to watch a video:

83
00:04:45,585 --> 00:04:49,422
"Uniform Type Identifiers
-- A reintroduction."

84
00:04:49,422 --> 00:04:53,593
Personally, I love it,
and it gives a clear idea

85
00:04:53,593 --> 00:04:58,899
what are uniform type
identifiers and how to use them.

86
00:04:58,899 --> 00:05:01,835
Good news is that
many standard types

87
00:05:01,835 --> 00:05:04,237
already conform to Transferable;

88
00:05:04,237 --> 00:05:10,744
for example, string, data, URL,
attributed string, image.

89
00:05:10,744 --> 00:05:14,981
You need only a couple of lines
of code to paste fun facts

90
00:05:14,981 --> 00:05:20,053
to a profile with the new
SwiftUI paste button interface,

91
00:05:20,053 --> 00:05:23,089
support dragging images
from a view,

92
00:05:23,089 --> 00:05:27,794
or receiving a dropped image
from Finder or other apps.

93
00:05:27,794 --> 00:05:29,963
Using the br and-new ShareLink,

94
00:05:29,963 --> 00:05:34,100
we can now implement sharing
experience from the watch.

95
00:05:34,100 --> 00:05:37,871
We covered the basics,
and now you have an idea

96
00:05:37,871 --> 00:05:40,941
how to use Transferable
and what it is.

97
00:05:40,941 --> 00:05:43,476
Let's see how to add
Transferable conformance

98
00:05:43,476 --> 00:05:47,514
to the models
in our application.

99
00:05:47,514 --> 00:05:51,885
As I mentioned earlier, there
are four model types in our app

100
00:05:51,885 --> 00:05:54,821
that are going to be shared.

101
00:05:54,821 --> 00:05:58,959
One of them -- string -- already
conforms to Transferable;

102
00:05:58,959 --> 00:06:01,728
we don't need to do
anything more.

103
00:06:01,728 --> 00:06:05,165
But what about the single
profile, ProfilesArchive,

104
00:06:05,165 --> 00:06:09,135
and the video that
I want to share as well?

105
00:06:09,135 --> 00:06:11,938
To conform a type
to Transferable,

106
00:06:11,938 --> 00:06:15,141
there's only one property
to implement:

107
00:06:15,141 --> 00:06:17,510
TransferRepresentation.

108
00:06:17,510 --> 00:06:22,048
It describes how the model
is going to get transferred.

109
00:06:22,048 --> 00:06:25,785
There are three important
representations to be aware of:

110
00:06:25,785 --> 00:06:27,520
CodableRepresentation,

111
00:06:27,520 --> 00:06:29,256
DataRepresentation,

112
00:06:29,256 --> 00:06:31,358
and FileRepresentation.

113
00:06:31,358 --> 00:06:34,094
We'll talk about each of them.

114
00:06:34,094 --> 00:06:39,065
But first, meet our central
model, Profile structure.

115
00:06:39,065 --> 00:06:43,069
It has an id, a name, a bio,
maybe some fun facts,

116
00:06:43,069 --> 00:06:46,106
a portrait, and a video.

117
00:06:46,106 --> 00:06:48,742
It already conforms to Codable.

118
00:06:48,742 --> 00:06:52,112
Because of that, we can include
CodableRepresentation

119
00:06:52,112 --> 00:06:56,049
in our Transferable conformance.

120
00:06:56,049 --> 00:06:59,019
Codable representation
uses an encoder

121
00:06:59,019 --> 00:07:02,022
to convert the profile
into binary data,

122
00:07:02,022 --> 00:07:05,158
and a decoder
to convert it back.

123
00:07:05,158 --> 00:07:09,162
By default, it uses JSON,
but you can also provide

124
00:07:09,162 --> 00:07:12,565
your own encoder/decoder pair.

125
00:07:12,565 --> 00:07:15,168
To learn more
about the Codable protocol

126
00:07:15,168 --> 00:07:18,004
and how encoders
and decoders work,

127
00:07:18,004 --> 00:07:22,275
I invite you to watch a WWDC
session where this protocol

128
00:07:22,275 --> 00:07:26,413
was first introduced:
"Data you can trust."

129
00:07:26,413 --> 00:07:28,348
Back to our profile.

130
00:07:28,348 --> 00:07:31,017
The only thing Codable requires

131
00:07:31,017 --> 00:07:34,254
is knowing
the desired content type.

132
00:07:34,254 --> 00:07:37,123
Since this is going to be
a custom format,

133
00:07:37,123 --> 00:07:41,561
we will use a custom declared
uniform type identifier.

134
00:07:41,561 --> 00:07:45,665
After adding the profile
content type, we're good to go.

135
00:07:45,665 --> 00:07:49,602
Profile now conforms
to Transferable!

136
00:07:49,602 --> 00:07:54,441
Now, let's take look at another
case: ProfilesArchive.

137
00:07:54,441 --> 00:07:58,078
It already supports
converting to CSV data.

138
00:07:58,078 --> 00:08:02,749
I can export the list of
the women profiles in CSV files

139
00:08:02,749 --> 00:08:08,521
and then share with friends or
import it on another computer.

140
00:08:08,521 --> 00:08:13,760
The archive can be converted
to and from data,

141
00:08:13,760 --> 00:08:18,431
and it means that we can use
the DataRepresentation.

142
00:08:18,431 --> 00:08:20,433
If we peek inside, we'll see

143
00:08:20,433 --> 00:08:23,737
that DataRepresentation uses
the conversion functions

144
00:08:23,737 --> 00:08:26,740
to directly create
binary representation

145
00:08:26,740 --> 00:08:30,677
and to reconstruct
the value for the receiver.

146
00:08:30,677 --> 00:08:34,114
This is how easy it is
to conform to Transferable

147
00:08:34,114 --> 00:08:36,583
using the DataRepresentation.

148
00:08:36,583 --> 00:08:41,388
All it takes is calling the two
functions that we already have:

149
00:08:41,388 --> 00:08:46,559
the initializer
and the converter to CSV.

150
00:08:46,559 --> 00:08:50,163
If a personality profile
has a video attached,

151
00:08:50,163 --> 00:08:53,867
I want to be able to drag
or share it as well.

152
00:08:53,867 --> 00:08:55,568
But videos can be large;

153
00:08:55,568 --> 00:08:58,471
I don't want to load it
into memory.

154
00:08:58,471 --> 00:09:02,108
This is where
FileRepresentation comes in.

155
00:09:02,108 --> 00:09:04,310
And again,
if we lift the curtain,

156
00:09:04,310 --> 00:09:06,780
we'll see that
FileRepresentation

157
00:09:06,780 --> 00:09:09,983
passes the provided URL
to the receiver

158
00:09:09,983 --> 00:09:14,821
and uses it to reconstruct
the Transferable item for them.

159
00:09:14,821 --> 00:09:18,024
FileRepresentation
allows us to share items

160
00:09:18,024 --> 00:09:21,861
backed by a binary
representation written to disk:

161
00:09:21,861 --> 00:09:23,596
file.

162
00:09:23,596 --> 00:09:25,131
Let's summarize.

163
00:09:25,131 --> 00:09:27,734
If you want to pick just
a single representation

164
00:09:27,734 --> 00:09:29,569
for a simple use case,

165
00:09:29,569 --> 00:09:32,839
first check if the model
has the Codable conformance

166
00:09:32,839 --> 00:09:37,076
and doesn't have any specific
binary format requirements.

167
00:09:37,076 --> 00:09:40,580
Use CodableRepresentation
if it is the case.

168
00:09:40,580 --> 00:09:45,051
If not, check if it is stored
in memory or on disk.

169
00:09:45,051 --> 00:09:48,188
DataRepresentation
works best for the former,

170
00:09:48,188 --> 00:09:51,558
and FileRepresetnation
for the latter.

171
00:09:51,558 --> 00:09:54,961
Transferable is meant to cover
not only simple use cases,

172
00:09:54,961 --> 00:09:57,397
but also complex ones.

173
00:09:57,397 --> 00:10:01,401
And most of the time,
with just a few lines of code.

174
00:10:01,401 --> 00:10:04,337
See it for yourself!

175
00:10:04,337 --> 00:10:07,040
Previously, we have added
Transferable conformance

176
00:10:07,040 --> 00:10:10,710
to the profile,
but let's go further.

177
00:10:10,710 --> 00:10:13,379
When the profile is copied
to the pasteboard

178
00:10:13,379 --> 00:10:16,483
and pasted into any text field,

179
00:10:16,483 --> 00:10:19,686
I want to paste
the profile's name.

180
00:10:19,686 --> 00:10:23,523
This means we need to add
another representation.

181
00:10:23,523 --> 00:10:27,360
ProxyRepresentation allows
other Transferable types

182
00:10:27,360 --> 00:10:29,929
to represent our model.

183
00:10:29,929 --> 00:10:34,968
One line, and Profile can be
pasted as text.

184
00:10:34,968 --> 00:10:37,770
Notice that I added
the ProxyRepresentation

185
00:10:37,770 --> 00:10:41,474
after Codable;
the order is important.

186
00:10:41,474 --> 00:10:44,143
The receiver will use
the first representation

187
00:10:44,143 --> 00:10:47,013
with the content type
they support.

188
00:10:47,013 --> 00:10:50,984
If the receiver is aware of
our custom content type Profile,

189
00:10:50,984 --> 00:10:52,552
they should use it.

190
00:10:52,552 --> 00:10:55,555
If not, but they support text,

191
00:10:55,555 --> 00:11:00,760
let them use the
ProxyRepresentation instead.

192
00:11:00,760 --> 00:11:04,697
Now, Profile supports both
encoder/decoder conversions

193
00:11:04,697 --> 00:11:07,500
and a conversion to text.

194
00:11:07,500 --> 00:11:09,602
The ProxyRepresentation
in this case

195
00:11:09,602 --> 00:11:12,038
describes only
exporting to text,

196
00:11:12,038 --> 00:11:15,441
but not reconstructing
the profile from it.

197
00:11:15,441 --> 00:11:20,713
Any representation can describe
both conversions, or just one.

198
00:11:20,713 --> 00:11:24,551
Now, when we know about
ProxyRepresentations,

199
00:11:24,551 --> 00:11:26,953
do we really need
the FileRepresentation

200
00:11:26,953 --> 00:11:28,621
for the video?

201
00:11:28,621 --> 00:11:31,491
We could have proxy with a URL.

202
00:11:31,491 --> 00:11:33,760
The difference is subtle.

203
00:11:33,760 --> 00:11:37,063
FileRepresentation is intended
to work with the URLs

204
00:11:37,063 --> 00:11:38,431
written to disk,

205
00:11:38,431 --> 00:11:42,569
and ensure receivers'
access to this file or its copy

206
00:11:42,569 --> 00:11:46,105
by granting a temporary
sandbox extension.

207
00:11:46,105 --> 00:11:49,375
ProxyRepresentation
treats URLs the same way

208
00:11:49,375 --> 00:11:53,146
as any other Transferable items,
like strings.

209
00:11:53,146 --> 00:11:55,982
It doesn't have any
of these additional capabilities

210
00:11:55,982 --> 00:11:58,484
that we need for files.

211
00:11:58,484 --> 00:12:01,087
It means that we can have both.

212
00:12:01,087 --> 00:12:04,190
The first one,
FileRepresentation,

213
00:12:04,190 --> 00:12:06,926
allows the receiver
to access the movie file

214
00:12:06,926 --> 00:12:08,928
with its contents.

215
00:12:08,928 --> 00:12:11,664
The second one will work
when I paste the copied video

216
00:12:11,664 --> 00:12:15,268
in a text field.

217
00:12:15,268 --> 00:12:18,304
So the URL is treated
very differently

218
00:12:18,304 --> 00:12:21,107
by file and proxy
representations.

219
00:12:21,107 --> 00:12:26,713
In the first case, the actual
payload is the asset on disk,

220
00:12:26,713 --> 00:12:31,217
and in the second, the payload
is the URL structure itself

221
00:12:31,217 --> 00:12:35,421
that can point
to a remote website.

222
00:12:35,421 --> 00:12:39,993
Another model that I'd like to
upgrade is the ProfilesArchive.

223
00:12:39,993 --> 00:12:43,830
There are cases when it doesn't
support converting to CSV,

224
00:12:43,830 --> 00:12:46,933
and I'd like to reflect that
in code.

225
00:12:46,933 --> 00:12:48,167
Let's see.

226
00:12:48,167 --> 00:12:52,972
We add a Boolean property that
tells us if we can export to CSV

227
00:12:52,972 --> 00:12:57,877
and conversion functions
to and from data.

228
00:12:57,877 --> 00:13:03,016
To express this idea in code,
we can use .exportingCondition.

229
00:13:03,016 --> 00:13:05,785
If given archive
doesn't support CSV,

230
00:13:05,785 --> 00:13:09,489
it won't be exported
in this format.

231
00:13:09,489 --> 00:13:11,991
With this API,
you can even build

232
00:13:11,991 --> 00:13:14,227
custom TransferRepresentation,

233
00:13:14,227 --> 00:13:16,929
just like custom Views
in SwiftUI.

234
00:13:16,929 --> 00:13:20,299
The only requirement is
to provide the body property

235
00:13:20,299 --> 00:13:22,502
where you can have
other representations

236
00:13:22,502 --> 00:13:24,904
configured the way you need.

237
00:13:24,904 --> 00:13:27,106
It is useful
if you want to reuse

238
00:13:27,106 --> 00:13:29,475
a combination of
representations,

239
00:13:29,475 --> 00:13:32,045
or you have some
private data representation

240
00:13:32,045 --> 00:13:35,248
that you don't want
to expose publicly.

241
00:13:35,248 --> 00:13:38,685
Transferable helped me to
quickly build this application

242
00:13:38,685 --> 00:13:42,722
with all the functionality
that I wanted to have.

243
00:13:42,722 --> 00:13:46,459
I hope it is going to help you
building feature-rich apps

244
00:13:46,459 --> 00:13:49,462
in less time than ever before.

245
00:13:49,462 --> 00:13:51,664
Thank you for joining me
for this session

246
00:13:51,664 --> 00:13:54,200
and keep building amazing apps!

247
00:13:54,200 --> 00:13:58,471
♪

