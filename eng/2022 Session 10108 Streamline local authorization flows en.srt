1
00:00:00,334 --> 00:00:07,341
♪ ♪

2
00:00:09,843 --> 00:00:12,946
Felix Acero: Hi, my name is Felix Acero,
and I am a Software Engineer

3
00:00:12,980 --> 00:00:15,916
with the Security Engineering
and Architecture team.

4
00:00:15,949 --> 00:00:17,684
In this video, I am going to show you

5
00:00:17,718 --> 00:00:19,786
how you can use
the LocalAuthentication framework

6
00:00:19,820 --> 00:00:23,423
to improve the authentication
and authorization flows of your app.

7
00:00:23,457 --> 00:00:25,659
We will start by taking a look
at the generic concepts

8
00:00:25,692 --> 00:00:28,262
of authentication and authorization

9
00:00:28,295 --> 00:00:31,164
and how they apply to your application.

10
00:00:31,198 --> 00:00:34,902
Then we will review
how the existing LocalAuthentication API,

11
00:00:34,935 --> 00:00:37,004
and in particular the LAContext,

12
00:00:37,037 --> 00:00:41,108
can help you implement a wide range
of authorization schemes.

13
00:00:41,141 --> 00:00:43,110
And finally we will see how the new APIs

14
00:00:43,143 --> 00:00:45,312
we are adding to LocalAuthentication
this year

15
00:00:45,345 --> 00:00:48,348
can help you further streamline
your authorization code.

16
00:00:50,017 --> 00:00:53,954
So let's start by talking
about authentication and authorization.

17
00:00:53,987 --> 00:00:56,857
Authentication and authorization
are distinct

18
00:00:56,890 --> 00:00:59,326
yet closely related security concepts.

19
00:00:59,359 --> 00:01:04,264
On the one hand, authentication is the act
of verifying the identity of the user.

20
00:01:04,298 --> 00:01:08,535
On the other hand, authorization is
the act of verifying whether a given user

21
00:01:08,569 --> 00:01:13,040
is allowed to perform a specific operation
on a concrete resource.

22
00:01:13,073 --> 00:01:16,410
Put together, we can see that,
since we first need to verify

23
00:01:16,443 --> 00:01:19,413
that the user is who they claim to be
before we can evaluate

24
00:01:19,446 --> 00:01:22,149
what resources and operations
are available to them,

25
00:01:22,182 --> 00:01:26,587
we can say that authentication
in fact enables authorization.

26
00:01:26,620 --> 00:01:28,322
To help illustrate these concepts,

27
00:01:28,355 --> 00:01:31,124
let's look at a concrete example
involving a common security resource

28
00:01:31,158 --> 00:01:34,361
managed by your applications,
such as Secure Enclave keys.

29
00:01:35,562 --> 00:01:38,498
Secure Enclave keys are special types
of asymmetric keys

30
00:01:38,532 --> 00:01:41,268
that are bound to a specific device
and which are protected

31
00:01:41,301 --> 00:01:46,173
by a hardware-based key manager
that is isolated from the main processor.

32
00:01:46,206 --> 00:01:49,042
What makes these keys special
is that when you store a private key

33
00:01:49,076 --> 00:01:51,578
in the Secure Enclave,
you never actually handle the key

34
00:01:51,612 --> 00:01:56,350
but instead instruct the Secure Enclave
to perform operations with it.

35
00:01:56,383 --> 00:01:59,486
Secure Enclave keys can be associated
with access control lists

36
00:01:59,520 --> 00:02:02,322
or ACLs for short.

37
00:02:02,356 --> 00:02:05,859
An access control list specifies
the requirements that need to be satisfied

38
00:02:05,893 --> 00:02:10,130
in order to perform specific operations
such as signing or decrypting a blob.

39
00:02:11,532 --> 00:02:14,535
They can specify
when a given item is available,

40
00:02:14,568 --> 00:02:18,539
for example after device unlock,
as well as the authentication requirements

41
00:02:18,572 --> 00:02:21,842
needed to allow the execution
of certain operations.

42
00:02:21,875 --> 00:02:24,444
For this example,
let's say that your app wants to protect

43
00:02:24,478 --> 00:02:28,282
the sign and decrypt operations
of its key with biometric authentication,

44
00:02:28,315 --> 00:02:31,185
while also ensuring
that the key is only available

45
00:02:31,218 --> 00:02:33,620
after the device has been unlocked.

46
00:02:34,454 --> 00:02:37,224
Now let's see how an authorization flow
would look like

47
00:02:37,257 --> 00:02:39,560
for a sign operation involving this key.

48
00:02:40,661 --> 00:02:44,731
First, your application issues a request
to sign a blob using the private key.

49
00:02:45,899 --> 00:02:49,503
Then, after verifying
that your application can access the key,

50
00:02:49,536 --> 00:02:52,773
the system proceeds to identify
the authorization requirements

51
00:02:52,806 --> 00:02:54,408
for the sign operation.

52
00:02:54,441 --> 00:02:58,312
In this case, the sign operation requires
a successful biometric authentication

53
00:02:58,345 --> 00:03:01,815
from any of the currently enrolled users.

54
00:03:01,849 --> 00:03:03,584
The system will then walk the user

55
00:03:03,617 --> 00:03:07,855
through the biometric authentication
process via the standard UI.

56
00:03:07,888 --> 00:03:09,690
Upon a successful authentication,

57
00:03:09,723 --> 00:03:10,858
the system verifies

58
00:03:10,891 --> 00:03:15,195
that all the remaining authorization
requirements have been satisfied

59
00:03:15,229 --> 00:03:18,265
before finally performing
the sign operation

60
00:03:18,298 --> 00:03:20,834
and returning a signed blob to your app.

61
00:03:21,969 --> 00:03:24,171
Let's break down the main components
involved in this flow

62
00:03:24,204 --> 00:03:26,840
to see how they fit
into our initial definitions.

63
00:03:26,874 --> 00:03:30,811
First, we have a resource:
the Secure Enclave key.

64
00:03:30,844 --> 00:03:35,382
Second, we have an operation
that can be performed with the key.

65
00:03:35,415 --> 00:03:38,685
And third, we have a set of requirements
that, among other things,

66
00:03:38,719 --> 00:03:41,388
specify who is allowed to perform
the operation

67
00:03:41,421 --> 00:03:43,690
as well as the means of authentication
that should be used

68
00:03:43,724 --> 00:03:46,426
to verify their identity.

69
00:03:46,460 --> 00:03:50,764
Plugging the parameters of this example
into our definitions, we can see that

70
00:03:50,797 --> 00:03:54,168
for authentication, the question
of whether this is the right user

71
00:03:54,201 --> 00:03:57,571
is answered by means
of a biometric authentication;

72
00:03:57,604 --> 00:04:01,241
while for authorization, the question
of whether the user is allowed

73
00:04:01,275 --> 00:04:04,611
to perform a signature operation
using the private key

74
00:04:04,645 --> 00:04:09,750
is answered by verifying the requirements
specified in the access control list.

75
00:04:09,783 --> 00:04:12,653
Now that we have seen how this works
at a high level,

76
00:04:12,686 --> 00:04:15,722
we can take a look at the way
a flow like this can be implemented

77
00:04:15,756 --> 00:04:18,725
using the current API
of LocalAuthentication.

78
00:04:18,759 --> 00:04:22,429
Let's start by quickly reviewing
the features offered by the LAContext,

79
00:04:22,462 --> 00:04:25,699
which is one of the core components
of the framework.

80
00:04:25,732 --> 00:04:29,303
An LAContext can be used to evaluate
the user's identity.

81
00:04:29,336 --> 00:04:33,907
It handles user interaction when biometric
or passcode authentication is required.

82
00:04:33,941 --> 00:04:36,143
And it also interfaces
with the Secure Enclave

83
00:04:36,176 --> 00:04:39,346
to enable the secure management
of biometric data.

84
00:04:39,379 --> 00:04:41,648
From this perspective,
the LAContext can be used

85
00:04:41,682 --> 00:04:44,785
to support your authentication use cases.

86
00:04:44,818 --> 00:04:48,355
The LAContext can also be used
in association with other frameworks

87
00:04:48,388 --> 00:04:50,924
to support authorization flows.

88
00:04:50,958 --> 00:04:54,094
For instance, you could use it
to evaluate access control lists

89
00:04:54,127 --> 00:04:56,630
like the one we saw
in our previous example.

90
00:04:56,663 --> 00:04:58,732
Let's take a closer look.

91
00:04:58,765 --> 00:05:02,035
The first thing we need to do
is to get access the ACL

92
00:05:02,069 --> 00:05:05,038
associated with our private key.

93
00:05:05,072 --> 00:05:08,542
We can do this with the help
of the SecItemCopyMatching API

94
00:05:08,575 --> 00:05:10,644
offered by the Security framework,

95
00:05:10,677 --> 00:05:14,748
making sure that we provide the
return-attributes key inside of our query.

96
00:05:15,782 --> 00:05:18,619
Once we obtain access
to the access control list,

97
00:05:18,652 --> 00:05:21,455
we can evaluate it directly
using the LAContext

98
00:05:21,488 --> 00:05:24,958
and the evaluateAccessControl API.

99
00:05:24,992 --> 00:05:28,128
The biggest advantage that this approach
gives you is that it lets you decide

100
00:05:28,161 --> 00:05:30,664
the right moment and the right place
in your application

101
00:05:30,697 --> 00:05:33,700
to prompt the user for this authorization.

102
00:05:33,734 --> 00:05:36,370
In this case,
since the access control list requires

103
00:05:36,403 --> 00:05:39,306
biometric authentication
for the signature operation,

104
00:05:39,339 --> 00:05:43,143
the LAContext will present
the familiar Face ID or Touch ID UI.

105
00:05:44,845 --> 00:05:48,582
Once the ACL has been authorized
inside our LAContext,

106
00:05:48,615 --> 00:05:50,918
we will be able to use it
as part of our query

107
00:05:50,951 --> 00:05:53,754
for obtaining a reference to our key.

108
00:05:53,787 --> 00:05:57,024
We do this by appending
the LAContext to our SecItem query

109
00:05:57,057 --> 00:05:59,293
under the use-authentication-context key.

110
00:06:01,261 --> 00:06:04,131
By binding the LAContext
to our private key reference,

111
00:06:04,164 --> 00:06:06,600
we ensure that executing
the signature operation

112
00:06:06,633 --> 00:06:08,902
will not trigger another authentication,

113
00:06:08,936 --> 00:06:13,473
while allowing the operation to continue
without unnecessary prompts.

114
00:06:13,507 --> 00:06:16,443
These binding also means
that no additional user interactions

115
00:06:16,476 --> 00:06:20,480
will be required for future signatures
until the LAContext is invalidated.

116
00:06:22,649 --> 00:06:25,252
The LAContext offers
a great deal of flexibility

117
00:06:25,285 --> 00:06:27,621
and it lets you control
each of the steps and parameters

118
00:06:27,654 --> 00:06:30,157
involved in your authorization flows.

119
00:06:30,190 --> 00:06:33,827
It can be used in combination with other
frameworks such as the Security framework,

120
00:06:33,861 --> 00:06:37,831
which in turn unlocks
a wide range of use cases.

121
00:06:37,865 --> 00:06:42,169
This versatility, however, comes
at the cost of higher code complexity,

122
00:06:42,202 --> 00:06:47,040
requiring you to carefully orchestrate
the APIs offered by several frameworks.

123
00:06:47,074 --> 00:06:48,242
Depending on your use case,

124
00:06:48,275 --> 00:06:50,410
the LAContext might be
the right tool for you,

125
00:06:50,444 --> 00:06:53,046
especially if the main value proposition
of your app

126
00:06:53,080 --> 00:06:56,250
requires low-level access
to keys, secrets,

127
00:06:56,283 --> 00:06:58,652
contexts, and access control lists.

128
00:06:58,685 --> 00:07:03,824
However, if all you need for your app is
a way of authorizing access to content

129
00:07:03,857 --> 00:07:07,461
or a sensitive resource, then you may want
to trade off some of this flexibility

130
00:07:07,494 --> 00:07:09,363
for a simpler API.

131
00:07:09,396 --> 00:07:13,634
This brings us
to our last topic, streamline your app.

132
00:07:13,667 --> 00:07:18,839
New to iOS 16 and macOS 13,
LocalAuthentication is introducing

133
00:07:18,872 --> 00:07:22,643
a higher level, authorization focused API.

134
00:07:22,676 --> 00:07:26,747
The new API builds on top of existing
concepts in LocalAuthentication

135
00:07:26,780 --> 00:07:31,118
such as the LAContext and is geared
towards simplifying the implementation

136
00:07:31,151 --> 00:07:35,289
of common authorization flows,
allowing you to focus all your energy

137
00:07:35,322 --> 00:07:38,725
in the core value proposition
of your apps.

138
00:07:38,759 --> 00:07:42,896
The most important abstraction introduced
by the new API is the LARight.

139
00:07:44,431 --> 00:07:46,333
The simplest use case
you can give a LARight

140
00:07:46,366 --> 00:07:51,405
is to help you authorize operations
on application defined resources.

141
00:07:51,438 --> 00:07:54,408
For instance, you could use a right
to help you gate access

142
00:07:54,441 --> 00:07:57,010
to the user profile section
of your application

143
00:07:57,044 --> 00:08:01,114
by first requiring a successful
biometric authentication from your user.

144
00:08:02,950 --> 00:08:06,854
By default, rights are protected by a set
of authentication requirements

145
00:08:06,887 --> 00:08:10,257
that allow your users to authenticate
using Touch ID,

146
00:08:10,290 --> 00:08:13,427
Face ID, Apple Watch,
or their device passcode

147
00:08:13,460 --> 00:08:15,295
depending on the device they are using.

148
00:08:16,997 --> 00:08:19,099
You can also choose
to associate your rights

149
00:08:19,132 --> 00:08:20,868
with more granular requirements,

150
00:08:20,901 --> 00:08:24,571
which allow you to further constrain
the means of authentication.

151
00:08:24,605 --> 00:08:27,608
Let's have a look
at how we can use LARights in code.

152
00:08:29,109 --> 00:08:32,546
The first thing that we need to do
is to instantiate our right.

153
00:08:32,579 --> 00:08:35,782
We do this by specifying its requirements.

154
00:08:35,816 --> 00:08:39,253
In this case, our login right will
require users to authenticate

155
00:08:39,286 --> 00:08:43,457
using biometry
or providing the device passcode.

156
00:08:43,490 --> 00:08:48,328
We then proceed to verify that the current
user can obtain the login right.

157
00:08:48,362 --> 00:08:50,430
We use this information to determine

158
00:08:50,464 --> 00:08:52,866
whether we can continue
with the login operation

159
00:08:52,900 --> 00:08:57,971
or if instead we need to redirect
the user to the public section of our app.

160
00:08:58,005 --> 00:09:01,408
Finally, we can proceed
with the actual authorize operation

161
00:09:01,441 --> 00:09:04,745
providing a localized reason
that will be visible to the user

162
00:09:04,778 --> 00:09:06,380
in the authorization UI.

163
00:09:08,081 --> 00:09:09,850
When authorizing a right in this way,

164
00:09:09,883 --> 00:09:12,986
a brand-new,
system-driven UI is presented.

165
00:09:13,020 --> 00:09:15,722
The UI is rendered
inside your application window

166
00:09:15,756 --> 00:09:17,991
and provides users
with relevant information

167
00:09:18,025 --> 00:09:21,461
to help them understand
the origin and purpose of the operation.

168
00:09:21,495 --> 00:09:25,165
We believe that the new look will
allow you to craft authorization flows

169
00:09:25,199 --> 00:09:27,768
that integrate more seamlessly
with your application

170
00:09:27,801 --> 00:09:31,471
and that provide more context
and information for your users.

171
00:09:32,573 --> 00:09:35,242
Now that we have seen how to create
and authorize a right,

172
00:09:35,275 --> 00:09:38,445
let's take a closer look at its lifecycle.

173
00:09:38,478 --> 00:09:42,249
Rights start their lifecycle
in an unknown state.

174
00:09:42,282 --> 00:09:45,018
As soon as your application issues
the authorize request,

175
00:09:45,052 --> 00:09:48,255
the state of the right changes
to authorizing.

176
00:09:48,288 --> 00:09:51,658
It is at this point that the user will be
presented with the authorization UI

177
00:09:51,692 --> 00:09:53,393
that we saw in the previous slide.

178
00:09:54,595 --> 00:09:57,364
Depending on the success or failure
of the operation,

179
00:09:57,397 --> 00:10:01,468
the right may transition
to authorized or notAuthorized state.

180
00:10:01,502 --> 00:10:05,305
This is the most important
state transition for your application.

181
00:10:05,339 --> 00:10:07,841
Finally, the right can also move
from the authorized

182
00:10:07,875 --> 00:10:09,910
to the notAuthorized state.

183
00:10:09,943 --> 00:10:12,279
This occurs
when your application explicitly issues

184
00:10:12,312 --> 00:10:16,583
a deauthorize request on the right,
or when the right instance is deallocated.

185
00:10:17,751 --> 00:10:20,187
Be sure to keep
a strong reference to your right

186
00:10:20,220 --> 00:10:22,723
in order to preserve its authorized state.

187
00:10:23,924 --> 00:10:27,194
After a right has been deauthorized,
your application can continue

188
00:10:27,227 --> 00:10:31,098
to issue authorization requests
to restart the cycle.

189
00:10:31,131 --> 00:10:34,968
All the previous state transitions
can be queried and observed.

190
00:10:35,002 --> 00:10:37,104
If you have access
to the LARight instance,

191
00:10:37,137 --> 00:10:40,274
you can query its state property directly.

192
00:10:40,307 --> 00:10:44,611
You can also observe all state transitions
using KVO or Combine.

193
00:10:44,645 --> 00:10:47,514
Additionally, if your application
handles several rights,

194
00:10:47,548 --> 00:10:49,983
you can observe the state of all them
from a single place

195
00:10:50,017 --> 00:10:52,119
by listening to the didBecomeAuthorized

196
00:10:52,152 --> 00:10:54,755
and the didBecomeUnauthorized
notifications,

197
00:10:54,788 --> 00:10:57,357
which are published
to the default NotificationCenter

198
00:10:57,391 --> 00:11:00,294
after a change
in the authorization state is detected.

199
00:11:01,728 --> 00:11:04,598
Before we move on,
let's jump back to our example

200
00:11:04,631 --> 00:11:08,535
and add a logout operation
to deauthorize our login right.

201
00:11:08,569 --> 00:11:11,705
By doing this, we guarantee
that a new authorization will be required

202
00:11:11,738 --> 00:11:13,974
the next time the user wants to log in.

203
00:11:15,909 --> 00:11:19,346
So far, we have seen
how to use right instances

204
00:11:19,379 --> 00:11:23,517
to authorize operations
on application-defined resources.

205
00:11:23,550 --> 00:11:26,687
We have also seen how the lifecycle
and state of these rights

206
00:11:26,720 --> 00:11:28,789
is ultimately tied to the runtime,

207
00:11:28,822 --> 00:11:31,725
which means that on every session
of your application,

208
00:11:31,758 --> 00:11:35,963
you need to instantiate
and configure these rights correctly.

209
00:11:35,996 --> 00:11:38,265
So let's take a look
at how rights can be persisted

210
00:11:38,298 --> 00:11:41,034
and what sort of possibilities
this enables for your app.

211
00:11:42,703 --> 00:11:46,073
LARights can be persisted
with the help of the right store.

212
00:11:47,608 --> 00:11:51,245
When persisted, rights are backed
by a unique Secure Enclave key

213
00:11:51,278 --> 00:11:54,014
that is protected
with an access control list or ACL

214
00:11:54,047 --> 00:11:57,584
that matches the authorization
requirements of the right.

215
00:11:57,618 --> 00:12:00,687
This approach helps us ensure
that the authorization requirements

216
00:12:00,721 --> 00:12:03,757
will remain immutable
after the right has been persisted.

217
00:12:05,125 --> 00:12:07,961
You can also access the private key
that backs your right

218
00:12:07,995 --> 00:12:11,331
and use it to perform
protected cryptographic operations

219
00:12:11,365 --> 00:12:15,602
such as decryption, signature,
and key exchanges.

220
00:12:17,337 --> 00:12:19,773
The corresponding public key
is also accessible

221
00:12:19,806 --> 00:12:21,642
and can be used to perform operations

222
00:12:21,675 --> 00:12:25,779
such as encryption
and signature verification.

223
00:12:25,812 --> 00:12:30,350
Because this is a public key, you can
also export the bytes associated with it.

224
00:12:31,885 --> 00:12:33,987
Private key operations are only allowed

225
00:12:34,021 --> 00:12:36,790
after the right has been
successfully authorized.

226
00:12:36,823 --> 00:12:40,194
In contrast,
public key operations are always allowed.

227
00:12:42,129 --> 00:12:44,965
When persisting your right,
you also have a chance of storing

228
00:12:44,998 --> 00:12:48,368
a single, immutable secret along with it.

229
00:12:48,402 --> 00:12:51,605
The secret is also associated
with an access control list

230
00:12:51,638 --> 00:12:54,408
that matches the authorization
requirements of your right

231
00:12:54,441 --> 00:12:57,978
and it only becomes accessible
after the right has been authorized.

232
00:12:59,146 --> 00:13:01,982
To summarize,
LAPersistedRights are created

233
00:13:02,015 --> 00:13:03,917
with the help of the right store.

234
00:13:03,951 --> 00:13:05,619
They are configured only once

235
00:13:05,652 --> 00:13:08,856
and their authorization requirements
are immutable.

236
00:13:08,889 --> 00:13:10,791
Because they are stored, they can be used

237
00:13:10,824 --> 00:13:13,260
across different sessions
of your application.

238
00:13:13,293 --> 00:13:15,963
Internally,
they are bound to a specific device

239
00:13:15,996 --> 00:13:18,665
and are backed by a unique
Secure Enclave key

240
00:13:18,699 --> 00:13:21,668
which can be used to perform
different cryptographic operations,

241
00:13:21,702 --> 00:13:25,305
depending on the authorization status
of the right.

242
00:13:25,339 --> 00:13:28,775
Finally, they can be used to protect
a single, immutable secret

243
00:13:28,809 --> 00:13:32,446
that only becomes available
after the right has been authorized.

244
00:13:33,313 --> 00:13:36,817
Now that we understand some of
the features offered by persisted rights,

245
00:13:36,850 --> 00:13:38,519
let's see how they can help us implement

246
00:13:38,552 --> 00:13:41,255
the scenario we discussed
at the beginning of the presentation,

247
00:13:41,288 --> 00:13:43,891
where we wanted to authorize
a signature operation.

248
00:13:44,691 --> 00:13:49,730
We start by instantiating a regular right
specifying its authorization requirements.

249
00:13:49,763 --> 00:13:52,900
In this case, we want to ensure
that the right would only be granted

250
00:13:52,933 --> 00:13:56,003
to users that have biometric enrollments
in the device

251
00:13:56,036 --> 00:13:58,939
at the moment of the creation
of our right.

252
00:13:58,972 --> 00:14:01,742
Therefore, we use
the biometryCurrentSet requirement.

253
00:14:03,177 --> 00:14:06,013
We can then persist the right
with the help of the right store,

254
00:14:06,046 --> 00:14:08,615
providing a unique identifier.

255
00:14:08,649 --> 00:14:12,119
This identifier will be useful
the next time we need to fetch the right

256
00:14:12,152 --> 00:14:14,254
in future sessions of our application.

257
00:14:15,622 --> 00:14:19,126
Once the right is persisted,
we get immediate access to its public key

258
00:14:19,159 --> 00:14:22,095
and can start performing
unprotected operations with it,

259
00:14:22,129 --> 00:14:25,199
without the need
for an explicit authorization.

260
00:14:25,232 --> 00:14:28,535
In this example, we are simply
exporting its public bytes.

261
00:14:30,437 --> 00:14:33,540
Later on, when it's time to perform
a signature operation,

262
00:14:33,574 --> 00:14:35,642
we can retrieve our right from the store

263
00:14:35,676 --> 00:14:39,813
using the unique identifier we provided
during creation.

264
00:14:39,847 --> 00:14:42,149
We can then proceed to authorize
the current user

265
00:14:42,182 --> 00:14:45,085
through the authorize operation
on our right.

266
00:14:45,118 --> 00:14:48,388
At this point, the system will walk the
user through the authentication process

267
00:14:48,422 --> 00:14:52,226
and will verify that all the authorization
requirements are satisfied.

268
00:14:53,227 --> 00:14:55,996
After the right has been authorized,
we can use its private key

269
00:14:56,029 --> 00:14:59,299
to perform
protected cryptographic operations.

270
00:14:59,333 --> 00:15:02,236
In this case, we are using the private key
to sign a challenge

271
00:15:02,269 --> 00:15:05,172
issued by the backend server
of our application.

272
00:15:06,106 --> 00:15:09,376
To wrap up, we talked about
the relationship that exists

273
00:15:09,409 --> 00:15:13,013
between the generic concepts
of authentication and authorization,

274
00:15:13,046 --> 00:15:17,885
and particularly how authentication
enables authorization.

275
00:15:17,918 --> 00:15:20,988
We went over some of the features
offered by the LAContext

276
00:15:21,021 --> 00:15:23,657
and how it can be combined
with frameworks such as Security

277
00:15:23,690 --> 00:15:27,561
to unlock very powerful
and extensible authorization flows.

278
00:15:27,594 --> 00:15:30,697
And finally, we looked into how
the newly added LARight

279
00:15:30,731 --> 00:15:32,332
could help you streamline the code

280
00:15:32,366 --> 00:15:35,302
to implement
certain authorization use cases.

281
00:15:35,335 --> 00:15:39,306
We invite you take a look
at existing usages of LocalAuthentication

282
00:15:39,339 --> 00:15:42,843
in your app and consider whether
some of the features we discussed today

283
00:15:42,876 --> 00:15:44,578
can help you simplify your code

284
00:15:44,611 --> 00:15:48,215
while still protecting
the privacy and security of your users.

285
00:15:48,248 --> 00:15:49,249
Thanks.

