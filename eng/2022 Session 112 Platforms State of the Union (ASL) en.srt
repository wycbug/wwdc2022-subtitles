1
00:00:00,334 --> 00:00:07,641
♪ ♪

2
00:00:09,243 --> 00:00:17,251
♪ ♪

3
00:00:22,356 --> 00:00:24,858
Susan Prescott: Welcome
to the Platform State of the Union

4
00:00:24,892 --> 00:00:27,895
for WWDC 2022.

5
00:00:27,928 --> 00:00:31,532
We're always excited for WWDC
because it's an opportunity

6
00:00:31,565 --> 00:00:33,634
for us to connect with all of you,

7
00:00:33,667 --> 00:00:35,636
share some news
about what we've been working on,

8
00:00:35,669 --> 00:00:39,973
and better understand what you need
from our developer platforms.

9
00:00:40,007 --> 00:00:43,510
What you do as developers is amazing.

10
00:00:43,544 --> 00:00:48,048
You transform your ideas,
the stuff of imagination,

11
00:00:48,081 --> 00:00:51,618
to take users' experiences
to another level.

12
00:00:51,652 --> 00:00:55,489
And we want to help you
take your ideas even further.

13
00:00:55,522 --> 00:00:58,625
In the Keynote, we already talked
about some new capabilities

14
00:00:58,659 --> 00:01:00,360
across iPhone, iPad, Mac,

15
00:01:00,394 --> 00:01:02,329
Apple Watch, and Apple TV,

16
00:01:02,362 --> 00:01:05,299
and the incredible power
of Apple silicon

17
00:01:05,332 --> 00:01:09,102
to help bring even the most ambitious
ideas to life.

18
00:01:09,136 --> 00:01:13,273
We have a lot to cover today.
Let's start with some updates.

19
00:01:13,307 --> 00:01:17,711
Earlier this year, we opened
the brand-new Apple Developer Center,

20
00:01:17,744 --> 00:01:20,614
a place designed for you to connect
and collaborate

21
00:01:20,647 --> 00:01:24,518
with Apple engineers and designers
right here at Apple Park.

22
00:01:24,551 --> 00:01:28,488
And last fall, thousands of you
from all over the world

23
00:01:28,522 --> 00:01:30,691
attended our new online Tech Talks,

24
00:01:30,724 --> 00:01:34,361
with hundreds of live sessions
originating in 11 countries

25
00:01:34,394 --> 00:01:36,496
and in five languages.

26
00:01:36,530 --> 00:01:38,932
For us, one of the best parts
of the Tech Talk series

27
00:01:38,966 --> 00:01:40,334
was one to one meetings,

28
00:01:40,367 --> 00:01:43,904
which were a great opportunity
to hear about what you're up to

29
00:01:43,937 --> 00:01:46,807
and share some advice and guidance.

30
00:01:46,840 --> 00:01:49,376
Last fall, Swift Playgrounds 4 shipped

31
00:01:49,409 --> 00:01:53,280
with the power to build apps and submit
them directly to the App Store

32
00:01:53,313 --> 00:01:55,182
and support for SwiftUI,

33
00:01:55,215 --> 00:01:59,686
making it an incredible tool for
experimentation and UI prototyping.

34
00:01:59,720 --> 00:02:02,523
And of course, there's Xcode Cloud.

35
00:02:02,556 --> 00:02:04,157
We built Xcode Cloud to help you

36
00:02:04,191 --> 00:02:07,327
build better apps
faster and more easily.

37
00:02:07,361 --> 00:02:09,663
It's a continuous integration
and delivery service

38
00:02:09,696 --> 00:02:14,268
built right into Xcode
and hosted in the Cloud.

39
00:02:14,301 --> 00:02:18,238
Xcode Cloud supports development
for all Apple platforms.

40
00:02:18,272 --> 00:02:21,175
It integrates with TestFlight
and App Store Connect

41
00:02:21,208 --> 00:02:24,578
as well as every major git based
source control provider.

42
00:02:24,611 --> 00:02:28,015
It even has REST APIs
to help connect to other aspects

43
00:02:28,048 --> 00:02:29,483
of your development workflow.

44
00:02:30,217 --> 00:02:34,154
It's built with advanced security
to protect you and your projects.

45
00:02:34,188 --> 00:02:36,557
And I'm delighted to say

46
00:02:36,590 --> 00:02:38,892
that Xcode Cloud is available

47
00:02:38,926 --> 00:02:40,527
starting today.

48
00:02:41,662 --> 00:02:44,031
We think nearly every development team

49
00:02:44,064 --> 00:02:45,732
can benefit from Xcode Cloud,

50
00:02:45,766 --> 00:02:49,937
and we've priced it to be accessible
to developers of all sizes.

51
00:02:49,970 --> 00:02:53,273
We're offering
the 25 hour per month subscription

52
00:02:53,307 --> 00:02:59,179
free to all Apple Developer Program
members through the end of 2023!

53
00:02:59,213 --> 00:03:03,217
And you'll be able to subscribe to any
of the Xcode Cloud subscription levels

54
00:03:03,250 --> 00:03:06,353
in the Developer app later this Summer.

55
00:03:06,386 --> 00:03:10,824
Today we're gonna talk
about three big topics.

56
00:03:10,858 --> 00:03:15,796
First, we want to share more about our
vision for developing for Apple platforms,

57
00:03:15,829 --> 00:03:19,600
where we are with our platforms,
and where we're headed.

58
00:03:19,633 --> 00:03:23,237
Then, we'll share some compelling
new ways your apps can integrate

59
00:03:23,270 --> 00:03:26,340
with the system experience
on Apple platforms.

60
00:03:26,373 --> 00:03:30,244
And finally,
we'll discuss some powerful new APIs

61
00:03:30,277 --> 00:03:33,847
and show you how they can enable you
to do even more ambitious things

62
00:03:33,881 --> 00:03:34,882
with your apps.

63
00:03:34,915 --> 00:03:37,784
Let's start with the vision
for our developer platform

64
00:03:37,818 --> 00:03:39,286
and how it's been evolving.

65
00:03:39,319 --> 00:03:41,822
Josh is here to tell you all about it.,

66
00:03:43,524 --> 00:03:46,760
Josh Shaffer: A great developer platform
provides tight integration

67
00:03:46,793 --> 00:03:49,897
between programming language,
frameworks and tools.

68
00:03:49,930 --> 00:03:52,432
When all three
fully complement one another,

69
00:03:52,466 --> 00:03:55,068
we can ensure that common things are easy,

70
00:03:55,102 --> 00:03:57,337
and even uncommon things are possible.

71
00:03:57,938 --> 00:04:01,375
Now, getting that right shortens the path
to building a great app,

72
00:04:01,408 --> 00:04:03,410
and it benefits everyone.

73
00:04:03,443 --> 00:04:06,146
Customers get a consistent experience,

74
00:04:06,180 --> 00:04:08,916
like scrolling that always feels perfect.

75
00:04:08,949 --> 00:04:13,620
And you're able to focus your time
and effort on what makes your app unique.

76
00:04:13,654 --> 00:04:16,657
But designs evolve, hardware advances,

77
00:04:16,690 --> 00:04:20,561
and what was once cutting edge
becomes the expected baseline.

78
00:04:20,594 --> 00:04:24,064
The Objective-C language,
AppKit & UIKit frameworks,

79
00:04:24,097 --> 00:04:28,001
and Interface Builder
have empowered generations of developers.

80
00:04:28,035 --> 00:04:30,571
These technologies
were built for each other,

81
00:04:30,604 --> 00:04:33,907
and will continue to serve us well
for a long time to come,

82
00:04:33,941 --> 00:04:37,611
but over time
new abstractions become necessary.

83
00:04:37,644 --> 00:04:41,648
For a while now, you've seen us
hard at work defining the next generation

84
00:04:41,682 --> 00:04:45,185
of integrated language,
frameworks, and tools:

85
00:04:45,219 --> 00:04:49,089
Swift, SwiftUI, and Xcode Previews.

86
00:04:50,057 --> 00:04:52,659
Tight integration
in a development platform like this

87
00:04:52,693 --> 00:04:56,563
requires that all three pieces
be designed and evolved together,

88
00:04:56,597 --> 00:04:59,666
both driving and driven by one another.

89
00:04:59,700 --> 00:05:04,972
Swift result builders were inspired
by SwiftUI's compositional structure.

90
00:05:05,005 --> 00:05:10,110
SwiftUI's declarative views
were enabled by Swift value types.

91
00:05:10,143 --> 00:05:15,916
And Xcode Previews was specifically
designed for, and enabled by, both.

92
00:05:15,949 --> 00:05:20,120
Now, the result is the best development
platform that we have ever built.

93
00:05:20,153 --> 00:05:25,626
And this year, Swift, SwiftUI, and Xcode
all have fantastic updates

94
00:05:25,659 --> 00:05:27,661
that take this vision further,

95
00:05:27,694 --> 00:05:31,965
and make it even easier for you to build
great apps for all of our platforms.

96
00:05:31,999 --> 00:05:34,134
And it all starts with Swift.

97
00:05:34,168 --> 00:05:37,938
Now Ben from the Swift team
is gonna tell you all about what's next.

98
00:05:40,107 --> 00:05:48,115
♪ ♪

99
00:05:49,850 --> 00:05:53,120
Ben Cohen:
Swift is fast, modern, and safe.

100
00:05:53,153 --> 00:05:56,156
It combines the speed
of a strongly-typed language,

101
00:05:56,190 --> 00:05:59,193
with an expressive syntax
that's easy to read and write.

102
00:05:59,226 --> 00:06:03,163
And its design eliminates
entire categories of programming errors.

103
00:06:03,197 --> 00:06:07,267
Swift is the absolute best language
for building apps across our devices.

104
00:06:08,101 --> 00:06:09,736
Swift is also open source,

105
00:06:09,770 --> 00:06:11,638
with an amazing community of contributors

106
00:06:11,672 --> 00:06:13,607
organized at swift.org,

107
00:06:13,640 --> 00:06:16,743
supporting one another through
initiatives like Diversity in Swift

108
00:06:16,777 --> 00:06:18,412
and the Swift Mentorship Program,

109
00:06:18,445 --> 00:06:20,147
and advancing the language

110
00:06:20,180 --> 00:06:22,716
with working groups on topics
like Swift on server,

111
00:06:22,749 --> 00:06:24,585
and C++ interoperability.

112
00:06:25,552 --> 00:06:28,121
Over the last year,
Swift has gotten even better,

113
00:06:28,155 --> 00:06:30,424
with enhancements in concurrency,

114
00:06:30,457 --> 00:06:33,460
upgrades to make Swift code
easier to read and write,

115
00:06:33,493 --> 00:06:35,529
tooling to help you
customize your workflow,

116
00:06:35,562 --> 00:06:38,131
and amazing under-the-hood improvements.

117
00:06:38,165 --> 00:06:39,666
It started last year,

118
00:06:39,700 --> 00:06:41,735
with the introduction
of Swift Concurrency.

119
00:06:42,369 --> 00:06:46,073
Swift Concurrency dramatically simplified
reading and writing code

120
00:06:46,106 --> 00:06:49,009
that runs in parallel,
and has been a huge hit,

121
00:06:49,042 --> 00:06:50,978
with more than 40,000 apps
in the App Store

122
00:06:51,011 --> 00:06:52,980
adopting it in just the first year.

123
00:06:53,447 --> 00:06:56,383
Because it's such a fundamental
and important improvement

124
00:06:56,416 --> 00:06:58,118
to your app's code base,

125
00:06:58,151 --> 00:07:00,621
it's now possible to deploy code
with Swift Concurrency

126
00:07:00,654 --> 00:07:04,625
to all operating systems
released in the last three years.

127
00:07:04,658 --> 00:07:08,729
Swift Concurrency also introduced
async sequences.

128
00:07:08,762 --> 00:07:11,431
This year, there's a new,
open-source package

129
00:07:11,465 --> 00:07:15,769
that brings concurrency to Swift's
rich set of existing sequence algorithms.

130
00:07:15,802 --> 00:07:18,138
It's called async algorithms.

131
00:07:18,172 --> 00:07:20,307
For example,
where Swift's sequence protocol

132
00:07:20,340 --> 00:07:23,610
supports a zip algorithm
to combine two sequences,

133
00:07:23,644 --> 00:07:26,446
async algorithms brings a version
for zipping together

134
00:07:26,480 --> 00:07:28,282
two asynchronous sequences.

135
00:07:28,315 --> 00:07:32,085
Because async sequences are integrated
directly into the Swift language,

136
00:07:32,119 --> 00:07:34,955
they use familiar constructs
like 'for' loops

137
00:07:34,988 --> 00:07:37,024
that, thanks to the async/await syntax,

138
00:07:37,057 --> 00:07:39,026
looks like regular straight-line code.

139
00:07:39,059 --> 00:07:42,062
You're also able to use
the familiar try/catch pattern

140
00:07:42,095 --> 00:07:44,031
to handle things like network failures

141
00:07:44,064 --> 00:07:46,834
from asynchronous data streaming
over the network.

142
00:07:46,867 --> 00:07:49,570
A key thing about async sequences

143
00:07:49,603 --> 00:07:52,172
is how they deliver data values over time.

144
00:07:52,940 --> 00:07:57,511
Swift now includes a new set of
clock types for representing time units,

145
00:07:57,544 --> 00:08:01,882
and async algorithms builds on them
to provide many time-based algorithms,

146
00:08:01,915 --> 00:08:03,383
like throttle here,

147
00:08:03,417 --> 00:08:06,987
which can help slow down updates
from a sequence.

148
00:08:07,020 --> 00:08:11,391
Swift's concurrency model is designed
to make asynchronous code as easy

149
00:08:11,425 --> 00:08:14,161
and safe to write
as your synchronous code.

150
00:08:14,194 --> 00:08:17,064
A big part of that is Swift's actor model.

151
00:08:17,097 --> 00:08:20,000
Actors allow you to isolate your data

152
00:08:20,033 --> 00:08:23,537
using thread-safe,
concurrently-executing code.

153
00:08:23,570 --> 00:08:26,440
Swift prevents you from
accidentally sharing that state

154
00:08:26,473 --> 00:08:27,941
between parallel threads,

155
00:08:27,975 --> 00:08:30,511
defining away a major source of bugs.

156
00:08:31,411 --> 00:08:35,849
Communication between actors is
easy and efficient through async/await.

157
00:08:35,883 --> 00:08:39,653
Now, Swift takes the idea
of actor isolation further

158
00:08:39,686 --> 00:08:41,421
with distributed actors.

159
00:08:41,455 --> 00:08:46,059
Distributed actors can communicate
across multiple processes or devices.

160
00:08:46,093 --> 00:08:49,129
The "distributed" keyword
marks these actors

161
00:08:49,162 --> 00:08:51,632
and methods that can be accessed remotely,

162
00:08:51,665 --> 00:08:54,735
whether that's between
separate processes on your Mac,

163
00:08:54,768 --> 00:08:57,104
peer to peer between different devices,

164
00:08:57,137 --> 00:09:00,741
or from a device talking to your backend
written with Swift on Server.

165
00:09:02,109 --> 00:09:05,012
Just as actors help Swift
protect your state data

166
00:09:05,045 --> 00:09:06,280
from race conditions,

167
00:09:06,313 --> 00:09:10,551
distributed actors help Swift make them
available outside your process,

168
00:09:10,584 --> 00:09:12,986
using a pluggable transport mechanism.

169
00:09:13,020 --> 00:09:16,657
The Swift compiler can then
perform checks that help guarantee

170
00:09:16,690 --> 00:09:19,359
correct behavior
in a distributed environment,

171
00:09:19,393 --> 00:09:23,063
allowing you to get back to working
on the features that you care about.

172
00:09:23,497 --> 00:09:26,600
Distributed actors
and other concurrency features

173
00:09:26,633 --> 00:09:30,070
show just how easy Swift code can be
to read and write

174
00:09:30,103 --> 00:09:33,307
when enhancements
are crafted deep within the syntax.

175
00:09:33,340 --> 00:09:36,543
To tell you more
about usability enhancements in Swift,

176
00:09:36,577 --> 00:09:37,878
here's Ken.

177
00:09:38,879 --> 00:09:40,781
Ken Orr: Strings are one
of the most important features

178
00:09:40,814 --> 00:09:42,516
of any programming language.

179
00:09:42,549 --> 00:09:45,853
But dealing with strings can
be a common source of frustration.

180
00:09:46,653 --> 00:09:48,522
At some point in a developer's journey,

181
00:09:48,555 --> 00:09:50,824
they may find themselves
needing to extract information

182
00:09:50,858 --> 00:09:52,359
from a string like this.

183
00:09:53,493 --> 00:09:56,997
Writing code to parse the string
is easy to get wrong,

184
00:09:57,030 --> 00:09:58,999
with many details to track.

185
00:09:59,032 --> 00:10:02,135
And the resulting code–
it's hard to read and modify.

186
00:10:03,003 --> 00:10:06,673
Regular expressions are a powerful
solution to this challenge.

187
00:10:06,707 --> 00:10:10,010
They allow you to describe the pattern
you expect to see in your string

188
00:10:10,043 --> 00:10:14,114
and specify which pieces of information
you're interested in capturing.

189
00:10:14,147 --> 00:10:18,685
This year, Swift is delivering a huge
improvement to the developer experience

190
00:10:18,719 --> 00:10:20,587
around regular expressions,

191
00:10:20,621 --> 00:10:23,590
starting with
a new regular expression literal.

192
00:10:24,758 --> 00:10:26,593
They're built directly into the language,

193
00:10:26,627 --> 00:10:29,062
allowing the Swift compiler
to check for correctness.

194
00:10:29,096 --> 00:10:31,865
And they unlock the power
of Swift's type system

195
00:10:31,899 --> 00:10:34,334
when you're extracting information
with a regular expression.

196
00:10:34,368 --> 00:10:39,406
And they take full advantage
of Swift's best-in-class Unicode support.

197
00:10:39,439 --> 00:10:41,108
Let's take a look.

198
00:10:41,141 --> 00:10:42,809
I'm working on an app
called Food Truck

199
00:10:42,843 --> 00:10:46,613
that organizes everything
from taking orders to tracking sales.

200
00:10:46,647 --> 00:10:49,583
And some orders come in as strings,
packed with data.

201
00:10:49,616 --> 00:10:53,320
Now, regular expressions are perfect
for extracting the details I want,

202
00:10:53,353 --> 00:10:57,057
and there's no better place to experiment
with them than here in a Playground.

203
00:10:57,090 --> 00:10:59,126
I'll start by creating a regex literal.

204
00:11:00,427 --> 00:11:02,429
Now I'll type the expression,

205
00:11:02,462 --> 00:11:04,498
and pull out who made the order,

206
00:11:04,531 --> 00:11:06,066
the donut type,

207
00:11:06,099 --> 00:11:08,168
and the number of donuts.

208
00:11:08,202 --> 00:11:10,971
Now, as I type,
the regex is syntax highlighted,

209
00:11:11,004 --> 00:11:14,241
which helps me confirm
my expression is correct.

210
00:11:14,274 --> 00:11:15,142
Now I'll try it out.

211
00:11:16,310 --> 00:11:18,178
Use the order string from above

212
00:11:18,212 --> 00:11:20,547
and look for the first match of the regex.

213
00:11:21,682 --> 00:11:24,518
Now, when I run the Playground,
I can see with the inline result

214
00:11:24,551 --> 00:11:28,488
exactly what parts of the order string
the regex matches.

215
00:11:28,522 --> 00:11:31,458
And here, it's finding
just what I was looking for.

216
00:11:31,491 --> 00:11:34,862
Swift's new regex support
doesn't stop here.

217
00:11:34,895 --> 00:11:36,597
As literals become more complex,

218
00:11:36,630 --> 00:11:39,833
like this one
that matches parts of a log file,

219
00:11:39,867 --> 00:11:43,871
Swift offers an even better way
to craft these patterns–

220
00:11:43,904 --> 00:11:45,506
regex builders.

221
00:11:46,974 --> 00:11:49,776
And it's easy
to convert a literal to a builder.

222
00:11:50,577 --> 00:11:52,379
Now I have code,

223
00:11:52,412 --> 00:11:55,816
and that makes it easier
to read and change.

224
00:11:55,849 --> 00:11:58,619
I can simplify this one even more.

225
00:11:58,652 --> 00:12:01,054
Here, where I'm looking for a hex digit,

226
00:12:01,088 --> 00:12:03,590
I'll use the new .hexDigit CharacterClass,

227
00:12:03,624 --> 00:12:06,693
helping making my intent even clearer.

228
00:12:06,727 --> 00:12:09,730
Now, the builder syntax makes it
so much easier for me to create

229
00:12:09,763 --> 00:12:12,065
and extend my expressions,

230
00:12:12,099 --> 00:12:14,768
and get the results I'm looking for.

231
00:12:14,801 --> 00:12:17,304
And that's the powerful,
new developer experience

232
00:12:17,337 --> 00:12:19,907
around regular expressions in Swift.

233
00:12:19,940 --> 00:12:23,277
Ben: Beyond string syntax,
Swift is also getting easier

234
00:12:23,310 --> 00:12:28,315
to read and write through improvements
to a language feature known as generics.

235
00:12:28,348 --> 00:12:30,951
Generics power features of Swift
you use every day,

236
00:12:30,984 --> 00:12:32,319
like the Array type,

237
00:12:32,352 --> 00:12:36,023
which holds any kind of element,
from strings to your own custom types.

238
00:12:36,056 --> 00:12:39,293
Generic code uses the concept
of a placeholder type

239
00:12:39,326 --> 00:12:42,796
to stand in for another type
to be determined later.

240
00:12:42,829 --> 00:12:45,666
By removing assumptions
about specific types,

241
00:12:45,699 --> 00:12:48,302
you can be more clear
about the intent of your code,

242
00:12:48,335 --> 00:12:50,838
and make it easier to re-use.

243
00:12:50,871 --> 00:12:53,540
But this can also make your code
harder to read.

244
00:12:54,174 --> 00:12:57,711
For example, if you wanted to handle
a generic collection of songs

245
00:12:57,744 --> 00:12:59,112
as a function parameter,

246
00:12:59,146 --> 00:13:02,516
you'd have to write quite a bit
of code to express your intent.

247
00:13:03,383 --> 00:13:07,287
Now in Swift, writing a function
that accepts some collection of songs

248
00:13:07,321 --> 00:13:12,259
is as easy as using the 'some' keyword
to tell Swift about the parameter.

249
00:13:12,292 --> 00:13:15,796
You get the same meaning,
but with less code.

250
00:13:15,829 --> 00:13:19,399
In other cases,
you might need more dynamic behavior,

251
00:13:19,433 --> 00:13:22,436
like with this music library's
array of playlists,

252
00:13:22,469 --> 00:13:25,973
which might need to contain different
types of collections of songs–

253
00:13:26,006 --> 00:13:28,742
sets of songs, or arrays of songs.

254
00:13:28,775 --> 00:13:31,512
That's where the new 'any' keyword
can help.

255
00:13:31,545 --> 00:13:33,780
The 'any' keyword
is built right into Swift,

256
00:13:33,814 --> 00:13:38,252
and allows you to express a type
that can hold any collection of songs.

257
00:13:38,285 --> 00:13:41,588
And it works seamlessly
with generic functions too.

258
00:13:41,622 --> 00:13:45,559
By adopting familiar syntax
and using more natural keywords,

259
00:13:45,592 --> 00:13:48,929
writing generic code in Swift
has never been easier.

260
00:13:48,962 --> 00:13:52,733
Just as important as the features
built into the Swift language

261
00:13:52,766 --> 00:13:55,135
are the tools built around it.

262
00:13:55,169 --> 00:13:59,039
The Swift Package Manager makes it easy
to manage your app's dependencies

263
00:13:59,072 --> 00:14:01,341
and take advantage
of the fantastic packages

264
00:14:01,375 --> 00:14:03,977
published by developers around the world.

265
00:14:04,011 --> 00:14:08,215
To date, those developers have
published thousands of Swift packages,

266
00:14:08,248 --> 00:14:11,919
providing code to help with everything
from authentication and web services

267
00:14:11,952 --> 00:14:15,222
to data management
and reusable UI components.

268
00:14:15,255 --> 00:14:18,725
And this year, the Swift Package Manager
is amplifying the ways

269
00:14:18,759 --> 00:14:23,163
you can create and build code
with all-new Package Plugins.

270
00:14:23,197 --> 00:14:26,667
Plugins are Swift packages
you can add to your project

271
00:14:26,700 --> 00:14:29,169
as easily as any other dependency.

272
00:14:29,203 --> 00:14:32,606
They download and build
automatically on a fresh checkout,

273
00:14:32,639 --> 00:14:35,275
except instead of being code in your app,

274
00:14:35,309 --> 00:14:37,010
they're code that helps build your app.

275
00:14:37,945 --> 00:14:41,548
Package Plugins can be invoked
from the command line or within Xcode,

276
00:14:41,582 --> 00:14:44,852
either as part of your build phase
or on-demand.

277
00:14:44,885 --> 00:14:46,920
They run in a sandbox environment

278
00:14:46,954 --> 00:14:50,424
which prompts you for permission
before reading or modifying your code.

279
00:14:51,124 --> 00:14:53,660
There are endless possibilities
for extending your workflow

280
00:14:53,694 --> 00:14:54,695
with Package Plugins.

281
00:14:54,728 --> 00:14:57,331
You could use them to lint
and format your code

282
00:14:57,364 --> 00:14:58,765
to match the team style guide

283
00:14:58,799 --> 00:15:01,168
with packages
like SwiftLint or SwiftFormat

284
00:15:01,201 --> 00:15:03,704
or automatically generate source code
at build-time

285
00:15:03,737 --> 00:15:05,205
with tools like Sourcery.

286
00:15:05,239 --> 00:15:07,441
Anything that helps you get the job done.

287
00:15:08,075 --> 00:15:10,944
Ken: Package Plugins are a great way
to extend Xcode,

288
00:15:10,978 --> 00:15:13,180
just by writing a little Swift.

289
00:15:13,213 --> 00:15:14,815
And you can do that in two ways.

290
00:15:14,848 --> 00:15:17,751
With command plugins
that you use on demand,

291
00:15:17,784 --> 00:15:20,921
and with build plugins
for whenever your project builds.

292
00:15:20,954 --> 00:15:22,956
Now, back here in our Food Truck app,

293
00:15:22,990 --> 00:15:25,259
here's the code for a command plugin
I created.

294
00:15:26,894 --> 00:15:30,163
My team has a unique code aesthetic.

295
00:15:30,197 --> 00:15:33,000
We like our imports
sorted in string length order.

296
00:15:33,033 --> 00:15:35,035
Shortest to longest.

297
00:15:35,068 --> 00:15:38,906
And since Package Plugins are
all about customization and control,

298
00:15:38,939 --> 00:15:42,342
we created a command plugin that uses
SwiftFormat to take care of that.

299
00:15:43,377 --> 00:15:46,079
It finds all the locally modified files,

300
00:15:46,113 --> 00:15:48,415
and then it sorts their imports.

301
00:15:48,448 --> 00:15:52,519
Now, here's a file I've been editing
with some unsorted imports at the top.

302
00:15:52,553 --> 00:15:55,255
I'll use the command
on the entire project.

303
00:15:55,289 --> 00:15:58,792
I can select any number of targets.
I'll run it on everything.

304
00:15:59,326 --> 00:16:01,562
And I can review
the plugin's code if I want.

305
00:16:01,595 --> 00:16:03,063
I'm all set.
I'll run the command.

306
00:16:03,830 --> 00:16:06,733
And then, just like that,
the plugin goes to work on my files.

307
00:16:07,367 --> 00:16:10,337
It finds all of the locally modified
source files,

308
00:16:10,370 --> 00:16:12,773
and then it sorts them in length order.

309
00:16:12,806 --> 00:16:15,809
With plugins,
you can go beyond just formatting.

310
00:16:15,843 --> 00:16:18,679
You can generate source code,
work with git,

311
00:16:18,712 --> 00:16:21,715
even surface your own custom errors
and warnings.

312
00:16:21,748 --> 00:16:25,319
I have another plugin to make sure
my code is well documented.

313
00:16:25,352 --> 00:16:29,389
It's a build plugin, and it's based on
the open source SwiftLint package.

314
00:16:30,157 --> 00:16:33,994
So now when I build, I can easily see
all the places in my code

315
00:16:34,027 --> 00:16:36,463
where I need to add documentation.

316
00:16:36,496 --> 00:16:40,267
And build plugins extend
all the way to Xcode Cloud,

317
00:16:40,300 --> 00:16:42,870
where they run as part of every build.

318
00:16:42,903 --> 00:16:44,638
With Swift package plugins,

319
00:16:44,671 --> 00:16:46,974
my team and I can create our own commands,

320
00:16:47,007 --> 00:16:49,943
customize builds locally
and in Xcode Cloud,

321
00:16:49,977 --> 00:16:52,212
and then share those plugins with others.

322
00:16:52,246 --> 00:16:55,449
All using the power
of a few lines of Swift.

323
00:16:55,482 --> 00:16:57,885
And that's a quick look
at the ways Package Plugins

324
00:16:57,918 --> 00:17:00,487
can level up your development workflow.

325
00:17:00,521 --> 00:17:04,591
Ben: Finally, Swift has some impressive
changes under the hood.

326
00:17:04,625 --> 00:17:06,560
Building Swift projects
is quicker than ever.

327
00:17:06,593 --> 00:17:08,795
Thanks to new parallelization efforts,

328
00:17:08,829 --> 00:17:11,131
link time is up to twice as fast.

329
00:17:11,164 --> 00:17:13,000
And the Swift concurrency runtime

330
00:17:13,033 --> 00:17:15,769
is now more tightly integrated with the OS

331
00:17:15,802 --> 00:17:18,939
to better ensure the priority
of your asynchronous tasks,

332
00:17:18,972 --> 00:17:21,441
helping your apps
stay efficient and responsive.

333
00:17:21,475 --> 00:17:26,680
Lastly, launch time for apps written
in Swift is dramatically faster on iOS 16,

334
00:17:26,713 --> 00:17:30,851
with apps like Lyft or Airbnb
launching almost twice as fast

335
00:17:30,884 --> 00:17:33,086
thanks to improvement
in the dynamic linker.

336
00:17:33,120 --> 00:17:35,322
With these under-the-hood improvements,

337
00:17:35,355 --> 00:17:36,990
new abilities in tooling,

338
00:17:37,024 --> 00:17:40,027
an evolved syntax
that's easier to read and write,

339
00:17:40,060 --> 00:17:41,895
and improvements in concurrency,

340
00:17:41,929 --> 00:17:44,831
there has never been a better time
to develop in Swift.

341
00:17:44,865 --> 00:17:49,803
Swift is the absolute best language
for building apps across our devices.

342
00:17:49,837 --> 00:17:53,640
But a language is just part of what
you need to build your best apps.

343
00:17:53,674 --> 00:17:57,644
You have to pair a language with
a powerful user interface framework.

344
00:17:57,678 --> 00:17:59,813
And Eliza is gonna tell you more.

345
00:17:59,847 --> 00:18:02,816
Eliza Block: A powerful UI framework
provides abstractions

346
00:18:02,850 --> 00:18:05,319
that make it easy
to describe your interface,

347
00:18:05,352 --> 00:18:08,355
to populate it with data,
and to keep it up to date.

348
00:18:08,388 --> 00:18:10,657
It should scale well with complexity.

349
00:18:10,691 --> 00:18:13,227
And it should be designed
for the platform you're targeting,

350
00:18:13,260 --> 00:18:15,996
giving you full access
to the power of the device.

351
00:18:16,029 --> 00:18:21,034
Your UI framework should help you make
your app feel familiar and intuitive.

352
00:18:21,068 --> 00:18:23,871
It should make it easy to create
standard controls

353
00:18:23,904 --> 00:18:25,639
and native interaction patterns,

354
00:18:25,672 --> 00:18:28,242
with options for advanced customization.

355
00:18:28,275 --> 00:18:30,644
And it needs to have an expressive API

356
00:18:30,677 --> 00:18:33,580
that allows you to quickly prototype
your ideas

357
00:18:33,614 --> 00:18:36,016
and see the results
across a range of devices.

358
00:18:36,583 --> 00:18:39,152
SwiftUI offers all this and more.

359
00:18:39,186 --> 00:18:42,623
Like Swift,
Swift UI is designed with strong opinions

360
00:18:42,656 --> 00:18:44,658
about the best way to build apps.

361
00:18:44,691 --> 00:18:48,462
It has a declarative syntax
that's easy to read and write.

362
00:18:48,495 --> 00:18:52,933
You describe what your interface
looks like, instead of how to build it.

363
00:18:53,934 --> 00:18:57,504
And this leaves room for SwiftUI
to provide intelligent defaults

364
00:18:57,538 --> 00:18:59,606
for each platform.

365
00:18:59,640 --> 00:19:03,944
SwiftUI automatically keeps your interface
up-to-date with changes

366
00:19:03,977 --> 00:19:05,579
to the underlying data model,

367
00:19:05,612 --> 00:19:08,916
so your app's UI never ends up
in an inconsistent state.

368
00:19:09,750 --> 00:19:13,320
SwiftUI handles all these details for you,

369
00:19:13,353 --> 00:19:17,391
so you can focus your time and energy
on what makes your app unique.

370
00:19:17,424 --> 00:19:21,028
Writing a new UI framework
is a huge undertaking.

371
00:19:21,061 --> 00:19:23,931
Since its introduction
we've been continually expanding

372
00:19:23,964 --> 00:19:27,167
SwiftUI's API coverage,
guided by your feedback.

373
00:19:27,835 --> 00:19:31,772
This year we've made it even easier
to adopt SwiftUI incrementally

374
00:19:31,805 --> 00:19:33,173
in your existing apps,

375
00:19:33,207 --> 00:19:37,377
and we've made some exciting enhancements
to its power and flexibility,

376
00:19:37,411 --> 00:19:39,780
starting with app navigation.

377
00:19:39,813 --> 00:19:42,482
With SwiftUI,
it has always been easy to create

378
00:19:42,516 --> 00:19:46,453
the common kinds of navigation
hierarchies found in many apps.

379
00:19:46,486 --> 00:19:49,690
And this year,
SwiftUI is expanding that support

380
00:19:49,723 --> 00:19:52,292
with an all-new navigation API.

381
00:19:52,860 --> 00:19:56,897
The new navigation API makes it easy
to express the style of navigation

382
00:19:56,930 --> 00:19:59,633
that best fits the needs of your app.

383
00:19:59,666 --> 00:20:03,770
With robust programmatic control
over the presentation of your app's views,

384
00:20:03,804 --> 00:20:06,540
you can easily save and restore selection,

385
00:20:06,573 --> 00:20:10,344
and even replace the full contents
of a navigation stack.

386
00:20:10,377 --> 00:20:13,480
This is really useful
when handling important behaviors

387
00:20:13,514 --> 00:20:15,716
like setting the launch state of your app,

388
00:20:15,749 --> 00:20:18,552
managing transitions between size classes,

389
00:20:18,585 --> 00:20:20,220
and responding to deep links.

390
00:20:21,154 --> 00:20:24,892
SwiftUI also has huge improvements
when it comes to controlling

391
00:20:24,925 --> 00:20:27,094
the layout of your app's interface.

392
00:20:27,828 --> 00:20:32,065
The layout of many app interfaces
can be described using SwiftUI's model

393
00:20:32,099 --> 00:20:34,868
of horizontal
or vertical stacks of elements.

394
00:20:34,902 --> 00:20:37,571
And while this model works
for many common layouts,

395
00:20:37,604 --> 00:20:40,340
sometimes
you need something more flexible.

396
00:20:40,374 --> 00:20:43,243
This year, we're adding a new Grid API,

397
00:20:43,277 --> 00:20:45,779
which makes it easier
to lay out a set of views

398
00:20:45,812 --> 00:20:48,582
aligned across multiple rows and columns.

399
00:20:48,615 --> 00:20:51,118
And you can take your layouts even further

400
00:20:51,151 --> 00:20:54,154
with the all-new custom layout API.

401
00:20:54,188 --> 00:20:57,157
The custom layout API
gives you the flexibility

402
00:20:57,191 --> 00:20:59,760
to build any type of layout you want.

403
00:20:59,793 --> 00:21:02,029
For example,
you could create a flow layout

404
00:21:02,062 --> 00:21:05,465
where your views are arranged
like the content of a newspaper,

405
00:21:05,499 --> 00:21:08,569
wrapping to the next column
when more space is needed.

406
00:21:08,602 --> 00:21:12,573
Or you could create a radial layout
that draws your views in a circle,

407
00:21:12,606 --> 00:21:14,107
like the numbers on a watch face.

408
00:21:14,842 --> 00:21:19,546
The custom layout API makes it easy
to re-use your layout logic,

409
00:21:19,580 --> 00:21:22,349
making your view code simpler
and easier to read.

410
00:21:22,382 --> 00:21:25,352
SwiftUI continues to grow
to offer

411
00:21:25,385 --> 00:21:27,688
many more types of interface elements.

412
00:21:27,721 --> 00:21:30,858
Like half sheets,
which define secondary views

413
00:21:30,891 --> 00:21:32,759
that slide above a main view.

414
00:21:32,793 --> 00:21:37,564
These are great to provide quick access
to information on smaller screens.

415
00:21:37,598 --> 00:21:40,100
And SwiftUI now supports Share Sheets,

416
00:21:40,133 --> 00:21:41,835
so your app can easily leverage

417
00:21:41,869 --> 00:21:45,005
all of the Share extensions available
on a user's device.

418
00:21:45,038 --> 00:21:49,176
Share Sheet support is powered
by the new Transferable protocol,

419
00:21:49,209 --> 00:21:52,913
which introduces a type-safe API
for transferring app data.

420
00:21:53,914 --> 00:21:58,652
We've also made it easier to adopt SwiftUI
incrementally in your existing apps

421
00:21:58,685 --> 00:22:03,557
with a special collection view cell
that can host SwiftUI views.

422
00:22:03,590 --> 00:22:06,660
If you already have a collection view
in your UIKit app,

423
00:22:06,693 --> 00:22:10,764
you can now write custom cells
using SwiftUI's declarative syntax.

424
00:22:10,797 --> 00:22:15,269
These cells are tightly integrated
with UIKit, supporting swipe actions,

425
00:22:15,302 --> 00:22:19,239
cell backgrounds, and all the other
features of UICollectionView.

426
00:22:19,273 --> 00:22:22,109
Today we're also introducing
a brand-new framework

427
00:22:22,142 --> 00:22:23,677
that complements SwiftUI

428
00:22:23,710 --> 00:22:27,047
and will allow you to express
even more of your interface.

429
00:22:27,080 --> 00:22:29,049
Here's Jo to tell you more.

430
00:22:29,082 --> 00:22:31,218
Jo Arreaza-Taylor:
Today's world is filled with data.

431
00:22:31,251 --> 00:22:33,453
Data to help understand, make decisions,

432
00:22:33,487 --> 00:22:35,055
and see new perspectives.

433
00:22:35,088 --> 00:22:37,724
A well-designed and accessible
data visualization

434
00:22:37,758 --> 00:22:40,060
can communicate complexities to your users

435
00:22:40,093 --> 00:22:42,629
in a way that feels clear and natural,

436
00:22:42,663 --> 00:22:44,798
empowering them
as they move through the day.

437
00:22:45,632 --> 00:22:48,702
Like helping to show
changing trends in their health,

438
00:22:48,735 --> 00:22:51,839
highlighting their progress
towards personal goals,

439
00:22:51,872 --> 00:22:53,807
and preparing them for what's to come.

440
00:22:54,474 --> 00:22:58,312
Today, we're introducing a new framework
to help empower your users

441
00:22:58,345 --> 00:23:00,581
to unlock the data within your apps.

442
00:23:00,614 --> 00:23:03,884
Say hello to Swift Charts.

443
00:23:03,917 --> 00:23:07,354
Swift Charts is a highly customizable
charting framework

444
00:23:07,387 --> 00:23:09,056
built on top of SwiftUI

445
00:23:09,089 --> 00:23:12,793
that makes it easy
to create gorgeous visualizations.

446
00:23:12,826 --> 00:23:16,830
It uses the same declarative syntax
as SwiftUI to make it easy

447
00:23:16,864 --> 00:23:19,600
to read and write code
which conveys visual information.

448
00:23:20,567 --> 00:23:23,337
Swift Chart lets you customize
the presentation of information

449
00:23:23,370 --> 00:23:25,606
to best fit the needs of your app

450
00:23:25,639 --> 00:23:28,175
to create everything
from line and bar charts

451
00:23:28,208 --> 00:23:32,446
to more sophisticated examples
like heat maps and stream graphs,

452
00:23:32,479 --> 00:23:34,314
and many, many more types.

453
00:23:35,349 --> 00:23:38,285
And because Swift Charts
is built on top of SwiftUI,

454
00:23:38,318 --> 00:23:40,821
charts have great support
for accessibility features,

455
00:23:40,854 --> 00:23:44,091
like a terrific, out-of-the-box
VoiceOver experience

456
00:23:44,124 --> 00:23:46,226
that's easy to customize.

457
00:23:46,260 --> 00:23:50,163
Being built on SwiftUI also means
you can animate your charts,

458
00:23:50,197 --> 00:23:53,534
to help you give your app
just the right look and feel.

459
00:23:53,567 --> 00:23:57,871
And of course, Swift Charts works great
across all our devices.

460
00:23:57,905 --> 00:23:59,973
Eliza: Back in our Food Truck app,

461
00:24:00,007 --> 00:24:02,042
here are the beautiful new Swift Charts

462
00:24:02,075 --> 00:24:05,479
in Xcode's fully redesigned preview area.

463
00:24:05,512 --> 00:24:09,516
I'm also using
the new multicolumn SwiftUI table view.

464
00:24:09,550 --> 00:24:12,886
Let me show you how easy it is
to build this chart.

465
00:24:12,920 --> 00:24:16,256
And as I scroll, check out
the awesome new structured headers

466
00:24:16,290 --> 00:24:17,524
in the source editor.

467
00:24:17,558 --> 00:24:20,394
They make it really easy
to see where you are in the file.

468
00:24:21,428 --> 00:24:22,863
Here's the code for the chart.

469
00:24:22,896 --> 00:24:26,767
Now, this is actually a stacked bar chart,
but you can't really tell.

470
00:24:26,800 --> 00:24:29,670
Let's have each donut
use its own color.

471
00:24:31,038 --> 00:24:34,508
Maybe it would be easier to see
how the donuts compare

472
00:24:34,541 --> 00:24:36,844
if we position the bars side by side.

473
00:24:38,111 --> 00:24:40,848
I love how I can make
all these big changes

474
00:24:40,881 --> 00:24:43,217
with just a couple simple modifiers.

475
00:24:43,250 --> 00:24:45,719
We can customize the styling, too.

476
00:24:45,752 --> 00:24:48,689
Let's make the bars
reflect the donut colors.

477
00:24:48,722 --> 00:24:52,292
And we can even add annotations
to the bars with another modifier.

478
00:24:53,493 --> 00:24:54,962
Looking great.

479
00:24:54,995 --> 00:24:56,897
Previews are now live by default,

480
00:24:56,930 --> 00:24:59,700
so I can immediately interact
with my view.

481
00:24:59,733 --> 00:25:01,435
I'm gonna change the sort order.

482
00:25:01,468 --> 00:25:04,371
Watch how the bars animate beautifully,

483
00:25:04,404 --> 00:25:07,241
with Swift Charts
doing all the heavy lifting.

484
00:25:07,274 --> 00:25:09,142
Let's fetch more data.

485
00:25:09,176 --> 00:25:11,612
The chart and table
both automatically update

486
00:25:11,645 --> 00:25:13,146
as my model changes.

487
00:25:13,180 --> 00:25:17,351
The chart even recalculates its Y axis
to reflect the new totals.

488
00:25:17,384 --> 00:25:19,186
Let me show you one more chart.

489
00:25:19,219 --> 00:25:22,723
I've stubbed out a line chart
which we can add to the view.

490
00:25:22,756 --> 00:25:25,192
I'll jump to the implementation.

491
00:25:25,225 --> 00:25:29,263
Line charts with Swift Charts
have some really cool options.

492
00:25:29,296 --> 00:25:32,032
We can add symbols for each donut.

493
00:25:32,065 --> 00:25:34,301
We can annotate the lines.

494
00:25:34,334 --> 00:25:37,004
We can even smooth the curves
with a variety

495
00:25:37,037 --> 00:25:38,839
of interpolation strategies.

496
00:25:38,872 --> 00:25:41,108
Let's use catmullRom.

497
00:25:41,141 --> 00:25:43,610
Finally, I'll override
the chart scale style

498
00:25:43,644 --> 00:25:45,746
by providing my own mapping.

499
00:25:45,779 --> 00:25:49,249
That will make my chart fit in better
with the app's color scheme.

500
00:25:49,283 --> 00:25:50,751
Really nice.

501
00:25:50,784 --> 00:25:53,487
The redesigned preview area
makes it easier than ever

502
00:25:53,520 --> 00:25:56,223
to see how my view looks
in different environments.

503
00:25:56,256 --> 00:25:58,458
By pressing this button
in the canvas,

504
00:25:58,492 --> 00:26:01,261
I can see my view in Dark and Light mode.

505
00:26:01,295 --> 00:26:04,798
I can even look at my layout
in every interface orientation,

506
00:26:04,831 --> 00:26:07,534
all without adding
a single additional preview.

507
00:26:07,568 --> 00:26:10,037
Let's zoom in on landscape.

508
00:26:10,070 --> 00:26:13,207
It looks like my UI
isn't quite fitting here.

509
00:26:13,240 --> 00:26:14,608
A few controls are offscreen,

510
00:26:14,641 --> 00:26:17,744
and the charts have
an awkward aspect ratio.

511
00:26:17,778 --> 00:26:21,048
Let's see where we're describing
this layout.

512
00:26:21,081 --> 00:26:24,384
These views here are
in an implicit Vstack.

513
00:26:25,519 --> 00:26:29,089
This year there are some powerful
new APIs in SwiftUI

514
00:26:29,122 --> 00:26:31,558
that can create more flexible layouts.

515
00:26:31,592 --> 00:26:34,194
Here, I'm going to use a ViewThatFits

516
00:26:34,228 --> 00:26:37,431
to switch between a vertical
and a horizontal stack,

517
00:26:37,464 --> 00:26:39,433
depending on the available space.

518
00:26:40,834 --> 00:26:42,469
That looks much better.

519
00:26:42,503 --> 00:26:43,837
Let's wire this up

520
00:26:43,871 --> 00:26:45,806
so we can navigate to it
from the main screen.

521
00:26:46,840 --> 00:26:49,977
I'm using SwiftUI's
new navigation split view,

522
00:26:50,010 --> 00:26:51,778
which makes this really easy.

523
00:26:51,812 --> 00:26:55,249
The split view has a sidebar
to track the selection

524
00:26:55,282 --> 00:26:57,951
and a NavigationStack
that changes its content

525
00:26:57,985 --> 00:27:00,687
as the sidebar selection changes.

526
00:27:00,721 --> 00:27:02,089
I'll jump into the sidebar

527
00:27:02,122 --> 00:27:05,158
and add a navigation link
for our Donut Champion view.

528
00:27:05,192 --> 00:27:07,661
And then, we can try it out
in the interactive preview.

529
00:27:08,428 --> 00:27:10,831
I'd like to see my split view
in landscape,

530
00:27:10,864 --> 00:27:13,100
so I'll use the new canvas settings

531
00:27:13,133 --> 00:27:15,369
to rotate the live preview.

532
00:27:15,402 --> 00:27:17,004
Works great.

533
00:27:17,037 --> 00:27:19,573
I'm happy with how this is looking
on iPad,

534
00:27:19,606 --> 00:27:21,842
but now I'd love to bring it to Mac,

535
00:27:21,875 --> 00:27:25,145
and it's only a few clicks
to do that.

536
00:27:25,179 --> 00:27:27,648
I want to take full advantage
of the Mac SDK,

537
00:27:27,681 --> 00:27:29,116
so I'm going to use native.

538
00:27:31,385 --> 00:27:33,720
With just a single target backing my app,

539
00:27:33,754 --> 00:27:35,756
I can share almost all my code,

540
00:27:35,789 --> 00:27:39,193
and SwiftUI makes my app look great
on each platform.

541
00:27:39,226 --> 00:27:42,596
I can also easily add
device-specific features.

542
00:27:42,629 --> 00:27:45,465
For my Mac app,
let's add a menu bar extra.

543
00:27:45,499 --> 00:27:47,434
Those are the little useful icons

544
00:27:47,467 --> 00:27:49,169
on the upper right corner of your screen,

545
00:27:49,203 --> 00:27:52,239
like Wi-Fi and Spotlight.

546
00:27:52,272 --> 00:27:55,309
SwiftUI has a new API for this.

547
00:27:55,342 --> 00:27:57,411
I just add it to the body of my app.

548
00:27:57,444 --> 00:27:59,313
Now let's run this for Mac.

549
00:28:02,850 --> 00:28:06,720
Our Donut Champion view looks great
on Mac right out of the box.

550
00:28:06,753 --> 00:28:08,755
And here's that menu bar extra.

551
00:28:08,789 --> 00:28:10,157
That'll be handy.

552
00:28:10,190 --> 00:28:12,459
And that's a quick look at Swift Charts

553
00:28:12,492 --> 00:28:15,929
and just a few of the enhancements
coming to SwiftUI and Xcode.

554
00:28:15,963 --> 00:28:17,798
And now back to Josh.

555
00:28:17,831 --> 00:28:21,001
Josh: We're continuing to expand
our adoption of SwiftUI

556
00:28:21,034 --> 00:28:23,570
across our apps and system interfaces.

557
00:28:23,604 --> 00:28:27,808
For example, iOS's new Lock Screen widgets
were designed from the ground up

558
00:28:27,841 --> 00:28:29,409
using SwiftUI.

559
00:28:29,443 --> 00:28:32,346
The new Font Book app was
completely rewritten with it.

560
00:28:32,379 --> 00:28:36,450
And the modern, forward-looking design
of the new macOS System Settings app

561
00:28:36,483 --> 00:28:37,985
was built using it.

562
00:28:38,018 --> 00:28:41,154
Swift and SwiftUI were designed
from the start

563
00:28:41,188 --> 00:28:45,926
to provide a single, native language
and API for all Apple platforms.

564
00:28:45,959 --> 00:28:48,795
You can learn them once
and apply them everywhere.

565
00:28:48,829 --> 00:28:51,965
Whether your vision is to provide
quick access to information

566
00:28:51,999 --> 00:28:54,001
at a glance on Apple Watch,

567
00:28:54,034 --> 00:28:57,271
productivity tools
on MacBook Pro and iPad,

568
00:28:57,304 --> 00:28:59,173
new experiences on iPhone,

569
00:28:59,206 --> 00:29:01,575
or a new way to relax with Apple TV,

570
00:29:01,608 --> 00:29:04,077
Swift, SwiftUI, and Xcode

571
00:29:04,111 --> 00:29:07,781
provide a next-generation integrated
development platform

572
00:29:07,814 --> 00:29:11,051
to help you build apps
for all of our products.

573
00:29:11,084 --> 00:29:12,686
Now, if you have an existing app,

574
00:29:12,719 --> 00:29:16,156
it's easy to adopt
these new technologies incrementally.

575
00:29:16,190 --> 00:29:19,693
And if you're new to our platforms
or if you're starting a brand-new app,

576
00:29:19,726 --> 00:29:23,830
the best way to build an app
is with Swift and SwiftUI.

577
00:29:23,864 --> 00:29:26,066
Now, of course
that's just the beginning.

578
00:29:26,099 --> 00:29:30,037
We're also continuing to evolve
the user experience of our platforms

579
00:29:30,070 --> 00:29:32,873
to give you more ways
to engage your users.

580
00:29:32,906 --> 00:29:35,242
And to tell you more, here's Sebastien.

581
00:29:36,543 --> 00:29:38,579
Sebastien Marineau-Mes:
Now, apps are about turning ideas,

582
00:29:38,612 --> 00:29:41,315
code, and APIs into user experiences.

583
00:29:41,348 --> 00:29:43,650
And the best apps
are the ones that can meet users

584
00:29:43,684 --> 00:29:45,919
where they are in the moment.

585
00:29:45,953 --> 00:29:49,623
We've created ways to help you take
user experience beyond your apps,

586
00:29:49,656 --> 00:29:53,293
and build it into the system experience
on Apple devices.

587
00:29:54,094 --> 00:29:57,831
This journey started with extensions,
integration with the Share Sheet,

588
00:29:57,865 --> 00:29:59,566
and custom keyboards.

589
00:29:59,600 --> 00:30:01,902
And more recently,
it's included the ability

590
00:30:01,935 --> 00:30:06,206
to have your app display key information
on the Home Screen using widgets.

591
00:30:06,240 --> 00:30:08,041
Now, this year,
there are a number of new ways

592
00:30:08,075 --> 00:30:11,144
for your app to integrate with the system
experience across our platforms,

593
00:30:11,178 --> 00:30:15,649
and it really starts with the Lock Screen,
which gets its biggest update ever.

594
00:30:15,682 --> 00:30:19,186
It re-imagines how
the Lock Screen looks and how it works,

595
00:30:19,219 --> 00:30:23,557
and it gives your ideas and your apps
another place to engage users.

596
00:30:23,590 --> 00:30:25,959
And to tell you more, here's Robert.

597
00:30:34,434 --> 00:30:35,969
Robert Dhaene:
In reimagining the Lock Screen,

598
00:30:36,003 --> 00:30:38,972
we set out to make it
even more personal and beautiful,

599
00:30:39,006 --> 00:30:40,841
while improving everyday utility.

600
00:30:40,874 --> 00:30:43,610
As part of this,
we knew we needed to bring

601
00:30:43,644 --> 00:30:46,580
the power of widgets
to the all-new Lock Screen.

602
00:30:46,613 --> 00:30:49,650
Widgets have been an incredible way
to elevate key information

603
00:30:49,683 --> 00:30:53,654
from your app and display it
where people can view it at a glance.

604
00:30:53,687 --> 00:30:57,324
They make it easy to access
rich, timely information

605
00:30:57,357 --> 00:30:58,725
right from the Home Screen.

606
00:30:59,393 --> 00:31:02,963
The Lock Screen is the first thing you see
every time you pick up your iPhone,

607
00:31:02,996 --> 00:31:05,599
and it's always been a place
to check the date and time

608
00:31:05,632 --> 00:31:07,501
and look out for key messages.

609
00:31:07,534 --> 00:31:11,205
When thinking about the best format
for displaying even more information here,

610
00:31:11,238 --> 00:31:13,740
we didn't have to look far
for design inspiration.

611
00:31:14,374 --> 00:31:18,245
Complications on Apple Watch
already provide glanceable, relevant,

612
00:31:18,278 --> 00:31:19,713
and up-to-date information,

613
00:31:19,746 --> 00:31:22,516
presented beautifully
right when users need it.

614
00:31:23,183 --> 00:31:26,887
The design language naturally extends
to iOS and feels right at home

615
00:31:26,920 --> 00:31:28,789
on the new Lock Screen.

616
00:31:28,822 --> 00:31:31,992
So using WidgetKit,
we brought some of those same designs

617
00:31:32,025 --> 00:31:35,128
to widgets on the Lock Screen,
including Circular,

618
00:31:35,162 --> 00:31:39,833
which displays a small image,
gauge, or a few characters of text.

619
00:31:39,867 --> 00:31:43,537
Circular widgets are great for displaying
whether you've been active enough today

620
00:31:43,570 --> 00:31:45,672
or if you need to go out for a run.

621
00:31:45,706 --> 00:31:48,342
Rectangular provides a large canvas

622
00:31:48,375 --> 00:31:51,745
for displaying things
like the upcoming weather forecast.

623
00:31:51,778 --> 00:31:54,681
Inline provides a powerful way
to convey information

624
00:31:54,715 --> 00:31:59,086
with a tiny amount of text and SF Symbols
above the clock on iPhone,

625
00:31:59,119 --> 00:32:03,156
next to a system-supplied date string,
such as Monday the 6th.

626
00:32:03,190 --> 00:32:08,495
And by the way, all of these widgets
work on both iOS and watchOS

627
00:32:08,529 --> 00:32:10,497
because starting in watchOS 9,

628
00:32:10,531 --> 00:32:13,734
complications
are also powered by WidgetKit.

629
00:32:13,767 --> 00:32:16,336
For the first time,
you can use the same code

630
00:32:16,370 --> 00:32:20,274
to generate glanceable data
on both platforms.

631
00:32:20,307 --> 00:32:23,343
WidgetKit manages platform differences
for you automatically,

632
00:32:23,377 --> 00:32:25,646
using the appropriate system fonts
by default,

633
00:32:25,679 --> 00:32:29,449
and tinting the widgets on
the Lock Screen for maximum legibility.

634
00:32:29,483 --> 00:32:32,953
To show you how to use WidgetKit to create
widgets for the Lock Screen on iPhone

635
00:32:32,986 --> 00:32:35,756
and complications on Apple Watch
using the same code,

636
00:32:35,789 --> 00:32:37,691
I'll hand it over to Michael.

637
00:32:39,960 --> 00:32:41,662
Michael Kent: Building widgets
on the iPhone Lock Screen

638
00:32:41,695 --> 00:32:44,965
and complications on Apple Watch
is really easy with WidgetKit.

639
00:32:44,998 --> 00:32:47,568
If you've made Home Screen widgets,
you're already most of the way there,

640
00:32:47,601 --> 00:32:50,037
including how your data
and timeline are updated.

641
00:32:50,070 --> 00:32:52,573
In our Food Truck app,
we already have a systemSmall widget

642
00:32:52,606 --> 00:32:54,274
that users can add to their Home Screen

643
00:32:54,308 --> 00:32:57,144
to see how many orders they've filled
out of their quota today.

644
00:32:57,177 --> 00:32:59,680
This kind of information would be great
to show on the Lock Screen

645
00:32:59,713 --> 00:33:01,915
or in a complication on the watch face.

646
00:33:01,949 --> 00:33:04,151
Let's start by building out
the Circular family.

647
00:33:05,652 --> 00:33:08,422
We'll first declare support for it
in our Supported Families array.

648
00:33:09,556 --> 00:33:12,192
You'll notice that we're using
some platform conditionals here.

649
00:33:12,226 --> 00:33:15,929
This is because we want this widget
to continue supporting macOS and iOS

650
00:33:15,963 --> 00:33:19,533
with systemSmall, but that family
isn't available on watchOS.

651
00:33:20,367 --> 00:33:22,503
Then, we'll add a case to define its view.

652
00:33:24,171 --> 00:33:26,540
Let's use a gauge
that shows the current number of orders

653
00:33:26,573 --> 00:33:28,208
from 0 to the daily quota

654
00:33:28,242 --> 00:33:31,011
so the users can quickly see
their progress at a glance.

655
00:33:31,845 --> 00:33:34,815
We'll display the current order count
as text in the center,

656
00:33:34,848 --> 00:33:37,384
along with a donut symbol.
There.

657
00:33:37,417 --> 00:33:39,319
Let's take a look at this
in Xcode Previews now.

658
00:33:40,888 --> 00:33:42,256
Awesome!
That feels right at home

659
00:33:42,289 --> 00:33:43,123
on the Lock Screen.

660
00:33:44,091 --> 00:33:45,993
In order to show a bit more detail
at a glance,

661
00:33:46,026 --> 00:33:48,495
we can also add support
for the rectangular family.

662
00:33:52,099 --> 00:33:54,902
For this view,
we'll make a VStack,

663
00:33:54,935 --> 00:33:57,271
starting with a title for the data
that's shown,

664
00:33:57,304 --> 00:33:58,972
and that same donut symbol.

665
00:33:59,673 --> 00:34:01,942
By using the Headline style for the font,

666
00:34:01,975 --> 00:34:04,444
we'll get a treatment
that looks great on both platforms.

667
00:34:04,478 --> 00:34:07,581
And we'll make sure it pops
with the widgetAccentable modifier.

668
00:34:07,614 --> 00:34:10,951
Since the rectangular family gives us
a bit more space,

669
00:34:10,984 --> 00:34:13,720
we'll show a cool custom segmented gauge

670
00:34:13,754 --> 00:34:16,557
and display the current number of orders
out of the daily quota

671
00:34:16,590 --> 00:34:18,258
for the gauge's label.

672
00:34:18,792 --> 00:34:20,327
Looking back at the canvas,

673
00:34:20,360 --> 00:34:22,963
we can see the rectangular widget
in previews as well.

674
00:34:22,996 --> 00:34:25,299
I really love that gauge.

675
00:34:25,332 --> 00:34:29,102
Now let's take a look at how this widget
would appear as a circular complication

676
00:34:29,136 --> 00:34:30,604
on a watch face.

677
00:34:32,739 --> 00:34:34,508
Well, all right, everything is there,

678
00:34:34,541 --> 00:34:37,010
but for complications,
we also need to consider

679
00:34:37,044 --> 00:34:38,312
the full color rendering mode,

680
00:34:38,345 --> 00:34:41,415
which is the default in Xcode Previews.

681
00:34:41,448 --> 00:34:45,586
Let's do that by adding a tint
to each of our gauges.

682
00:34:46,854 --> 00:34:49,923
And a foreground color
to the rectangular headline.

683
00:34:51,758 --> 00:34:53,260
For a bit of a pop in full color,

684
00:34:53,293 --> 00:34:56,864
we can check the rendering mode
with an environment property

685
00:34:56,897 --> 00:35:00,300
to replace the donut symbol
with a donut emoji

686
00:35:00,334 --> 00:35:01,969
on both the circular

687
00:35:02,002 --> 00:35:03,770
and rectangular views.

688
00:35:05,072 --> 00:35:06,306
That looks really great!

689
00:35:06,340 --> 00:35:08,208
With the new variants UI in previews,

690
00:35:08,242 --> 00:35:11,245
we can change the color
we're previewing with no code at all.

691
00:35:12,346 --> 00:35:14,348
Or even look at several at once.

692
00:35:15,115 --> 00:35:18,185
And since we used default spacing,
system font styles,

693
00:35:18,218 --> 00:35:19,786
and adapted to the rendering mode,

694
00:35:19,820 --> 00:35:23,290
the same views look right at home
on both the Lock Screen and watch face.

695
00:35:23,323 --> 00:35:26,960
It's that easy to make a widget
on the brand-new Lock Screen in iOS 16

696
00:35:26,994 --> 00:35:30,731
and a great complication in watchOS 9,
all with the same code.

697
00:35:30,764 --> 00:35:33,967
But this isn't the only way we've brought
the power of WidgetKit to the Lock Screen.

698
00:35:34,001 --> 00:35:35,602
Here's Matt to tell you more.

699
00:35:36,170 --> 00:35:37,237
Matt Shepherd: With WidgetKit,

700
00:35:37,271 --> 00:35:39,973
you can give people access
to glanceable information.

701
00:35:40,007 --> 00:35:42,476
But what about those moments
when they need live updates,

702
00:35:42,509 --> 00:35:44,178
information tied to an activity,

703
00:35:44,211 --> 00:35:46,613
or an event
that they care about right now?

704
00:35:46,647 --> 00:35:51,285
For that, we are working on something new
we call Live Activities.

705
00:35:51,318 --> 00:35:53,487
Live Activities makes it easier
to stay on top of things

706
00:35:53,520 --> 00:35:55,289
that are happening in real time,

707
00:35:55,322 --> 00:35:56,890
right from the Lock Screen.

708
00:35:56,924 --> 00:36:00,194
Things like the latest score from a game,

709
00:36:00,227 --> 00:36:03,664
the progress of a ride share,
or a workout,

710
00:36:03,697 --> 00:36:06,233
right on the Lock Screen,
and always up-to-date.

711
00:36:06,266 --> 00:36:09,870
Just like with widgets,
you create Live Activities with WidgetKit.

712
00:36:09,903 --> 00:36:12,573
The difference is, you update
your Live Activity's presentation

713
00:36:12,606 --> 00:36:14,374
and state in real time.

714
00:36:14,408 --> 00:36:17,611
Since they're built with SwiftUI,
you can even animate your updates

715
00:36:17,644 --> 00:36:19,746
from one state to the next.

716
00:36:19,780 --> 00:36:21,782
These updates make sure
your Live Activities

717
00:36:21,815 --> 00:36:25,619
has the most current information
when the user chooses to glance at it.

718
00:36:25,652 --> 00:36:30,657
Live Activities will be available starting
in an update to iOS 16 later this year.

719
00:36:30,691 --> 00:36:33,160
So those are the updates
to the all-new Lock Screen.

720
00:36:33,193 --> 00:36:35,262
We think they're gonna be a great way
to help you give people

721
00:36:35,295 --> 00:36:38,565
more information at a glance
in the moments they need it most.

722
00:36:39,299 --> 00:36:42,769
Next, let's talk about a brand-new way
to enhance collaborative experiences.

723
00:36:42,803 --> 00:36:45,105
To tell you more, here's Pierre.

724
00:36:45,138 --> 00:36:47,140
Pierre de Fillipis:
Collaboration is an important part

725
00:36:47,174 --> 00:36:50,677
of what people do
on iOS, iPadOS, and macOS.

726
00:36:50,711 --> 00:36:53,547
And that's due in large part
to the incredible wealth of apps

727
00:36:53,580 --> 00:36:55,182
that many of you have built,

728
00:36:55,215 --> 00:36:58,051
to support teams who are collaborating
across any distance.

729
00:36:58,085 --> 00:37:01,755
There's collaboration for work,
like a product road map in Airtable,

730
00:37:01,788 --> 00:37:06,393
and there's also collaboration for play,
like finding your dream home in Redfin.

731
00:37:06,426 --> 00:37:08,262
Whether it's for work or play,

732
00:37:08,295 --> 00:37:11,431
collaboration often starts
with a conversation.

733
00:37:11,465 --> 00:37:13,967
And with the new
Messages Collaboration API,

734
00:37:14,001 --> 00:37:17,137
you can bring your app's
existing collaboration experiences

735
00:37:17,171 --> 00:37:18,939
into Messages and FaceTime.

736
00:37:18,972 --> 00:37:21,875
When users share a link
to content in your app,

737
00:37:21,909 --> 00:37:25,579
the API makes it easy for you
to mark that link as collaborative,

738
00:37:25,612 --> 00:37:27,681
enabling a seamless experience.

739
00:37:27,714 --> 00:37:29,816
We provide the identifiers you need

740
00:37:29,850 --> 00:37:32,319
so you can give access
to the recipients immediately

741
00:37:32,352 --> 00:37:34,154
when they tap the link to join.

742
00:37:34,188 --> 00:37:37,090
And of course,
this works without compromising privacy.

743
00:37:37,124 --> 00:37:41,161
Messages identities and app identities
remain private and are not shared.

744
00:37:41,195 --> 00:37:44,998
And the best part is, you can do this
with existing technologies

745
00:37:45,032 --> 00:37:47,467
your app is most likely already using.

746
00:37:47,501 --> 00:37:51,638
With one object,
your users can initiate collaboration

747
00:37:51,672 --> 00:37:54,741
in two convenient ways
that they're already familiar with.

748
00:37:54,775 --> 00:37:57,444
One, the Share Sheet,
which has been updated

749
00:37:57,477 --> 00:37:59,613
to put collaboration front and center,

750
00:37:59,646 --> 00:38:01,181
and two, drag & drop,

751
00:38:01,215 --> 00:38:03,917
where you can share content
you want to collaborate on

752
00:38:03,951 --> 00:38:07,120
by dragging it directly
into the Messages conversation.

753
00:38:07,154 --> 00:38:10,724
And once the conversation is started,
you can even post notices

754
00:38:10,757 --> 00:38:14,228
about content updates
right to the Messages conversation.

755
00:38:14,261 --> 00:38:17,965
With a couple lines of code,
your users can get back to collaborating

756
00:38:17,998 --> 00:38:21,201
in your app with a single tap in Messages.

757
00:38:21,235 --> 00:38:22,870
And with the collaboration popover,

758
00:38:22,903 --> 00:38:26,740
your users can get back to the
conversation in Messages or FaceTime

759
00:38:26,773 --> 00:38:28,075
right from your app.

760
00:38:28,108 --> 00:38:30,110
So with the Messages Collaboration API,

761
00:38:30,143 --> 00:38:33,947
your app is truly woven into the fabric
of Messages and FaceTime.

762
00:38:33,981 --> 00:38:37,851
We take care of giving your users
powerful communication tools

763
00:38:37,885 --> 00:38:40,921
so you can focus
on the powerful collaboration tools

764
00:38:40,954 --> 00:38:42,589
you deliver in your app.

765
00:38:42,623 --> 00:38:47,027
So this is going to level up collaboration
on iOS, iPadOS, and macOS,

766
00:38:47,060 --> 00:38:50,197
creating a consistent experience
that's deeply rooted

767
00:38:50,230 --> 00:38:52,566
in the connection
between the people collaborating,

768
00:38:52,599 --> 00:38:54,101
whether for work or play.

769
00:38:54,134 --> 00:38:56,637
Next is Ari, who's going to tell you

770
00:38:56,670 --> 00:38:59,239
about a new framework called App Intents.

771
00:38:59,273 --> 00:39:02,776
Ari Weinstein: I'm excited to tell you
about the App Intents framework,

772
00:39:02,809 --> 00:39:05,412
which makes your app's features
available to the system,

773
00:39:05,445 --> 00:39:09,349
so people can use them automatically
through Siri and Shortcuts.

774
00:39:09,383 --> 00:39:11,718
People love using Shortcuts
with their apps.

775
00:39:11,752 --> 00:39:15,189
They let them get things done so fast,
just by asking Siri,

776
00:39:15,222 --> 00:39:18,492
or by quickly tapping a shortcut
on the Home Screen.

777
00:39:18,525 --> 00:39:21,595
And it's amazing
to see how people remix app capabilities

778
00:39:21,628 --> 00:39:23,697
into totally new pieces of functionality

779
00:39:23,730 --> 00:39:25,465
with custom shortcuts.

780
00:39:25,499 --> 00:39:29,870
Today, people have to add shortcuts
manually before they can use them at all.

781
00:39:29,903 --> 00:39:34,208
We're making this automatic in iOS 16
with the new App Intents framework.

782
00:39:35,242 --> 00:39:39,279
App Intents works together with Shortcuts
to form App Shortcuts,

783
00:39:39,313 --> 00:39:41,448
which people can use with Siri
right away,

784
00:39:41,481 --> 00:39:43,283
without having to set anything up first,

785
00:39:43,317 --> 00:39:46,553
like, "Hey, Siri, clean the kitchen
with Roomba."

786
00:39:46,587 --> 00:39:48,155
But it's not just Siri.

787
00:39:48,188 --> 00:39:50,724
App shortcuts give your users
a front-row seat

788
00:39:50,757 --> 00:39:52,860
to your app's features
throughout the system,

789
00:39:52,893 --> 00:39:56,496
like in Spotlight, where anytime
people search for your app,

790
00:39:56,530 --> 00:39:58,699
your shortcuts show up, too,

791
00:39:58,732 --> 00:40:02,469
and your shortcuts will be suggested
right below app suggestions

792
00:40:02,503 --> 00:40:06,473
without needing to adopt
any additional APIs, like donations.

793
00:40:06,507 --> 00:40:09,576
Your shortcuts also appear immediately
in the Shortcuts app,

794
00:40:09,610 --> 00:40:11,678
where people can run them with a tap.

795
00:40:12,346 --> 00:40:15,516
App Intents is the next step
for the SiriKit Intents framework

796
00:40:15,549 --> 00:40:17,751
that we introduced in iOS10.

797
00:40:17,784 --> 00:40:21,188
If you adopt Intents to integrate
with Widgets or domains

798
00:40:21,221 --> 00:40:22,556
like media or messaging,

799
00:40:22,589 --> 00:40:25,792
you should keep using
the SiriKit Intents framework,

800
00:40:25,826 --> 00:40:29,229
but for developers who build
custom intents for Siri and Shortcuts,

801
00:40:29,263 --> 00:40:31,465
you should go ahead and upgrade
to App Intents.

802
00:40:31,498 --> 00:40:34,668
You can easily upgrade to App Intents
in Xcode

803
00:40:34,701 --> 00:40:37,971
by pushing the Convert button
in your intent definition file.

804
00:40:38,005 --> 00:40:41,008
Xcode will generate the equivalent
App Intents source code,

805
00:40:41,041 --> 00:40:43,477
and then you fill in the blanks
with your intent handling code.

806
00:40:43,510 --> 00:40:46,747
The App Intents framework is really easy
to develop for

807
00:40:46,780 --> 00:40:49,883
because it's designed
from the ground up for Swift,

808
00:40:49,917 --> 00:40:52,252
and it requires much less code.

809
00:40:52,286 --> 00:40:55,622
The Swift code that you write
is the only source of truth,

810
00:40:55,656 --> 00:40:57,925
There's no separate
intent definition files

811
00:40:57,958 --> 00:41:00,227
or code generation to keep in sync.

812
00:41:00,260 --> 00:41:02,863
And the code is easy to add
to your project.

813
00:41:02,896 --> 00:41:05,399
You don't need to rearchitect
your codebase.

814
00:41:05,432 --> 00:41:08,502
Even if you have Objective-C code,
you can use it with App Intents

815
00:41:08,535 --> 00:41:10,137
by wrapping it with Swift.

816
00:41:10,170 --> 00:41:13,540
An app intent represents something
people can do inside of your app,

817
00:41:13,574 --> 00:41:16,777
and it makes it possible to do it
from outside of your app.

818
00:41:16,810 --> 00:41:19,513
You can define an intent
and add an app shortcut

819
00:41:19,546 --> 00:41:21,215
in just a few lines of code.

820
00:41:21,248 --> 00:41:23,417
Let's give it a try together.

821
00:41:23,450 --> 00:41:26,119
Back in the Food Truck app,
I have this great chart view

822
00:41:26,153 --> 00:41:28,722
that lets me see the top five
best-selling donuts

823
00:41:28,755 --> 00:41:32,626
over a given period of time,
like today or this week.

824
00:41:32,659 --> 00:41:34,795
I want to expose this
to Siri and Shortcuts

825
00:41:34,828 --> 00:41:37,564
so people pull it up super quickly,

826
00:41:37,598 --> 00:41:41,001
so first, in Xcode,
I'll go to a new Swift file.

827
00:41:41,034 --> 00:41:44,338
I'll import the App Intents framework
and SwiftUI.

828
00:41:45,839 --> 00:41:48,375
Then I define the intent
by defining a struct

829
00:41:48,408 --> 00:41:51,044
that conforms to the AppIntent protocol.

830
00:41:51,078 --> 00:41:53,413
I'll give it a title.

831
00:41:53,447 --> 00:41:57,417
And I'll add a parameter
for which time frame of trends to look at.

832
00:41:57,451 --> 00:42:01,388
This uses the time frame enum
that's already defined in my codebase.

833
00:42:01,421 --> 00:42:05,092
I need to extend it to conform
to the AppEnum protocol

834
00:42:05,125 --> 00:42:07,394
so that we can extract
human-readable names

835
00:42:07,427 --> 00:42:08,829
for each enum case,

836
00:42:08,862 --> 00:42:11,231
like "today" and "this week."

837
00:42:11,265 --> 00:42:15,736
Next, on the intent,
I'll implement the perform method.

838
00:42:15,769 --> 00:42:19,806
Here, I return a result that includes
the SwiftUI chart view.

839
00:42:19,840 --> 00:42:22,809
I could also include a dialogue
or output value.

840
00:42:22,843 --> 00:42:26,547
I want people to be able to use
this intent automatically, without setup,

841
00:42:26,580 --> 00:42:28,282
so I'll define an app shortcut.

842
00:42:30,184 --> 00:42:32,886
This includes the phrase
that people can say to Siri

843
00:42:32,920 --> 00:42:34,655
to use this intent.

844
00:42:34,688 --> 00:42:38,425
The phrase has to include the app name
as a variable,

845
00:42:38,458 --> 00:42:41,061
and I've included the time frame parameter

846
00:42:41,094 --> 00:42:44,131
so people can say
"Food truck trends for today,"

847
00:42:44,164 --> 00:42:47,134
or "Food truck trends for this week."

848
00:42:47,167 --> 00:42:50,637
The last thing I need to do is make this
discoverable for my users.

849
00:42:50,671 --> 00:42:52,840
People need to see the phrase
at some point,

850
00:42:52,873 --> 00:42:54,641
so they know what to say to Siri,

851
00:42:54,675 --> 00:42:57,945
so I'm going to switch to the file
for the Top 5 Donuts view

852
00:42:57,978 --> 00:42:59,713
that we were looking at a second ago,

853
00:42:59,746 --> 00:43:01,815
and I'll add a Siri tip.

854
00:43:03,383 --> 00:43:07,554
Now I can build and run the app
and hop over to my phone.

855
00:43:07,588 --> 00:43:08,622
Let's give it a try.

856
00:43:11,124 --> 00:43:13,760
I can see the shortcut now appears
in the Shortcuts app,

857
00:43:13,794 --> 00:43:16,029
with variants for each parameter value,

858
00:43:16,063 --> 00:43:19,600
and I can run one
just by tapping on it.

859
00:43:19,633 --> 00:43:22,936
And I can run them from Siri
just by saying the phrase,

860
00:43:22,970 --> 00:43:25,005
"Food truck trends for today."

861
00:43:26,807 --> 00:43:30,177
Or I could say,
"food truck trends for this week."

862
00:43:32,446 --> 00:43:34,848
When people are in
the Top Five view of my app,

863
00:43:34,882 --> 00:43:36,950
they'll see this tip we added
at the bottom,

864
00:43:36,984 --> 00:43:40,487
so they know what to say to Siri
to ask for this feature.

865
00:43:40,521 --> 00:43:43,824
Lastly, people can quickly access these
in Spotlight

866
00:43:43,857 --> 00:43:45,926
when they search for the app, like this.

867
00:43:48,161 --> 00:43:50,297
It's super useful.

868
00:43:50,330 --> 00:43:54,268
App Intents will make it easier than ever
before to make your app's functionality

869
00:43:54,301 --> 00:43:58,939
available throughout the system experience
on all of these platforms.

870
00:43:58,972 --> 00:44:01,441
Next, Ricky will tell us
about some big updates

871
00:44:01,475 --> 00:44:03,377
to authentication technologies.

872
00:44:04,044 --> 00:44:05,612
Ricky Mondello:
For as long as we can remember,

873
00:44:05,646 --> 00:44:08,215
we've been creating and using passwords.

874
00:44:08,248 --> 00:44:10,417
But passwords have serious issues,

875
00:44:10,450 --> 00:44:14,588
like phishing, reuse across accounts,
and website leaks.

876
00:44:14,621 --> 00:44:18,258
The good news is that together
we can solve these issues.

877
00:44:18,292 --> 00:44:21,328
And we can do this today with Passkeys.

878
00:44:21,361 --> 00:44:24,298
Passkeys will streamline
your authentication flows

879
00:44:24,331 --> 00:44:27,601
and address the top security issues
with passwords.

880
00:44:27,634 --> 00:44:30,904
Passkeys were designed
to be incredibly easy to use.

881
00:44:30,938 --> 00:44:34,441
The interface uses familiar
Autofill-style UI

882
00:44:34,474 --> 00:44:37,945
and FaceID and TouchID
for biometric verification.

883
00:44:37,978 --> 00:44:41,615
These elements create a seamless
transition away from passwords,

884
00:44:41,648 --> 00:44:45,152
while delivering
a profound increase in security.

885
00:44:45,185 --> 00:44:47,354
Let's check out Passkeys in action.

886
00:44:48,155 --> 00:44:50,257
When setting up an account with a passkey,

887
00:44:50,290 --> 00:44:52,526
I don't need to create a password.

888
00:44:52,559 --> 00:44:57,664
I'll type a user name and save
the passkey to my iCloud Keychain.

889
00:44:57,698 --> 00:45:02,135
This will securely sync this passkey
to all of my other Apple devices.

890
00:45:02,169 --> 00:45:06,273
And if I sign out,
signing back in is a breeze.

891
00:45:06,306 --> 00:45:09,476
Just Face ID, and I'm in.

892
00:45:09,510 --> 00:45:12,713
Because passkeys are built
on open industry standards

893
00:45:12,746 --> 00:45:14,448
that platforms are adopting,

894
00:45:14,481 --> 00:45:17,751
I can use the passkey
I just created on my iPhone

895
00:45:17,784 --> 00:45:21,255
to sign into the Food Truck website
on my friend's PC.

896
00:45:21,288 --> 00:45:25,359
On the website,
I'll type my username, submit,

897
00:45:25,392 --> 00:45:29,062
and choose the option to sign in
using a phone,

898
00:45:29,096 --> 00:45:31,498
scan the QR code,

899
00:45:31,532 --> 00:45:36,737
let the iPhone and PC securely connect,

900
00:45:36,770 --> 00:45:39,306
and I'm signed in.

901
00:45:39,339 --> 00:45:42,709
In Safari on my Mac,
it's even easier to sign in.

902
00:45:42,743 --> 00:45:45,779
My passkey is already here,
thanks to iCloud Keychain,

903
00:45:45,812 --> 00:45:49,449
and I can sign in directly
from the website's username field.

904
00:45:49,483 --> 00:45:53,287
It's easy to integrate passkeys
into existing sign-in flows.

905
00:45:53,320 --> 00:45:57,591
For example, this website's username field
lets me sign in with a passkey

906
00:45:57,624 --> 00:45:59,259
or a password.

907
00:45:59,293 --> 00:46:04,031
If I type a username
for a password based account,

908
00:46:04,064 --> 00:46:05,599
I can quickly sign in.

909
00:46:05,632 --> 00:46:08,402
With passkeys,
the device does the hard work,

910
00:46:08,435 --> 00:46:10,771
and it's secure every time.

911
00:46:10,804 --> 00:46:12,306
When creating a passkey,

912
00:46:12,339 --> 00:46:16,143
the device generates a unique key
that is specific to the website or app

913
00:46:16,176 --> 00:46:19,880
it was created for
and protects it behind biometrics.

914
00:46:19,913 --> 00:46:22,449
It's impossible to have a weak passkey.

915
00:46:22,482 --> 00:46:25,385
It can't be forgotten, reused, or guessed.

916
00:46:25,419 --> 00:46:28,555
Passkeys are based
on public key cryptography,

917
00:46:28,589 --> 00:46:32,259
which makes credential leaks
from servers a thing of the past.

918
00:46:32,292 --> 00:46:35,596
Instead of storing salted,
hashed passwords,

919
00:46:35,629 --> 00:46:40,734
that can leak and be cracked,
your server keeps only a public key.

920
00:46:40,767 --> 00:46:43,270
Public keys are designed
to be truly public,

921
00:46:43,303 --> 00:46:45,572
and not at all valuable to hackers.

922
00:46:45,606 --> 00:46:49,376
This significantly reduces your risk
as a website owner.

923
00:46:49,409 --> 00:46:52,346
With passkeys–
and this point is huge–

924
00:46:52,379 --> 00:46:55,382
credential phishing as we know it today
is gone,

925
00:46:55,415 --> 00:46:59,620
eliminating the number one
security vulnerability that users face.

926
00:46:59,653 --> 00:47:03,690
Passkeys are intrinsically linked to the
website or app they were set up for,

927
00:47:03,724 --> 00:47:07,995
so users can never be tricked into
using their passkey on the wrong website.

928
00:47:08,028 --> 00:47:09,696
And unlike passwords,

929
00:47:09,730 --> 00:47:12,533
it's not possible to type
or copy a passkey

930
00:47:12,566 --> 00:47:14,668
into a convincing fake website,

931
00:47:14,701 --> 00:47:18,405
or even give anything away to
someone looking over your shoulder.

932
00:47:18,438 --> 00:47:21,308
When you put it all together,
what we're talking about here

933
00:47:21,341 --> 00:47:23,810
is a new era of account security.

934
00:47:23,844 --> 00:47:27,915
Bringing passkeys to your app
and website takes only a few steps.

935
00:47:27,948 --> 00:47:31,251
First, you'll teach your account backend
to store public keys

936
00:47:31,285 --> 00:47:33,854
and issue authentication challenges.

937
00:47:33,887 --> 00:47:36,356
Then, on your website and in your app,

938
00:47:36,390 --> 00:47:38,225
you'll offer passkeys to users

939
00:47:38,258 --> 00:47:42,496
and adopt API to create
a new passkey and sign in with it.

940
00:47:42,529 --> 00:47:47,100
Passkeys are based on the Web
Authentication, or WebAuthn, standard,

941
00:47:47,134 --> 00:47:50,037
which has been a collaborative effort
across the industry

942
00:47:50,070 --> 00:47:53,574
from both platform vendors
and service owners.

943
00:47:53,607 --> 00:47:56,777
The standard itself is mature
and well documented,

944
00:47:56,810 --> 00:47:59,279
and passkeys fit it like a glove.

945
00:47:59,313 --> 00:48:02,850
All of this is ready
for you to build on right now.

946
00:48:02,883 --> 00:48:06,620
Next generation security,
a seamless user experience,

947
00:48:06,653 --> 00:48:10,991
and a design that works beautifully
alongside passwords during the transition.

948
00:48:11,024 --> 00:48:12,626
Back to you, Sebastien.

949
00:48:12,659 --> 00:48:15,362
Sebastien: You've just seen
a few of the newest ways

950
00:48:15,395 --> 00:48:19,900
that you can integrate your apps with the
system experience on all of our platforms.

951
00:48:19,933 --> 00:48:23,637
And beyond those integration points,
there are a ton of new APIs

952
00:48:23,670 --> 00:48:25,839
and frameworks
across all of our platforms

953
00:48:25,873 --> 00:48:29,643
that open up even more possibilities
for you and your apps this year.

954
00:48:30,477 --> 00:48:32,479
And I'd like to walk you through a few

955
00:48:32,513 --> 00:48:35,949
before diving into some others
in more detail.

956
00:48:35,983 --> 00:48:38,585
Let's start with iPadOS.

957
00:48:38,619 --> 00:48:43,090
With iPadOS 16, you'll be able to make
the most powerful iPad apps yet,

958
00:48:43,123 --> 00:48:46,493
with a consistent,
desktop-like experience.

959
00:48:46,527 --> 00:48:50,097
There's a seamless find-and-replace
experience for UI text views

960
00:48:50,130 --> 00:48:52,299
that your apps get automatically,

961
00:48:52,332 --> 00:48:54,601
as well as updates to the navigation bar,

962
00:48:54,635 --> 00:48:56,570
toolbars, the document menu,

963
00:48:56,603 --> 00:48:59,506
that make it easy for your users
to manage documents

964
00:48:59,540 --> 00:49:01,742
and customize their experience.

965
00:49:01,775 --> 00:49:05,913
To enable even more powerful applications
of iPad with connected hardware,

966
00:49:05,946 --> 00:49:07,915
DriverKit comes to iPad,

967
00:49:07,948 --> 00:49:11,451
helping to unlock
the incredible power of the M1 chip.

968
00:49:11,485 --> 00:49:14,154
It's the same API
that's available on Mac today,

969
00:49:14,188 --> 00:49:18,525
enabling you to easily deliver support
for your USB, audio,

970
00:49:18,559 --> 00:49:21,428
and PCI devices
to an even larger audience.

971
00:49:22,763 --> 00:49:27,000
Now, watchOS is creating new opportunities
for apps through deeper integration

972
00:49:27,034 --> 00:49:28,869
with system services.

973
00:49:28,902 --> 00:49:31,405
The CallKit framework in watchOS 9

974
00:49:31,438 --> 00:49:33,907
includes a new
Voiceover IP background mode

975
00:49:33,941 --> 00:49:37,377
that lets apps make voice calls
directly from Apple Watch,

976
00:49:37,411 --> 00:49:42,049
with the same familiar user experience
as FaceTime audio and phone calls.

977
00:49:42,082 --> 00:49:45,452
And Bluetooth-connected medical devices
get more robust connectivity

978
00:49:45,485 --> 00:49:46,854
and data delivery,

979
00:49:46,887 --> 00:49:50,457
allowing for timely alerts
when a critical condition is detected.

980
00:49:51,859 --> 00:49:55,796
Now, tvOS 16 gives you new ways
to create connected experiences

981
00:49:55,829 --> 00:49:57,564
between your apps on Apple TV

982
00:49:57,598 --> 00:50:02,069
and iPhone, iPad, or Apple Watch apps
on nearby devices.

983
00:50:02,102 --> 00:50:05,239
So a workout could use motion data
from Apple Watch,

984
00:50:05,272 --> 00:50:06,907
or you could use iPhone or iPad

985
00:50:06,940 --> 00:50:10,344
as a custom controller
for your turn-based games,

986
00:50:10,377 --> 00:50:14,314
And tvOS manages device discovery
and connection for you,

987
00:50:14,348 --> 00:50:16,617
so your app doesn't even need
to be running on the other device.

988
00:50:16,650 --> 00:50:18,886
In fact, if your app isn't installed,

989
00:50:18,919 --> 00:50:21,421
the user is automatically prompted
to download it

990
00:50:21,455 --> 00:50:23,090
right from the App Store.

991
00:50:23,957 --> 00:50:27,861
Now, for Phone and iPad,
there are new tools for advertisers.

992
00:50:27,895 --> 00:50:31,632
We know that effective advertising
is important to a lot of your businesses,

993
00:50:31,665 --> 00:50:34,568
which is why we created SKAdNetwork.

994
00:50:34,601 --> 00:50:37,371
It's an API that helps ad networks
and advertisers

995
00:50:37,404 --> 00:50:40,741
measure the performance of campaigns
without tracking users,

996
00:50:40,774 --> 00:50:45,112
and we've been pleased to see
many third-party ad networks adopt it.

997
00:50:45,145 --> 00:50:47,848
Now, we've heard feedback from
ad networks and developers,

998
00:50:47,881 --> 00:50:51,318
and this year, we made a number
of improvements to SKAdNetwork

999
00:50:51,351 --> 00:50:53,187
that reflect some of the biggest requests

1000
00:50:53,220 --> 00:50:55,656
and give you
dramatically more flexibility,

1001
00:50:55,689 --> 00:50:58,825
all without compromising user privacy.

1002
00:50:59,960 --> 00:51:02,529
Now, on iPhone and iPad,
there are new cool features

1003
00:51:02,563 --> 00:51:04,798
that use AR and LiDAR scanning

1004
00:51:04,831 --> 00:51:07,201
with ScanKit and RoomPlan.

1005
00:51:07,234 --> 00:51:11,038
These APIs let your apps create
rich 3D parametric room models

1006
00:51:11,071 --> 00:51:13,774
in USD and USDZ formats.

1007
00:51:13,807 --> 00:51:16,910
So you can create
a variety of workflows and experiences,

1008
00:51:16,944 --> 00:51:20,514
from architecture and design,
to retail and hospitality,

1009
00:51:20,547 --> 00:51:24,117
and the models include furniture
classification for categories

1010
00:51:24,151 --> 00:51:29,590
such as sofas, cabinets, TVs,
and yes, even kitchen sinks.

1011
00:51:29,623 --> 00:51:34,094
Now, last year, we introduced Focus
for iPhone, iPad, Mac, and Apple Watch,

1012
00:51:34,127 --> 00:51:39,800
and with it, ways for your app to manage
notifications based on a user's Focus.

1013
00:51:39,833 --> 00:51:43,337
And this year,
Focus goes further with Focus filters.

1014
00:51:43,370 --> 00:51:46,940
They're built on top of App Intents,
and Focus filters let you adjust

1015
00:51:46,974 --> 00:51:50,544
the content of your app
based on the user's current focus.

1016
00:51:50,577 --> 00:51:53,380
So, for example,
an app could create a Focus filter

1017
00:51:53,413 --> 00:51:57,985
to only show work accounts
when the user is in their Work Focus.

1018
00:51:58,018 --> 00:52:01,555
And those examples are really
just scratching the surface.

1019
00:52:01,588 --> 00:52:04,625
Across the board at every level,
there are new tools and APIs

1020
00:52:04,658 --> 00:52:08,529
with the power that you need
to take your apps further than ever

1021
00:52:08,562 --> 00:52:11,265
and to create entirely new apps
and experiences.

1022
00:52:11,298 --> 00:52:13,700
So next, let's go a little deeper

1023
00:52:13,734 --> 00:52:18,205
starting with Metal, a technology that's
really taking things to the next level.

1024
00:52:18,238 --> 00:52:21,108
And to tell you more, let's go to Sarah.

1025
00:52:21,141 --> 00:52:28,148
♪ ♪

1026
00:52:29,416 --> 00:52:32,452
Sarah Clawson: Metal is the powerful
graphics and compute API

1027
00:52:32,486 --> 00:52:36,590
that helps you create amazing games
and pro apps for Apple platforms.

1028
00:52:36,623 --> 00:52:38,492
Metal makes it easy to take advantage

1029
00:52:38,525 --> 00:52:42,062
of the groundbreaking Apple GPUs
and unified memory system

1030
00:52:42,095 --> 00:52:45,165
now spanning the latest iPhone,
iPad, and Mac lineups

1031
00:52:45,199 --> 00:52:46,867
shipping with Apple silicon.

1032
00:52:46,900 --> 00:52:50,938
And this year, we're introducing Metal 3,

1033
00:52:50,971 --> 00:52:52,673
with powerful new features that help you

1034
00:52:52,706 --> 00:52:53,841
render immersive graphics

1035
00:52:53,874 --> 00:52:55,442
with even higher frame rates

1036
00:52:55,475 --> 00:52:56,643
and enable new levels

1037
00:52:56,677 --> 00:52:58,478
of computational performance.

1038
00:52:58,512 --> 00:53:01,181
For instance,
you'll get huge performance gains

1039
00:53:01,215 --> 00:53:03,350
for the machine learning framework,
PyTorch,

1040
00:53:03,383 --> 00:53:05,252
which now uses the new Metal backend

1041
00:53:05,285 --> 00:53:07,721
to enable ML training with the GPU.

1042
00:53:07,754 --> 00:53:10,424
And the biggest focus area is on gaming,

1043
00:53:10,457 --> 00:53:12,359
starting with game loading,

1044
00:53:12,392 --> 00:53:14,661
a key element to the gaming experience

1045
00:53:14,695 --> 00:53:17,364
that can affect launch time
and loading new levels.

1046
00:53:17,397 --> 00:53:20,067
Modern games deliver
a rich gaming experience

1047
00:53:20,100 --> 00:53:22,436
by providing high-quality assets,

1048
00:53:22,469 --> 00:53:26,440
and loading these assets quickly from
storage to the GPU can be challenging.

1049
00:53:26,473 --> 00:53:30,344
Often, games will hide asset loading
behind a loading screen,

1050
00:53:30,377 --> 00:53:32,846
and one technique
to launch gameplay faster

1051
00:53:32,880 --> 00:53:34,982
is to load and draw
a lower quality version

1052
00:53:35,015 --> 00:53:37,651
until the high-quality visuals
are available.

1053
00:53:37,684 --> 00:53:39,786
This is not an ideal gaming experience

1054
00:53:39,820 --> 00:53:43,323
since the user sees
lower quality graphics for longer.

1055
00:53:43,357 --> 00:53:46,093
Metal 3 introduces fast resource loading

1056
00:53:46,126 --> 00:53:47,794
with the Metal IO API

1057
00:53:47,828 --> 00:53:51,598
that takes advantage of the Apple GPU's
unified memory architecture

1058
00:53:51,632 --> 00:53:53,267
to minimize loading overhead

1059
00:53:53,300 --> 00:53:55,936
and ensures
that the high-speed SSD storage

1060
00:53:55,969 --> 00:53:58,038
that ships with every Apple silicon Mac

1061
00:53:58,071 --> 00:54:01,742
has enough requests in its queues
to maximize throughput.

1062
00:54:01,775 --> 00:54:05,045
This new API provides faster
and more consistent performance

1063
00:54:05,078 --> 00:54:07,981
so that more time is spent
drawing at the ideal quality.

1064
00:54:09,316 --> 00:54:12,319
In addition to moving resources
from storage to memory,

1065
00:54:12,352 --> 00:54:15,122
game loading
is also about shader compilation.

1066
00:54:15,155 --> 00:54:16,924
Shaders always need to be compiled

1067
00:54:16,957 --> 00:54:19,359
for the user's unique
hardware configuration,

1068
00:54:19,393 --> 00:54:22,296
and with the wide variety
of PC hardware permutations,

1069
00:54:22,329 --> 00:54:24,631
this usually has to be done at runtime.

1070
00:54:24,665 --> 00:54:27,901
This in-game compilation can affect
the gamer's experience

1071
00:54:27,935 --> 00:54:31,505
causing dropped frames,
slower frame rates, and longer loading.

1072
00:54:31,538 --> 00:54:35,542
In contrast, Apple silicon and Metal 3
are designed together

1073
00:54:35,576 --> 00:54:37,311
to support all Apple devices.

1074
00:54:37,344 --> 00:54:39,713
And now, with offline shader compilation,

1075
00:54:39,746 --> 00:54:43,350
you can generate GPU shader binaries
at project build time,

1076
00:54:43,383 --> 00:54:46,320
enabling you to eliminate
in-game shader compilation

1077
00:54:46,353 --> 00:54:49,556
to reduce load times
and improve rendering performance.

1078
00:54:49,590 --> 00:54:54,294
Another important aspect to gaming
is providing rich, detailed assets,

1079
00:54:54,328 --> 00:54:57,497
and one way to increase the visual
fidelity of your game's graphics

1080
00:54:57,531 --> 00:55:01,502
is by generating much more sophisticated
geometric meshes.

1081
00:55:01,535 --> 00:55:04,037
Traditionally this is done
with a compute pass

1082
00:55:04,071 --> 00:55:06,507
that'll evaluate the surface
and generate geometry

1083
00:55:06,540 --> 00:55:08,609
to be used in a later render pass.

1084
00:55:08,642 --> 00:55:11,245
The challenge is that
this can introduce latency

1085
00:55:11,278 --> 00:55:13,614
and take an unpredictable
amount of memory.

1086
00:55:13,647 --> 00:55:16,650
Metal 3 introduces a new Mesh Shading API,

1087
00:55:16,683 --> 00:55:20,821
which gives you precise control over
an optimized geometry processing pipeline

1088
00:55:20,854 --> 00:55:22,456
from a single render pass.

1089
00:55:22,489 --> 00:55:25,359
The Object shader decides
how many meshes to generate,

1090
00:55:25,392 --> 00:55:27,628
and the Mesh shader
generates the actual geometry

1091
00:55:27,661 --> 00:55:30,063
to be sent directly to the rasterizer,

1092
00:55:30,097 --> 00:55:33,433
avoiding a trip to device memory
and increasing performance.

1093
00:55:33,467 --> 00:55:36,236
Gamers also want to see
these stunning visuals

1094
00:55:36,270 --> 00:55:38,005
at the highest possible frame rate,

1095
00:55:38,038 --> 00:55:41,241
but rendering advanced graphics
at ultra-high resolutions

1096
00:55:41,275 --> 00:55:42,976
can cost precious milliseconds.

1097
00:55:43,010 --> 00:55:46,246
MetalFX upscaling helps
you render immersive graphics

1098
00:55:46,280 --> 00:55:47,948
in less time per frame.

1099
00:55:47,981 --> 00:55:49,516
Here's how it works.

1100
00:55:49,550 --> 00:55:52,986
Previously, you would render
your full frame at native resolution,

1101
00:55:53,020 --> 00:55:56,423
but the GPU render time
might not hit the target frame time.

1102
00:55:56,456 --> 00:56:00,260
Now, you can render the same
complex scene at a lower resolution

1103
00:56:00,294 --> 00:56:03,363
to meet the target frame times,
and use MetalFX framework

1104
00:56:03,397 --> 00:56:07,835
to perform temporal antialiasing
and upscaling to the target resolution.

1105
00:56:07,868 --> 00:56:10,804
With Apple silicon and Metal 3's
optimized features,

1106
00:56:10,838 --> 00:56:13,273
gaming has never looked so good
on the Mac.

1107
00:56:13,307 --> 00:56:14,975
And developers agree.

1108
00:56:15,008 --> 00:56:18,412
Leading game studios have plans to bring
their titles to the Mac,

1109
00:56:18,445 --> 00:56:21,448
like Grid Legends,
taking advantage of Apple silicon

1110
00:56:21,481 --> 00:56:23,784
to help you reach maximum speeds.

1111
00:56:23,817 --> 00:56:27,554
Or Resident Evil Village,
using features like MetalFX upscaling

1112
00:56:27,588 --> 00:56:31,525
to deliver hauntingly beautiful scenes
at the highest resolution.

1113
00:56:31,558 --> 00:56:34,127
And No Man's Sky,
taking advantage of Metal 3

1114
00:56:34,161 --> 00:56:35,963
to explore rich, expansive worlds

1115
00:56:35,996 --> 00:56:37,731
on both Mac and iPad.

1116
00:56:37,764 --> 00:56:41,502
Metal 3 is incredible,
with features to boost the performance

1117
00:56:41,535 --> 00:56:44,771
of your apps
and provide an amazing gaming experience.

1118
00:56:44,805 --> 00:56:49,276
Now to tell us more about the direction
MapKit is headed, here's Kathy.

1119
00:56:49,309 --> 00:56:51,445
Kathy Lin: Whether you're navigating
to a favorite restaurant,

1120
00:56:51,478 --> 00:56:53,146
planning that next vacation,

1121
00:56:53,180 --> 00:56:56,016
or just checking where your favorite
food truck is parked on a map,

1122
00:56:56,049 --> 00:57:00,654
we rely on our devices more than ever
to help us explore the world around us.

1123
00:57:00,687 --> 00:57:04,558
MapKit is the best way to help users
discover and navigate the world

1124
00:57:04,591 --> 00:57:07,528
with rich and flexible mapping
and location services,

1125
00:57:07,561 --> 00:57:11,632
powered by Apple Maps
and available to developers for free.

1126
00:57:11,665 --> 00:57:15,836
With MapKit, you can display map
or satellite imagery in your app,

1127
00:57:15,869 --> 00:57:17,771
find and call out points of interest,

1128
00:57:17,804 --> 00:57:19,406
add annotations and overlays,

1129
00:57:19,439 --> 00:57:21,575
get directions, and more.

1130
00:57:21,608 --> 00:57:24,011
MapKit is powered by our all-new map,

1131
00:57:24,044 --> 00:57:26,413
built from the ground up by Apple.

1132
00:57:26,446 --> 00:57:28,415
It offers improved detail and accuracy,

1133
00:57:28,448 --> 00:57:32,119
and can bring useful mapping
and location services to your app.

1134
00:57:32,152 --> 00:57:34,588
With iOS 16,
we're building on this map

1135
00:57:34,621 --> 00:57:37,357
to introduce our biggest update ever
for MapKit,

1136
00:57:37,391 --> 00:57:42,196
starting with making the 3D City
Experience available to all developers.

1137
00:57:42,229 --> 00:57:45,199
Users of your apps will be able
to see incredible details,

1138
00:57:45,232 --> 00:57:47,968
like 3D elevation, turn lanes,

1139
00:57:48,001 --> 00:57:49,436
crosswalks and bike lanes,

1140
00:57:49,469 --> 00:57:52,206
and amazing handcrafted 3D landmarks

1141
00:57:52,239 --> 00:57:54,675
like the Golden Gate Bridge,
or the Ferry Building.

1142
00:57:54,708 --> 00:57:58,579
The additional detail of the map allows
you to provide context and precision

1143
00:57:58,612 --> 00:58:01,348
that was never before possible.

1144
00:58:01,381 --> 00:58:03,550
You can, for example,
show that a point of interest

1145
00:58:03,584 --> 00:58:07,054
is between the crosswalk
and where the bike lane starts.

1146
00:58:07,087 --> 00:58:09,323
No other digital map lets you do that,

1147
00:58:09,356 --> 00:58:12,526
and we've made it incredibly easy
to implement.

1148
00:58:12,559 --> 00:58:14,428
To show you more,
let's create an experience

1149
00:58:14,461 --> 00:58:17,898
that makes it easy for a user to find
where their favorite food truck is parked

1150
00:58:17,931 --> 00:58:20,567
using the details of the new map.

1151
00:58:20,601 --> 00:58:23,971
Map views like this one will automatically
get the 3D City Experience

1152
00:58:24,004 --> 00:58:25,205
where it's available.

1153
00:58:25,239 --> 00:58:28,408
Just select iOS 16
as the deployment target.

1154
00:58:28,442 --> 00:58:31,745
Next, I can utilize
the extraordinary detail of the map

1155
00:58:31,778 --> 00:58:35,482
to illustrate the exact location
of the food truck.

1156
00:58:35,516 --> 00:58:39,520
MapKit has powerful controls that allow us
to position the camera in 3D space

1157
00:58:39,553 --> 00:58:42,289
to create a precise view of the map.

1158
00:58:42,322 --> 00:58:44,825
Here, I can choose how far
we want to be zoomed in

1159
00:58:44,858 --> 00:58:48,929
by setting the distance of the center
coordinate of the camera to 600 meters.

1160
00:58:48,962 --> 00:58:52,165
By adjusting the pitch and heading
and tilting the camera into 3D,

1161
00:58:52,199 --> 00:58:55,169
you can see amazing
and useful details like turn lanes,

1162
00:58:55,202 --> 00:58:57,938
crosswalks, and even trees.

1163
00:58:57,971 --> 00:59:00,641
By default, elevation will be flattened.

1164
00:59:00,674 --> 00:59:03,577
In order to help users understand
the terrain they'll encounter,

1165
00:59:03,610 --> 00:59:07,981
I can specify a preferredConfiguration
with elevationStyle 'realistic'

1166
00:59:08,015 --> 00:59:09,950
to include 3D elevation.

1167
00:59:11,018 --> 00:59:15,422
When adding an annotation or a route line
sourced from MapKit's Directions API,

1168
00:59:15,455 --> 00:59:17,624
MapKit automatically handles elevation

1169
00:59:17,658 --> 00:59:20,093
and will adjust the annotation
or route line

1170
00:59:20,127 --> 00:59:23,997
by placing it on top of the 3D terrain.

1171
00:59:24,031 --> 00:59:26,633
Animating the camera heading
by adding a slow pan

1172
00:59:26,667 --> 00:59:29,903
really brings the map view to life.

1173
00:59:29,937 --> 00:59:31,605
When a user switches into Dark Mode,

1174
00:59:31,638 --> 00:59:34,408
the map will adjust together
with the rest of the UI.

1175
00:59:34,441 --> 00:59:37,344
We're very excited to make
this immersive experience available

1176
00:59:37,377 --> 00:59:39,813
to developers with iOS 16.

1177
00:59:39,847 --> 00:59:43,984
In addition, we're also bringing another
popular Apple Maps feature to MapKit,

1178
00:59:44,017 --> 00:59:45,619
Look Around,

1179
00:59:45,652 --> 00:59:49,122
which is a great way
to explore the world at ground level,

1180
00:59:49,156 --> 00:59:52,559
with high resolution 3D photography
and smooth animations.

1181
00:59:52,593 --> 00:59:55,462
Users can simply tap
to move down the street.

1182
00:59:57,164 --> 01:00:00,067
I can add a static Look Around preview
just below the map

1183
01:00:00,100 --> 01:00:03,770
by dropping in a View Controller
and specifying a MapItem.

1184
01:00:03,804 --> 01:00:07,407
The Look Around view automatically frames
the location correctly.

1185
01:00:07,441 --> 01:00:09,776
When a user taps on the preview,
I can choose to provide

1186
01:00:09,810 --> 01:00:11,678
a full screen Look Around view,

1187
01:00:11,712 --> 01:00:13,647
where users can see the address,

1188
01:00:13,680 --> 01:00:15,516
the date the imagery was collected,

1189
01:00:15,549 --> 01:00:17,751
and they can tap to move around freely

1190
01:00:17,784 --> 01:00:20,587
to get a better understanding
of their surroundings.

1191
01:00:20,621 --> 01:00:23,390
There's one more new,
highly-requested capability

1192
01:00:23,423 --> 01:00:26,193
we're introducing to MapKit in iOS 16–

1193
01:00:26,226 --> 01:00:28,462
Apple Maps Server APIs.

1194
01:00:28,495 --> 01:00:30,330
Maps Server APIs are RESTful

1195
01:00:30,364 --> 01:00:33,534
and support four of the most used
functions of MapKit:

1196
01:00:33,567 --> 01:00:36,703
Geocode,
which turns a lat/long into an address;

1197
01:00:36,737 --> 01:00:39,039
Reverse Geocode,
which does the opposite–

1198
01:00:39,072 --> 01:00:41,775
it turns an address into GPS coordinates;

1199
01:00:41,808 --> 01:00:44,278
Search;
and Estimated Times of Arrival.

1200
01:00:44,311 --> 01:00:47,080
Our new Maps Server APIs
are a great way

1201
01:00:47,114 --> 01:00:51,552
to make your own backend services richer
and more performant.

1202
01:00:51,585 --> 01:00:53,887
Of course,
MapKit is built from the ground up

1203
01:00:53,921 --> 01:00:56,156
on the same foundation of privacy
as Apple Maps,

1204
01:00:56,190 --> 01:00:59,393
and does not associate users' data
with their identity

1205
01:00:59,426 --> 01:01:02,062
or keep a history of where they've been.

1206
01:01:02,095 --> 01:01:05,666
And that's a quick look at
what's new with MapKit in iOS 16.

1207
01:01:05,699 --> 01:01:09,102
Now for the weather, or at least
how you can build it into your app,

1208
01:01:09,136 --> 01:01:10,804
here's Novall.

1209
01:01:10,838 --> 01:01:15,142
Novall Khan: We announced today that we're
bringing the Weather app to iPad and Mac,

1210
01:01:15,175 --> 01:01:17,544
and introducing powerful new features,

1211
01:01:17,578 --> 01:01:21,248
including severe weather notifications,
rich detail views,

1212
01:01:21,281 --> 01:01:25,185
and ten days of hourly temperature
and precipitation forecasts.

1213
01:01:25,219 --> 01:01:29,423
And there are all kinds of
other experiences across Apple devices

1214
01:01:29,456 --> 01:01:32,826
and platforms that get better because
of the weather data we provide–

1215
01:01:32,860 --> 01:01:35,462
from asking Siri for today's forecast,

1216
01:01:35,495 --> 01:01:38,398
to rerouting navigation around flooding.

1217
01:01:38,432 --> 01:01:42,202
All of that is built on
our Apple Weather service.

1218
01:01:42,236 --> 01:01:45,539
Apple Weather delivers
a world-class global weather forecast

1219
01:01:45,572 --> 01:01:48,208
using high-resolution
meteorological models

1220
01:01:48,242 --> 01:01:51,078
combined with machine learning
and prediction algorithms.

1221
01:01:51,111 --> 01:01:53,614
Apple Weather provides current weather,

1222
01:01:53,647 --> 01:01:56,683
10-day hourly forecasts, daily forecasts,

1223
01:01:56,717 --> 01:02:00,521
and historical weather
so you can evaluate trends in data.

1224
01:02:00,554 --> 01:02:03,257
Severe weather alerts
and minute-by-minute precipitation

1225
01:02:03,290 --> 01:02:07,027
are also available
for select countries around the world.

1226
01:02:07,060 --> 01:02:10,497
Forecasts feature 10 days
of hour-by-hour temperature,

1227
01:02:10,531 --> 01:02:13,166
precipitation, UV index forecasts,

1228
01:02:13,200 --> 01:02:14,535
and much more.

1229
01:02:15,269 --> 01:02:19,339
And all of this data is available to you
through WeatherKit.

1230
01:02:19,373 --> 01:02:23,377
WeatherKit is a native Swift API
for all Apple platforms,

1231
01:02:23,410 --> 01:02:25,779
and a REST API you can use from anywhere.

1232
01:02:25,812 --> 01:02:29,616
These APIs deliver accurate,
hyperlocal weather forecasts,

1233
01:02:29,650 --> 01:02:33,954
to help your users stay safe,
informed, and prepared.

1234
01:02:33,987 --> 01:02:36,356
Let me show you how easy it is
to get weather information

1235
01:02:36,390 --> 01:02:39,760
through WeatherKit's great Swift API
in a quick demo.

1236
01:02:39,793 --> 01:02:42,029
Let's revisit our Food Truck app.

1237
01:02:42,062 --> 01:02:44,398
To make sure my customers
don't get caught in the rain,

1238
01:02:44,431 --> 01:02:48,135
my app is set up to recommend
a parking spot with clear skies.

1239
01:02:48,168 --> 01:02:50,637
Let me show you how I can get the weather.

1240
01:02:50,671 --> 01:02:53,407
Here I have a list of safe parking spots.

1241
01:02:53,440 --> 01:02:56,276
I've already added the WeatherKit
capability in Xcode,

1242
01:02:56,310 --> 01:02:58,712
and all it takes is a few lines of code.

1243
01:02:58,745 --> 01:03:01,815
With Swift Concurrency,
requesting weather is simple.

1244
01:03:01,849 --> 01:03:06,186
We call weather(for:) on WeatherService,
and pass in a location.

1245
01:03:06,220 --> 01:03:11,558
Then I can get the relevant data
I need for my app, like condition,

1246
01:03:11,592 --> 01:03:14,494
precipitation,

1247
01:03:14,528 --> 01:03:16,363
and cloud cover.

1248
01:03:18,098 --> 01:03:21,235
Now that I have the data I need
for each of my parking spots,

1249
01:03:21,268 --> 01:03:22,536
when I run my app,

1250
01:03:22,569 --> 01:03:26,907
my custom view has updated to
recommend a location with clear skies.

1251
01:03:28,675 --> 01:03:30,944
There are all kinds of ways
you can use weather data

1252
01:03:30,978 --> 01:03:33,881
to make the experiences
in your apps better.

1253
01:03:33,914 --> 01:03:36,783
You might use weather forecasts
to help you with inventory,

1254
01:03:36,817 --> 01:03:38,485
predicting that
your ice-cream filled donuts

1255
01:03:38,519 --> 01:03:40,754
are going to be a popular order
on a hot day,

1256
01:03:40,787 --> 01:03:43,290
so you should stock up on ice cream.

1257
01:03:43,323 --> 01:03:45,459
That's all it takes
to get the weather for our food truck,

1258
01:03:45,492 --> 01:03:48,762
and there's so much more
to uncover with WeatherKit.

1259
01:03:48,795 --> 01:03:51,131
In keeping with Apple's commitment
to privacy,

1260
01:03:51,164 --> 01:03:54,368
location is used
only to provide weather forecasts,

1261
01:03:54,401 --> 01:03:57,671
is not associated with
any personally identifying information,

1262
01:03:57,704 --> 01:04:00,541
and is never shared or sold.

1263
01:04:00,574 --> 01:04:03,677
Privacy is a shared responsibility,
and through WeatherKit,

1264
01:04:03,710 --> 01:04:08,248
you can get accurate weather data
while protecting user privacy.

1265
01:04:08,282 --> 01:04:11,418
Because we want to make it easy for you
to get started with WeatherKit,

1266
01:04:11,451 --> 01:04:15,889
we're including 500,000
weather(for:location) API calls per month

1267
01:04:15,923 --> 01:04:18,525
in your Apple Developer Program
membership.

1268
01:04:18,559 --> 01:04:22,262
Those of you who need more will be able
to purchase additional tiers of service

1269
01:04:22,296 --> 01:04:24,831
right in the developer app,
starting this fall.

1270
01:04:24,865 --> 01:04:28,969
So that's WeatherKit,
accurate, hyperlocal weather forecasts

1271
01:04:29,002 --> 01:04:31,071
powered by the Apple Weather service.

1272
01:04:31,104 --> 01:04:35,809
We're starting with a beta,
and it's available now on all platforms.

1273
01:04:35,843 --> 01:04:40,080
There are so many creative ways
that you can use WeatherKit in your apps.

1274
01:04:40,113 --> 01:04:42,216
And now here's Ryan
to give us some perspective

1275
01:04:42,249 --> 01:04:44,518
on what your apps can see with Live Text.

1276
01:04:44,551 --> 01:04:47,221
Ryan Dixon:
Our users are loving Live Text,

1277
01:04:47,254 --> 01:04:48,689
and we have heard from many of you

1278
01:04:48,722 --> 01:04:50,924
that you want to bring it
to your apps too.

1279
01:04:50,958 --> 01:04:53,293
So this year,
we are expanding VisionKit

1280
01:04:53,327 --> 01:04:56,496
with two new APIs
that will allow you to do just that.

1281
01:04:57,798 --> 01:05:01,869
The Live Text API unlocks the ability
to analyze image content,

1282
01:05:01,902 --> 01:05:04,538
allowing users to interact with text
and QR codes

1283
01:05:04,571 --> 01:05:07,541
found in photos and paused video frames,

1284
01:05:07,574 --> 01:05:08,942
and it provides quick actions

1285
01:05:08,976 --> 01:05:11,011
so your users are just a tap away

1286
01:05:11,044 --> 01:05:13,547
from taking action on relevant data.

1287
01:05:13,580 --> 01:05:15,916
It's great for any app
that displays visual media,

1288
01:05:15,949 --> 01:05:19,553
like Apollo for Reddit or Vimeo.

1289
01:05:19,586 --> 01:05:23,924
And the Data Scanner API unlocks
the ability to analyze a live camera feed.

1290
01:05:23,957 --> 01:05:27,861
It dramatically simplifies text
and barcode ingestion for users.

1291
01:05:27,895 --> 01:05:31,498
All you need to do
is add any overlays or custom controls

1292
01:05:31,532 --> 01:05:35,335
that tailor the live camera experience
to the needs of your app.

1293
01:05:35,369 --> 01:05:39,306
This is especially useful for
consumer apps that rely on QR codes

1294
01:05:39,339 --> 01:05:42,709
or enterprise apps built for
back-of-warehouse inventory management,

1295
01:05:42,743 --> 01:05:44,378
pick-and pack delivery services,

1296
01:05:44,411 --> 01:05:45,846
and point of sale kiosks.

1297
01:05:46,713 --> 01:05:49,149
Both the Live Text and Data Scanner APIs

1298
01:05:49,183 --> 01:05:51,818
support automatic detection
of nine languages,

1299
01:05:51,852 --> 01:05:54,821
including this year's additions
of Japanese and Korean.

1300
01:05:55,822 --> 01:05:59,459
These VisionKit APIs will bring years
of computer vision innovation

1301
01:05:59,493 --> 01:06:02,563
to your app with just a few lines of code.

1302
01:06:02,596 --> 01:06:04,598
Here's Jenny to show you how.

1303
01:06:04,631 --> 01:06:08,101
Jenny Chen: To show you a demo, we're back
to our trusty pop-up Food Truck app.

1304
01:06:08,135 --> 01:06:11,638
We're doing a promotion where if
users post a picture to a social channel

1305
01:06:11,672 --> 01:06:15,375
holding a sign up with the hashtag
#freedonut and their address on the app,

1306
01:06:15,409 --> 01:06:18,378
we'll drive to their address
and deliver a free donut to them.

1307
01:06:18,412 --> 01:06:20,314
We'll head to our social donut feed.

1308
01:06:20,347 --> 01:06:23,584
We want to add Live Text to the images
so that drivers can extract the text

1309
01:06:23,617 --> 01:06:25,819
to get the addresses for delivery.

1310
01:06:26,620 --> 01:06:29,389
Here's where the new Live Text APIs
play in.

1311
01:06:29,423 --> 01:06:32,492
I can easily add an ImageInteraction
on top of my view,

1312
01:06:32,526 --> 01:06:36,063
and that will add the Live Text button
with quick action support to it.

1313
01:06:36,096 --> 01:06:39,299
While the Live Text button
normally sits on the bottom right,

1314
01:06:39,333 --> 01:06:41,568
I already have a heart button in my app,

1315
01:06:41,602 --> 01:06:44,404
so I can adjust the placement
using custom insets.

1316
01:06:44,438 --> 01:06:48,442
I can also set the button configuration
to customize the style of the button

1317
01:06:48,475 --> 01:06:50,744
so that it matches my app better.

1318
01:06:50,777 --> 01:06:55,015
Now that I've added it in,
I can tap the Live Text button,

1319
01:06:55,048 --> 01:06:56,483
select the text,

1320
01:06:56,517 --> 01:06:59,086
or use quick actions
to easily grab the address.

1321
01:07:00,654 --> 01:07:03,824
I love that users don't have to learn
a new interaction model,

1322
01:07:03,857 --> 01:07:08,462
as it provides the same ease of use
with the Live Text experience.

1323
01:07:08,495 --> 01:07:10,597
The UI is consistent and familiar.

1324
01:07:10,631 --> 01:07:12,666
It feels integrated with the OS,

1325
01:07:12,699 --> 01:07:16,670
but I can still adjust the placement
even when I have my own custom UI.

1326
01:07:17,404 --> 01:07:19,439
Of course, like any good delivery app,

1327
01:07:19,473 --> 01:07:22,643
we also want to provide
the best service to our customers

1328
01:07:22,676 --> 01:07:25,646
and make sure
we're giving people the right donuts.

1329
01:07:25,679 --> 01:07:29,149
So we track our donut orders via QR code.

1330
01:07:29,183 --> 01:07:33,587
Using the new Data Scanner APIs,
I can easily add that as the first step

1331
01:07:33,620 --> 01:07:36,089
of any customer interaction.

1332
01:07:36,123 --> 01:07:38,192
Right now,
that button doesn't do anything,

1333
01:07:38,225 --> 01:07:41,261
but I can easily instantiate
a new DataScanner object

1334
01:07:41,295 --> 01:07:44,398
that looks for text, QR codes, or barcodes

1335
01:07:44,431 --> 01:07:46,633
that I can then import into my app.

1336
01:07:46,667 --> 01:07:49,336
With just a few lines of code,
I can bring up the camera,

1337
01:07:49,369 --> 01:07:53,540
specify that I want QR codes,
and startScanning!

1338
01:07:53,574 --> 01:07:55,709
When the driver taps on the QR code,

1339
01:07:55,742 --> 01:07:58,178
I want to show that the scan is a success.

1340
01:07:58,212 --> 01:08:00,314
I'll add in the delegate handler
in Xcode...

1341
01:08:03,684 --> 01:08:06,019
...and on tap, show an alert to the user

1342
01:08:06,053 --> 01:08:07,521
that the scan was a success

1343
01:08:07,554 --> 01:08:10,424
so that I can go ahead
and get the donut order started.

1344
01:08:10,457 --> 01:08:14,394
Now when I run the app,
this brings up a view controller

1345
01:08:14,428 --> 01:08:17,097
with the camera view,
and I can see the guidance

1346
01:08:17,130 --> 01:08:20,367
and the reticle view
highlighting the QR code.

1347
01:08:20,400 --> 01:08:23,737
When I tap on the QR code,
I can see my scan was a success

1348
01:08:23,770 --> 01:08:26,139
and the donut order is confirmed.

1349
01:08:26,173 --> 01:08:30,611
And with that,
my #freedonut delivery is on its way.

1350
01:08:30,644 --> 01:08:34,615
With VisionKit,
the new Live Text and Data Scanner APIs

1351
01:08:34,648 --> 01:08:39,086
easily allow you to bring these
powerful vision capabilities to your app.

1352
01:08:39,119 --> 01:08:41,455
And now, back to Susan.

1353
01:08:41,488 --> 01:08:44,892
Susan: This is an exciting time
to be building apps.

1354
01:08:44,925 --> 01:08:49,396
Xcode Cloud is now ready
to help you build better apps faster.

1355
01:08:49,429 --> 01:08:52,432
With Swift and SwiftUI,
it's easier than ever

1356
01:08:52,466 --> 01:08:57,738
to transform your ideas into apps
that work across Apple platforms.

1357
01:08:57,771 --> 01:09:00,474
There are cool new ways for your apps
to bring your ideas

1358
01:09:00,507 --> 01:09:02,943
deeper into the system experience.

1359
01:09:02,976 --> 01:09:05,045
Lock Screen widgets and Live Activities

1360
01:09:05,078 --> 01:09:07,648
bring your app to the Lock Screen.

1361
01:09:07,681 --> 01:09:10,417
Messages Collaboration
makes it incredibly easy

1362
01:09:10,450 --> 01:09:13,520
for your users to connect and collaborate.

1363
01:09:13,554 --> 01:09:17,958
And App Intents
help integrate your app with Siri.

1364
01:09:17,991 --> 01:09:19,993
There are entirely new APIs

1365
01:09:20,027 --> 01:09:22,529
and major updates to existing APIs,

1366
01:09:22,563 --> 01:09:27,167
like WeatherKit, MapKit,
Live Text, and Metal.

1367
01:09:27,201 --> 01:09:29,036
And that's not the end of the story.

1368
01:09:29,069 --> 01:09:32,239
It's another big WWDC this year,

1369
01:09:32,272 --> 01:09:34,408
with 175 sessions,

1370
01:09:34,441 --> 01:09:39,179
hundreds of labs, and Digital Lounge
activities running all week.

1371
01:09:39,213 --> 01:09:41,481
We can't wait to connect with you
this week,

1372
01:09:41,515 --> 01:09:44,685
and more importantly,
this week is for you.

1373
01:09:44,718 --> 01:09:47,588
We're eager to see what you create next.

1374
01:09:47,621 --> 01:09:49,256
Thank you!

1375
01:09:49,289 --> 01:09:57,297
♪ ♪

1376
01:10:06,340 --> 01:10:14,348
.

