1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,676 --> 00:00:13,514
Alex: Hello, my name is Alex,
and I work on Developer Tools.

3
00:00:13,547 --> 00:00:20,587
Today I want to talk to you about the new
C++ 20 features supported in Xcode 14.

4
00:00:20,621 --> 00:00:26,326
I will specifically focus on
how C++ 20 concepts simplify

5
00:00:26,360 --> 00:00:30,931
and improve the type safety
of generic C++ code.

6
00:00:30,964 --> 00:00:33,834
I will demonstrate how to use concepts

7
00:00:33,867 --> 00:00:37,871
and will explain how to create
your own concepts as well.

8
00:00:37,905 --> 00:00:43,243
I will end the talk by listing several
other new C++20 features supported

9
00:00:43,277 --> 00:00:47,414
in Xcode, and will touch
on how some of them can be used

10
00:00:47,447 --> 00:00:51,251
to improve the performance
of your C++ projects

11
00:00:51,285 --> 00:00:54,588
through the power
of compile time code evaluation.

12
00:00:55,689 --> 00:01:00,394
Before diving into C++ concepts,
let's first go over a quick overview

13
00:01:00,427 --> 00:01:03,697
of how to write generic code in C++.

14
00:01:03,730 --> 00:01:08,268
Let's say I want to write a function
that checks if a number is odd.

15
00:01:08,302 --> 00:01:11,638
I can write a function
that takes in an 'int' parameter,

16
00:01:11,672 --> 00:01:16,844
and it would work with any value
that can be represented by the 'int' type.

17
00:01:16,877 --> 00:01:22,850
What would happen if I pass in
a 64 bit unsigned integer value to it?

18
00:01:22,883 --> 00:01:27,821
A concrete function like this one does
not behave correctly with 64 bit values,

19
00:01:27,855 --> 00:01:31,925
as they get truncated
to fit into the 'int' type.

20
00:01:31,959 --> 00:01:36,330
To fix this,
I can make 'isOdd' a function template.

21
00:01:36,363 --> 00:01:38,365
Now that I have a function template,

22
00:01:38,398 --> 00:01:42,903
I can pass in the 64 bit
unsigned integer value to it.

23
00:01:42,936 --> 00:01:47,808
The compiler will now automatically
generate a specialization of 'isOdd'

24
00:01:47,841 --> 00:01:53,113
that works correctly
with the 'uint64_t' type.

25
00:01:53,146 --> 00:01:56,783
This is really useful as it means
I don't have to write two versions

26
00:01:56,817 --> 00:02:00,754
of 'isOdd'
that operate on two different types.

27
00:02:00,787 --> 00:02:05,592
You can use C++ templates
to write generic functions like 'isOdd',

28
00:02:05,626 --> 00:02:08,729
and generic container classes as well.

29
00:02:08,762 --> 00:02:12,099
Let's take a look at how
'isOdd' can be used.

30
00:02:12,132 --> 00:02:18,872
This function is tested with several
test cases that I added in my test file.

31
00:02:18,906 --> 00:02:21,909
Unfortunately, I have made a mistake
in one of my tests.

32
00:02:21,942 --> 00:02:24,178
The compiler caught the mistake,

33
00:02:24,211 --> 00:02:27,047
but instead of pointing
to where I made the mistake,

34
00:02:27,080 --> 00:02:31,852
the compiler shows an error
inside the 'isOdd' template.

35
00:02:31,885 --> 00:02:37,658
It looks like I made a typo and wrote
out '1.1' in my test instead of '11'.

36
00:02:37,691 --> 00:02:41,728
Because of that, the compiler generates
a specialization of 'isOdd'

37
00:02:41,762 --> 00:02:44,131
that takes in a 'double' type.

38
00:02:44,164 --> 00:02:47,034
Unfortunately,
it took me some time to find this typo

39
00:02:47,067 --> 00:02:50,204
as Xcode didn't point me
to the specific location

40
00:02:50,237 --> 00:02:53,473
where 'isOdd' was invoked
with incorrect type.

41
00:02:55,609 --> 00:03:00,480
Can the language and the compiler
help me find mistakes like this faster?

42
00:03:00,514 --> 00:03:02,716
Well, in the current example,

43
00:03:02,749 --> 00:03:06,153
the requirements for what types
are allowed into 'isOdd'

44
00:03:06,186 --> 00:03:09,022
are not specified explicitly.

45
00:03:09,056 --> 00:03:13,560
There's only a documentation comment
that states that I must call isOdd

46
00:03:13,594 --> 00:03:16,630
using integer types.

47
00:03:16,663 --> 00:03:20,634
Prior to C++20,
C++ programmers did not have a good way

48
00:03:20,667 --> 00:03:25,472
to specify template requirements
when writing generic C++ code.

49
00:03:25,506 --> 00:03:28,876
They often had to resort
to documentation comments,

50
00:03:28,909 --> 00:03:30,844
specific parameter names,

51
00:03:30,878 --> 00:03:33,080
or complicated enable_if checks

52
00:03:33,113 --> 00:03:35,883
when specifying template requirements.

53
00:03:35,916 --> 00:03:37,751
Well, as you might've heard,

54
00:03:37,784 --> 00:03:42,856
C++ 20 introduces
a new C++ feature called concepts.

55
00:03:42,890 --> 00:03:49,696
You can use concepts to validate template
requirements in your generic C++ code.

56
00:03:49,730 --> 00:03:53,734
Let's take a look at how concepts
can help me validate the types

57
00:03:53,767 --> 00:03:56,170
that can be passed into 'isOdd'.

58
00:03:56,203 --> 00:04:00,908
First, let's go back
to the declaration of 'isOdd'.

59
00:04:00,941 --> 00:04:03,210
Currently, I use the 'class' keyword

60
00:04:03,243 --> 00:04:09,616
to specify that type ‘T’ that's used by
this template can be any type.

61
00:04:09,650 --> 00:04:15,022
C++ 20 allows me to use a concept
instead of the 'class' keyword

62
00:04:15,055 --> 00:04:19,927
to restrict the set of types
that this template can be used with.

63
00:04:19,960 --> 00:04:24,131
I can use the 'integral' concept
provided by the standard library

64
00:04:24,164 --> 00:04:30,404
to restrict this 'isOdd' function template
only to the built-in integer types.

65
00:04:30,437 --> 00:04:35,075
The compiler will not even try
to specialize this function template

66
00:04:35,108 --> 00:04:39,580
when T does not satisfy this concept.

67
00:04:39,613 --> 00:04:43,951
The integral concept is declared
in the C++ standard library.

68
00:04:43,984 --> 00:04:48,956
So I need to include the concepts
header to use it in my code.

69
00:04:48,989 --> 00:04:52,759
Now that I added an 'integral'
requirement to the type _T_

70
00:04:52,793 --> 00:04:56,964
in the 'isOdd' function template,
the compiler is able to provide

71
00:04:56,997 --> 00:05:00,501
a much clearer diagnostic
that points directly

72
00:05:00,534 --> 00:05:04,171
at where I made the mistake in my tests.

73
00:05:04,204 --> 00:05:07,541
Turns out, '1.1' is a double,

74
00:05:07,574 --> 00:05:11,912
and therefore, it does not satisfy
the 'integral' concept.

75
00:05:11,945 --> 00:05:17,050
The compiler is able to explain this to me
with a clear error message

76
00:05:17,084 --> 00:05:22,389
that helps me find and fix this typo
much quicker than before.

77
00:05:22,422 --> 00:05:24,892
In addition to helping me fix the bug,

78
00:05:24,925 --> 00:05:27,895
constraining the type passed to 'isOdd'

79
00:05:27,928 --> 00:05:30,931
gives me the peace of mind
that all the test cases

80
00:05:30,964 --> 00:05:35,502
that I have for is 'isOdd'
work only with integer types,

81
00:05:35,536 --> 00:05:41,108
and that they're actually testing
the intended behavior of the algorithm.

82
00:05:41,141 --> 00:05:44,178
You can use concepts
to declare the intent

83
00:05:44,211 --> 00:05:48,649
for which types your templates
are meant to be used with.

84
00:05:48,682 --> 00:05:51,852
The compiler will then validate
the type requirements

85
00:05:51,885 --> 00:05:55,355
before your templates are specialized.

86
00:05:55,389 --> 00:05:58,625
Let's take a closer look
at how concepts can be used

87
00:05:58,659 --> 00:06:04,665
and which core concepts are provided
by the C++ standard library.

88
00:06:04,698 --> 00:06:08,836
The C++ standard library
provides a concepts library.

89
00:06:08,869 --> 00:06:11,905
It implements a set
of core language concepts

90
00:06:11,939 --> 00:06:16,476
that you can use to validate
the core behavior of a type.

91
00:06:16,510 --> 00:06:21,582
You can access this library by including
the concepts header in your code.

92
00:06:22,950 --> 00:06:26,119
I've already shown
how I can use the 'integral' concept

93
00:06:26,153 --> 00:06:27,988
in my earlier example.

94
00:06:28,021 --> 00:06:33,126
Now, let's take a look at the other
concepts provided by this library.

95
00:06:33,160 --> 00:06:37,531
This library provides a number
of useful core language concepts,

96
00:06:37,564 --> 00:06:42,202
like concepts that test
if a type is one of the built-in types.

97
00:06:42,236 --> 00:06:45,706
For instance,
the 'floating_point' concept is satisfied

98
00:06:45,739 --> 00:06:48,809
by built-in types
like 'float' and 'double'.

99
00:06:48,842 --> 00:06:54,314
The 'static_assert' shown here
validates that this is indeed the case.

100
00:06:54,348 --> 00:06:57,885
It also provides
a lot of other useful core concepts

101
00:06:57,918 --> 00:07:00,521
that check if types are constructible,

102
00:07:00,554 --> 00:07:02,923
destructible, convertible,

103
00:07:02,956 --> 00:07:05,959
or are they the same as another type.

104
00:07:05,993 --> 00:07:09,129
For instance,
the 'convertible_to' concept tests

105
00:07:09,162 --> 00:07:12,499
if a type can be converted
to another type.

106
00:07:12,533 --> 00:07:16,537
and the 'move_constructible' concept
is satisfied by types

107
00:07:16,570 --> 00:07:21,742
that can be constructed directly
from another value of the same type.

108
00:07:21,775 --> 00:07:25,479
This library also provides
several comparison concepts

109
00:07:25,512 --> 00:07:30,284
that test if types can be compared
to other types.

110
00:07:30,317 --> 00:07:34,955
For instance, the 'equality_comparable'
concept is satisfied by types

111
00:07:34,988 --> 00:07:41,128
that have a valid '==' operator
that works with a value of the same type.

112
00:07:42,262 --> 00:07:45,399
In addition to concepts
mentioned on this slide,

113
00:07:45,432 --> 00:07:49,636
this library provides numerous
other core language concepts.

114
00:07:49,670 --> 00:07:54,908
It also provides concepts that test
if a type can be moved or copied.

115
00:07:54,942 --> 00:07:57,811
In addition to that,
it also provides concepts

116
00:07:57,845 --> 00:08:01,014
that check if a type
is some callable object.

117
00:08:02,482 --> 00:08:05,452
Now that we've looked over
the concepts provided to us

118
00:08:05,485 --> 00:08:07,888
by the C++ standard library,

119
00:08:07,921 --> 00:08:12,726
let's take a look at how concepts
can be used to constrain templates.

120
00:08:12,759 --> 00:08:17,297
Like I've shown earlier, you can use
a concept instead of the class keyword

121
00:08:17,331 --> 00:08:22,469
in a template to restrict which types
are allowed for this template.

122
00:08:22,503 --> 00:08:25,906
In addition to that,
you can use a 'requires' clause

123
00:08:25,939 --> 00:08:31,945
in a template declaration if you ever need
to constrain a type to multiple concepts.

124
00:08:31,979 --> 00:08:36,450
Let's take a look at a slightly different
example to see how it can be done.

125
00:08:37,484 --> 00:08:41,622
Here I have
'isDefaultValue' function template.

126
00:08:41,655 --> 00:08:47,294
It returns true if the given value
is equal to the default value of its type.

127
00:08:47,327 --> 00:08:51,064
I can use two concepts from
the standard library to test

128
00:08:51,098 --> 00:08:56,470
that this type supports these operations
before this template is specialized.

129
00:08:56,503 --> 00:09:00,040
I'm going to add the 'requires' clause
to restrict the set of types

130
00:09:00,073 --> 00:09:03,043
which are allowed
for this function template.

131
00:09:03,076 --> 00:09:06,647
Let's see which concepts from
the concepts library can help me

132
00:09:06,680 --> 00:09:08,715
validate the type here.

133
00:09:08,749 --> 00:09:14,721
First, the 'equality_comparable' concept
tests if _T_ can be compared

134
00:09:14,755 --> 00:09:18,225
to another value of the same type.

135
00:09:18,258 --> 00:09:23,697
Then, the 'default_constructible' concept
tests if _T_ is a type

136
00:09:23,730 --> 00:09:26,033
with a default constructor.

137
00:09:26,066 --> 00:09:29,369
The logical and operator between them
instructs the compiler

138
00:09:29,403 --> 00:09:32,105
to validate both concepts.

139
00:09:32,139 --> 00:09:36,677
This ensures that this function template
will only be specialized

140
00:09:36,710 --> 00:09:39,179
with supported types.

141
00:09:39,213 --> 00:09:43,350
Let's go over what we've learned
so far about concepts.

142
00:09:43,383 --> 00:09:46,320
You should use concepts to restrict
the types which are allowed

143
00:09:46,353 --> 00:09:48,655
to be used in your templates.

144
00:09:48,689 --> 00:09:51,892
The compiler will then be able
to show clearer diagnostics

145
00:09:51,925 --> 00:09:57,364
as the template won't have to be
specialized if a type mismatch occurs.

146
00:09:57,397 --> 00:10:00,501
You should reuse the concepts
from the concepts library

147
00:10:00,534 --> 00:10:03,871
if you need to validate
some core behavior of a type.

148
00:10:05,172 --> 00:10:08,141
You should add the 'requires' clause
to your templates

149
00:10:08,175 --> 00:10:12,379
when you need to test if types conform
to multiple requirements.

150
00:10:12,412 --> 00:10:17,618
We've now seen how to use concepts
in C++ programs.

151
00:10:17,651 --> 00:10:20,888
C++ allows us to declare custom concepts

152
00:10:20,921 --> 00:10:24,691
that validate specific behavior of a type.

153
00:10:24,725 --> 00:10:27,661
Let's take a look
at how to create our own concepts

154
00:10:27,694 --> 00:10:31,498
that validate specific type behavior.

155
00:10:31,532 --> 00:10:33,867
Before we do that, though,
we need to take a look

156
00:10:33,901 --> 00:10:37,471
at how to identify
the behavioral requirements

157
00:10:37,504 --> 00:10:41,441
that must be validated
by the concept we want to declare.

158
00:10:41,475 --> 00:10:44,645
I'm going to use a new example
to illustrate

159
00:10:44,678 --> 00:10:49,316
how to validate specific type behavior
using concepts.

160
00:10:49,349 --> 00:10:52,219
Say I am building a C++ library

161
00:10:52,252 --> 00:10:56,456
that can render various two-dimensional
shapes to an image.

162
00:10:57,457 --> 00:11:00,827
I would like to support
various shapes in my library.

163
00:11:00,861 --> 00:11:05,766
I'm starting out with a circle shape,
as it's the simplest to render.

164
00:11:05,799 --> 00:11:09,903
I'm going to use a C++ class
to store its properties,

165
00:11:09,937 --> 00:11:12,706
like position and radius.

166
00:11:12,739 --> 00:11:14,675
In order to render the circle,

167
00:11:14,708 --> 00:11:18,745
I'm going to use a distance-function based
rendering algorithm

168
00:11:18,779 --> 00:11:23,016
that runs on each pixel
in the rendered image.

169
00:11:23,050 --> 00:11:27,454
This algorithm needs to compute
the distance to the shape's surface

170
00:11:27,487 --> 00:11:30,324
in order to render it.

171
00:11:30,357 --> 00:11:34,394
The 'getDistanceFrom' method
in the Circle class computes it.

172
00:11:34,428 --> 00:11:37,931
It returns a negative distance
inside the circle,

173
00:11:37,965 --> 00:11:42,069
and a positive distance
outside the circle.

174
00:11:42,102 --> 00:11:45,873
In addition to the circle,
I would like to render other shapes.

175
00:11:45,906 --> 00:11:49,943
For instance, by geometrically subtracting
one circle shape

176
00:11:49,977 --> 00:11:55,182
from another circle shape,
I can render a crescent shape as well.

177
00:11:55,215 --> 00:11:58,151
I'm going to represent shapes
like Crescent that I would like

178
00:11:58,185 --> 00:12:00,787
to render using classes as well.

179
00:12:00,821 --> 00:12:06,460
Each new shape class includes
the 'getDistanceFrom' method.

180
00:12:06,493 --> 00:12:09,296
After creating several shape classes,

181
00:12:09,329 --> 00:12:15,202
I now would like to try rendering these
shapes to verify their implementation.

182
00:12:15,235 --> 00:12:19,473
I have a couple of options for how
I can create the rendering function

183
00:12:19,506 --> 00:12:21,909
that works with any shape.

184
00:12:21,942 --> 00:12:24,578
I can create a class hierarchy
for the shapes,

185
00:12:24,611 --> 00:12:29,917
and use a virtual method to compute
the distance to the shape's surface.

186
00:12:29,950 --> 00:12:35,355
However, I'm going to use a function
template instead for performance reasons,

187
00:12:35,389 --> 00:12:38,025
as I want to avoid
the virtual call overhead

188
00:12:38,058 --> 00:12:43,597
as this function is going to be called
millions of times during rendering.

189
00:12:43,630 --> 00:12:47,935
This is why I created
this rendering function template.

190
00:12:47,968 --> 00:12:51,338
The computePixelColor function
takes in a shape value,

191
00:12:51,371 --> 00:12:55,275
and checks if the given pixel
is inside the shape.

192
00:12:55,309 --> 00:12:59,213
If it's inside,
it returns a plain white color.

193
00:12:59,246 --> 00:13:04,251
This now allows me to verify
that shapes can be filled in correctly.

194
00:13:05,485 --> 00:13:09,590
This function is a template,
which makes it work with any shape type,

195
00:13:09,623 --> 00:13:14,661
be it a circle, crescent,
or any other matching type.

196
00:13:14,695 --> 00:13:16,897
Even though a template works well here,

197
00:13:16,930 --> 00:13:19,800
I would like to use concepts
to constrain the type

198
00:13:19,833 --> 00:13:22,636
that can be passed to this function.

199
00:13:22,669 --> 00:13:25,506
Constraining the type
that's passed to this function

200
00:13:25,539 --> 00:13:32,112
will allow the compiler to produce clearer
diagnostics when a type mismatch occurs.

201
00:13:32,145 --> 00:13:36,283
In addition to that, constraining the type
that's passed to this function

202
00:13:36,316 --> 00:13:40,220
will also allow me to add
additional overloads of this function.

203
00:13:41,755 --> 00:13:46,360
In order to constrain the type,
I'm going to create a Shape concept.

204
00:13:46,393 --> 00:13:49,696
This concept
will validate the type's behavior,

205
00:13:49,730 --> 00:13:52,866
and will accept classes
like circle, crescent,

206
00:13:52,900 --> 00:13:57,137
and any other shape class
that I might want to add in the future.

207
00:13:57,171 --> 00:13:59,373
In order to create a concept like 'Shape',

208
00:13:59,406 --> 00:14:01,909
I first need to identify the requirements

209
00:14:01,942 --> 00:14:04,845
that must be validated by this concept.

210
00:14:04,878 --> 00:14:07,614
Let's see how this can be done.

211
00:14:07,648 --> 00:14:11,518
This function template uses type 'T'
as the generic type.

212
00:14:11,552 --> 00:14:16,957
An argument named 'shape' of type 'T'
is then passed to this function.

213
00:14:16,990 --> 00:14:20,260
The 'shape' argument is then used
inside the function,

214
00:14:20,294 --> 00:14:24,231
when I call
the 'getDistanceFrom' method on it.

215
00:14:24,264 --> 00:14:27,267
As you can see,
this is the only requirement

216
00:14:27,301 --> 00:14:29,770
I want to validate in my concept,

217
00:14:29,803 --> 00:14:34,341
as no other operations are being performed
on shape in this function.

218
00:14:35,242 --> 00:14:39,446
You can use the 'requires' expression
to test if a type behaves

219
00:14:39,479 --> 00:14:41,849
in a specific manner.

220
00:14:41,882 --> 00:14:46,854
Let's take a look at how I can use
'requires' to create the Shape concept.

221
00:14:46,887 --> 00:14:50,224
I need to provide a set of expressions
that test the behavior

222
00:14:50,257 --> 00:14:53,126
of a type inside the 'requires'.

223
00:14:53,160 --> 00:14:56,430
I already identified the call
to 'getDistanceFrom'

224
00:14:56,463 --> 00:14:59,066
as a single requirement I need to test,

225
00:14:59,099 --> 00:15:03,537
so now I can go ahead
and create the 'Shape' concept.

226
00:15:03,570 --> 00:15:07,407
I declared the shape concept
using the 'concept' keyword.

227
00:15:07,441 --> 00:15:13,847
I then added the 'requires' expression
to this concept to validate the type.

228
00:15:13,881 --> 00:15:17,317
I added an argument list
to the 'requires' expression.

229
00:15:17,351 --> 00:15:22,055
This argument list allows me
to declare a value 'shape' of type 'T'

230
00:15:22,089 --> 00:15:26,126
that I will then be testing
inside the 'requires'.

231
00:15:26,159 --> 00:15:31,832
You can use an argument list in a requires
expression to declare values of any type.

232
00:15:31,865 --> 00:15:36,670
You will then be able to use these values
inside the requires.

233
00:15:36,703 --> 00:15:40,541
The body of the 'requires' expression
contains a set of requirements

234
00:15:40,574 --> 00:15:44,811
that must pass
in order for this concept to be satisfied.

235
00:15:44,845 --> 00:15:48,549
The 'shape' concept has just
one simple expression requirement

236
00:15:48,582 --> 00:15:53,687
that checks whether a method call
to 'getDistanceFrom' is valid.

237
00:15:53,720 --> 00:15:57,991
This expression isn't actually
going to be executed in the program.

238
00:15:58,025 --> 00:16:02,829
It's only needed at compile time
to validate the type's behavior,

239
00:16:02,863 --> 00:16:06,600
and it's discarded after the validation.

240
00:16:06,633 --> 00:16:10,737
You can use expression requirements
to validate the type's behavior

241
00:16:10,771 --> 00:16:15,876
by testing if a particular expression
compiles or not.

242
00:16:15,909 --> 00:16:19,012
This particular expression
is not yet complete though,

243
00:16:19,046 --> 00:16:23,450
as we're missing the arguments
to the 'getDistanceFrom' method call.

244
00:16:23,483 --> 00:16:28,055
I know that I want this method
to take two values of type 'float',

245
00:16:28,088 --> 00:16:33,460
so I can use two floating point literals
to complete this expression.

246
00:16:33,493 --> 00:16:37,831
I am going to add an additional check
to test that 'getDistanceFrom' method

247
00:16:37,865 --> 00:16:39,900
returns a float value,

248
00:16:39,933 --> 00:16:45,806
as that's what is being assumed
by my generic code.

249
00:16:45,839 --> 00:16:48,442
I'm currently using a simple
expression requirement

250
00:16:48,475 --> 00:16:53,213
to test if the type has
the 'getDistanceFrom' method.

251
00:16:53,247 --> 00:16:57,851
However, I can use a compound requirement
instead of the expression requirement

252
00:16:57,885 --> 00:17:01,455
to test that it returns a float value.

253
00:17:01,488 --> 00:17:05,259
The arrow operator can follow
a compound requirement.

254
00:17:05,292 --> 00:17:08,695
The arrow operator expects a constraint
on its right hand side,

255
00:17:08,729 --> 00:17:13,400
so this is where I can use a standard
library concept like 'same_as'

256
00:17:13,433 --> 00:17:16,403
to validate that the call
to 'getDistanceFrom' method

257
00:17:16,436 --> 00:17:19,006
returns a float value.

258
00:17:19,039 --> 00:17:21,875
Now this concept looks ready to me.

259
00:17:23,610 --> 00:17:27,047
I can go ahead and use it
to constrain the types

260
00:17:27,080 --> 00:17:30,817
that can be passed
to my 'computePixelColor' function.

261
00:17:30,851 --> 00:17:33,420
Now my generic
'computePixelColor' function

262
00:17:33,453 --> 00:17:38,058
will only work with types
that satisfy the 'Shape' concept.

263
00:17:38,091 --> 00:17:42,095
This means that classes like
Circle and Crescent will be rendered

264
00:17:42,129 --> 00:17:45,666
using this particular generic
'computePixelColor' function,

265
00:17:45,699 --> 00:17:49,603
as both of these types
satisfy the 'Shape' concept.

266
00:17:52,005 --> 00:17:54,675
After seeing the plain shapes rendered,

267
00:17:54,708 --> 00:17:58,178
I would like to create a different version
of 'computePixelColor'

268
00:17:58,212 --> 00:18:01,882
that adds colors to some of my shapes.

269
00:18:01,915 --> 00:18:07,788
Let's say I want to add a colorful
GradientCircle class to my shape library.

270
00:18:07,821 --> 00:18:13,460
I now need a new function to compute
the pixel color in the image.

271
00:18:13,493 --> 00:18:17,064
C++20 allows me
to create multiple variants

272
00:18:17,097 --> 00:18:20,267
of the 'computePixelColor'
function template.

273
00:18:20,300 --> 00:18:24,705
Each variant must be constrained
using different concepts.

274
00:18:24,738 --> 00:18:27,708
I am going to create
a new GradientShape concept

275
00:18:27,741 --> 00:18:31,678
that will be satisfied
by classes like GradientCircle.

276
00:18:31,712 --> 00:18:36,149
This concept will then constrain
a new variant of 'computePixelColor'

277
00:18:36,183 --> 00:18:40,420
that only works
with shapes that have a gradient.

278
00:18:40,454 --> 00:18:44,091
This concept is implemented
using a 'requires' expression,

279
00:18:44,124 --> 00:18:46,493
just like the Shape concept.

280
00:18:46,527 --> 00:18:49,730
However, since I want GradientShape

281
00:18:49,763 --> 00:18:52,599
to satisfy the original Shape concept
as well,

282
00:18:52,633 --> 00:18:56,503
I include it as the first requirement
in the new concept.

283
00:18:56,537 --> 00:19:01,441
This ensures that a class
that satisfies the GradientShape concept

284
00:19:01,475 --> 00:19:03,944
also satisfies the Shape concept,

285
00:19:03,977 --> 00:19:07,381
which means I can still call
the 'getDistanceFrom' method

286
00:19:07,414 --> 00:19:10,384
for values of such class.

287
00:19:10,417 --> 00:19:14,188
I then use the logical and operator
and the 'requires' expression

288
00:19:14,221 --> 00:19:18,292
to ensure that the GradientShape
concept can only be satisfied

289
00:19:18,325 --> 00:19:22,996
by classes that have
the 'getGradientColor' method.

290
00:19:23,030 --> 00:19:25,933
Now that I have created
the GradientShape concept,

291
00:19:25,966 --> 00:19:31,872
I can go ahead and create
a new variant of 'computePixelColor'.

292
00:19:31,905 --> 00:19:36,143
This function template only works
with shape classes with a gradient,

293
00:19:36,176 --> 00:19:38,378
like the GradientCircle class,

294
00:19:38,412 --> 00:19:42,449
as it is constrained
by the GradientShape concept.

295
00:19:42,482 --> 00:19:44,785
Now that I have all the pieces in place,

296
00:19:44,818 --> 00:19:49,389
I can go ahead and try rendering a circle
with a gradient.

297
00:19:49,423 --> 00:19:52,359
Here I'm rendering a GradientCircle.

298
00:19:52,392 --> 00:19:55,629
Let's see which overload
of 'computePixelColor'

299
00:19:55,662 --> 00:19:59,166
the compiler is going to pick
inside the 'render' function.

300
00:20:00,701 --> 00:20:04,304
Even though GradientCircle can
be safely used with both variants

301
00:20:04,338 --> 00:20:09,109
of computePixelColor, the compiler picks
the overload that is constrained

302
00:20:09,142 --> 00:20:11,278
with the GradientShape concept

303
00:20:11,311 --> 00:20:15,215
as it's more specific
than the first overload.

304
00:20:15,249 --> 00:20:19,753
Because the compiler picks the most
matching overload of 'computePixelColor',

305
00:20:19,786 --> 00:20:24,558
I can see this beautiful gradient circle
rendered when I test my library.

306
00:20:24,591 --> 00:20:25,959
Amazing!

307
00:20:26,960 --> 00:20:31,365
Now let's go over what we've learned
about creating concepts.

308
00:20:32,766 --> 00:20:37,037
You can create concepts by identifying
the behavioral requirements

309
00:20:37,070 --> 00:20:40,240
in your existing generic code.

310
00:20:40,274 --> 00:20:43,377
You should use the requires expression
to create concepts

311
00:20:43,410 --> 00:20:46,713
to validate the behavior of types.

312
00:20:46,747 --> 00:20:50,384
You can also use concepts
to create more specific variants

313
00:20:50,417 --> 00:20:53,687
of generic functions and classes.

314
00:20:55,556 --> 00:21:00,961
We've now seen how to enhance
your generic C++ code with concepts.

315
00:21:00,994 --> 00:21:03,096
In addition to supporting concepts,

316
00:21:03,130 --> 00:21:09,336
Xcode 14 has improved its support
for other C++20 features as well.

317
00:21:09,369 --> 00:21:11,672
More specifically,
I would like to highlight

318
00:21:11,705 --> 00:21:18,212
the improved support for compile-time
C++ code evaluation in Xcode 14.

319
00:21:19,046 --> 00:21:21,849
Compile time code evaluation is useful

320
00:21:21,882 --> 00:21:24,985
as it can reduce the cost
of initialization

321
00:21:25,018 --> 00:21:28,355
for variables in your C++ code.

322
00:21:28,388 --> 00:21:31,091
This could help reduce
your app launch time

323
00:21:31,124 --> 00:21:33,560
if your app has a lot of C++ code

324
00:21:33,594 --> 00:21:38,298
that depends on
complex initialization sequences.

325
00:21:38,332 --> 00:21:41,301
In addition to that,
compile time code evaluation

326
00:21:41,335 --> 00:21:46,974
can help you validate constants
that require validation at compile time.

327
00:21:47,007 --> 00:21:52,179
This could help you catch bugs
before your code even runs.

328
00:21:52,212 --> 00:21:53,981
Let's take a look at an example

329
00:21:54,014 --> 00:21:58,318
to see how I can use compile time code
evaluation in C++.

330
00:21:59,353 --> 00:22:01,121
Here I have a snippet of code

331
00:22:01,154 --> 00:22:05,926
that initializes a color palette
in my shape rendering library.

332
00:22:05,959 --> 00:22:11,732
This library is then used in an iOS app
that renders the shapes to the display.

333
00:22:11,765 --> 00:22:15,435
Each color in the palette is initialized
by parsing a string literal

334
00:22:15,469 --> 00:22:18,906
with the HTML hex code of the color.

335
00:22:18,939 --> 00:22:23,810
Currently, the 'fromHexCode' function
needs to parse three string literals

336
00:22:23,844 --> 00:22:26,713
during the initialization of the array.

337
00:22:26,747 --> 00:22:30,584
Complicated constant initialization
operations like this one

338
00:22:30,617 --> 00:22:36,690
can have a measurable impact on the launch
time of my app if I have a lot of them.

339
00:22:36,723 --> 00:22:41,828
I can use compile-time code evaluation
to ensure that this array is initialized

340
00:22:41,862 --> 00:22:44,498
with constant color values instead.

341
00:22:44,531 --> 00:22:47,668
Let me show you can this can be done.

342
00:22:47,701 --> 00:22:53,674
The 'constexpr' keyword enables
compile-time code evaluation in C++.

343
00:22:53,707 --> 00:22:57,311
I must add it in several places
in my example

344
00:22:57,344 --> 00:23:02,282
in order to ensure
that palette is a constant color array.

345
00:23:02,316 --> 00:23:07,554
First, I need to add the 'constexpr'
keyword to the 'fromHexCode' function.

346
00:23:07,588 --> 00:23:10,891
The compiler will be now be able
to execute the code in this function

347
00:23:10,924 --> 00:23:16,463
at compile time when it's used
in a compile time initialization sequence.

348
00:23:16,496 --> 00:23:20,100
You should make your C++ functions
'constexpr' when you want them

349
00:23:20,133 --> 00:23:23,036
to be evaluatable at compile time.

350
00:23:23,070 --> 00:23:26,306
The compiler will let you know
if the code in such function

351
00:23:26,340 --> 00:23:30,277
cannot be evaluated at compile time
by showing an error

352
00:23:30,310 --> 00:23:34,181
when you use it in a 'constexpr'
initialization sequence.

353
00:23:34,214 --> 00:23:38,519
However, you can also examine
a function before adding 'constexpr'

354
00:23:38,552 --> 00:23:42,189
to see if it can be evaluated
at compile time.

355
00:23:42,222 --> 00:23:44,892
Let's take a peek into fromHexCode

356
00:23:44,925 --> 00:23:47,761
to see how to check
if a function like this one

357
00:23:47,794 --> 00:23:51,598
can be a good candidate
for compile time code evaluation.

358
00:23:51,632 --> 00:23:55,102
This function uses
a number of language constructs

359
00:23:55,135 --> 00:23:57,137
like if statements,

360
00:23:57,171 --> 00:24:02,709
and primitive operations like comparison
operators and arithmetic operators.

361
00:24:02,743 --> 00:24:07,347
All of these operations can be evaluated
at compile time.

362
00:24:07,381 --> 00:24:13,287
Also, this function makes several calls
to another function; hexToInt.

363
00:24:13,320 --> 00:24:17,591
I have already annotated
hexToInt function with 'constexpr',

364
00:24:17,624 --> 00:24:22,262
so calls to this function
can be evaluated at compile time.

365
00:24:22,296 --> 00:24:25,365
Overall, it looks like
fromHexCode contains code

366
00:24:25,399 --> 00:24:28,936
that the compiler should be able
to evaluate at compile time,

367
00:24:28,969 --> 00:24:34,808
so I think it's safe to proceed and use it
in a compile time initialization sequence.

368
00:24:34,842 --> 00:24:39,546
After making sure that fromHexCode
can be evaluated at compile time,

369
00:24:39,580 --> 00:24:42,082
I then need to add the 'constexpr' keyword

370
00:24:42,115 --> 00:24:45,552
to the 'colorPalette'
variable declaration.

371
00:24:45,586 --> 00:24:49,189
The compiler now guarantees
that it will evaluate

372
00:24:49,223 --> 00:24:54,428
the entire initialization sequence
for this array at compile time.

373
00:24:54,461 --> 00:24:58,432
More specifically,
the compiler will evaluate each call

374
00:24:58,465 --> 00:25:01,401
to the fromHexCode function.

375
00:25:01,435 --> 00:25:04,705
The evaluation will produce
a constant color value

376
00:25:04,738 --> 00:25:09,843
that will replace the original call to
the function in the palette's initializer.

377
00:25:09,877 --> 00:25:15,082
Since all the calls to fromHexCode
are now replaced by constant color values,

378
00:25:15,115 --> 00:25:19,786
the 'colorPalette' variable
is now guaranteed to be initialized

379
00:25:19,820 --> 00:25:24,491
by an array literal
that contains constant color values.

380
00:25:24,525 --> 00:25:28,295
This means that now my app
doesn't have to pay additional cost

381
00:25:28,328 --> 00:25:33,066
for parsing the color values
when this palette is initialized.

382
00:25:33,100 --> 00:25:35,969
This is great
for the launch time of my app,

383
00:25:36,003 --> 00:25:38,405
as it reduces the amount of work

384
00:25:38,438 --> 00:25:43,744
this C++ library
inside the app has to do at startup.

385
00:25:43,777 --> 00:25:46,780
You should make
your C++ variables 'constexpr'

386
00:25:46,813 --> 00:25:51,318
when you want to ensure that they are
initialized with constant values.

387
00:25:51,351 --> 00:25:56,557
Xcode 14 has actually greatly improved
its standard library support

388
00:25:56,590 --> 00:25:59,059
for compile time evaluation.

389
00:25:59,092 --> 00:26:01,828
This year we've added
the 'constexpr' support

390
00:26:01,862 --> 00:26:05,766
to several different
standard library types and algorithms,

391
00:26:05,799 --> 00:26:08,936
which can now be used during
compile-time code evaluation.

392
00:26:10,537 --> 00:26:14,274
In addition to that,
Xcode 14 has greatly improved

393
00:26:14,308 --> 00:26:17,711
its C++20 standard support.

394
00:26:17,744 --> 00:26:22,516
All of the features shown here
can now be used in C++ 20 mode.

395
00:26:23,584 --> 00:26:29,189
You should switch to C++ 20 mode today
if you haven't already done so.

396
00:26:29,223 --> 00:26:32,192
You can use
the "C++ Language Dialect" setting

397
00:26:32,226 --> 00:26:37,231
in your Xcode project
to upgrade to C++ 20.

398
00:26:37,264 --> 00:26:43,070
Switching to C++20 will let you use
features like concepts in your code.

399
00:26:43,103 --> 00:26:47,241
C++20 does not require
a minimum deployment target,

400
00:26:47,274 --> 00:26:50,544
so you can still ship your code
for the same OS version

401
00:26:50,577 --> 00:26:53,447
that you're currently targeting.

402
00:26:53,480 --> 00:26:56,717
Try C++20 today.

403
00:26:56,750 --> 00:26:57,851
Thank you!

404
00:26:57,885 --> 00:27:00,387
Enjoy the rest
of the developer's conference.

