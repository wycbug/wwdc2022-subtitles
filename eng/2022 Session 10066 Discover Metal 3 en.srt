1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,643 --> 00:00:11,812
Tarun Belagodu:
Hello and welcome to Metal 3.

3
00:00:11,845 --> 00:00:13,514
My name is Tarun Belagodu

4
00:00:13,547 --> 00:00:17,050
and I'll be sharing the latest
in Metal's evolution.

5
00:00:17,084 --> 00:00:19,520
First, let's start with the basics.

6
00:00:19,553 --> 00:00:23,991
Metal is Apple's low-overhead
graphics and compute API.

7
00:00:24,024 --> 00:00:27,160
It's designed to be the fastest
and most efficient way

8
00:00:27,194 --> 00:00:31,565
to drive the incredibly powerful GPUs
behind Apple products.

9
00:00:31,598 --> 00:00:34,101
It offers multi-threaded
and direct control

10
00:00:34,134 --> 00:00:36,270
over the commands sent to the GPU,

11
00:00:36,303 --> 00:00:40,874
a rich shading language that supports
explicit shader compilation,

12
00:00:40,908 --> 00:00:42,876
and deeply integrated tools

13
00:00:42,910 --> 00:00:47,214
to help debug and profile
complex applications and games.

14
00:00:48,916 --> 00:00:51,318
Since its introduction,
Metal has added

15
00:00:51,351 --> 00:00:53,921
many advanced graphics
and compute features,

16
00:00:53,954 --> 00:00:56,156
with a focus on GPU-driven rendering,

17
00:00:56,190 --> 00:00:58,926
machine learning, and ray tracing.

18
00:00:58,959 --> 00:01:02,329
Apple silicon paves the way
for incredible graphics performance

19
00:01:02,362 --> 00:01:05,132
and efficiency on every new Mac.

20
00:01:05,165 --> 00:01:08,035
And Metal unlocks these capabilities.

21
00:01:08,068 --> 00:01:13,273
This year, Metal is making a leap
to the next level with Metal 3.

22
00:01:15,342 --> 00:01:19,847
Metal 3 is a powerful set of new features
that enable even higher performance

23
00:01:19,880 --> 00:01:23,784
and rendering quality to help your apps
and games run faster

24
00:01:23,817 --> 00:01:25,586
and look amazing.

25
00:01:25,619 --> 00:01:27,921
Let's start with fast resource loading.

26
00:01:28,655 --> 00:01:32,359
Modern games and apps have demanding
asset loading requirements,

27
00:01:32,392 --> 00:01:37,297
and streaming many small asset requests
quickly from files to your Metal resources

28
00:01:37,331 --> 00:01:40,834
is often the key to high quality visuals.

29
00:01:40,868 --> 00:01:45,272
But existing storage APIs
are designed for large, bulk requests.

30
00:01:47,074 --> 00:01:51,478
Metal 3's fast resource loading
lets you request many small loads

31
00:01:51,512 --> 00:01:56,917
using the same explicit, multi-threaded
command model as graphics and compute.

32
00:01:56,950 --> 00:02:00,287
Each request is a command,
and many commands can be queued

33
00:02:00,320 --> 00:02:03,056
for asynchronous submission.

34
00:02:03,090 --> 00:02:07,895
It loads directly into your Metal buffers
and textures without additional steps,

35
00:02:07,928 --> 00:02:11,565
saving you both development effort
and transfer time.

36
00:02:11,598 --> 00:02:14,735
Fast resource loading also makes it easy
to coordinate

37
00:02:14,768 --> 00:02:18,005
between GPU operations
and loading operations,

38
00:02:18,038 --> 00:02:22,276
using the Metal synchronization primitives
that you already know.

39
00:02:22,309 --> 00:02:26,380
Texture streaming systems
really benefit from fast resource loading.

40
00:02:26,413 --> 00:02:27,915
Let's look at an example.

41
00:02:29,082 --> 00:02:34,488
Metal Sparse Textures allow applications
to stream textures at a tile granularity.

42
00:02:34,521 --> 00:02:37,624
The texture streaming system
built on Metal sparse textures

43
00:02:37,658 --> 00:02:39,526
consists of four steps:

44
00:02:39,560 --> 00:02:44,464
First, decide what to load
based on feedback from the previous frame.

45
00:02:44,498 --> 00:02:48,202
Second, load tiles from file storage.

46
00:02:48,235 --> 00:02:52,840
Third, copy from your staging area
to your sparse textures.

47
00:02:52,873 --> 00:02:55,275
And finally, draw your frame.

48
00:02:56,977 --> 00:03:00,113
The longer it takes to load and copy
means the more time

49
00:03:00,147 --> 00:03:02,649
your app draws with lower quality.

50
00:03:04,451 --> 00:03:07,321
Fast resource loading
minimizes loading overhead

51
00:03:07,354 --> 00:03:10,991
and ensures the storage hardware has
enough requests in its queues

52
00:03:11,024 --> 00:03:12,960
to maximize throughput.

53
00:03:12,993 --> 00:03:16,263
This provides faster
and more consistent performance

54
00:03:16,296 --> 00:03:19,833
so that more time is spent
drawing at high quality.

55
00:03:22,269 --> 00:03:25,672
Fast resource loading will greatly
simplify the code you need to write

56
00:03:25,706 --> 00:03:28,876
to achieve high quality asset streaming.

57
00:03:28,909 --> 00:03:31,512
To learn more about fast resource loading,

58
00:03:31,545 --> 00:03:35,382
check out the "Load resources faster
with Metal 3" session.

59
00:03:36,350 --> 00:03:40,454
Next, let me tell you how
the new offline compilation workflow

60
00:03:40,487 --> 00:03:44,691
will help you reduce load times
and stutters in your apps.

61
00:03:44,725 --> 00:03:47,661
Shader binaries
are GPU-specific machine code

62
00:03:47,694 --> 00:03:50,597
that are traditionally generated
while the app is running

63
00:03:50,631 --> 00:03:53,734
as part of the Metal pipeline
creation process.

64
00:03:53,767 --> 00:03:56,603
Generating these binaries
is an expensive operation

65
00:03:56,637 --> 00:04:00,974
that is usually hidden behind
a loading screen during app launch.

66
00:04:01,008 --> 00:04:03,644
However, sometimes
they need to happen in-frame,

67
00:04:03,677 --> 00:04:06,847
which in turn causes frame rate stutters.

68
00:04:06,880 --> 00:04:09,116
These binaries are cached by Metal

69
00:04:09,149 --> 00:04:11,552
so that you don't pay the cost often,

70
00:04:11,585 --> 00:04:14,922
but their cost is still observed
on the app's first launch

71
00:04:14,955 --> 00:04:18,091
or whenever the binary is first needed.

72
00:04:18,125 --> 00:04:21,929
With offline compilation, you can
eliminate shader binary generation

73
00:04:21,962 --> 00:04:23,497
at run time.

74
00:04:25,299 --> 00:04:28,268
By moving binary generation
to project build time,

75
00:04:28,302 --> 00:04:33,006
you can dramatically reduce the time spent
creating Metal pipelines at load time,

76
00:04:33,040 --> 00:04:37,678
and reduce stutters in your app when
those pipelines are created just-in-time.

77
00:04:37,711 --> 00:04:41,048
Let's take a closer look at
what it means to reduce stutters.

78
00:04:42,049 --> 00:04:44,384
Here's an example of a game
that needs to create

79
00:04:44,418 --> 00:04:47,921
a Metal pipeline state object
during encoding.

80
00:04:47,955 --> 00:04:51,225
Since this is a pipeline
that Metal hasn't seen before,

81
00:04:51,258 --> 00:04:54,528
it generates the needed shader binary.

82
00:04:54,561 --> 00:04:58,265
This is a long operation that interrupts
encoding the rest of the frame,

83
00:04:58,298 --> 00:05:01,368
and causes the app
to miss its frame rate target.

84
00:05:01,401 --> 00:05:03,437
This only happens once,

85
00:05:03,470 --> 00:05:07,107
but it's enough for your users
to notice a frame stutter.

86
00:05:07,140 --> 00:05:11,545
In contrast, offline compilation
means the shader binary can be generated

87
00:05:11,578 --> 00:05:17,985
at build-time so that every pipeline state
creation is fast, and execution is smooth.

88
00:05:18,018 --> 00:05:22,656
Offline compilation can have a dramatic
effect on your app loading times too.

89
00:05:22,689 --> 00:05:24,424
Let's look at an example.

90
00:05:25,726 --> 00:05:28,829
Most apps create the majority
of Metal pipeline state objects

91
00:05:28,862 --> 00:05:31,098
in a dedicated loading phase.

92
00:05:31,131 --> 00:05:34,101
And shader binaries
are generated on first load.

93
00:05:34,134 --> 00:05:39,273
This can be a long wait for your users
if your app creates many such pipelines.

94
00:05:39,306 --> 00:05:42,309
With offline compilation,
shader binary generation can again

95
00:05:42,342 --> 00:05:46,213
be moved to project build time,
resulting in smaller load times

96
00:05:46,246 --> 00:05:49,550
and getting users
into your app more quickly.

97
00:05:50,184 --> 00:05:55,255
Offline compilation is a game changer
for apps with many complex pipelines.

98
00:05:55,289 --> 00:05:58,625
To learn more about offline compilation
and other improvements,

99
00:05:58,659 --> 00:06:02,629
check out the "Target and optimize
GPU binaries with Metal 3" session.

100
00:06:04,164 --> 00:06:06,567
Now, let's move on to MetalFX,

101
00:06:06,600 --> 00:06:09,336
which provides platform-optimized
graphics effects

102
00:06:09,369 --> 00:06:11,738
for Metal applications.

103
00:06:11,772 --> 00:06:16,343
MetalFX Upscaling helps render
high-quality graphics in less time

104
00:06:16,376 --> 00:06:20,480
through high-performance upscaling
and anti-aliasing.

105
00:06:20,514 --> 00:06:24,618
You can choose a combination
of temporal or spatial algorithms

106
00:06:24,651 --> 00:06:26,987
to help boost performance.

107
00:06:27,020 --> 00:06:29,223
Here's why it matters.

108
00:06:29,256 --> 00:06:32,025
While Retina resolution
provides crisp detail

109
00:06:32,059 --> 00:06:35,195
that you want your apps
and games to take advantage of,

110
00:06:35,229 --> 00:06:39,132
generating all those pixels
can also affect performance.

111
00:06:39,166 --> 00:06:40,901
With MetalFX Upscaling,

112
00:06:40,934 --> 00:06:43,303
you can generate pixels
at a lower resolution

113
00:06:43,337 --> 00:06:45,606
and then let the framework
generate a high-quality,

114
00:06:45,639 --> 00:06:50,344
high-resolution image at a lower cost
for a much higher frame rate.

115
00:06:50,377 --> 00:06:54,047
MetalFX is a powerful framework
that makes high-performance,

116
00:06:54,081 --> 00:06:56,450
high-quality upscaling a reality.

117
00:06:56,483 --> 00:06:58,952
To learn more
about MetalFX Upscaling,

118
00:06:58,986 --> 00:07:03,390
check out the "Boost performance
with MetalFX Upscaling" session.

119
00:07:03,423 --> 00:07:06,693
Next up is Metal's new flexible
geometry pipeline:

120
00:07:06,727 --> 00:07:08,996
Mesh Shaders.

121
00:07:09,029 --> 00:07:12,533
The traditional programmable graphics
pipeline lets you transform vertices

122
00:07:12,566 --> 00:07:15,769
in a shader,
that are then assembled into primitives

123
00:07:15,802 --> 00:07:18,772
for rasterization
by fixed-function hardware.

124
00:07:18,805 --> 00:07:20,974
That's enough for most applications,

125
00:07:21,008 --> 00:07:25,746
but some use cases like culling
require access to the entire primitive.

126
00:07:25,779 --> 00:07:27,948
Each vertex is also read,

127
00:07:27,981 --> 00:07:30,884
transformed, and output independently.

128
00:07:30,918 --> 00:07:35,589
So you can't add vertices or primitives
in the middle of your draw.

129
00:07:35,622 --> 00:07:39,359
Advanced geometry processing
requires more flexibility.

130
00:07:39,393 --> 00:07:42,196
And traditionally
that meant pre-processing your geometry

131
00:07:42,229 --> 00:07:43,931
in a compute pass.

132
00:07:43,964 --> 00:07:47,034
But that requires storing a variable
amount of intermediate geometry

133
00:07:47,067 --> 00:07:51,104
to device memory,
which might be hard for you to budget for.

134
00:07:51,138 --> 00:07:55,108
Metal mesh shaders introduce an
alternative geometry processing pipeline,

135
00:07:56,276 --> 00:08:00,948
It replaces the traditional vertex stage
with a flexible 2-stage model

136
00:08:00,981 --> 00:08:05,152
and enables hierarchical processing
of your geometry.

137
00:08:05,185 --> 00:08:09,623
The first stage analyzes whole objects
to decide whether to expand,

138
00:08:09,656 --> 00:08:13,560
contract, or refine geometry
in the second stage.

139
00:08:13,594 --> 00:08:17,798
It achieves this by providing
compute capabilities in the render pass,

140
00:08:17,831 --> 00:08:21,902
without the need
for intermediate device memory storage.

141
00:08:21,935 --> 00:08:26,673
Mesh shaders are a great fit for apps
that perform GPU-driven culling,

142
00:08:26,707 --> 00:08:30,577
LOD selection,
and procedural geometry generation.

143
00:08:30,611 --> 00:08:32,880
Let's take a closer look.

144
00:08:32,913 --> 00:08:36,316
In this example,
a compute pass evaluates the surface

145
00:08:36,350 --> 00:08:38,685
and then generates its geometry.

146
00:08:38,719 --> 00:08:41,955
That geometry and its draw commands
are then written to device memory

147
00:08:41,989 --> 00:08:44,758
for consumption by a later render pass.

148
00:08:44,791 --> 00:08:48,061
With high expansion factors
and indirect draw calls,

149
00:08:48,095 --> 00:08:51,064
it can be hard to predict
the amount of memory needed.

150
00:08:53,367 --> 00:08:56,904
Mesh shaders improve efficiency
by running two compute-like stages

151
00:08:56,937 --> 00:08:59,306
inline in the render pipeline.

152
00:09:00,641 --> 00:09:04,011
The Object stage evaluates the input
to decide how many meshes

153
00:09:04,044 --> 00:09:05,979
need to be generated.

154
00:09:07,314 --> 00:09:10,751
And the Mesh stage then
generates the actual geometry.

155
00:09:10,784 --> 00:09:13,487
These meshes are sent directly
to the rasterizer,

156
00:09:13,520 --> 00:09:16,123
bypassing the roundtrip to device memory,

157
00:09:16,156 --> 00:09:18,825
and the need for vertex processing.

158
00:09:20,127 --> 00:09:23,564
Mesh shaders will let you build
efficient procedural geometry,

159
00:09:23,597 --> 00:09:26,633
culling, and LODing systems for your apps.

160
00:09:26,667 --> 00:09:28,402
To learn more about mesh shaders,

161
00:09:28,435 --> 00:09:32,506
check out the "Transform your geometry
with Metal mesh shaders" session.

162
00:09:34,107 --> 00:09:39,012
Metal 3 also brings significant speedup
to the ray tracing pipeline.

163
00:09:39,046 --> 00:09:41,648
Everything from
acceleration structure builds,

164
00:09:41,682 --> 00:09:45,385
intersection
and shading have been optimized.

165
00:09:45,419 --> 00:09:49,089
Metal also adds support for
GPU-driven ray tracing pipelines

166
00:09:49,122 --> 00:09:52,259
to further optimize your app.

167
00:09:52,292 --> 00:09:55,896
Let's compare Metal 3's ray tracing
to what was previously available.

168
00:09:56,964 --> 00:10:01,902
Metal 3 ray tracing saves
a significant amount of CPU and GPU time.

169
00:10:01,935 --> 00:10:05,138
First, acceleration structures
build in less time,

170
00:10:05,172 --> 00:10:08,375
giving you more GPU time
to draw and trace rays.

171
00:10:08,408 --> 00:10:12,246
Second, CPU operations such as culling
can move to the GPU

172
00:10:12,279 --> 00:10:16,283
thanks to the new Indirect Command Buffer
support for Ray Tracing.

173
00:10:16,316 --> 00:10:20,187
Finally, Metal 3 ray tracing
supports direct access to primitive data

174
00:10:20,220 --> 00:10:24,458
to streamline and optimize
intersection and shading.

175
00:10:24,491 --> 00:10:29,630
Metal 3 ray tracing continues to become
better and more powerful than before.

176
00:10:29,663 --> 00:10:31,431
To learn more about ray tracing,

177
00:10:31,465 --> 00:10:36,203
head over to the "Maximize your Metal
ray tracing performance" session.

178
00:10:36,236 --> 00:10:42,009
Now, I'll show you how Metal 3 accelerates
machine learning inference and training.

179
00:10:42,042 --> 00:10:45,279
Metal 3 has major improvements
to accelerate machine learning,

180
00:10:45,312 --> 00:10:49,283
with additional support for
accelerating network training on the Mac,

181
00:10:49,316 --> 00:10:53,053
and significant optimizations
for ML inference optimizations

182
00:10:53,086 --> 00:10:56,857
in graphics
and media processing applications.

183
00:10:56,890 --> 00:10:59,693
TensorFlow is a popular framework
for machine learning

184
00:10:59,726 --> 00:11:02,563
that is GPU-accelerated on the Mac.

185
00:11:02,596 --> 00:11:06,934
The recently released Mac Studio
provides up to a 16 times speedup

186
00:11:06,967 --> 00:11:10,137
on M1 Ultra versus training on the CPU,

187
00:11:10,170 --> 00:11:13,006
across a variety of networks.

188
00:11:13,040 --> 00:11:17,711
And Metal 3 also accelerates
many new TensorFlow operations.

189
00:11:17,744 --> 00:11:20,480
That means less synchronization
with the CPU

190
00:11:20,514 --> 00:11:24,852
for even more scalable performance.

191
00:11:24,885 --> 00:11:28,622
PyTorch is another very popular
ML framework for network training

192
00:11:28,655 --> 00:11:32,292
that recently gained GPU acceleration
using Metal.

193
00:11:32,326 --> 00:11:34,862
And on Mac Studio with an M1 Ultra

194
00:11:34,895 --> 00:11:39,933
you can achieve significant training
speedups compared to the CPU.

195
00:11:39,967 --> 00:11:44,872
For example, you can train the BERT model
up to 6.5 times faster

196
00:11:44,905 --> 00:11:49,943
and train ResNet50 up to 8.5 times faster.

197
00:11:49,977 --> 00:11:53,413
Metal optimizes ML inference across
Apple silicon

198
00:11:53,447 --> 00:11:55,682
to maximize performance.

199
00:11:55,716 --> 00:11:59,419
This is especially useful for
Metal-based high performance video

200
00:11:59,453 --> 00:12:01,555
and image processing applications,

201
00:12:01,588 --> 00:12:04,992
like BlackMagic Design's DaVinci Resolve.

202
00:12:05,025 --> 00:12:08,762
DaVinci Resolve is a color-grading-focussed
video production platform

203
00:12:08,795 --> 00:12:13,867
that uses Metal and machine learning
extensively in their workflows.

204
00:12:13,901 --> 00:12:16,103
And the results are incredible.

205
00:12:16,136 --> 00:12:19,006
With Metal's support
for accelerated machine learning,

206
00:12:19,039 --> 00:12:22,476
BlackMagic Design achieved dramatic
performance improvements

207
00:12:22,509 --> 00:12:25,045
to their editing and color grading
workflows

208
00:12:25,078 --> 00:12:28,448
and their ML-based tools.

209
00:12:28,482 --> 00:12:30,918
To learn more about updates
to machine learning,

210
00:12:30,951 --> 00:12:35,789
head over to the "Accelerate
machine learning with Metal" session.

211
00:12:35,822 --> 00:12:39,193
Now let me tell you what hardware
supports the Metal 3 features

212
00:12:39,226 --> 00:12:41,461
that I just described.

213
00:12:41,495 --> 00:12:44,898
Metal 3 is supported on all modern iOS,

214
00:12:44,932 --> 00:12:47,367
iPadOS, and macOS devices,

215
00:12:47,401 --> 00:12:53,707
including iPhone and iPad with A13 Bionic
or M1 chips or newer,

216
00:12:53,740 --> 00:12:56,109
and all Apple silicon Mac systems

217
00:12:56,143 --> 00:12:58,011
and Mac systems with recent AMD
and Intel GPUs.

218
00:13:03,784 --> 00:13:07,154
And to find out whether
a given device supports Metal 3,

219
00:13:07,187 --> 00:13:10,824
use the supportsFamily query
on the Metal device.

220
00:13:12,526 --> 00:13:15,062
Metal 3 is much more than features;

221
00:13:15,095 --> 00:13:18,999
it also includes a comprehensive set
of advanced developer tools.

222
00:13:19,032 --> 00:13:20,901
Let me show you a few now.

223
00:13:20,934 --> 00:13:24,471
The Metal Dependency Viewer
in Xcode 14 makes it even easier

224
00:13:24,505 --> 00:13:26,707
to visualize your entire renderer

225
00:13:26,740 --> 00:13:30,244
or zoom into a single pass.

226
00:13:30,277 --> 00:13:33,580
And to make it easier to adopt
GPU-driven pipelines

227
00:13:33,614 --> 00:13:36,850
or synchronize with fast resource loading
for example,

228
00:13:36,884 --> 00:13:40,287
the Dependency Viewer now includes
synchronization edges

229
00:13:40,320 --> 00:13:44,157
to help you analyze
and validate your dependencies.

230
00:13:44,191 --> 00:13:47,294
The improved Acceleration
Structure Viewer in Xcode 14

231
00:13:47,327 --> 00:13:51,164
helps you get the most out
of Metal 3's optimized ray tracing.

232
00:13:51,198 --> 00:13:55,235
First, you can now highlight
individual primitives in the scene.

233
00:13:57,037 --> 00:14:00,574
And selecting a primitive
shows its associated primitive data

234
00:14:00,607 --> 00:14:02,743
in the outline on the left.

235
00:14:05,646 --> 00:14:08,916
Last, if your scene has
motion information,

236
00:14:08,949 --> 00:14:13,654
the Acceleration Structure Viewer can
now visualize different points in time.

237
00:14:18,225 --> 00:14:22,596
And that's just a quick look at a few of
the Developer Tools updates in Xcode 14.

238
00:14:22,629 --> 00:14:26,500
There are a host of other new features
such as Dylib support,

239
00:14:26,533 --> 00:14:28,402
a new resource list,

240
00:14:28,435 --> 00:14:30,737
file navigation in the Shader editor,

241
00:14:30,771 --> 00:14:34,474
custom Buffer Viewer layouts
and many more.

242
00:14:34,508 --> 00:14:38,278
To learn more about tools and
how to get the most out of advancements

243
00:14:38,312 --> 00:14:41,915
in Metal 3,
be sure to check out these other sessions,

244
00:14:41,949 --> 00:14:46,486
which will help you build
advanced graphics, games and pro apps.

245
00:14:48,288 --> 00:14:51,225
Today, I introduced you
to Metal 3's advanced features

246
00:14:51,258 --> 00:14:54,027
for improving performance and quality:

247
00:14:54,061 --> 00:14:58,031
fast resource loading
for higher-quality texture streaming;

248
00:14:58,065 --> 00:15:02,336
Offline compilation for shorter load times
and less stuttering;

249
00:15:02,369 --> 00:15:06,874
MetalFX Upscaling to render
at high resolution in less time;

250
00:15:06,907 --> 00:15:10,878
Mesh shaders
for advanced geometry processing;

251
00:15:10,911 --> 00:15:12,913
faster acceleration structure builds,

252
00:15:12,946 --> 00:15:16,283
intersections,
and shading for ray tracing;

253
00:15:16,316 --> 00:15:19,253
and more accelerated machine learning.

254
00:15:19,286 --> 00:15:22,589
Finally, I showed you some of
advanced tools that help you

255
00:15:22,623 --> 00:15:27,294
use advanced features such as
GPU-driven pipelines and ray tracing.

256
00:15:28,629 --> 00:15:31,698
To learn more with new code samples
and documentation,

257
00:15:31,732 --> 00:15:34,434
head over to developer.apple.com/Metal.

258
00:15:34,968 --> 00:15:36,970
Thank you for joining.

