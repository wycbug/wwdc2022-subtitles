1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:10,043 --> 00:00:13,447
Jeff Nadeau: Hello, and welcome
to What's new in AppKit.

3
00:00:13,480 --> 00:00:16,717
I'm Jeff Nadeau,
an engineer on the AppKit team,

4
00:00:16,750 --> 00:00:19,686
and I'm here to share the latest
and greatest in building apps

5
00:00:19,720 --> 00:00:21,622
for macOS Ventura.

6
00:00:21,655 --> 00:00:24,591
It's never been a more exciting time
for the Mac,

7
00:00:24,625 --> 00:00:28,195
between the performance
and efficiency of Apple Silicon,

8
00:00:28,228 --> 00:00:29,897
the power of macOS,

9
00:00:29,930 --> 00:00:33,567
and an app ecosystem
that's richer than ever.

10
00:00:33,600 --> 00:00:36,236
Your apps are an important part of
that story,

11
00:00:36,270 --> 00:00:38,305
and we're continuing
to push AppKit forward

12
00:00:38,338 --> 00:00:41,742
so that you can keep building
the very best apps.

13
00:00:42,342 --> 00:00:45,179
I'll be covering a wide variety of topics,

14
00:00:45,212 --> 00:00:47,915
starting with Stage Manager,

15
00:00:47,948 --> 00:00:50,417
moving on to Preferences,

16
00:00:50,450 --> 00:00:52,753
followed by controls,

17
00:00:52,786 --> 00:00:54,688
SF Symbols,

18
00:00:54,721 --> 00:00:57,257
and sharing.

19
00:00:57,291 --> 00:00:59,259
I'll start off with Stage Manager.

20
00:01:00,460 --> 00:01:04,398
Stage Manager cleans up inactive windows
in your workspace

21
00:01:04,431 --> 00:01:07,701
while your active window
takes center stage.

22
00:01:07,734 --> 00:01:11,071
For a more advanced workflow,
you can also pull windows together

23
00:01:11,104 --> 00:01:14,541
into sets
which swap in and out as a group.

24
00:01:15,709 --> 00:01:19,847
This has an impact on how
your app windows present themselves.

25
00:01:19,880 --> 00:01:23,016
Stage Manager is trying to keep
the working space tidy,

26
00:01:23,050 --> 00:01:24,885
so when a new window is presented,

27
00:01:24,918 --> 00:01:29,156
existing windows will exit the stage
to make room.

28
00:01:29,189 --> 00:01:33,293
That's what you want for
"primary" windows, like your documents.

29
00:01:33,327 --> 00:01:38,599
Auxiliary windows like panels,
popovers, settings, and others

30
00:01:38,632 --> 00:01:42,970
should continue to appear
above the existing windows.

31
00:01:43,003 --> 00:01:45,472
NSWindow already has a lot of APIs

32
00:01:45,506 --> 00:01:49,343
that can help you define the behavior
you'd like for a particular window.

33
00:01:51,545 --> 00:01:54,915
By default,
Stage Manager won't swap out other windows

34
00:01:54,948 --> 00:01:58,318
if you present a floating panel,
a modal window,

35
00:01:58,352 --> 00:02:01,388
or a window with
a preference-style toolbar.

36
00:02:03,824 --> 00:02:07,628
Stage Manager also respects
your window's collectionBehavior.

37
00:02:07,661 --> 00:02:10,264
This OptionSet defines how
your window behaves

38
00:02:10,297 --> 00:02:12,599
in spaces and full screen,

39
00:02:12,633 --> 00:02:15,102
and it now also helps Stage Manager
understand

40
00:02:15,135 --> 00:02:18,639
that a window is considered
to be auxiliary or floating.

41
00:02:19,540 --> 00:02:23,977
If a window's collectionBehavior
includes the auxiliary, moveToActiveSpace,

42
00:02:24,011 --> 00:02:26,947
stationary, or transient options,

43
00:02:26,980 --> 00:02:30,784
then it won't displace
the active window in center stage.

44
00:02:31,718 --> 00:02:34,454
By setting up your windows
with the right collection behaviors,

45
00:02:34,488 --> 00:02:37,257
you can make sure
that they work great in every context,

46
00:02:37,291 --> 00:02:42,829
whether it's a desktop space,
full screen, or now in Stage Manager.

47
00:02:42,863 --> 00:02:46,934
Next, I'd like to cover some
important changes to Preferences.

48
00:02:46,967 --> 00:02:49,937
In macOS Ventura,
the System Preferences app

49
00:02:49,970 --> 00:02:52,239
has taken on a whole new look,

50
00:02:52,272 --> 00:02:57,277
with a refreshed navigation scheme
and all-new visual design.

51
00:02:57,311 --> 00:03:00,948
To align with the settings experience
on our other operating systems,

52
00:03:00,981 --> 00:03:04,451
we've also renamed the app
to System Settings.

53
00:03:05,219 --> 00:03:08,222
These changes extend
to your application too.

54
00:03:08,255 --> 00:03:11,091
For example,
you might have a preference pane bundle

55
00:03:11,124 --> 00:03:14,695
that appears in
the System Preferences app today.

56
00:03:14,728 --> 00:03:18,532
You might also have
a settings area inside of your app.

57
00:03:18,565 --> 00:03:21,935
There's also a new design system
for control-rich forms

58
00:03:21,969 --> 00:03:26,640
that may be the perfect fit
for settings interfaces or inspectors.

59
00:03:26,673 --> 00:03:29,209
If you ship a custom prefpane bundle,

60
00:03:29,243 --> 00:03:32,145
it'll continue to work
with the new Settings app.

61
00:03:32,179 --> 00:03:34,748
Your custom pane will appear
in the sidebar,

62
00:03:34,781 --> 00:03:36,617
and the app will load up your bundle

63
00:03:36,650 --> 00:03:40,988
and present your settings UI
just like it did in Monterey and earlier.

64
00:03:41,855 --> 00:03:44,691
To match the newly-renamed
System Settings app,

65
00:03:44,725 --> 00:03:48,529
we've renamed in-app preferences
to "settings" as well.

66
00:03:48,562 --> 00:03:52,399
To help get you started,
once you build against the newest SDK,

67
00:03:52,432 --> 00:03:55,702
AppKit will automatically update
the name of the "Preferences," menu item

68
00:03:55,736 --> 00:03:57,804
in your app menu.

69
00:03:57,838 --> 00:04:02,042
However, you might be using the word
"Preferences" in a number of other places,

70
00:04:02,075 --> 00:04:04,645
like window titles, descriptive labels,

71
00:04:04,678 --> 00:04:07,414
or other controls around your app.

72
00:04:07,447 --> 00:04:11,552
Search through your localized text
to find places that also need updating.

73
00:04:12,986 --> 00:04:18,058
For example, TextEdit's settings window
used to be called "preferences"

74
00:04:18,091 --> 00:04:23,030
and we chose to rename that window to
Settings to match the rest of the system.

75
00:04:23,063 --> 00:04:26,333
The System Settings app also uses
a new interface style

76
00:04:26,366 --> 00:04:29,269
for presenting
all of its configuration options.

77
00:04:29,303 --> 00:04:32,239
Settings interfaces
are often control-heavy,

78
00:04:32,272 --> 00:04:36,176
so this style is designed to present forms
containing many controls

79
00:04:36,210 --> 00:04:39,079
in a clear and well-organized fashion.

80
00:04:40,948 --> 00:04:44,184
Since the form itself provides a lot
of visual structure,

81
00:04:44,218 --> 00:04:46,854
many system controls adapt to this context

82
00:04:46,887 --> 00:04:49,389
by drawing with a lower visual weight,

83
00:04:49,423 --> 00:04:53,293
while revealing more prominent
control backings on rollover.

84
00:04:54,828 --> 00:04:57,764
If you want to write interfaces
that use this new design,

85
00:04:57,798 --> 00:05:00,901
SwiftUI makes it super easy.

86
00:05:00,934 --> 00:05:03,537
Place your controls into a Form view,

87
00:05:03,570 --> 00:05:06,640
and then apply
the "insetGrouped" form style.

88
00:05:06,673 --> 00:05:08,842
SwiftUI takes care of the rest:

89
00:05:08,876 --> 00:05:11,211
the visual style, scrolling behavior,

90
00:05:11,245 --> 00:05:15,015
and layout of the form
are all applied automatically.

91
00:05:16,650 --> 00:05:18,952
If you haven't gotten started
with SwiftUI yet,

92
00:05:18,986 --> 00:05:22,089
this is a great opportunity
to give it a try.

93
00:05:22,122 --> 00:05:26,360
A Settings window is often
a standalone area of your app's interface,

94
00:05:26,393 --> 00:05:29,363
so it's the perfect place
to do some incremental adoption.

95
00:05:30,264 --> 00:05:34,434
We've even created a video
about using SwiftUI and AppKit together,

96
00:05:34,468 --> 00:05:37,538
which is a great place to learn more.

97
00:05:37,571 --> 00:05:42,176
Next, I'd like to share some updates
to our controls.

98
00:05:42,209 --> 00:05:45,345
We've got a lot of exciting
control enhancements to share,

99
00:05:45,379 --> 00:05:49,449
starting with a new control
called NSComboButton.

100
00:05:49,483 --> 00:05:52,085
We've also updated NSColorWell,

101
00:05:52,119 --> 00:05:55,689
made some enhancements
to the NSToolbar API,

102
00:05:55,722 --> 00:05:58,525
adjusted the design of NSAlert,

103
00:05:58,559 --> 00:06:02,629
and improved the performance
of NSTableView.

104
00:06:02,663 --> 00:06:05,566
First, NSComboButton.

105
00:06:05,599 --> 00:06:09,469
NSComboButton is all about
combining an immediate button action,

106
00:06:09,503 --> 00:06:11,738
and a menu for additional options.

107
00:06:13,240 --> 00:06:15,142
In today's control landscape,

108
00:06:15,175 --> 00:06:18,545
you'd traditionally use
a button to perform some immediate action,

109
00:06:18,579 --> 00:06:23,684
or you would use a pull-down button
to show a menu with many options.

110
00:06:23,717 --> 00:06:28,589
NSComboButton combines both elements
into a single control,

111
00:06:28,622 --> 00:06:33,694
which joins a primary action
and a pull-down menu together.

112
00:06:33,727 --> 00:06:37,664
This design is commonly used
for use cases like this one in Mail,

113
00:06:37,698 --> 00:06:40,667
where the predicted folder
is a single click away,

114
00:06:40,701 --> 00:06:44,738
but you can still access a menu
to file your messages anywhere.

115
00:06:44,771 --> 00:06:47,641
Previously,
you might've assembled something like this

116
00:06:47,674 --> 00:06:50,244
using the segmented control API,

117
00:06:50,277 --> 00:06:52,913
but now there's
a dedicated control for it.

118
00:06:53,881 --> 00:06:56,416
NSComboButton comes in two styles,

119
00:06:56,450 --> 00:07:00,287
which dictate both the appearance
and the behavior of the button.

120
00:07:00,320 --> 00:07:02,623
The default style is called "split,"

121
00:07:02,656 --> 00:07:06,426
and it includes a separate arrow portion
just for the menu.

122
00:07:08,262 --> 00:07:13,600
The second style, "unified,"
looks much more like an ordinary button.

123
00:07:13,634 --> 00:07:16,436
This style performs
its primary action on click,

124
00:07:16,470 --> 00:07:20,174
and it presents its menu
if you click-and-hold.

125
00:07:20,207 --> 00:07:21,942
And that's NSComboButton.

126
00:07:21,975 --> 00:07:25,379
We've also got some great new updates
to NSColorWell,

127
00:07:25,412 --> 00:07:27,781
starting with a brand-new look.

128
00:07:27,814 --> 00:07:31,151
In place of the classic square
gradient appearance,

129
00:07:31,185 --> 00:07:33,720
the color well has adopted a new style

130
00:07:33,754 --> 00:07:37,591
reminiscent of other button bezels
across the system.

131
00:07:37,624 --> 00:07:40,060
This change is completely automatic,

132
00:07:40,093 --> 00:07:43,597
so you don't need to do any adoption
to get this modern appearance.

133
00:07:44,231 --> 00:07:47,334
However, we know that color picking
is an important part

134
00:07:47,367 --> 00:07:49,937
of creative and professional applications,

135
00:07:49,970 --> 00:07:51,505
so we've gone a step further

136
00:07:51,538 --> 00:07:54,508
and introduced two new styles
for NSColorWell.

137
00:07:55,843 --> 00:07:58,278
The first is a minimal style,

138
00:07:58,312 --> 00:08:00,747
which shows a disclosure
arrow on rollover,

139
00:08:00,781 --> 00:08:03,116
and provides a quick
color picking experience

140
00:08:03,150 --> 00:08:07,254
by showing a popover to immediately
select from a palette of colors,

141
00:08:07,287 --> 00:08:11,525
with the option to break out
into the full NSColorPanel.

142
00:08:11,558 --> 00:08:14,995
By default,
it uses a system standard grid of colors,

143
00:08:15,028 --> 00:08:16,797
but you can customize what appears here

144
00:08:16,830 --> 00:08:19,933
if you've got a different UI
or palette in mind.

145
00:08:22,269 --> 00:08:24,705
The second is an expanded style,

146
00:08:24,738 --> 00:08:27,941
which you might recognize
from the iWork apps.

147
00:08:27,975 --> 00:08:30,944
This style combines both
interaction models:

148
00:08:30,978 --> 00:08:33,480
the well on the left has
the same disclosure arrow

149
00:08:33,514 --> 00:08:35,682
and popover for quick picking,

150
00:08:35,716 --> 00:08:38,385
while the button on the right
pulls up the full panel

151
00:08:38,418 --> 00:08:40,654
for more detailed color picking.

152
00:08:43,123 --> 00:08:48,095
And with that, NSColorWell now offers
three different ways to pick colors.

153
00:08:49,997 --> 00:08:55,035
You can access these styles using the new
colorWellStyle property on NSColorWell,

154
00:08:55,068 --> 00:08:57,504
which has cases for each style:

155
00:08:57,538 --> 00:09:00,941
default, expanded, and minimal.

156
00:09:02,342 --> 00:09:05,879
NSColorWell has also gained
a new target-and-action pair

157
00:09:05,913 --> 00:09:08,248
for its "pulldown action."

158
00:09:08,282 --> 00:09:11,652
This action determines what happens
when you click the pulldown portion

159
00:09:11,685 --> 00:09:15,088
of a minimal or expanded color well.

160
00:09:15,122 --> 00:09:17,457
By default,
these properties are nil,

161
00:09:17,491 --> 00:09:21,995
which signifies that NSColorWell
should use the system-standard popover.

162
00:09:22,029 --> 00:09:24,398
However, you can customize this action

163
00:09:24,431 --> 00:09:27,768
and use it to present
your own custom popover,

164
00:09:27,801 --> 00:09:32,840
Or you could even present a different
picking interface, like a menu.

165
00:09:32,873 --> 00:09:35,008
And that's the new NSColorWell.

166
00:09:35,042 --> 00:09:39,580
It's got a brand new look
and two new ways to quickly pick colors.

167
00:09:40,314 --> 00:09:42,850
Next up, some news on NSToolbar,

168
00:09:42,883 --> 00:09:44,985
where we've made a variety
of API enhancements

169
00:09:45,018 --> 00:09:47,821
to give you better control
over customization

170
00:09:47,855 --> 00:09:50,824
and increased flexibility for your layout.

171
00:09:51,725 --> 00:09:53,293
On the customization front,

172
00:09:53,327 --> 00:09:55,095
we've added two new delegate methods

173
00:09:55,128 --> 00:09:58,999
to give you better control over
the customizability of your toolbar.

174
00:09:59,032 --> 00:10:03,604
The first is
"toolbarImmovableItemIdentifiers".

175
00:10:03,637 --> 00:10:07,140
If you implement this method
to return a set of item identifiers,

176
00:10:07,174 --> 00:10:11,378
those items won't be movable
or removable by the user,

177
00:10:11,411 --> 00:10:14,781
and they won't animate
when you enter customization mode.

178
00:10:16,183 --> 00:10:19,353
For example,
the Mail app wants the Filter button

179
00:10:19,386 --> 00:10:22,990
to always appear here,
above the message list.

180
00:10:23,023 --> 00:10:27,561
Using this API, they can prevent it
from being moved away from this spot.

181
00:10:29,963 --> 00:10:35,636
The second method is called "toolbar
itemIdentifier canBeInsertedAt."

182
00:10:35,669 --> 00:10:39,773
This delegate method gives you veto power
over any particular reordering,

183
00:10:39,806 --> 00:10:43,343
insertion, or removal from the toolbar.

184
00:10:43,377 --> 00:10:47,047
You can use it to implement
your own set of customization rules –

185
00:10:47,080 --> 00:10:48,382
for example,

186
00:10:48,415 --> 00:10:52,219
you could create a toolbar item that's
allowed within one section of the toolbar,

187
00:10:52,252 --> 00:10:54,521
but it's disallowed
within another section.

188
00:10:56,957 --> 00:11:00,093
You can now specify multiple
centered items for your toolbar

189
00:11:00,127 --> 00:11:03,664
using the new
centeredItemIdentifiers property.

190
00:11:03,697 --> 00:11:06,633
If your toolbar is customizable,
items in this set

191
00:11:06,667 --> 00:11:09,369
can still be added or removed
from the toolbar,

192
00:11:09,403 --> 00:11:12,806
but they can only be reordered
within the centered group.

193
00:11:12,840 --> 00:11:15,409
In this example,
the photo editing tools

194
00:11:15,442 --> 00:11:18,278
all stick together in the center
of the toolbar

195
00:11:18,312 --> 00:11:22,850
regardless of how many items are placed
in the leading and trailing sections.

196
00:11:23,584 --> 00:11:26,019
Once your toolbar is customized
the way you like it,

197
00:11:26,053 --> 00:11:28,589
you don't want the items to shift around,

198
00:11:28,622 --> 00:11:31,325
and that can be difficult
for toolbar items that change meaning

199
00:11:31,358 --> 00:11:33,260
based on some other state,

200
00:11:33,293 --> 00:11:35,929
like the Mute and Unmute button in Mail,

201
00:11:35,963 --> 00:11:37,831
which toggles when you click it.

202
00:11:39,433 --> 00:11:41,502
Since the labels have different sizes,

203
00:11:41,535 --> 00:11:46,039
the other items in the toolbar have to
shift around to accommodate the change.

204
00:11:48,542 --> 00:11:52,679
In a scenario like this, you can
use the new possibleLabels property

205
00:11:52,713 --> 00:11:56,116
on NSToolbarItem to provide a set
of the localized strings

206
00:11:56,149 --> 00:11:58,252
that you'll use for the item.

207
00:11:59,887 --> 00:12:04,157
NSToolbar will automatically size the item
to fit the longest label,

208
00:12:04,191 --> 00:12:08,829
so your layout stays the same
even when the item is reconfigured.

209
00:12:08,862 --> 00:12:12,232
Next, a design update for alerts.

210
00:12:12,266 --> 00:12:15,269
Alerts on macOS use a compact layout,

211
00:12:15,302 --> 00:12:17,738
which is optimized
for a small amount of text

212
00:12:17,771 --> 00:12:20,807
accompanied by a few clear choices.

213
00:12:20,841 --> 00:12:24,144
And in general, that's a great way
to put together an alert.

214
00:12:24,178 --> 00:12:26,947
Alerts work best with shorter text:

215
00:12:26,980 --> 00:12:29,483
you can communicate your message
more directly,

216
00:12:29,516 --> 00:12:31,718
and people are more likely to read
what you've written

217
00:12:31,752 --> 00:12:34,321
before pushing their way
through the alert.

218
00:12:35,989 --> 00:12:39,593
However, sometimes you really can't
shorten your description,

219
00:12:39,626 --> 00:12:43,830
especially if you need to communicate
something complex and subtle,

220
00:12:43,864 --> 00:12:45,866
like this Disk Utility alert,

221
00:12:45,899 --> 00:12:50,204
which conveys a really important choice
about your filesystem data.

222
00:12:50,237 --> 00:12:54,575
The compact layout just isn't optimal
for this situation.

223
00:12:54,608 --> 00:12:58,812
For these cases, we've adapted NSAlert
to provide a wider layout

224
00:12:58,846 --> 00:13:01,582
that's suitable for longer text.

225
00:13:01,615 --> 00:13:05,686
This adaptation happens automatically
for alerts where the informative text

226
00:13:05,719 --> 00:13:09,923
is too long to fit comfortably
in the compact size.

227
00:13:09,957 --> 00:13:12,659
We'll also use this style
if you have an accessory view

228
00:13:12,693 --> 00:13:16,797
that's too large to fit
in a compact alert window.

229
00:13:16,830 --> 00:13:19,800
There's no need for your app
to opt in to this behavior –

230
00:13:19,833 --> 00:13:22,903
it's applied automatically system-wide.

231
00:13:22,936 --> 00:13:25,005
It's important to note
that the layout is determined

232
00:13:25,038 --> 00:13:26,974
at the time you present the alert,

233
00:13:27,007 --> 00:13:29,743
so an alert won't swap styles
if you modify it

234
00:13:29,776 --> 00:13:31,845
while it's already on screen.

235
00:13:33,881 --> 00:13:37,684
You should still aim to reduce the length
of your alert text wherever possible,

236
00:13:37,718 --> 00:13:40,220
but this design update
will improve the user experience

237
00:13:40,254 --> 00:13:42,456
for those cases where you can't.

238
00:13:43,657 --> 00:13:47,261
Next, an important new feature
of NSTableView.

239
00:13:47,294 --> 00:13:51,999
NSTableView is designed to efficiently
handle a very large number of rows,

240
00:13:52,032 --> 00:13:55,636
by lazily populating
and reusing the views as you scroll.

241
00:13:56,370 --> 00:13:59,573
However, for tables where each row
can have a different height,

242
00:13:59,606 --> 00:14:01,308
that can be a challenge,

243
00:14:01,341 --> 00:14:04,178
because in order to provide
a good scrolling experience

244
00:14:04,211 --> 00:14:06,280
the table needs to know its total height

245
00:14:06,313 --> 00:14:10,083
and the location of each row
in the scrolling region.

246
00:14:11,185 --> 00:14:15,889
Historically, NSTableView does this by
sizing all of the rows in the table,

247
00:14:15,923 --> 00:14:19,526
which can have an impact
on initial load times.

248
00:14:19,560 --> 00:14:22,963
In macOS Ventura,
NSTableView achieves those goals

249
00:14:22,996 --> 00:14:25,866
while providing much better performance.

250
00:14:27,968 --> 00:14:31,138
Instead of eagerly calculating
the height for each row,

251
00:14:31,171 --> 00:14:33,974
NSTableView now lazily calculates
row heights

252
00:14:34,007 --> 00:14:38,278
based on which rows are within
or near the scrolling viewport.

253
00:14:39,646 --> 00:14:41,748
For the rows that haven't
been measured yet,

254
00:14:41,782 --> 00:14:44,818
NSTableView uses
a running estimated height

255
00:14:44,852 --> 00:14:48,255
based on the row heights
that it's already measured.

256
00:14:48,288 --> 00:14:49,890
As you scroll through the table,

257
00:14:49,923 --> 00:14:52,793
NSTableView requests row heights
as needed,

258
00:14:52,826 --> 00:14:56,296
replacing the estimated heights
with real measurements,

259
00:14:56,330 --> 00:14:59,867
while taking care to maintain
the correct scrolling position.

260
00:15:02,269 --> 00:15:07,174
This optimization significantly improves
the load times for very large tables.

261
00:15:07,207 --> 00:15:09,576
The change does alter the timing
of delegate calls

262
00:15:09,610 --> 00:15:11,678
like "table view: height of row",

263
00:15:11,712 --> 00:15:13,113
so you shouldn't make assumptions

264
00:15:13,146 --> 00:15:16,850
about when NSTableView
will request row heights from you.

265
00:15:18,185 --> 00:15:23,023
This optimization applies to both
NSTableView and SwiftUI's List view,

266
00:15:23,056 --> 00:15:26,326
and it's automatically used for all apps
on macOS Ventura

267
00:15:26,360 --> 00:15:28,695
with no adoption required.

268
00:15:28,729 --> 00:15:31,298
And that's NSTableView performance.

269
00:15:32,232 --> 00:15:35,736
Next, some updates on SF Symbols.

270
00:15:35,769 --> 00:15:39,106
macOS Ventura includes SF Symbols 4,

271
00:15:39,139 --> 00:15:42,109
which adds more than 450 new symbol images

272
00:15:42,142 --> 00:15:44,678
covering all kinds of subjects.

273
00:15:45,979 --> 00:15:48,949
These new symbols include laurels,

274
00:15:48,982 --> 00:15:51,919
all kinds of household objects,

275
00:15:51,952 --> 00:15:54,922
currency symbols from around the world,

276
00:15:54,955 --> 00:15:58,258
and even a variety
of sports-related symbols.

277
00:15:58,292 --> 00:16:00,694
With a catalog of thousands of symbols,

278
00:16:00,727 --> 00:16:04,031
it's likely that SF Symbols includes
a professionally-designed icon

279
00:16:04,064 --> 00:16:07,134
for any idea that you want to represent.

280
00:16:07,167 --> 00:16:08,936
But we haven't stopped there.

281
00:16:08,969 --> 00:16:11,471
SF Symbols 4 also includes
some new features

282
00:16:11,505 --> 00:16:13,907
to further enhance your iconography.

283
00:16:14,808 --> 00:16:18,278
To recap, symbol images support
a number of rendering modes

284
00:16:18,312 --> 00:16:21,448
that you can choose from
depending on your design.

285
00:16:21,481 --> 00:16:24,384
There's monochrome,
which uses a single color;

286
00:16:24,418 --> 00:16:27,521
hierarchical,
which uses different opacities of a color

287
00:16:27,554 --> 00:16:30,724
to emphasize certain portions
of a symbol;

288
00:16:30,757 --> 00:16:32,926
palette,
which allows you to specify

289
00:16:32,960 --> 00:16:35,629
distinct colors
for each part of a symbol;

290
00:16:35,662 --> 00:16:40,400
and multicolor, which uses colors
designed directly into the symbol artwork.

291
00:16:41,568 --> 00:16:45,973
These choices give you the flexibility
to realize a wide variety of designs,

292
00:16:46,006 --> 00:16:49,910
but we also want symbol images
to look their best right out of the box,

293
00:16:49,943 --> 00:16:52,746
without the need
to apply any configuration.

294
00:16:53,747 --> 00:16:56,216
That's why we've introduced
a new feature to symbols

295
00:16:56,250 --> 00:16:59,953
in macOS Ventura:
preferred rendering mode.

296
00:16:59,987 --> 00:17:01,555
With preferred rendering mode,

297
00:17:01,588 --> 00:17:04,925
symbols can specify the style of rendering
that they prefer,

298
00:17:04,958 --> 00:17:09,429
and at runtime
AppKit will use that style automatically.

299
00:17:09,463 --> 00:17:12,366
This is great for symbols
like AirPods Pro,

300
00:17:12,399 --> 00:17:14,601
which prefers a hierarchical style

301
00:17:14,635 --> 00:17:18,172
to increase the clarity
of those fine details.

302
00:17:18,205 --> 00:17:20,841
Of course, if you have
a different design in mind,

303
00:17:20,874 --> 00:17:24,444
you can always use an
NSImageSymbolConfiguration object

304
00:17:24,478 --> 00:17:26,880
to choose your preferred style.

305
00:17:28,615 --> 00:17:31,118
Some symbols
don't just represent a concept,

306
00:17:31,151 --> 00:17:34,821
they're also meant to communicate
some value or quantity,

307
00:17:34,855 --> 00:17:38,725
like your Wi-Fi signal strength,
or audio volume.

308
00:17:38,759 --> 00:17:41,995
For cases like these,
we've introduced a new type of symbol

309
00:17:42,029 --> 00:17:44,898
that we call a "variable symbol."

310
00:17:44,932 --> 00:17:48,335
With a variable symbol,
you supply a floating point value

311
00:17:48,368 --> 00:17:50,304
directly to NSImage,

312
00:17:50,337 --> 00:17:52,539
and the symbol embeds numeric thresholds

313
00:17:52,573 --> 00:17:56,743
to decide how each path should vary
based on that value.

314
00:17:56,777 --> 00:17:58,445
Here's the API.

315
00:17:58,478 --> 00:18:02,015
Variable symbols are created
using a new initializer.

316
00:18:02,049 --> 00:18:05,252
It's similar to the existing
symbol image initializer,

317
00:18:05,285 --> 00:18:07,988
with the addition of a value parameter,

318
00:18:08,021 --> 00:18:11,758
which is a floating point number
between zero and one.

319
00:18:11,792 --> 00:18:15,229
If the symbol image doesn't define
any variable thresholds,

320
00:18:15,262 --> 00:18:19,566
this value is ignored
and the symbol draws as it normally would.

321
00:18:19,600 --> 00:18:23,003
If it does, you'll see
the symbol paths drawing differently

322
00:18:23,036 --> 00:18:25,472
based on the value you supplied.

323
00:18:26,807 --> 00:18:31,111
Each variable symbol can represent
a value in its own unique way,

324
00:18:31,144 --> 00:18:33,447
and by providing that value
at the API level,

325
00:18:33,480 --> 00:18:36,149
you get access to all of those variations

326
00:18:36,183 --> 00:18:40,120
without having to know the fine details
of how the symbol is composed.

327
00:18:41,188 --> 00:18:44,491
Variable symbols work great
in combination with rendering styles

328
00:18:44,525 --> 00:18:47,361
like palette color and multicolor,

329
00:18:47,394 --> 00:18:50,297
so you can adapt them
to almost any design.

330
00:18:50,330 --> 00:18:54,701
Finally, I'd like to cover
some big updates to Sharing

331
00:18:54,735 --> 00:18:58,305
macOS Ventura elevates
the sharing experience on the Mac,

332
00:18:58,338 --> 00:19:00,841
introducing features like suggested people

333
00:19:00,874 --> 00:19:05,812
and new ways to invite and manage
the people that you're collaborating with.

334
00:19:05,846 --> 00:19:09,249
There are some new APIs that you can adopt
so that your app gets the most

335
00:19:09,283 --> 00:19:11,151
out of these enhancements.

336
00:19:13,754 --> 00:19:18,692
The most prominent update to the sharing
experience is the new sharing popover.

337
00:19:18,725 --> 00:19:22,095
This replaces the existing share menu
with a rich interface

338
00:19:22,129 --> 00:19:25,132
that includes more information
about the document you're sharing

339
00:19:25,165 --> 00:19:28,602
and familiar features
like suggested people.

340
00:19:28,635 --> 00:19:33,173
It supports all of the same APIs and
delegate methods as the previous picker,

341
00:19:33,207 --> 00:19:36,610
so you can still do things like
filter the list of sharing services,

342
00:19:36,643 --> 00:19:40,380
or insert your own custom
services into the picker.

343
00:19:42,382 --> 00:19:44,418
If you're sharing a file URL,

344
00:19:44,451 --> 00:19:48,822
NSSharingServicePicker can automatically
populate the header with an icon,

345
00:19:48,856 --> 00:19:52,426
name, and other metadata about the file.

346
00:19:52,459 --> 00:19:55,395
But if you're sharing
a custom type instead,

347
00:19:55,429 --> 00:19:57,831
you can conform your items
to a new protocol

348
00:19:57,865 --> 00:20:02,236
that NSSharingServicePicker will use
to request that information.

349
00:20:03,437 --> 00:20:08,041
The protocol is called
NSPreviewRepresentableActivityItem.

350
00:20:08,075 --> 00:20:12,145
Conforming types must be able to return
the underlying item to share,

351
00:20:12,179 --> 00:20:14,414
like an NSItemProvider,

352
00:20:14,448 --> 00:20:16,884
and they can optionally return a title,

353
00:20:16,917 --> 00:20:19,853
an image provider, and an icon provider.

354
00:20:21,555 --> 00:20:24,491
For convenience,
there's a conforming class in AppKit

355
00:20:24,525 --> 00:20:27,694
called NSPreviewRepresentingActivityItem

356
00:20:27,728 --> 00:20:32,866
which you can use to bundle up an existing
sharing item with its metadata.

357
00:20:32,900 --> 00:20:36,637
You can provide each image parameter
directly as an NSImage,

358
00:20:36,670 --> 00:20:40,474
or you can use NSItemProvider
if it's too performance-intensive

359
00:20:40,507 --> 00:20:42,910
to generate those images up front.

360
00:20:44,378 --> 00:20:47,381
The new sharing picker is great for
kicking off sharing from somewhere

361
00:20:47,414 --> 00:20:48,949
like a toolbar button,

362
00:20:48,982 --> 00:20:51,385
but sometimes you want to start sharing
from a menu,

363
00:20:51,418 --> 00:20:57,491
like the main menu bar or the context menu
for a selected view inside your app.

364
00:20:57,524 --> 00:21:01,228
Previously, you might've constructed
your own menu to handle this,

365
00:21:01,261 --> 00:21:06,433
by enumerating sharing services
and then building menu items for each one.

366
00:21:06,466 --> 00:21:10,103
Although that does work,
it bypasses the standard picker,

367
00:21:10,137 --> 00:21:13,674
so now you're missing out
on all of those new features.

368
00:21:13,707 --> 00:21:16,543
In macOS Ventura,
NSSharingServicePicker

369
00:21:16,577 --> 00:21:20,247
can create
a "standardShareMenuItem" for you.

370
00:21:20,280 --> 00:21:24,852
You can add the standard item
to any menu to easily kick off sharing.

371
00:21:24,885 --> 00:21:28,589
Once selected,
the menu item summons the sharing popover,

372
00:21:28,622 --> 00:21:31,792
and for context menus,
it'll even anchor the popover

373
00:21:31,825 --> 00:21:34,328
to the same view that produced the menu.

374
00:21:34,995 --> 00:21:39,333
There's a lot of new support for
managing collaboration in macOS Ventura.

375
00:21:40,000 --> 00:21:43,470
With some extra adoption,
your shareable items can also become

376
00:21:43,504 --> 00:21:45,506
invitations to collaborate,

377
00:21:45,539 --> 00:21:48,108
which users can initiate
via the sharing picker,

378
00:21:48,141 --> 00:21:52,346
drag-and-drop into Messages,
or even via FaceTime.

379
00:21:52,379 --> 00:21:55,983
You can share content
using CloudKit or iCloud Drive,

380
00:21:56,016 --> 00:22:00,787
or you can connect the invitation flow
with your own collaboration server.

381
00:22:00,821 --> 00:22:02,689
Now this is a really big topic,

382
00:22:02,723 --> 00:22:06,560
so we've made a few videos
to explain it in much greater depth.

383
00:22:06,593 --> 00:22:09,363
They're a must-see
if your app supports collaboration,

384
00:22:09,396 --> 00:22:12,499
or if you'd like
to get started with adding it.

385
00:22:12,533 --> 00:22:15,502
As you get started with macOS Ventura,

386
00:22:15,536 --> 00:22:19,873
make sure you're setting up your windows
to work best with Stage Manager.

387
00:22:19,907 --> 00:22:24,077
Then, consider how your design
might benefit from control enhancements

388
00:22:24,111 --> 00:22:27,881
like NSComboButton
and NSColorWell.

389
00:22:27,915 --> 00:22:33,921
Improve your iconography using the newest
symbols and features of SF Symbols.

390
00:22:33,954 --> 00:22:36,290
And finally, for collaboration,

391
00:22:36,323 --> 00:22:39,126
adopt the latest APIs
so that you get the most

392
00:22:39,159 --> 00:22:42,796
out of macOS Ventura's
new sharing experience.

393
00:22:43,797 --> 00:22:45,199
Thanks so much for watching,

394
00:22:45,232 --> 00:22:48,869
and thanks for continuing
to build great Mac applications.

