1
00:00:01,301 --> 00:00:07,307
[spacey music]

2
00:00:09,309 --> 00:00:10,978
Tyler: Hi, my name is Tyler,

3
00:00:11,011 --> 00:00:14,214
and I'm an engineer on the WebKit
accessibility team.

4
00:00:14,248 --> 00:00:16,250
In today's session,
we're going to take a tour

5
00:00:16,283 --> 00:00:19,520
of modern web accessibility,
beginning with a brief overview

6
00:00:19,553 --> 00:00:21,922
of assistive technologies
like screenreaders.

7
00:00:23,090 --> 00:00:26,827
Then, we'll talk about ways you can build
rich, accessible web apps

8
00:00:26,860 --> 00:00:31,999
with tools like custom controls,
speech synthesis markup language, or SSML,

9
00:00:32,032 --> 00:00:35,135
in the Web Speech API,
and the dialog element.

10
00:00:36,503 --> 00:00:39,406
So let's begin by talking
about assistive technologies.

11
00:00:40,374 --> 00:00:43,710
Approximately one in seven people
worldwide have a disability that affects

12
00:00:43,744 --> 00:00:47,447
the way they interact with the world,
their devices, and the web.

13
00:00:48,015 --> 00:00:50,484
People can experience
disabilities at any age,

14
00:00:50,517 --> 00:00:53,654
for any duration,
and at varying levels of severity.

15
00:00:53,687 --> 00:00:57,157
Apple has built a variety of tools
to enable users to interact

16
00:00:57,191 --> 00:01:00,027
with their devices in a way
that works best for them.

17
00:01:00,060 --> 00:01:04,765
These tools include VoiceOver,
Switch Control, Voice Control,

18
00:01:04,798 --> 00:01:09,736
and Full Keyboard Access, all of which
provide alternate means of device usage.

19
00:01:09,770 --> 00:01:12,005
To learn more about these tools
and some others,

20
00:01:12,039 --> 00:01:13,674
check out last year's session, titled:

21
00:01:13,707 --> 00:01:16,143
"Support Full Keyboard Access
in your iOS app."

22
00:01:17,211 --> 00:01:19,813
To get a feel for what this
is like on a real webpage,

23
00:01:19,847 --> 00:01:23,383
let's use VoiceOver to navigate
a sample quiz assessment website.

24
00:01:23,417 --> 00:01:27,354
On my iPad, I'll triple-press
the top button to activate VoiceOver.

25
00:01:28,222 --> 00:01:31,358
Siri: VoiceOver on.
Safari, Show Sidebar, Button.

26
00:01:32,426 --> 00:01:36,797
Tyler: And now, with VoiceOver active,
I'll tap the page heading to focus it...

27
00:01:36,830 --> 00:01:38,966
Siri: Pop Quiz, Heading level 1.

28
00:01:38,999 --> 00:01:41,935
Tyler: And swipe right to move
through the elements on this page.

29
00:01:41,969 --> 00:01:46,940
Siri: One of six: How many slices are in
1/4 of a pizza with eight total slices?

30
00:01:46,974 --> 00:01:50,444
Two slices, radio button, unchecked,
one of four,

31
00:01:50,477 --> 00:01:51,478
Three slices--

32
00:01:51,512 --> 00:01:52,412
Four slices--

33
00:01:52,446 --> 00:01:53,514
Six slices--

34
00:01:53,547 --> 00:01:54,948
Next question. Button.

35
00:01:55,816 --> 00:01:58,552
Tyler: As a web developer,
you have many tools at your disposal

36
00:01:58,585 --> 00:02:02,656
for making your pages accessible
to users of technologies like VoiceOver.

37
00:02:02,689 --> 00:02:05,559
For example,
Safari has built-in accessibility support

38
00:02:05,592 --> 00:02:09,930
for semantic HTML elements like button,
h1 through h6,

39
00:02:09,963 --> 00:02:13,867
table elements,
list elements, and many more.

40
00:02:13,901 --> 00:02:16,803
Using these semantic HTML elements
should be your default,

41
00:02:16,837 --> 00:02:20,174
as this will guarantee a consistent,
accessible experience for your users

42
00:02:20,207 --> 00:02:22,776
across all browsers.

43
00:02:22,809 --> 00:02:27,047
However, sometimes you may have a need
not completely fulfilled by semantic HTML,

44
00:02:27,080 --> 00:02:30,417
and need to create
custom components with JavaScript.

45
00:02:30,450 --> 00:02:32,419
If this is the case,
you'll likely also need

46
00:02:32,452 --> 00:02:34,688
to supplement your components
with ARIA attributes

47
00:02:34,721 --> 00:02:38,425
so that their semantics are properly
conveyed to assistive technologies.

48
00:02:38,458 --> 00:02:42,596
This brings us to our second topic
of the day, custom controls.

49
00:02:42,629 --> 00:02:45,933
Let's say we wanted to make
the pizza quiz question more engaging.

50
00:02:45,966 --> 00:02:49,469
One thing we could do is replace
the radio buttons with a custom control

51
00:02:49,503 --> 00:02:53,473
that allows users to add and remove slices
from a pizza tray with a tap.

52
00:02:54,274 --> 00:02:57,477
Our markup for this custom control
might start with a div and an ID .

53
00:02:58,912 --> 00:03:02,716
In order to make this component operable
for users interacting with a tap or click,

54
00:03:02,749 --> 00:03:05,052
we'll need to add a click event listener.

55
00:03:05,085 --> 00:03:07,921
Let's create a new PizzaControl class
with a constructor

56
00:03:07,955 --> 00:03:09,556
that accepts the ID of an element.

57
00:03:10,691 --> 00:03:13,694
We'll get that element by ID, and then
add a click event listener for it.

58
00:03:15,195 --> 00:03:18,632
This listener will compute the new number
of slices based on the tapped position

59
00:03:18,665 --> 00:03:22,402
and then pass that value to a function
called update to re-render the control.

60
00:03:22,436 --> 00:03:25,005
This will work great for some users,
but not all.

61
00:03:26,139 --> 00:03:28,775
For example, what about our users
with visual disabilities,

62
00:03:28,809 --> 00:03:31,345
who won't know where to click or tap?

63
00:03:31,378 --> 00:03:34,314
When building custom components,
we must always consider how users

64
00:03:34,348 --> 00:03:37,918
of assistive technologies of all types
will interact with our component.

65
00:03:37,951 --> 00:03:40,621
With that in mind,
the first step to making our component

66
00:03:40,654 --> 00:03:44,391
accessible is to give it a role attribute
with a value of "slider".

67
00:03:44,424 --> 00:03:47,861
Our control maps quite nicely
to the model of a slider.

68
00:03:47,895 --> 00:03:52,566
There is a minimum value, zero slices,
a maximum value, eight slices,

69
00:03:52,599 --> 00:03:54,868
and a current value, four slices.

70
00:03:55,602 --> 00:03:59,373
We'll also need to add a tabindex of zero
to ensure our component is focusable

71
00:03:59,406 --> 00:04:02,142
for users of keyboards
and other non-touch interfaces.

72
00:04:03,443 --> 00:04:05,512
We'll also need
to add a few ARIA attributes.

73
00:04:06,547 --> 00:04:10,217
Aria-valuemin and aria-valuemax inform
assistive technologies

74
00:04:10,250 --> 00:04:12,853
of the minimum
and maximum values for this slider.

75
00:04:14,054 --> 00:04:16,490
These attributes are similar
to the min and max attributes

76
00:04:16,523 --> 00:04:19,026
that you can use
on native range type inputs.

77
00:04:20,527 --> 00:04:24,498
Next, let's add aria-valuenow to convey
the current value of the control.

78
00:04:25,899 --> 00:04:29,269
We'll also use aria-valuetext
to provide a more useful description

79
00:04:29,303 --> 00:04:31,505
of the current value,
which is four slices.

80
00:04:33,040 --> 00:04:35,876
Now that we've established
our control as a focusable slider,

81
00:04:35,909 --> 00:04:37,911
we need to handle updates
to the control's value

82
00:04:37,945 --> 00:04:40,013
from assistive technologies.

83
00:04:40,047 --> 00:04:43,150
On iOS, VoiceOver facilitates
the adjustment of sliders

84
00:04:43,183 --> 00:04:45,986
with a single finger swipe up
to increment the slider,

85
00:04:46,019 --> 00:04:49,122
and a swipe down to decrement the slider.

86
00:04:49,156 --> 00:04:52,326
Safari provides an easy way
to handle these gestures.

87
00:04:52,359 --> 00:04:55,429
When a VoiceOver user swipes up
with a slider in focus,

88
00:04:55,462 --> 00:04:59,166
Safari automatically simulates
an arrow-key right event.

89
00:04:59,199 --> 00:05:01,668
And similarly,
if a VoiceOver user swipes down

90
00:05:01,702 --> 00:05:05,806
with a slider in focus,
an arrow key left event will be simulated.

91
00:05:05,839 --> 00:05:09,109
These simulated events behave
the same as real keypresses,

92
00:05:09,142 --> 00:05:11,912
meaning they can be handled
by key event listeners.

93
00:05:11,945 --> 00:05:13,814
With this new knowledge in our tool belt,

94
00:05:13,847 --> 00:05:16,950
let's add a keydown listener
to our pizza control.

95
00:05:16,984 --> 00:05:19,753
If the activated key is
a right arrow or up arrow,

96
00:05:19,786 --> 00:05:23,390
we'll update our control with
the current amount of slices plus one.

97
00:05:23,423 --> 00:05:26,960
And similarly, if the activated key
is a left arrow or down arrow,

98
00:05:26,994 --> 00:05:30,531
we'll update our control with
the current amount of slices minus one.

99
00:05:30,564 --> 00:05:34,401
Adding this key event listener
not only benefits VoiceOver users,

100
00:05:34,434 --> 00:05:36,603
but also users of Full Keyboard Access,

101
00:05:36,637 --> 00:05:38,872
who may heavily or entirely rely
on your web app

102
00:05:38,906 --> 00:05:40,541
being keyboard accessible.

103
00:05:40,574 --> 00:05:42,709
With both
of our event listeners established,

104
00:05:42,743 --> 00:05:46,280
we probably now also want
to define our update function.

105
00:05:46,313 --> 00:05:49,349
First, we'll clamp the value we're given
to ensure it's within bounds,

106
00:05:49,383 --> 00:05:51,185
between zero and eight,

107
00:05:51,218 --> 00:05:55,122
and update our stored slice count state
to this value.

108
00:05:55,155 --> 00:05:58,959
Next, we need to ensure we update
both the visual and ARIA representations

109
00:05:58,992 --> 00:06:00,694
of our control.

110
00:06:00,727 --> 00:06:03,830
When building custom components,
a good rule is that if you're updating

111
00:06:03,864 --> 00:06:06,200
the visual representation of your
component,

112
00:06:06,233 --> 00:06:08,135
you also need to think
about how you'll be updating

113
00:06:08,168 --> 00:06:09,503
the ARIA representation.

114
00:06:10,804 --> 00:06:13,540
In this case, we need to update
both the aria-valuenow

115
00:06:13,574 --> 00:06:15,209
and aria-valuetext attributes

116
00:06:15,242 --> 00:06:18,512
to inform users of assistive technologies
of the new control state.

117
00:06:19,980 --> 00:06:23,317
We'll begin by setting aria-valuenow
to be the current slice count.

118
00:06:24,351 --> 00:06:27,921
Next, we'll set aria-valuetext
to be the more human-friendly description

119
00:06:27,955 --> 00:06:31,225
of the slice count,
plus either the word "slice" or "slices".

120
00:06:32,192 --> 00:06:34,161
Okay, now that all that's in place,

121
00:06:34,194 --> 00:06:36,029
let's go back
to our quiz assessment web app

122
00:06:36,063 --> 00:06:38,031
to see what the experience is like with
VoiceOver.

123
00:06:38,065 --> 00:06:40,701
I'll begin by tapping
the pizza control to focus it.

124
00:06:41,468 --> 00:06:43,704
Siri: Four slices, adjustable.

125
00:06:43,737 --> 00:06:45,772
Swipe up or down with one finger
to adjust the value.

126
00:06:46,607 --> 00:06:49,276
Tyler: We heard that VoiceOver read
the initial value of the slider,

127
00:06:49,309 --> 00:06:52,045
four slices,
and told us that it's adjustable.

128
00:06:52,079 --> 00:06:54,748
Following VoiceOver's prompt,
we can swipe up to increase

129
00:06:54,781 --> 00:06:56,450
the number of slices selected...

130
00:06:56,483 --> 00:06:59,152
Siri: Five slices.
Six slices.

131
00:06:59,186 --> 00:07:02,222
Tyler: And swipe down to decrease
the number of slices selected.

132
00:07:02,256 --> 00:07:04,725
Siri: Five slices.
Four slices.

133
00:07:04,758 --> 00:07:07,361
Tyler: With these changes in place,
our custom slider component

134
00:07:07,394 --> 00:07:08,962
is now much more accessible.

135
00:07:09,930 --> 00:07:13,901
Now, let's talk about how you can use SSML
in the Web Speech API

136
00:07:13,934 --> 00:07:16,970
to build more rich experiences
for all of your users.

137
00:07:17,604 --> 00:07:21,642
The Web Speech API is made up
of two primary JavaScript interfaces:

138
00:07:21,675 --> 00:07:23,911
SpeechRecognition for audio input,

139
00:07:23,944 --> 00:07:26,980
and SpeechSynthesis
for text-to-speech audio output.

140
00:07:28,148 --> 00:07:30,117
Web Speech gives you the capabilities
to provide

141
00:07:30,150 --> 00:07:33,120
a voice-assisted or voice-only interface
for your web app.

142
00:07:34,288 --> 00:07:37,391
This can be beneficial for users
with motor disabilities,

143
00:07:37,424 --> 00:07:39,593
who may have trouble using other means
of control,

144
00:07:39,626 --> 00:07:41,962
like a mouse, keyboard, or touchscreen.

145
00:07:42,696 --> 00:07:46,200
New to SpeechSynthesis on Safari
is the ability to use SSML

146
00:07:46,233 --> 00:07:48,135
to manipulate the way your text is spoken.

147
00:07:49,069 --> 00:07:51,905
SSML has tons of capabilities.

148
00:07:51,939 --> 00:07:54,074
For example,
you can use the break element

149
00:07:54,107 --> 00:07:56,543
to insert pauses in speech
with a time of your choosing.

150
00:07:57,177 --> 00:08:01,215
You may want to ask your users
to breathe in... and breathe out.

151
00:08:02,216 --> 00:08:04,318
Using the phoneme element,
you can control

152
00:08:04,351 --> 00:08:07,087
the pronunciation of words,
like "tomayto" versus "tomahto."

153
00:08:08,755 --> 00:08:11,391
The prosody element allows
you to manipulate the pitch,

154
00:08:11,425 --> 00:08:14,595
rate, and volume of your spoken text.

155
00:08:14,628 --> 00:08:18,065
And these only scratch
the surface of SSML's capabilities.

156
00:08:18,098 --> 00:08:21,835
To learn more, check out
the SSML specification on w3.org.

157
00:08:22,703 --> 00:08:26,406
Let's put our newfound knowledge
of SSML to use.

158
00:08:26,440 --> 00:08:29,009
For the final question of our quiz,
we ask our students

159
00:08:29,042 --> 00:08:31,645
to choose a radio button
with the correct Spanish translation

160
00:08:31,678 --> 00:08:34,381
of the phrase, "the water."

161
00:08:34,414 --> 00:08:36,783
We can make this question
more engaging by allowing users

162
00:08:36,817 --> 00:08:40,687
to press a button to read the question
and answers with text-to-speech,

163
00:08:40,721 --> 00:08:43,056
using SSML to read
the Spanish phrases

164
00:08:43,090 --> 00:08:44,658
in a Spanish-locale voice.

165
00:08:45,526 --> 00:08:48,862
Let's begin by creating our button,
ensuring to wrap the speaker emoji

166
00:08:48,896 --> 00:08:51,265
in a span with aria-hidden set to true,

167
00:08:51,298 --> 00:08:54,434
since this emoji's description
is not particularly useful here.

168
00:08:56,036 --> 00:08:58,438
Next, let's create
a helper JavaScript function

169
00:08:58,472 --> 00:08:59,973
called wrapWithSSML ,

170
00:09:00,007 --> 00:09:03,043
which takes a phrase to speak
and a voice-locale to speak it in.

171
00:09:04,144 --> 00:09:06,680
We'll begin building our SSML string
with the break element

172
00:09:06,713 --> 00:09:09,816
to insert a short pause before each phrase
to build emphasis.

173
00:09:10,884 --> 00:09:13,620
With the prosody element,
we'll specify that we want our phrase

174
00:09:13,654 --> 00:09:15,756
spoken at 80% of the default rate.

175
00:09:17,157 --> 00:09:19,459
And finally,
we can use the lang element to choose

176
00:09:19,493 --> 00:09:22,596
the locale-specific voice
we want our phrase to be spoken in.

177
00:09:24,198 --> 00:09:26,967
And now we'll add a click event listener
to our read question button

178
00:09:27,000 --> 00:09:29,837
and build our SSML string inside.

179
00:09:29,870 --> 00:09:32,406
We begin by wrapping
the entire string in a speak element.

180
00:09:33,607 --> 00:09:36,476
Speak is important because it
indicates to synthesis processors

181
00:09:36,510 --> 00:09:39,046
that anything within
should be considered SSML.

182
00:09:40,447 --> 00:09:44,718
Next, we include our question:
How do you say "the water" in Spanish?

183
00:09:45,686 --> 00:09:47,855
We can use
our wrapWithSSML helper function

184
00:09:47,888 --> 00:09:50,090
to give emphasis
to the phrase being translated

185
00:09:50,123 --> 00:09:52,593
and ensure it's read
in a U.S. English locale-voice.

186
00:09:53,594 --> 00:09:57,331
We'll also use wrapWithSSML
for all four of our potential answers,

187
00:09:57,364 --> 00:10:01,101
providing emphasis and requesting that
they be read in a Spanish locale-voice.

188
00:10:02,402 --> 00:10:05,739
Finally, we can create
a new SpeechSynthesisUtterance object

189
00:10:05,772 --> 00:10:08,575
with our SSML string,
and pass that to the window

190
00:10:08,609 --> 00:10:11,144
SpeechSynthesis speak method
to read it out.

191
00:10:13,480 --> 00:10:15,582
With all of that in place,
let's see what the experience is like

192
00:10:15,616 --> 00:10:17,184
on our web app.

193
00:10:17,217 --> 00:10:20,087
On the page with the final question,
I'll tap the "Read question" button,

194
00:10:20,120 --> 00:10:21,855
and listen.

195
00:10:21,889 --> 00:10:26,260
Siri: How do you say "the water"
in Spanish?

196
00:10:26,293 --> 00:10:28,295
El agua.

197
00:10:28,328 --> 00:10:30,564
La abuela.

198
00:10:30,597 --> 00:10:32,900
La abeja.

199
00:10:32,933 --> 00:10:34,902
El árbol.

200
00:10:34,935 --> 00:10:37,771
Tyler: Thanks to SSML, we've created
a much more engaging experience

201
00:10:37,804 --> 00:10:38,839
for our students.

202
00:10:39,973 --> 00:10:42,709
Another common design pattern
on the web is the modal.

203
00:10:43,710 --> 00:10:47,147
You may use this on your web apps
as a sign-in or sign-up form,

204
00:10:47,181 --> 00:10:49,516
for confirmation dialogs, and more.

205
00:10:50,684 --> 00:10:52,953
One way to provide
an accessible modal experience

206
00:10:52,986 --> 00:10:55,489
is the aria-modal attribute.

207
00:10:55,522 --> 00:10:58,025
With aria-modal="true",
Safari will consider

208
00:10:58,058 --> 00:11:02,329
all accessible elements outside
the modal to be ignored.

209
00:11:02,362 --> 00:11:05,866
Recently, Safari has also added support
for the dialog element.

210
00:11:06,567 --> 00:11:09,503
Dialog makes providing
an accessibility-friendly modal experience

211
00:11:09,536 --> 00:11:12,239
much easier
with standard focus interactions,

212
00:11:12,272 --> 00:11:14,741
out-of-the box handling
of modal closing gestures,

213
00:11:14,775 --> 00:11:18,145
like the Escape key and the scrub gesture
on iOS, and more.

214
00:11:18,879 --> 00:11:21,748
To see this in action,
let's change the "Show score" button

215
00:11:21,782 --> 00:11:24,952
on our quiz assessment web app
to open a dialog with our results.

216
00:11:26,920 --> 00:11:30,324
First things first,
we'll need to create our dialog element.

217
00:11:30,357 --> 00:11:33,393
The markup
could look something like this.

218
00:11:33,427 --> 00:11:37,898
We give the dialog an ID so it can be
referenced later by our show score button.

219
00:11:37,931 --> 00:11:40,834
We also wrap the dialog's contents
in a form with method dialog.

220
00:11:41,935 --> 00:11:44,938
By doing so, any submit type controls,
like our button,

221
00:11:44,972 --> 00:11:47,641
will cause the dialog to close.

222
00:11:47,674 --> 00:11:50,878
We'll also need
a bit of JavaScript to open the modal.

223
00:11:50,911 --> 00:11:53,080
Let's add a click event listener
to our Show Score button

224
00:11:53,113 --> 00:11:55,215
that calls showModal()
on our dialog element.

225
00:11:57,484 --> 00:11:59,953
And now we're ready to try this out.

226
00:11:59,987 --> 00:12:03,123
With VoiceOver active, I'll tap
the "Show score" button to focus it.

227
00:12:04,124 --> 00:12:05,459
Siri: Show score. Button.

228
00:12:06,460 --> 00:12:08,462
Tyler: Then, I'll double-tap
with a single finger

229
00:12:08,495 --> 00:12:10,531
anywhere on the screen
to press the button.

230
00:12:11,465 --> 00:12:14,301
Siri: Show score. Web dialog.
Close button.

231
00:12:14,334 --> 00:12:16,270
Tyler:
And now we have our modal.

232
00:12:16,303 --> 00:12:19,573
I can swipe left to move through
the modal's contents to hear my score.

233
00:12:19,606 --> 00:12:22,009
Siri: You got all six question correct.
Great work!

234
00:12:22,442 --> 00:12:24,878
Tyler: And when I'm done, I can move
back to the close button

235
00:12:24,912 --> 00:12:26,280
by swiping right...

236
00:12:26,313 --> 00:12:28,649
Siri: Close button.

237
00:12:28,682 --> 00:12:31,084
Tyler: And double tap to close
the modal.

238
00:12:31,118 --> 00:12:32,886
Siri: Unchecked.

239
00:12:32,920 --> 00:12:34,321
Tyler: As I mentioned previously,

240
00:12:34,354 --> 00:12:36,523
the dialog element handles
the iOS scrub gesture

241
00:12:36,557 --> 00:12:38,759
for modal closure out of the box.

242
00:12:38,792 --> 00:12:42,129
To demonstrate, I'll re-open the modal
with a double-tap...

243
00:12:42,162 --> 00:12:44,398
Siri: Show score, button.

244
00:12:44,431 --> 00:12:46,767
Web dialog. Close, button.

245
00:12:46,800 --> 00:12:48,335
Tyler: And then perform the scrub gesture

246
00:12:48,368 --> 00:12:52,239
by quickly moving two fingers right,
left, and right across the screen.

247
00:12:53,540 --> 00:12:55,075
Siri: Show score. Button.

248
00:12:55,108 --> 00:12:57,044
Tyler: Okay, so we have
a functional modal,

249
00:12:57,077 --> 00:12:59,079
but we can still do better.

250
00:12:59,112 --> 00:13:00,781
Did you notice
that when we opened the modal,

251
00:13:00,814 --> 00:13:04,418
VoiceOver only read "web dialog,
close, button"?

252
00:13:04,451 --> 00:13:06,720
In this situation,
it would probably make sense

253
00:13:06,753 --> 00:13:09,556
to use an aria-label
or aria-labelledby attribute

254
00:13:09,590 --> 00:13:12,860
to provide more information for users
of assistive technologies.

255
00:13:12,893 --> 00:13:15,829
Since our modal content is short,
simply informing users

256
00:13:15,863 --> 00:13:19,433
of how many answers they got correct,
let's use that for our label.

257
00:13:19,466 --> 00:13:24,004
First, we'll wrap the modal content
in a span with an ID.

258
00:13:24,037 --> 00:13:26,039
Then, we can add
the aria-labelledby attribute

259
00:13:26,073 --> 00:13:28,509
to our dialog pointing
to the modal-content ID.

260
00:13:29,543 --> 00:13:32,412
Let's also explicitly set
the initial modal focus element

261
00:13:32,446 --> 00:13:34,848
to be the close button
with the autofocus attribute.

262
00:13:36,016 --> 00:13:38,852
While this was already the default
behavior for this simple modal,

263
00:13:38,886 --> 00:13:41,421
that may not have been the case
if our modal had more content

264
00:13:41,455 --> 00:13:43,423
or was more complex,
with lots of controls.

265
00:13:44,591 --> 00:13:47,227
For example,
in a modal with a lot of content,

266
00:13:47,261 --> 00:13:51,164
it may have made more sense
to place autofocus on a top-level heading.

267
00:13:51,198 --> 00:13:53,467
As the modal author,
you'll know best as to what will provide

268
00:13:53,500 --> 00:13:55,102
a great experience for your users.

269
00:13:56,303 --> 00:13:58,205
With our new attributes in place,
let's again see

270
00:13:58,238 --> 00:14:00,574
what the experience is like in VoiceOver.

271
00:14:00,607 --> 00:14:03,177
I'll first tap the Show score button
once to focus it...

272
00:14:04,077 --> 00:14:05,112
Siri: Show score, button.

273
00:14:06,613 --> 00:14:09,149
Tyler: And then double-tap to press it.

274
00:14:09,183 --> 00:14:13,387
Siri: You got all six questions correct.
Great work! Web dialog, close button.

275
00:14:13,954 --> 00:14:15,822
Tyler: That's a much better experience.

276
00:14:15,856 --> 00:14:19,526
A VoiceOver user immediately hears
their score thanks to aria-labelledby,

277
00:14:19,560 --> 00:14:21,828
and is already focused
on the close button,

278
00:14:21,862 --> 00:14:23,897
and therefore can double-tap
to leave the modal.

279
00:14:23,931 --> 00:14:26,834
And with that,
it's time to wrap up today's session.

280
00:14:26,867 --> 00:14:29,903
I hope you've learned some techniques
to build rich, accessible web apps,

281
00:14:29,937 --> 00:14:32,472
ensuring you provide a great experience
to all of your users.

282
00:14:33,373 --> 00:14:35,509
Please try these features out
in the latest Safari,

283
00:14:35,542 --> 00:14:37,878
and file any bugs you find
to the WebKit bug tracker

284
00:14:37,911 --> 00:14:39,913
at bugs.webkit.org.

285
00:14:40,681 --> 00:14:44,251
Thanks for joining me on today's whirlwind
tour of modern web accessibility.

286
00:14:44,284 --> 00:14:46,787
Have an amazing WWDC!

287
00:14:46,820 --> 00:14:48,889
[spacey music]

