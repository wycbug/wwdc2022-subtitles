1
00:00:00,501 --> 00:00:08,509
â™ª â™ª

2
00:00:09,576 --> 00:00:14,314
Owen: Hello, and welcome
to Bring your iOS app to the Mac.

3
00:00:14,348 --> 00:00:17,784
My name is Owen,
and I'm a Mac Catalyst engineer.

4
00:00:19,286 --> 00:00:24,291
Whether you ship your iOS app
on M1 Macs with no changes,

5
00:00:24,324 --> 00:00:28,395
have started thinking about
going further with Mac Catalyst,

6
00:00:28,428 --> 00:00:33,033
or already ship a Catalyst app you want to
make even better,

7
00:00:33,066 --> 00:00:36,203
I'm excited to share new APIs
and techniques

8
00:00:36,236 --> 00:00:39,773
to make your app the best it can be
on Mac.

9
00:00:39,806 --> 00:00:43,610
But first, I'd love to show off
some of the amazing work

10
00:00:43,644 --> 00:00:49,249
done by developers that showcases
what's possible with Mac Catalyst.

11
00:00:49,283 --> 00:00:52,719
Craft is an incredible app
that makes it effortless

12
00:00:52,753 --> 00:00:56,023
to start writing
and produce beautiful documents,

13
00:00:56,056 --> 00:01:00,327
and is the App Store's
2021 Mac App of the Year winner.

14
00:01:00,360 --> 00:01:01,995
And because of Mac Catalyst,

15
00:01:02,029 --> 00:01:05,933
this great experience is available
across devices,

16
00:01:05,966 --> 00:01:10,671
so it's always ready
when your next idea strikes.

17
00:01:10,704 --> 00:01:15,909
Darkroom's smart AI editing tools
streamline your photography workflow,

18
00:01:15,943 --> 00:01:20,080
and you can start your edits in the field
on your iPhone or iPad,

19
00:01:20,113 --> 00:01:23,851
and finish at home
with their Mac Catalyst app.

20
00:01:23,884 --> 00:01:27,421
It won an Apple Design Award
for outstanding design,

21
00:01:27,454 --> 00:01:30,023
innovation, and ingenuity,

22
00:01:30,057 --> 00:01:34,761
and has been an App Store Editor's Choice
app since 2018.

23
00:01:36,330 --> 00:01:42,035
Night Sky is a stunning way to explore
the cosmos right from your computer.

24
00:01:42,069 --> 00:01:44,204
You can learn about the constellations,

25
00:01:44,238 --> 00:01:48,842
and get a closer look
with detailed 3D models of the moon,

26
00:01:48,876 --> 00:01:51,712
planets, and satellites.

27
00:01:51,745 --> 00:01:57,284
It has won multiple Webby and Lovie awards
for its design and breathtaking visuals.

28
00:01:59,319 --> 00:02:04,358
Asphalt 9 - Legends is an exhilarating
high-octane racing simulation,

29
00:02:04,391 --> 00:02:08,428
and the only racing game to ever win
an Apple Design Award,

30
00:02:08,462 --> 00:02:11,532
and the action is even more exciting
on the big screen

31
00:02:11,565 --> 00:02:13,667
with their Mac Catalyst version.

32
00:02:15,135 --> 00:02:19,840
Now, I'll get into all the ways
you can create a great experience

33
00:02:19,873 --> 00:02:23,043
on Mac for your app.

34
00:02:23,076 --> 00:02:25,979
I'm going to start
with a couple of new options

35
00:02:26,013 --> 00:02:29,550
for running your iOS app natively on M1,

36
00:02:29,583 --> 00:02:33,954
the easiest way
to get your existing iOS app onto Mac.

37
00:02:35,389 --> 00:02:40,527
Then I'll walk through adding
a Mac Catalyst run destination in Xcode,

38
00:02:40,561 --> 00:02:42,763
and go over what changes.

39
00:02:44,031 --> 00:02:48,268
I'll show off the new behaviors
your Catalyst app will get for free

40
00:02:48,302 --> 00:02:52,039
when you adopt
the new Desktop-class iPad APIs.

41
00:02:53,607 --> 00:02:56,376
Then dig in to Mac-specific refinements

42
00:02:56,410 --> 00:02:59,980
made possible with new Mac Catalyst APIs.

43
00:03:01,849 --> 00:03:07,321
I'll start with some new options
for native iOS apps on Macs with M1.

44
00:03:09,323 --> 00:03:14,895
Your iOS apps are already available
on M1 Macs in the Mac App Store.

45
00:03:14,928 --> 00:03:17,231
As long as you haven't opted out,

46
00:03:17,264 --> 00:03:22,870
your app is found in a search
under the "iPhone and iPad Apps" tab.

47
00:03:22,903 --> 00:03:25,439
And we have a couple new additions

48
00:03:25,472 --> 00:03:28,976
that can improve your app experience
on Mac.

49
00:03:29,009 --> 00:03:33,080
There are two new keys
you can add to your Info plist,

50
00:03:33,113 --> 00:03:38,385
which allow you to specify
how your iOS app should launch on Mac.

51
00:03:38,418 --> 00:03:41,688
These keys aren't bound
to any SDK version,

52
00:03:41,722 --> 00:03:47,127
and are ignored on iOS and on Mac
prior to macOS 12.1,

53
00:03:47,160 --> 00:03:50,330
so they're safe to add
to any app that would benefit.

54
00:03:51,865 --> 00:03:55,769
The first key,
"UISupportsTrueScreenSizeOnMac,"

55
00:03:55,802 --> 00:03:58,138
indicates that your app is prepared

56
00:03:58,172 --> 00:04:03,143
for the wide variety of display
configurations it may encounter.

57
00:04:03,177 --> 00:04:05,879
This way,
your app gets the true screen size

58
00:04:05,913 --> 00:04:10,250
and pixel density,
rather than a compatible iPad size.

59
00:04:13,387 --> 00:04:18,025
The second key,
"UILaunchToFullScreenByDefaultOnMac,"

60
00:04:18,058 --> 00:04:21,695
tells the system that your app prefers
to enter fullscreen mode

61
00:04:21,728 --> 00:04:23,997
as soon as it's launched.

62
00:04:24,031 --> 00:04:26,200
These two keys work great together,

63
00:04:26,233 --> 00:04:29,102
especially for games and multimedia apps,

64
00:04:29,136 --> 00:04:34,007
delivering a pixel-perfect,
edge-to-edge, full screen experience.

65
00:04:35,609 --> 00:04:36,977
These keys have been adopted

66
00:04:37,010 --> 00:04:40,314
by the award-winning
Sky: Children of the Light

67
00:04:40,347 --> 00:04:43,784
to provide an immersive experience
immediately.

68
00:04:43,817 --> 00:04:47,855
As soon as the game is launched,
it pulls you in to its beautiful world

69
00:04:47,888 --> 00:04:51,992
of exploration
by filling the screen with rich detail.

70
00:04:52,025 --> 00:04:57,130
Another way to improve your app experience
on Mac is with Touch Alternatives,

71
00:04:57,164 --> 00:05:01,869
which automatically converts keyboard,
mouse, and trackpad input

72
00:05:01,902 --> 00:05:07,074
into iOS multitouch gestures
and device motion expected by your app.

73
00:05:08,008 --> 00:05:11,245
We've already added built-in
touch alternative support

74
00:05:11,278 --> 00:05:14,982
for many of the most popular games
on the app store.

75
00:05:15,015 --> 00:05:18,418
When launched, they automatically show
a tutorial

76
00:05:18,452 --> 00:05:22,189
explaining how their touch controls
translate to a keyboard and mouse

77
00:05:22,222 --> 00:05:24,157
or trackpad.

78
00:05:24,191 --> 00:05:28,295
For example, the arrow keys
can be used to simulate swipes

79
00:05:28,328 --> 00:05:30,163
from the center of the window,

80
00:05:30,197 --> 00:05:33,000
and the spacebar to perform a tap.

81
00:05:35,202 --> 00:05:38,138
To opt into automatic Touch Alternatives,

82
00:05:38,172 --> 00:05:41,041
create a new plist file in your app named

83
00:05:41,074 --> 00:05:46,847
"com.apple.uikit.inputalternatives.plist".

84
00:05:48,649 --> 00:05:52,186
First, add a key called
"defaultEnablement"

85
00:05:52,219 --> 00:05:54,454
with a string value of "enabled",

86
00:05:54,488 --> 00:05:58,992
which tells the system that Touch
Alternatives should be on immediately.

87
00:06:01,028 --> 00:06:05,232
Below that, add another key
called "requiredOnboarding".

88
00:06:05,265 --> 00:06:08,735
This is an array containing a list
of which controls

89
00:06:08,769 --> 00:06:11,638
you've decided work best for your app.

90
00:06:14,074 --> 00:06:16,109
You have the choice to onboard

91
00:06:16,143 --> 00:06:18,879
for five different control options:

92
00:06:18,912 --> 00:06:23,183
tap, tilt, drag, swipe,

93
00:06:23,217 --> 00:06:25,953
and direct touch input from a trackpad.

94
00:06:27,454 --> 00:06:30,257
Note that when
Touch Alternatives is enabled,

95
00:06:30,290 --> 00:06:32,659
all of these controls will be active,

96
00:06:32,693 --> 00:06:36,430
but you should still decide
which make the most sense for your app,

97
00:06:36,463 --> 00:06:41,802
and only add the controls that you want
highlighted to your onboarding plist.

98
00:06:41,835 --> 00:06:44,705
This is detected
when your app is run on Mac,

99
00:06:44,738 --> 00:06:50,744
and on first launch, the onboarding sheet
is presented highlighting those controls.

100
00:06:50,777 --> 00:06:54,147
In your app settings,
people can switch between displaying

101
00:06:54,181 --> 00:06:58,585
the preferred controls specified
in the plist

102
00:06:58,619 --> 00:07:00,721
and all controls.

103
00:07:02,289 --> 00:07:06,960
Of course, the best option
is to implement keyboard and cursor support

104
00:07:06,994 --> 00:07:09,530
directly in your app.

105
00:07:09,563 --> 00:07:14,001
By doing this, you ensure
your app behaves well on all devices,

106
00:07:14,034 --> 00:07:18,572
including iPads with an attached keyboard,
and on the Mac.

107
00:07:19,973 --> 00:07:22,609
For more information, watch the videos

108
00:07:22,643 --> 00:07:25,145
"Support hardware keyboards in your app"

109
00:07:25,179 --> 00:07:28,215
and "Handle trackpad and mouse input".

110
00:07:28,248 --> 00:07:34,521
Now I'll quickly cover the process
of becoming a Mac Catalyst app.

111
00:07:35,556 --> 00:07:39,726
By adding a Mac Catalyst destination
in your project settings,

112
00:07:39,760 --> 00:07:44,231
your app will automatically be converted
to a full Mac Catalyst app

113
00:07:44,264 --> 00:07:46,667
capable of running on every Mac,

114
00:07:46,700 --> 00:07:52,005
and allowing you to customize it further
using Mac Catalyst API.

115
00:07:52,039 --> 00:07:56,043
You also have the choice
to optimize the interface for Mac,

116
00:07:56,076 --> 00:07:59,279
which will give you
native AppKit styled controls,

117
00:07:59,313 --> 00:08:02,883
and ensure your app content
renders at native scale.

118
00:08:04,918 --> 00:08:08,722
I'll be using the Markdown demo app
that the team has been working on

119
00:08:08,755 --> 00:08:11,525
to highlight the new iPad features.

120
00:08:11,558 --> 00:08:16,430
When I first bring it to Mac, it's running
in "Scaled to Match iPad" mode.

121
00:08:18,198 --> 00:08:20,734
When I switch to Optimize for Mac,

122
00:08:20,767 --> 00:08:23,437
many changes happen automatically.

123
00:08:25,239 --> 00:08:27,241
When compared side-by-side,

124
00:08:27,274 --> 00:08:29,877
the differences are apparent.

125
00:08:29,910 --> 00:08:32,012
When the app is optimized for Mac,

126
00:08:32,045 --> 00:08:34,781
the UINavigationBar gets translated into

127
00:08:34,815 --> 00:08:36,884
a rich NSToolbar,

128
00:08:36,917 --> 00:08:39,887
providing native AppKit controls.

129
00:08:39,920 --> 00:08:43,824
This translation happens
for other controls as well.

130
00:08:43,857 --> 00:08:47,394
And the text size adjusts as well.

131
00:08:47,427 --> 00:08:50,931
Text in the iPad idiom
renders at iPad size,

132
00:08:50,964 --> 00:08:56,303
and then is scaled down
to 77% of its original size.

133
00:08:56,336 --> 00:09:00,841
Text in the Mac idiom is handled
with native Mac font rendering,

134
00:09:00,874 --> 00:09:04,244
which happens at pixel-perfect scale.

135
00:09:04,278 --> 00:09:06,246
This is ideal for our app,

136
00:09:06,280 --> 00:09:10,484
since it ensures
the text always looks crisp.

137
00:09:10,517 --> 00:09:13,387
With the app opted into Mac Catalyst,

138
00:09:13,420 --> 00:09:15,956
I want to check out how well it works,

139
00:09:15,989 --> 00:09:19,960
and go deeper
into the new automatic Mac behaviors

140
00:09:19,993 --> 00:09:24,231
provided by iPadOS 16's new API.

141
00:09:24,264 --> 00:09:27,601
If you've already watched
"Meet desktop-class iPad"

142
00:09:27,634 --> 00:09:30,370
and "Build a desktop-class iPad app",

143
00:09:30,404 --> 00:09:32,639
you've learned about the many new tools

144
00:09:32,673 --> 00:09:37,044
to enhance your app with iPadOS 16.

145
00:09:37,077 --> 00:09:39,780
And these new APIs translate beautifully

146
00:09:39,813 --> 00:09:43,183
into native Mac representations.

147
00:09:43,217 --> 00:09:45,552
I'll take a tour of the markdown app,

148
00:09:45,586 --> 00:09:48,288
and highlight some of these new behaviors.

149
00:09:49,623 --> 00:09:55,963
Controls and navigation move
from UINavigationBar into the NSToolbar.

150
00:09:55,996 --> 00:09:58,699
And if you don't already create a toolbar,

151
00:09:58,732 --> 00:10:01,668
we give you one automatically.

152
00:10:01,702 --> 00:10:05,105
If you already manage
your own NSToolbar in Catalyst,

153
00:10:05,138 --> 00:10:07,207
we stay out of your way.

154
00:10:09,009 --> 00:10:13,180
Center item controls
become NSToolbarItems.

155
00:10:15,082 --> 00:10:16,750
For document based apps,

156
00:10:16,783 --> 00:10:19,987
your window title shows the document name,

157
00:10:20,020 --> 00:10:25,058
and if "Show window title icons" is
enabled in Accessibility System Settings,

158
00:10:25,092 --> 00:10:27,895
the file proxy icon appears as well,

159
00:10:27,928 --> 00:10:30,864
exactly how you would expect it on Mac.

160
00:10:32,432 --> 00:10:35,202
And if you use a navigation controller,

161
00:10:35,235 --> 00:10:38,105
the back button
and other navigation controls

162
00:10:38,138 --> 00:10:42,142
are also brought into the toolbar.

163
00:10:42,176 --> 00:10:45,579
Additionally,
you get new document-centric menu items

164
00:10:45,612 --> 00:10:47,347
in the File menu:

165
00:10:47,381 --> 00:10:51,885
Duplicate, Move, Rename, and Export As.

166
00:10:53,887 --> 00:10:55,856
To enable these menu items,

167
00:10:55,889 --> 00:11:01,862
ensure some object in your responder chain
overrides UIResponder's duplicate,

168
00:11:01,895 --> 00:11:05,299
move, rename, and export functions.

169
00:11:07,067 --> 00:11:10,003
If your app doesn't need
these File menu items,

170
00:11:10,037 --> 00:11:13,440
they should be removed with UIMenuBuilder.

171
00:11:13,473 --> 00:11:18,779
Implement the buildMenu method on your app
delegate to control your app menus.

172
00:11:20,247 --> 00:11:26,887
The new Document menu items have
a UIMenuIdentifier value of .document.

173
00:11:28,188 --> 00:11:30,257
If your app includes a search bar,

174
00:11:30,290 --> 00:11:34,461
it gets automatically pulled
into the NSToolbar as well,

175
00:11:34,494 --> 00:11:38,298
first showing as a search button

176
00:11:38,332 --> 00:11:42,069
that expands into the bar on click.

177
00:11:42,102 --> 00:11:47,774
The UISearchTextField that backs it
is hosted inside of an NSToolbarItem,

178
00:11:47,808 --> 00:11:51,545
and this is available
for custom views as well.

179
00:11:51,578 --> 00:11:54,781
The search suggestions menu
and search scope bar

180
00:11:54,815 --> 00:11:58,285
also get converted
into native AppKit controls.

181
00:12:00,153 --> 00:12:04,124
In addition to all the new Mac behaviors
you get for free

182
00:12:04,157 --> 00:12:07,394
by adopting desktop-class iPad features,

183
00:12:07,427 --> 00:12:12,199
we've also added several new
Catalyst-specific APIs

184
00:12:12,232 --> 00:12:15,903
to improve multi-window
and toolbar behaviors.

185
00:12:15,936 --> 00:12:19,306
I'll go through our Markdown app
one more time,

186
00:12:19,339 --> 00:12:25,012
and add these Mac-specific features
using a mix of old and new API.

187
00:12:25,045 --> 00:12:27,848
From the existing Mac Catalyst APIs,

188
00:12:27,881 --> 00:12:31,185
I've chosen a few
that really enhance our App.

189
00:12:33,187 --> 00:12:36,490
I've adopted the Mac idiom
to get native controls

190
00:12:36,523 --> 00:12:39,459
and the automatic NSToolbar.

191
00:12:39,493 --> 00:12:43,897
I added a custom pointer
so moving the mouse over the slider handle

192
00:12:43,931 --> 00:12:47,768
in the middle of the custom split view
switches the pointer

193
00:12:47,801 --> 00:12:50,070
to horizontal double-arrows

194
00:12:50,103 --> 00:12:52,706
indicating that the split can be resized.

195
00:12:53,841 --> 00:12:55,742
And I've added printing support

196
00:12:55,776 --> 00:12:59,880
with the UIApplicationSupportsPrintCommand
plist key.

197
00:13:02,316 --> 00:13:04,251
When considering your app,

198
00:13:04,284 --> 00:13:08,422
don't feel like you need to add
every single one of these features.

199
00:13:08,455 --> 00:13:11,725
Instead, think about
the type of app that you create,

200
00:13:11,758 --> 00:13:14,361
and which features work best for it.

201
00:13:14,394 --> 00:13:18,599
Check out the Mac and Mac Catalyst
Human Interface Guidelines,

202
00:13:18,632 --> 00:13:22,135
and look for inspiration
in other apps you use.

203
00:13:23,303 --> 00:13:25,339
With these features implemented,

204
00:13:25,372 --> 00:13:28,642
the app is already in a wonderful spot.

205
00:13:28,675 --> 00:13:34,014
And now with some new Mac Catalyst API,
I can do even more.

206
00:13:34,047 --> 00:13:38,785
We've added new options for customizing
app window frame and controls,

207
00:13:38,819 --> 00:13:42,756
for displaying UIView content
in the NSToolbar,

208
00:13:42,789 --> 00:13:46,527
and for showing popovers
from toolbar items.

209
00:13:46,560 --> 00:13:52,699
I'll go ahead and use these new APIs
to improve our app even further on Mac

210
00:13:52,733 --> 00:13:54,701
starting with the windows.

211
00:13:56,436 --> 00:14:02,910
Catalyst apps support multiple windows
using the existing UIWindowScene API.

212
00:14:02,943 --> 00:14:05,045
And new in macOS Ventura,

213
00:14:05,078 --> 00:14:09,716
we've added API to let you customize
your app windows even further

214
00:14:09,750 --> 00:14:13,187
by setting the style
of the traffic-light window controls,

215
00:14:13,220 --> 00:14:17,124
programmatically resizing
and repositioning your windows,

216
00:14:17,157 --> 00:14:20,827
and disabling fullscreen
for specific scenes.

217
00:14:22,663 --> 00:14:25,899
I'll use these tools
to add a feature to the markdown app

218
00:14:25,933 --> 00:14:30,604
to show a helpful auxiliary panel
with markdown syntax.

219
00:14:30,637 --> 00:14:35,642
This panel will be sized smaller
with the new geometry request API,

220
00:14:35,676 --> 00:14:39,246
and have its minimize
and zoom buttons disabled.

221
00:14:41,782 --> 00:14:47,020
At scene creation, in my Scene Delegate's
"scene willConnectTo session" method,

222
00:14:47,054 --> 00:14:49,456
I create my desired frame.

223
00:14:49,489 --> 00:14:55,562
It's good practice to always start with
the current frame from effectiveGeometry.

224
00:14:55,596 --> 00:15:00,267
Before the scene is created,
this is initialized to CGRectNull,

225
00:15:00,300 --> 00:15:05,639
whose values the system knows to ignore
for initial scene creation.

226
00:15:05,672 --> 00:15:09,643
I modify the size,
then give my scene its new frame

227
00:15:09,676 --> 00:15:13,814
by creating a new
UIWindowScene.macGeometryPreferences

228
00:15:13,847 --> 00:15:18,352
object and passing the frame
as its systemFrame argument.

229
00:15:20,354 --> 00:15:25,859
I then submit the update using
the scene.requestGeometryUpdate() method.

230
00:15:25,893 --> 00:15:27,828
Because this is a request,

231
00:15:27,861 --> 00:15:31,698
the system reserves the right
to reject the new geometry,

232
00:15:31,732 --> 00:15:36,270
in which case it will call
the error handler callback with details.

233
00:15:36,303 --> 00:15:40,374
When done in the scene
willConnectToSession method as shown here,

234
00:15:40,407 --> 00:15:43,911
the request will apply to
your application's first launch,

235
00:15:43,944 --> 00:15:48,148
but will be superseded by any
applicable state restoration

236
00:15:48,182 --> 00:15:51,151
performed by the system on later launches.

237
00:15:52,920 --> 00:15:55,589
And because this is a small helper panel,

238
00:15:55,622 --> 00:15:57,724
I also disable the minimize button

239
00:15:57,758 --> 00:16:01,395
from the new windowScene
windowingBehaviors object,

240
00:16:01,428 --> 00:16:04,398
and the ability
to make the window fullscreen,

241
00:16:04,431 --> 00:16:07,601
from the new property on sizeRestrictions.

242
00:16:09,603 --> 00:16:12,372
When this new Markdown Hints
window is shown,

243
00:16:12,406 --> 00:16:16,276
it appears with the size we requested.

244
00:16:16,310 --> 00:16:21,315
The yellow minimize and green zoom
window control buttons are disabled,

245
00:16:21,348 --> 00:16:23,951
leaving only the red close button.

246
00:16:26,520 --> 00:16:30,524
These options aren't reserved
just for scene creation.

247
00:16:30,557 --> 00:16:32,960
At any time in a scene's life,

248
00:16:32,993 --> 00:16:34,828
you can check its current frame

249
00:16:34,862 --> 00:16:38,131
from the readonly effectiveGeometry
property,

250
00:16:38,165 --> 00:16:40,367
modify it however you need,

251
00:16:40,400 --> 00:16:44,438
and request a new geometry update.

252
00:16:44,471 --> 00:16:48,675
Here's another example showing
how to modify the origin of the window,

253
00:16:48,709 --> 00:16:51,211
keeping its size the same.

254
00:16:53,146 --> 00:16:57,751
There are two important aspects
of the geometry to keep in mind.

255
00:16:57,784 --> 00:17:01,655
First, because systemFrame
dictates the frame of the window

256
00:17:01,688 --> 00:17:03,557
on the Mac desktop,

257
00:17:03,590 --> 00:17:06,827
the size of one point
for the systemFrame property

258
00:17:06,860 --> 00:17:10,531
is always the size of one AppKit point.

259
00:17:10,564 --> 00:17:13,200
If your app is optimized for Mac,

260
00:17:13,233 --> 00:17:16,803
this is the same scale
as your UI elements.

261
00:17:16,837 --> 00:17:19,973
However,
if your app is scaled to match iPad,

262
00:17:20,007 --> 00:17:24,578
it will differ by the 77% scale factor.

263
00:17:24,611 --> 00:17:27,481
Second, the origin of the coordinate space

264
00:17:27,514 --> 00:17:31,051
is the upper-left corner
of the main display.

265
00:17:31,084 --> 00:17:33,187
If you have multiple displays,

266
00:17:33,220 --> 00:17:36,557
the main display is the one that shows
the Menu bar

267
00:17:36,590 --> 00:17:39,459
in the system display settings.

268
00:17:41,128 --> 00:17:43,630
With new Mac Catalyst API,

269
00:17:43,664 --> 00:17:45,599
you can take control over the state

270
00:17:45,632 --> 00:17:48,702
of each of
the three window control buttons.

271
00:17:48,735 --> 00:17:53,907
The new windowingBehaviors object
on UIWindowScene has two properties,

272
00:17:53,941 --> 00:17:56,677
closable and miniaturizable,

273
00:17:56,710 --> 00:17:59,680
that will adjust these respective window
behaviors

274
00:17:59,713 --> 00:18:03,450
and enable or disable the red

275
00:18:03,483 --> 00:18:06,553
and yellow window buttons.

276
00:18:07,521 --> 00:18:12,292
The green window button handles both
resizing your window on the desktop,

277
00:18:12,326 --> 00:18:15,829
and taking the window into fullscreen.

278
00:18:15,863 --> 00:18:19,700
You can disable fullscreen
with the new property on sizeRestrictions,

279
00:18:19,733 --> 00:18:22,936
"allowsFullScreen"

280
00:18:22,970 --> 00:18:27,074
or disable resizing
by using size restrictions

281
00:18:27,107 --> 00:18:31,912
and setting the minimum
and maximum size to the same size.

282
00:18:31,945 --> 00:18:37,284
And by doing both,
the green button also becomes disabled.

283
00:18:38,919 --> 00:18:42,456
And you can check whether
your scene is currently fullscreen

284
00:18:42,489 --> 00:18:46,426
with the new "isFullScreen" property.

285
00:18:46,460 --> 00:18:50,764
Now, I'll focus on
refining the toolbar for Mac.

286
00:18:50,797 --> 00:18:54,168
We've added new options
for toolbar customization,

287
00:18:54,201 --> 00:18:58,438
whether you rely on the automatic
conversion from a UINavigationBar

288
00:18:58,472 --> 00:19:02,142
or manage your own NSToolbar
in your app code.

289
00:19:04,077 --> 00:19:05,579
New in Mac Catalyst,

290
00:19:05,612 --> 00:19:10,317
UIViews can be added
as items to the NSToolbar.

291
00:19:10,350 --> 00:19:13,620
I designed a custom UIView for our App

292
00:19:13,654 --> 00:19:16,156
that shows the current word count.

293
00:19:16,190 --> 00:19:19,059
And when clicked,
it presents a popover

294
00:19:19,092 --> 00:19:22,930
with additional details
like paragraph and section counts,

295
00:19:22,963 --> 00:19:26,300
reading time, and translation.

296
00:19:26,333 --> 00:19:29,670
Because I'm using
the new desktop-class iPad API,

297
00:19:29,703 --> 00:19:33,307
the customView property
on my UIBarButton item

298
00:19:33,340 --> 00:19:36,977
is automatically wrapped
and added to the toolbar.

299
00:19:37,010 --> 00:19:40,480
But if you manage
your NSToolbar independently,

300
00:19:40,514 --> 00:19:44,051
we've also added
a new NSToolbarItem subclass,

301
00:19:44,084 --> 00:19:47,454
called NSUIViewToolbarItem.

302
00:19:48,222 --> 00:19:53,694
You can use NSUIViewToolbarItem
just like any other NSToolbarItem,

303
00:19:53,727 --> 00:19:55,696
to instantiate a toolbar item

304
00:19:55,729 --> 00:20:00,567
from your NSToolbarDelegate's
itemForIdentifier method.

305
00:20:00,601 --> 00:20:03,504
The initializer takes a UIView to wrap,

306
00:20:03,537 --> 00:20:06,673
which is then inserted into the NSToolbar.

307
00:20:09,776 --> 00:20:13,580
NSToolbar expects
unique toolbar item instances

308
00:20:13,614 --> 00:20:16,383
for toolbar customization mode.

309
00:20:16,416 --> 00:20:21,388
If you are using automatic NSToolbar
hosting from your UINavigationBar,

310
00:20:21,421 --> 00:20:26,660
your view is cloned by the system
for toolbar customization automatically.

311
00:20:26,693 --> 00:20:29,897
However, if you manage your own NSToolbar,

312
00:20:29,930 --> 00:20:32,699
your delegate will need to create
unique instances

313
00:20:32,733 --> 00:20:37,804
of your UIView
for each NSUIViewToolbarItem instance,

314
00:20:37,838 --> 00:20:41,842
rather than reusing
the same UIView instance.

315
00:20:43,744 --> 00:20:45,846
With my new item in the toolbar,

316
00:20:45,879 --> 00:20:48,549
I'll add the popover behavior.

317
00:20:48,582 --> 00:20:50,651
In my toolbar item's action,

318
00:20:50,684 --> 00:20:53,187
I create the popover view controller,

319
00:20:53,220 --> 00:20:57,124
and set its source item
to be my toolbar item.

320
00:20:57,157 --> 00:20:59,426
Then I present the popover.

321
00:21:01,595 --> 00:21:03,664
With the popover code in place,

322
00:21:03,697 --> 00:21:06,800
clicking on the toolbar item
presents additional detail

323
00:21:06,834 --> 00:21:11,104
in a popover presentation
anchored on my toolbar item.

324
00:21:12,806 --> 00:21:15,142
Like other controls in Mac Catalyst,

325
00:21:15,175 --> 00:21:19,813
you can opt out of navigation bar
translation by using the new property

326
00:21:19,847 --> 00:21:23,984
preferredBehavioralStyle
on UINavigationBar.

327
00:21:24,017 --> 00:21:28,088
Its default value is automatic,
but you can set it to .mac

328
00:21:28,121 --> 00:21:31,959
to explicitly request translation.

329
00:21:31,992 --> 00:21:33,760
and by setting it to .pad,

330
00:21:33,794 --> 00:21:37,731
your navigation bar
no longer gets automatically translated.

331
00:21:39,833 --> 00:21:43,770
With these options,
you can add a new layer of customization

332
00:21:43,804 --> 00:21:45,639
to your app's toolbar.

333
00:21:46,974 --> 00:21:50,844
We're so excited to see how
you use these new tools

334
00:21:50,878 --> 00:21:53,881
to make your apps even better.

335
00:21:53,914 --> 00:21:57,684
With your iPad app
automatically on the Mac App Store,

336
00:21:57,718 --> 00:22:00,954
it's available for a whole new audience.

337
00:22:00,988 --> 00:22:03,123
When you upload your iPad app,

338
00:22:03,156 --> 00:22:06,426
run it on the Mac and try it for yourself.

339
00:22:06,460 --> 00:22:11,298
Or take it to the next level
by becoming a Mac Catalyst app,

340
00:22:11,331 --> 00:22:16,103
and use the new API in iOS 16
and macOS Ventura

341
00:22:16,136 --> 00:22:18,205
to make your app its best.

342
00:22:19,339 --> 00:22:22,075
It's easy to bring your app to the Mac.

343
00:22:22,109 --> 00:22:24,311
We love showcasing your hard work

344
00:22:24,344 --> 00:22:28,282
and can't wait try what you build next.

345
00:22:28,315 --> 00:22:30,217
Thank you.

