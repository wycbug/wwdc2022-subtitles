1
00:00:00,000 --> 00:00:03,403
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,403 --> 00:00:09,476
♪

3
00:00:09,476 --> 00:00:11,111
Kevin Ferrell: Hi,
my name is Kevin,

4
00:00:11,111 --> 00:00:14,348
and I'm an engineer working on
the new PushToTalk framework,

5
00:00:14,348 --> 00:00:16,950
which enables a walkie-talkie
system experience

6
00:00:16,950 --> 00:00:19,052
for apps on iOS.

7
00:00:19,052 --> 00:00:21,188
Later I'll be joined
by my colleague Trevor

8
00:00:21,188 --> 00:00:24,057
to talk about how you can
enhance voice communication

9
00:00:24,057 --> 00:00:27,261
in your apps
with this new framework.

10
00:00:27,261 --> 00:00:29,496
First, I'll introduce
the PushToTalk framework

11
00:00:29,496 --> 00:00:32,432
and explain how it fits
into your app.

12
00:00:32,432 --> 00:00:34,935
Next, we'll go over
how to configure your app

13
00:00:34,935 --> 00:00:37,237
for PushToTalk.

14
00:00:37,237 --> 00:00:38,972
After that,
Trevor will walk through

15
00:00:38,972 --> 00:00:43,010
how to transmit and receive
audio using the framework.

16
00:00:43,010 --> 00:00:46,013
Finally, Trevor will wrap up
with best practices

17
00:00:46,013 --> 00:00:48,582
for enhancing
the Push To Talk user experience

18
00:00:48,582 --> 00:00:52,486
while preserving battery life
for your users.

19
00:00:52,486 --> 00:00:54,588
I'll get started
by introducing key features

20
00:00:54,588 --> 00:00:57,457
of the new PushToTalk framework.

21
00:00:57,457 --> 00:00:59,693
The PushToTalk framework
enables you to build

22
00:00:59,693 --> 00:01:03,196
a new class of audio
communication app on iOS

23
00:01:03,196 --> 00:01:07,768
that provides a walkie-talkie
style experience for your users.

24
00:01:07,768 --> 00:01:09,603
Push To Talk apps have many uses

25
00:01:09,603 --> 00:01:12,739
in fields where rapid
communication is essential

26
00:01:12,739 --> 00:01:15,976
such as health care
and emergency services.

27
00:01:15,976 --> 00:01:18,412
To provide a great
Push To Talk experience,

28
00:01:18,412 --> 00:01:20,347
users need a way
to quickly access

29
00:01:20,347 --> 00:01:23,784
audio transmission features
while also being able to see

30
00:01:23,784 --> 00:01:26,186
who is responding to them.

31
00:01:26,186 --> 00:01:28,221
At the same time,
a Push To Talk app

32
00:01:28,221 --> 00:01:30,824
must be power efficient
to ensure that users

33
00:01:30,824 --> 00:01:35,195
can maintain all-day battery
life while using the app.

34
00:01:35,195 --> 00:01:38,098
The PushToTalk framework
provides you with APIs

35
00:01:38,098 --> 00:01:39,833
to utilize a system UI

36
00:01:39,833 --> 00:01:42,436
that users can access
anywhere on the system

37
00:01:42,436 --> 00:01:45,572
without having to directly
launch your app.

38
00:01:45,572 --> 00:01:48,508
The system UI allows a user
to quickly activate

39
00:01:48,508 --> 00:01:51,111
an audio transmission,
which will launch your app

40
00:01:51,111 --> 00:01:55,615
in the background to record
and stream audio to your server.

41
00:01:55,615 --> 00:01:58,251
The system provides transparency
to users

42
00:01:58,251 --> 00:01:59,586
by showing who's speaking

43
00:01:59,586 --> 00:02:02,522
when your app plays audio
from your server.

44
00:02:02,522 --> 00:02:04,624
The PushToTalk framework
accomplishes this

45
00:02:04,624 --> 00:02:07,627
by introducing
a new push notification type

46
00:02:07,627 --> 00:02:11,965
that notifies your app when new
audio is available for playback.

47
00:02:11,965 --> 00:02:14,368
When your app receives
this notification,

48
00:02:14,368 --> 00:02:15,902
it is launched in the background

49
00:02:15,902 --> 00:02:19,272
so that it can stream
and play audio.

50
00:02:19,272 --> 00:02:22,075
The PushToTalk framework
is designed to be compatible

51
00:02:22,075 --> 00:02:25,012
with existing end-to-end
communication solutions

52
00:02:25,012 --> 00:02:27,147
and backend infrastructure.

53
00:02:27,147 --> 00:02:28,648
If you've already implemented

54
00:02:28,648 --> 00:02:30,851
a Push To Talk workflow
in your app,

55
00:02:30,851 --> 00:02:32,386
it should be easy for you
to integrate

56
00:02:32,386 --> 00:02:36,590
the PushToTalk framework
into your existing code.

57
00:02:36,590 --> 00:02:38,525
The framework allows
your app to implement

58
00:02:38,525 --> 00:02:41,261
its own audio encoding
and streaming process

59
00:02:41,261 --> 00:02:43,897
to transmit audio between users.

60
00:02:43,897 --> 00:02:46,400
This provides flexibility
in how audio transmission

61
00:02:46,400 --> 00:02:49,536
is handled by your app
and enables compatibility

62
00:02:49,536 --> 00:02:51,905
with other platforms.

63
00:02:51,905 --> 00:02:53,907
Finally, many Push To Talk apps

64
00:02:53,907 --> 00:02:56,043
rely on wireless
Bluetooth accessories

65
00:02:56,043 --> 00:02:59,146
to trigger audio recording
and transmission.

66
00:02:59,146 --> 00:03:02,015
Your apps can continue to
integrate with these accessories

67
00:03:02,015 --> 00:03:04,151
using the CoreBluetooth
framework

68
00:03:04,151 --> 00:03:07,654
and can trigger audio recording
in PushToTalk.

69
00:03:07,654 --> 00:03:10,123
If you are building your first
Push To Talk app,

70
00:03:10,123 --> 00:03:12,426
keep these integration
considerations in mind

71
00:03:12,426 --> 00:03:15,262
as you begin architecting
your code.

72
00:03:15,262 --> 00:03:17,164
Before we begin
walking through the code

73
00:03:17,164 --> 00:03:18,999
for the new
PushToTalk framework,

74
00:03:18,999 --> 00:03:21,435
we want to demonstrate
how the Push To Talk experience

75
00:03:21,435 --> 00:03:24,771
can work in your app.

76
00:03:24,771 --> 00:03:26,239
Trevor and I have built
a demo app

77
00:03:26,239 --> 00:03:28,508
to show how PushToTalk works.

78
00:03:28,508 --> 00:03:30,343
To start,
I'll tap the join button

79
00:03:30,343 --> 00:03:32,179
to connect to
a Push To Talk session,

80
00:03:32,179 --> 00:03:36,316
which we call a channel.

81
00:03:36,316 --> 00:03:37,617
Once I'm joined to the channel,

82
00:03:37,617 --> 00:03:41,588
I can transmit and receive audio
to other members of the channel.

83
00:03:41,588 --> 00:03:42,989
Trevor and a few
of our colleagues

84
00:03:42,989 --> 00:03:44,658
have joined the same channel

85
00:03:44,658 --> 00:03:47,627
so that we can communicate
throughout the day.

86
00:03:47,627 --> 00:03:49,963
I can transmit audio
directly from the app

87
00:03:49,963 --> 00:03:52,566
using the microphone button,
but the PushToTalk framework

88
00:03:52,566 --> 00:03:54,868
allows me to access
the transmit feature

89
00:03:54,868 --> 00:03:59,072
from anywhere in the system.

90
00:03:59,072 --> 00:04:00,974
When there is an active
Push To Talk channel,

91
00:04:00,974 --> 00:04:03,643
a blue pill will appear
in the status bar.

92
00:04:03,643 --> 00:04:08,949
Tapping that pill
shows the system UI.

93
00:04:08,949 --> 00:04:11,918
The system UI displays the name
of the Push To Talk channel

94
00:04:11,918 --> 00:04:14,721
that I've joined
and an image provided by the app

95
00:04:14,721 --> 00:04:18,892
to help users
quickly identify the channel.

96
00:04:18,892 --> 00:04:20,560
I can transmit audio
to the channel

97
00:04:20,560 --> 00:04:22,729
by pressing and holding
the Talk button

98
00:04:22,729 --> 00:04:24,998
and then waiting for
the system chime to indicate

99
00:04:24,998 --> 00:04:27,267
that I can begin speaking.

100
00:04:29,069 --> 00:04:32,072
[CHIME]
Hey, Trevor.

101
00:04:32,072 --> 00:04:37,444
Are you ready to cover
your WWDC slides? Over. 

102
00:04:37,444 --> 00:04:39,746
Trevor Sheridan: When my device
received Kevin's message,

103
00:04:39,746 --> 00:04:42,716
it displayed a notice that
contained his name and image,

104
00:04:42,716 --> 00:04:48,788
providing transparency into
who I'm receiving messages from.

105
00:04:48,788 --> 00:04:50,724
Once I launch the system UI,

106
00:04:50,724 --> 00:04:52,859
I can quickly respond
to Kevin's message

107
00:04:52,859 --> 00:04:56,196
or leave the channel without
having to stop what I'm doing.

108
00:04:56,196 --> 00:05:01,001
I don't want to leave Kevin
waiting, so I'll reply now.

109
00:05:01,001 --> 00:05:04,104
[CHIME] Hey, Kevin.
I'll be ready in a few minutes.

110
00:05:04,104 --> 00:05:07,240
Over. 

111
00:05:07,240 --> 00:05:09,809
Kevin: The PushToTalk system UI
can also be accessed

112
00:05:09,809 --> 00:05:13,213
from the Lock Screen so a user
can receive and respond

113
00:05:13,213 --> 00:05:16,316
to messages without
having to unlock their device.

114
00:05:21,288 --> 00:05:27,160
[CHIME] OK, see you soon!
Over. [CHIME]

115
00:05:27,160 --> 00:05:29,429
Now that we've discussed
how PushToTalk works,

116
00:05:29,429 --> 00:05:33,099
we'll review how to integrate
the framework in your own app.

117
00:05:33,099 --> 00:05:35,335
There are a few modifications
that you need to make

118
00:05:35,335 --> 00:05:39,439
to your Xcode project to support
the PushToTalk framework.

119
00:05:39,439 --> 00:05:43,176
First, you need to add the new
Push To Talk background mode.

120
00:05:43,176 --> 00:05:45,378
This enables your app
to run in the background

121
00:05:45,378 --> 00:05:48,982
when responding
to Push To Talk events.

122
00:05:48,982 --> 00:05:52,018
Next, you must also add
the Push To Talk capability

123
00:05:52,018 --> 00:05:55,689
to your app to enable
the framework features.

124
00:05:55,689 --> 00:05:59,292
The push notification capability
is required to allow APNS

125
00:05:59,292 --> 00:06:01,027
to wake your app
in the background

126
00:06:01,027 --> 00:06:04,097
to play received audio.

127
00:06:04,097 --> 00:06:06,833
Finally, your app must request
recording permission

128
00:06:06,833 --> 00:06:10,136
from the user and include
a microphone purpose string

129
00:06:10,136 --> 00:06:12,973
in its Info.plist file.

130
00:06:12,973 --> 00:06:16,076
Now we're ready to begin
integrating the code.

131
00:06:16,076 --> 00:06:18,211
The first step in
the Push To Talk workflow

132
00:06:18,211 --> 00:06:19,946
is to join a channel.

133
00:06:19,946 --> 00:06:21,881
The channel represents
and describes

134
00:06:21,881 --> 00:06:24,784
the Push To Talk session
to the system.

135
00:06:24,784 --> 00:06:28,388
Your app interacts with channels
through a channel manager.

136
00:06:28,388 --> 00:06:31,424
The channel manager is the
primary interface for your app

137
00:06:31,424 --> 00:06:33,860
to join channels
and perform actions

138
00:06:33,860 --> 00:06:37,230
like transmitting
and receiving audio.

139
00:06:37,230 --> 00:06:39,866
When you join a channel,
the Push To Talk system UI

140
00:06:39,866 --> 00:06:43,903
becomes available and your app
receives an APNS device token

141
00:06:43,903 --> 00:06:47,207
that can be used throughout
the life of the channel.

142
00:06:47,207 --> 00:06:49,943
You must join a channel before
you can begin transmitting

143
00:06:49,943 --> 00:06:52,579
and receiving audio.

144
00:06:52,579 --> 00:06:54,881
The first step is to create
a channel manager

145
00:06:54,881 --> 00:06:57,450
using the class initializer.

146
00:06:57,450 --> 00:06:59,452
This initializer requires
that you provide

147
00:06:59,452 --> 00:07:04,057
a channel manager delegate and
a channel restoration delegate.

148
00:07:04,057 --> 00:07:05,992
Multiple calls
to the initializer

149
00:07:05,992 --> 00:07:08,795
result in the same shared
instance being returned,

150
00:07:08,795 --> 00:07:11,131
but we recommend that
you store the channel manager

151
00:07:11,131 --> 00:07:13,233
in an instance variable.

152
00:07:13,233 --> 00:07:15,635
It is important to initialize
your channel manager

153
00:07:15,635 --> 00:07:17,871
as soon as possible
during app start up

154
00:07:17,871 --> 00:07:19,572
in your ApplicationDelegate's

155
00:07:19,572 --> 00:07:22,776
didFinishLaunchingWithOptions
method.

156
00:07:22,776 --> 00:07:26,212
This ensures that the channel
manager is initialized quickly

157
00:07:26,212 --> 00:07:28,415
so that existing channels
can be restored

158
00:07:28,415 --> 00:07:30,750
and push notifications
will be delivered to your app

159
00:07:30,750 --> 00:07:33,653
when it launches
in the background.

160
00:07:33,653 --> 00:07:35,722
Now we're ready
to join a channel.

161
00:07:35,722 --> 00:07:37,557
When someone joins
a channel from your app,

162
00:07:37,557 --> 00:07:40,527
you must provide a UUID
to identify the channel

163
00:07:40,527 --> 00:07:44,297
and a descriptor that describes
the channel to the system.

164
00:07:44,297 --> 00:07:47,701
The same UUID will be used when
interacting with the manager

165
00:07:47,701 --> 00:07:50,103
throughout the life
of this channel.

166
00:07:50,103 --> 00:07:53,340
The descriptor includes
a name and an image.

167
00:07:53,340 --> 00:07:56,142
Providing a unique image
to represent the channel

168
00:07:56,142 --> 00:07:58,878
makes it easier for your users
to identify the channel

169
00:07:58,878 --> 00:08:01,614
when interacting
with the system.

170
00:08:01,614 --> 00:08:04,818
Your app joins a channel by
calling the requestJoin method

171
00:08:04,818 --> 00:08:06,720
on the channel manager.

172
00:08:06,720 --> 00:08:09,022
Note that it is only possible
to join a channel

173
00:08:09,022 --> 00:08:12,125
when your app is running
in the foreground.

174
00:08:12,125 --> 00:08:15,028
When your app joins a channel,
the channel manager delegate's

175
00:08:15,028 --> 00:08:18,198
didJoinChannel method
will be called.

176
00:08:18,198 --> 00:08:20,367
This delegate method
is your indication

177
00:08:20,367 --> 00:08:23,069
that your app
has joined the channel.

178
00:08:23,069 --> 00:08:24,471
In addition,
the delegate's

179
00:08:24,471 --> 00:08:27,607
receivedEphemeralPushToken
method will be called

180
00:08:27,607 --> 00:08:30,276
with the APNS push token
that can be used

181
00:08:30,276 --> 00:08:34,180
to send Push To Talk
notifications to this device.

182
00:08:34,180 --> 00:08:35,849
This token will only be active

183
00:08:35,849 --> 00:08:38,685
for the life of
the Push To Talk channel.

184
00:08:38,685 --> 00:08:41,888
Keep in mind that APNS
push tokens are variable length

185
00:08:41,888 --> 00:08:45,859
and that you should not hardcode
their length into your app.

186
00:08:45,859 --> 00:08:49,129
It is possible for the
channel join request to fail,

187
00:08:49,129 --> 00:08:51,030
such as when attempting
to join a channel

188
00:08:51,030 --> 00:08:53,833
when another channel
is already active.

189
00:08:53,833 --> 00:08:56,636
If this occurs,
the error handler will be called

190
00:08:56,636 --> 00:09:00,373
and the error will indicate
the reason for the failure.

191
00:09:00,373 --> 00:09:01,941
When the user leaves a channel,

192
00:09:01,941 --> 00:09:04,944
the delegate's didLeaveChannel
method will be called.

193
00:09:04,944 --> 00:09:07,313
Your user may leave the channel
as a result of either

194
00:09:07,313 --> 00:09:10,250
your app requesting to leave
programmatically

195
00:09:10,250 --> 00:09:12,552
or the user can tap
the Leave Channel button

196
00:09:12,552 --> 00:09:14,320
in the system UI.

197
00:09:14,320 --> 00:09:16,656
The channel manager delegate
has an associated

198
00:09:16,656 --> 00:09:19,626
LeaveChannel error-handling
method that will be called

199
00:09:19,626 --> 00:09:23,229
if the request to leave
the channel fails.

200
00:09:23,229 --> 00:09:25,632
PushToTalk supports
restoring previous channels

201
00:09:25,632 --> 00:09:28,201
whenever your app is relaunched
after being terminated

202
00:09:28,201 --> 00:09:30,770
or after a device reboot.

203
00:09:30,770 --> 00:09:33,006
In order for the system
to accomplish this,

204
00:09:33,006 --> 00:09:37,076
you must provide a channel
descriptor to update the system.

205
00:09:37,076 --> 00:09:39,145
Here we have a helper method
that will fetch

206
00:09:39,145 --> 00:09:43,516
our cached channel descriptor
in our restoration delegate.

207
00:09:43,516 --> 00:09:45,852
In order to keep the system
responsive,

208
00:09:45,852 --> 00:09:48,721
you should return from this
method as quickly as possible

209
00:09:48,721 --> 00:09:51,891
and should not perform any
long-running or blocking tasks

210
00:09:51,891 --> 00:09:53,359
such as a network request

211
00:09:53,359 --> 00:09:56,229
to retrieve
your channel descriptor.

212
00:09:56,229 --> 00:09:59,165
Throughout the lifecycle
of your Push To Talk session,

213
00:09:59,165 --> 00:10:01,067
you should provide updates
to the descriptor

214
00:10:01,067 --> 00:10:04,904
whenever information
about the channel changes.

215
00:10:04,904 --> 00:10:06,973
You should also inform
the system about changes

216
00:10:06,973 --> 00:10:09,576
to your network connection
or server availability

217
00:10:09,576 --> 00:10:12,312
using the service status object.

218
00:10:12,312 --> 00:10:15,548
Here we're updating
the descriptor for the channel.

219
00:10:15,548 --> 00:10:16,716
You can call this method

220
00:10:16,716 --> 00:10:20,653
whenever you need to update
the channel name or image.

221
00:10:20,653 --> 00:10:22,856
In this example,
we are providing an update

222
00:10:22,856 --> 00:10:25,258
to the system to indicate
that the app's connection

223
00:10:25,258 --> 00:10:28,461
to its sever is in
a reconnecting state.

224
00:10:28,461 --> 00:10:30,730
This updates
the system UI accordingly

225
00:10:30,730 --> 00:10:32,832
and prevents the user
from transmitting audio

226
00:10:32,832 --> 00:10:37,103
if the service status is
connecting or disconnected.

227
00:10:37,103 --> 00:10:38,938
Once a connection
is reestablished,

228
00:10:38,938 --> 00:10:42,242
you should update
the service status to "ready."

229
00:10:42,242 --> 00:10:44,844
Now let's review
how to send and receive audio

230
00:10:44,844 --> 00:10:46,779
using PushToTalk.

231
00:10:46,779 --> 00:10:49,582
[CHIME] Trevor, are you ready
to walk through

232
00:10:49,582 --> 00:10:51,451
the rest of the API?

233
00:10:51,451 --> 00:10:52,652
Over. 

234
00:10:55,088 --> 00:10:59,325
[CHIME] Trevor: Yep.
Send them over. Over.

235
00:10:59,325 --> 00:11:00,326
[CHIME]

236
00:11:01,861 --> 00:11:03,463
Now that we've seen
how to configure

237
00:11:03,463 --> 00:11:05,098
the PushToTalk framework,

238
00:11:05,098 --> 00:11:09,669
let's explore how to transmit
and receive audio.

239
00:11:09,669 --> 00:11:12,171
A core capability
of the PushToTalk framework

240
00:11:12,171 --> 00:11:16,209
is to allow your users
to quickly transmit audio.

241
00:11:16,209 --> 00:11:18,044
Users can begin
audio transmission

242
00:11:18,044 --> 00:11:19,579
from within your app,

243
00:11:19,579 --> 00:11:22,615
or from the system
Push To Talk UI.

244
00:11:22,615 --> 00:11:25,151
If your app supports
Bluetooth accessories

245
00:11:25,151 --> 00:11:26,753
through CoreBluetooth,

246
00:11:26,753 --> 00:11:29,656
you can also begin transmission
in the background

247
00:11:29,656 --> 00:11:33,927
in response to a peripheral's
characteristic change.

248
00:11:33,927 --> 00:11:36,663
When transmitting,
the PushToTalk framework

249
00:11:36,663 --> 00:11:39,032
unlocks the device's microphone

250
00:11:39,032 --> 00:11:41,668
and activates
your app's audio session

251
00:11:41,668 --> 00:11:44,771
to enable audio recording
in the background.

252
00:11:44,771 --> 00:11:48,107
Let's review this process
in detail.

253
00:11:48,107 --> 00:11:51,311
To begin transmission from
within your app, you can call

254
00:11:51,311 --> 00:11:54,814
the requestBeginTransmitting
function.

255
00:11:54,814 --> 00:11:57,951
This can be called whenever your
app is running in the foreground

256
00:11:57,951 --> 00:11:59,719
or when reacting
to a change

257
00:11:59,719 --> 00:12:03,489
of a Bluetooth peripheral's
characteristic.

258
00:12:03,489 --> 00:12:06,426
If the system is not able
to begin transmitting,

259
00:12:06,426 --> 00:12:07,660
the delegate's

260
00:12:07,660 --> 00:12:11,197
failedToBeginTransmitting
InChannel method will be called

261
00:12:11,197 --> 00:12:13,466
with the reason
for the failure.

262
00:12:13,466 --> 00:12:17,737
For example, if the user has
an ongoing cellular call active,

263
00:12:17,737 --> 00:12:22,408
they will not be able to begin
a Push To Talk transmission.

264
00:12:22,408 --> 00:12:23,943
To stop transmitting,

265
00:12:23,943 --> 00:12:28,247
call the channel manager's
stopTransmitting method.

266
00:12:28,247 --> 00:12:31,784
To handle failures when
attempting to stop transmitting,

267
00:12:31,784 --> 00:12:34,887
such as when the user
was not in a transmitting state,

268
00:12:34,887 --> 00:12:37,757
the channel manager delegate
has an associated

269
00:12:37,757 --> 00:12:41,527
failedToStopTransmitting
InChannel method.

270
00:12:41,527 --> 00:12:44,897
Whether you begin transmission
from within your app

271
00:12:44,897 --> 00:12:48,067
or if the user starts
from the system UI,

272
00:12:48,067 --> 00:12:50,470
your channel manager delegate
will receive

273
00:12:50,470 --> 00:12:53,673
a "Did begin transmitting"
callback.

274
00:12:53,673 --> 00:12:56,576
The transmission source
will be passed to the method

275
00:12:56,576 --> 00:12:58,544
and indicate whether
the transmission

276
00:12:58,544 --> 00:13:00,346
was started
from the system UI,

277
00:13:00,346 --> 00:13:04,684
the programmatic API,
or a hardware button event.

278
00:13:04,684 --> 00:13:06,486
Once transmission begins,

279
00:13:06,486 --> 00:13:10,123
the system will activate
the audio session for your app.

280
00:13:10,123 --> 00:13:13,660
This is your signal that
you can now begin recording.

281
00:13:13,660 --> 00:13:19,432
You should not start or stop
your own audio session.

282
00:13:19,432 --> 00:13:23,102
When transmission ends,
your channel manager delegate

283
00:13:23,102 --> 00:13:25,171
will receive
the end transmission

284
00:13:25,171 --> 00:13:29,108
and audio session
deactivation events.

285
00:13:29,108 --> 00:13:32,311
Keep in mind that while
your transmission is active,

286
00:13:32,311 --> 00:13:36,015
your audio session may be
interrupted by other sources,

287
00:13:36,015 --> 00:13:38,851
such as phone
and FaceTime calls

288
00:13:38,851 --> 00:13:42,455
for which you need to handle
within your app.

289
00:13:42,455 --> 00:13:45,224
The PushToTalk framework
also allows your app

290
00:13:45,224 --> 00:13:48,061
to receive and play audio
from other users

291
00:13:48,061 --> 00:13:49,962
while in the background.

292
00:13:49,962 --> 00:13:53,766
This process relies on a new
Apple Push Notification type

293
00:13:53,766 --> 00:13:56,936
that is specific
to Push To Talk apps.

294
00:13:56,936 --> 00:13:59,739
When your Push To Talk server
has new audio

295
00:13:59,739 --> 00:14:02,642
for a user to receive,
it should send the user

296
00:14:02,642 --> 00:14:06,446
a Push To Talk notification
using the device push token

297
00:14:06,446 --> 00:14:09,582
you received
when joining the channel.

298
00:14:09,582 --> 00:14:12,952
When the push notification
is received by your app,

299
00:14:12,952 --> 00:14:16,422
it must report an active speaker
to the framework,

300
00:14:16,422 --> 00:14:18,191
which will cause the system
to activate

301
00:14:18,191 --> 00:14:23,296
your app's audio session
and allow it to begin playback.

302
00:14:23,296 --> 00:14:25,031
The new Push To Talk
notification

303
00:14:25,031 --> 00:14:28,568
is similar to other
notification types on iOS

304
00:14:28,568 --> 00:14:31,437
and there are specific
attributes that you must set

305
00:14:31,437 --> 00:14:34,941
to enable delivery
to your Push To Talk app.

306
00:14:34,941 --> 00:14:39,612
First, the APNS push type
must be set to "pushtotalk"

307
00:14:39,612 --> 00:14:41,948
in the request header.

308
00:14:41,948 --> 00:14:45,351
Next, the APNS topic header
must be set

309
00:14:45,351 --> 00:14:47,553
to your app's bundle identifier

310
00:14:47,553 --> 00:14:52,291
with a ".voip-ptt" suffix
appended to the end.

311
00:14:52,291 --> 00:14:55,128
The push payload
can contain custom keys

312
00:14:55,128 --> 00:14:57,296
that are relevant to your app,

313
00:14:57,296 --> 00:14:59,398
such the name
of an active speaker

314
00:14:59,398 --> 00:15:02,335
or an indication
that the session has ended

315
00:15:02,335 --> 00:15:05,538
and the app should leave
the Push To Talk channel.

316
00:15:05,538 --> 00:15:10,009
The body of the "aps" property
can be left blank.

317
00:15:10,009 --> 00:15:13,012
Additionally, like other
communication-related

318
00:15:13,012 --> 00:15:14,213
push types,

319
00:15:14,213 --> 00:15:18,618
Push To Talk payloads should
have an APNS priority of 10

320
00:15:18,618 --> 00:15:20,820
to request immediate delivery

321
00:15:20,820 --> 00:15:25,625
and an APNS expiration of zero
to prevent older pushes

322
00:15:25,625 --> 00:15:29,562
that are no longer relevant
from being delivered later.

323
00:15:29,562 --> 00:15:32,698
When your server sends
a Push To Talk notification,

324
00:15:32,698 --> 00:15:35,134
your app will be started
in the background

325
00:15:35,134 --> 00:15:39,172
and the incoming push
delegate method will be called.

326
00:15:39,172 --> 00:15:41,107
When you receive
a push payload,

327
00:15:41,107 --> 00:15:43,943
you will need to construct
a push result type

328
00:15:43,943 --> 00:15:46,479
to indicate what action
should be performed

329
00:15:46,479 --> 00:15:50,016
as a result
of the push notification.

330
00:15:50,016 --> 00:15:52,819
To indicate that
a remote user is speaking,

331
00:15:52,819 --> 00:15:54,554
return a push result
that includes

332
00:15:54,554 --> 00:15:57,123
the active participant's
information,

333
00:15:57,123 --> 00:16:01,127
including their name
and an optional image.

334
00:16:01,127 --> 00:16:02,428
This will cause the system

335
00:16:02,428 --> 00:16:05,097
to set the active participant
on the channel

336
00:16:05,097 --> 00:16:08,734
and indicate that the channel
is in receive mode.

337
00:16:08,734 --> 00:16:11,571
The system will then activate
your audio session,

338
00:16:11,571 --> 00:16:13,906
and call the
didActivateaudioSession

339
00:16:13,906 --> 00:16:15,341
delegate method.

340
00:16:15,341 --> 00:16:17,543
You should wait for this method
to be called

341
00:16:17,543 --> 00:16:19,846
before beginning playback.

342
00:16:19,846 --> 00:16:21,848
If your server decides
that a user

343
00:16:21,848 --> 00:16:24,283
should no longer
be joined to a channel,

344
00:16:24,283 --> 00:16:27,053
it may indicate this
in the push payload,

345
00:16:27,053 --> 00:16:31,557
for which you can return
a leaveChannel push result.

346
00:16:31,557 --> 00:16:33,593
It's important to note
that you should return

347
00:16:33,593 --> 00:16:36,028
a PTPushResult from this method
as quickly as possible

348
00:16:36,028 --> 00:16:40,433
and not block the thread.

349
00:16:40,433 --> 00:16:43,202
If you are attempting to set
the active remote participant

350
00:16:43,202 --> 00:16:45,872
and do not have their image
stored locally,

351
00:16:45,872 --> 00:16:48,608
you can return
an activeRemoteParticipant

352
00:16:48,608 --> 00:16:50,910
with only the speaker's name.

353
00:16:50,910 --> 00:16:53,746
Then download their image
on a separate thread,

354
00:16:53,746 --> 00:16:55,781
and once the image is retrieved,

355
00:16:55,781 --> 00:16:57,950
update the
activeRemoteParticipant

356
00:16:57,950 --> 00:17:00,786
by calling
setActiveRemoteParticipant

357
00:17:00,786 --> 00:17:03,322
on the channel manager.

358
00:17:03,322 --> 00:17:05,725
When the remote participant
has finished speaking,

359
00:17:05,725 --> 00:17:08,694
you should set the
activeRemoteParticipant to nil.

360
00:17:08,694 --> 00:17:11,664
This indicates to the system
that you are no longer

361
00:17:11,664 --> 00:17:13,766
receiving audio
on the channel

362
00:17:13,766 --> 00:17:17,770
and that the system should
deactivate your audio session.

363
00:17:17,770 --> 00:17:20,940
This will also update
the system Push To Talk UI

364
00:17:20,940 --> 00:17:24,277
and allow the user
to transmit again.

365
00:17:24,277 --> 00:17:25,711
Now that we've covered
the basics

366
00:17:25,711 --> 00:17:28,781
of how to integrate PushToTalk
into your app,

367
00:17:28,781 --> 00:17:30,783
let's review some best practices

368
00:17:30,783 --> 00:17:32,818
for optimizing
the user experience

369
00:17:32,818 --> 00:17:35,488
and preserving battery life.

370
00:17:37,290 --> 00:17:39,992
The PushToTalk framework
provides a system UI

371
00:17:39,992 --> 00:17:42,395
for users to begin
a transmission

372
00:17:42,395 --> 00:17:46,065
and leave a channel from
anywhere within the system.

373
00:17:46,065 --> 00:17:50,002
Additionally, it is flexible
and allows you to implement

374
00:17:50,002 --> 00:17:52,672
your own custom
Push To Talk UI

375
00:17:52,672 --> 00:17:56,142
when your app
is in the foreground.

376
00:17:56,142 --> 00:17:57,343
The PushToTalk framework

377
00:17:57,343 --> 00:18:00,146
utilizes shared system
resources.

378
00:18:00,146 --> 00:18:02,548
Only one Push To Talk app
can be active

379
00:18:02,548 --> 00:18:04,383
on the system at a time,

380
00:18:04,383 --> 00:18:07,620
and Push To Talk communication
will be superseded

381
00:18:07,620 --> 00:18:11,757
by cellular, FaceTime,
and VoIP calls.

382
00:18:11,757 --> 00:18:14,460
Your app should handle
PushToTalk failures gracefully

383
00:18:14,460 --> 00:18:18,831
and respond accordingly.

384
00:18:18,831 --> 00:18:21,200
As mentioned earlier,
the PushToTalk framework

385
00:18:21,200 --> 00:18:23,336
handles activating
and deactivating

386
00:18:23,336 --> 00:18:25,638
your audio session for you.

387
00:18:25,638 --> 00:18:27,707
However,
you should still configure

388
00:18:27,707 --> 00:18:30,943
your audio session's category
to play and record

389
00:18:30,943 --> 00:18:33,980
when your app launches.

390
00:18:33,980 --> 00:18:36,382
The system provides
built-in sound effects

391
00:18:36,382 --> 00:18:39,618
to alert the user that
the microphone is activated

392
00:18:39,618 --> 00:18:42,388
and deactivated
when transmitting.

393
00:18:42,388 --> 00:18:44,190
You should not provide
your own sound effects

394
00:18:44,190 --> 00:18:46,692
for these events.

395
00:18:46,692 --> 00:18:49,395
It is also important
for your app to monitor

396
00:18:49,395 --> 00:18:53,132
and respond to AVAudioSession
notifications,

397
00:18:53,132 --> 00:18:54,900
such as session interruptions,

398
00:18:54,900 --> 00:18:57,470
route changes,
and failures.

399
00:18:57,470 --> 00:18:59,805
Your Push To Talk app
can be affected

400
00:18:59,805 --> 00:19:01,774
by these audio session events

401
00:19:01,774 --> 00:19:05,611
just like any other audio app
on the system.

402
00:19:05,611 --> 00:19:07,613
It's important
to optimize your app

403
00:19:07,613 --> 00:19:09,582
to preserve battery life.

404
00:19:09,582 --> 00:19:11,784
The PushToTalk framework
provides your app

405
00:19:11,784 --> 00:19:13,886
with background runtime
when needed,

406
00:19:13,886 --> 00:19:17,189
such as when transmitting
and receiving audio.

407
00:19:17,189 --> 00:19:19,458
When your app is not being used
by the user,

408
00:19:19,458 --> 00:19:24,030
it will be suspended by the
system to preserve battery life.

409
00:19:24,030 --> 00:19:26,632
You should not activate
or deactivate

410
00:19:26,632 --> 00:19:28,567
your own audio sessions.

411
00:19:28,567 --> 00:19:32,038
The system will handle
audio session activation for you

412
00:19:32,038 --> 00:19:34,340
at the appropriate times.

413
00:19:34,340 --> 00:19:36,142
This ensures
that your audio session

414
00:19:36,142 --> 00:19:38,944
has the proper priority
within the system

415
00:19:38,944 --> 00:19:43,382
and can be suspended
when it is not being used.

416
00:19:43,382 --> 00:19:45,084
Your Push To Talk server

417
00:19:45,084 --> 00:19:47,620
should use the new
push notification type

418
00:19:47,620 --> 00:19:51,157
to alert your app that there is
new audio to be played,

419
00:19:51,157 --> 00:19:54,560
or that the Push To Talk
session has ended.

420
00:19:54,560 --> 00:19:56,529
For more information
about improving

421
00:19:56,529 --> 00:19:59,065
the battery life in your app,
refer to the

422
00:19:59,065 --> 00:20:03,536
"Power down: Improve battery
consumption" session.

423
00:20:03,536 --> 00:20:05,905
When your Push To Talk app
is in the background

424
00:20:05,905 --> 00:20:09,275
and the app is not
transmitting or receiving audio,

425
00:20:09,275 --> 00:20:11,944
it will be suspended
by the system.

426
00:20:11,944 --> 00:20:13,479
When your app is suspended,

427
00:20:13,479 --> 00:20:17,249
any network connections
will be disconnected.

428
00:20:17,249 --> 00:20:19,785
You should consider adopting
Network.framework

429
00:20:19,785 --> 00:20:22,688
and QUIC to reduce
the steps needed

430
00:20:22,688 --> 00:20:25,558
to establish a secure
TLS connection

431
00:20:25,558 --> 00:20:28,894
and improve initial
connection speed.

432
00:20:28,894 --> 00:20:31,864
Network.framework
has built-in support for QUIC.

433
00:20:31,864 --> 00:20:32,898
Check out the

434
00:20:32,898 --> 00:20:36,902
"Reduce networking delays for
a more responsive app" session

435
00:20:36,902 --> 00:20:40,673
for more information
about how to use QUIC.

436
00:20:40,673 --> 00:20:43,042
The PushToTalk framework
enables you to build

437
00:20:43,042 --> 00:20:44,877
robust and power-efficient

438
00:20:44,877 --> 00:20:47,513
walkie-talkie style
communication experiences

439
00:20:47,513 --> 00:20:49,448
within your apps.

440
00:20:49,448 --> 00:20:51,650
If you already have an app
that implements

441
00:20:51,650 --> 00:20:54,787
a walk-talkie style experience
on iOS,

442
00:20:54,787 --> 00:20:57,123
you should begin updating
your existing app

443
00:20:57,123 --> 00:20:59,892
to use the new API.

444
00:20:59,892 --> 00:21:02,094
If you're implementing
a new walkie-talkie app,

445
00:21:02,094 --> 00:21:05,998
you should use
the PushToTalk framework now.

446
00:21:05,998 --> 00:21:07,967
Finally,
please submit feedback

447
00:21:07,967 --> 00:21:10,035
as you begin testing
the new framework

448
00:21:10,035 --> 00:21:12,638
and integrating it
with your app.

449
00:21:12,638 --> 00:21:15,808
Thank you
and have a great WWDC!

450
00:21:15,808 --> 00:21:17,343
Over and out!

451
00:21:17,343 --> 00:21:21,814
♪

