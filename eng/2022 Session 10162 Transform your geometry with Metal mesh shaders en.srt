1
00:00:01,034 --> 00:00:07,040
[upbeat music]

2
00:00:09,309 --> 00:00:11,411
- Hi! My name is Andrei.

3
00:00:11,445 --> 00:00:15,282
I'm a GPU software engineer
with Metal Frameworks team.

4
00:00:15,315 --> 00:00:19,686
Today, I'm excited to introduce to you
Metal mesh shaders.

5
00:00:19,720 --> 00:00:23,290
Mesh shaders is the new
flexible pipeline in Metal

6
00:00:23,323 --> 00:00:26,927
for GPU-driven
geometry creation and processing.

7
00:00:26,960 --> 00:00:31,231
It improves on the vertex/fragment
pipeline, adding a lot of flexibility

8
00:00:31,265 --> 00:00:34,968
and removing the limitations
of per-vertex processing.

9
00:00:35,002 --> 00:00:38,605
It has multiple applications,
, but not limited to:

10
00:00:38,639 --> 00:00:41,108
fine-grained geometry culling,

11
00:00:41,141 --> 00:00:44,478
scalable procedural geometry
creation on the GPU,

12
00:00:44,511 --> 00:00:47,080
and allowing custom geometry inputs

13
00:00:47,114 --> 00:00:49,283
such as compressed vertex streams,

14
00:00:49,316 --> 00:00:52,553
meshlets and complex procedural
algorithms.

15
00:00:52,586 --> 00:00:55,289
I would like to
cover these three things today.

16
00:00:55,322 --> 00:00:59,359
First, I will go over what
Metal mesh shaders are.

17
00:00:59,393 --> 00:01:03,430
Then, I would like to tell you about
two mesh shaders use cases.

18
00:01:03,463 --> 00:01:06,800
Mesh shaders are great
for generating procedural geometry

19
00:01:06,834 --> 00:01:09,102
such as rendering procedural hair.

20
00:01:09,136 --> 00:01:13,207
Mesh shaders also help
improve scene processing and rendering.

21
00:01:13,240 --> 00:01:15,909
A primary example of this
is using mesh shaders

22
00:01:15,943 --> 00:01:18,979
to implement
GPU-driven meshlet culling.

23
00:01:19,012 --> 00:01:21,348
Let's start with introducing mesh shaders.

24
00:01:21,381 --> 00:01:23,383
Here is the Stanford Bunny,

25
00:01:23,417 --> 00:01:27,855
which represents a typical mesh
that you could render on the GPU.

26
00:01:27,888 --> 00:01:31,458
In order to render this mesh,
the vertex and index data

27
00:01:31,491 --> 00:01:34,962
would first have to be placed
in the device memory.

28
00:01:34,995 --> 00:01:39,733
You would then have to use render
command encoder to execute a draw call.

29
00:01:39,766 --> 00:01:44,304
A traditional rendering pipeline
consists of three fundamental stages:

30
00:01:44,338 --> 00:01:49,176
A programmable vertex shader stage,
a fixed-function rasterization stage,

31
00:01:49,209 --> 00:01:52,346
and a programmable fragment shader
stage.

32
00:01:52,379 --> 00:01:54,848
The vertex shader stage
would take geometry

33
00:01:54,882 --> 00:01:57,751
from device memory
as an input and process it.

34
00:01:57,784 --> 00:02:00,888
The rasterizer would produce
screen space fragments,

35
00:02:00,921 --> 00:02:04,391
and the fragment shader would
shade them to produce the final image.

36
00:02:04,424 --> 00:02:08,862
This pipeline has been, and still is,
serving its purpose extremely well.

37
00:02:08,896 --> 00:02:13,300
However, it lacks flexibility
and has certain limitations.

38
00:02:13,333 --> 00:02:15,335
Let's step through an example.

39
00:02:15,369 --> 00:02:19,606
Imagine that you want to generate
some procedural geometry on the GPU.

40
00:02:19,640 --> 00:02:25,179
For example, you've decided
to add procedural fur to this bunny.

41
00:02:25,212 --> 00:02:30,117
Let me show you how this task is handled
by the traditional geometry pipeline.

42
00:02:30,150 --> 00:02:33,487
Traditionally,
in order to generate procedural geometry,

43
00:02:33,520 --> 00:02:37,057
you would also need to have
a compute command encoder

44
00:02:37,090 --> 00:02:40,627
that would perform
a compute kernel dispatch.

45
00:02:40,661 --> 00:02:44,064
The compute kernel would take
the original mesh as an input,

46
00:02:44,097 --> 00:02:49,036
generate procedural geometry and
output it back into device memory.

47
00:02:49,069 --> 00:02:52,806
You would then use a render command
encoder to execute a draw call

48
00:02:52,840 --> 00:02:57,444
that would take procedural geometry
as an input and produce a final image .

49
00:02:57,477 --> 00:03:00,547
Not only does this approach require
two command encoders,

50
00:03:00,581 --> 00:03:03,050
it also requires you
to allocate additional memory

51
00:03:03,083 --> 00:03:05,519
to store the procedural geometry.

52
00:03:05,552 --> 00:03:09,056
In case of indirect draw calls
or high expansion factors,

53
00:03:09,089 --> 00:03:13,327
the amount of this memory can
be quite high and hard to predict.

54
00:03:13,360 --> 00:03:18,799
There is also a barrier between the two
encoders, serializing work across the GPU.

55
00:03:18,832 --> 00:03:21,735
Metal mesh shaders addresses all
of those issues.

56
00:03:21,768 --> 00:03:24,538
Mesh shaders is a new geometry pipeline

57
00:03:24,571 --> 00:03:29,209
that replaces the vertex shader stage
with two new programmable stages--

58
00:03:29,243 --> 00:03:32,179
the object shader stage
and the mesh shader stage.

59
00:03:32,212 --> 00:03:36,383
In this example, the object shader
would take geometry as an input ,

60
00:03:36,416 --> 00:03:40,087
process it and output some data--
which we call "payload"--

61
00:03:40,120 --> 00:03:41,955
to the mesh shader.

62
00:03:41,989 --> 00:03:45,058
It is up to you
to decide what this data is.

63
00:03:45,092 --> 00:03:50,264
The mesh shader, in turn, would use
this data to generate procedural geometry.

64
00:03:50,297 --> 00:03:54,635
This procedural geometry
would only exist inside the draw call,

65
00:03:54,668 --> 00:03:58,338
so it would not require you
to allocate any device memory.

66
00:03:58,372 --> 00:04:02,075
It would be pipelined
straight to the rasterizer

67
00:04:02,109 --> 00:04:06,613
and then to a fragment shader
that would produce the final image.

68
00:04:06,647 --> 00:04:10,517
Mesh draw calls are performed using
the same type of render command encoder

69
00:04:10,551 --> 00:04:12,819
as the traditional draw calls.

70
00:04:12,853 --> 00:04:16,924
Mesh draw calls and traditional
draw calls can be mixed and matched.

71
00:04:16,957 --> 00:04:20,527
Now, let's take a look at
two new programmable stages.

72
00:04:22,029 --> 00:04:23,964
In contrast to vertex shaders,

73
00:04:23,997 --> 00:04:27,634
object and mesh shaders
are similar to compute kernels.

74
00:04:27,668 --> 00:04:30,571
They are launched
in grids of thread groups.

75
00:04:30,604 --> 00:04:33,941
Each thread group is a grid
of individual threads that,

76
00:04:33,974 --> 00:04:37,878
like compute threads,
can communicate with each other.

77
00:04:37,911 --> 00:04:41,949
Additionally, each object thread group
can spawn a mesh grid

78
00:04:41,982 --> 00:04:45,819
and programmatically define the size of
the mesh grid it launches,

79
00:04:45,853 --> 00:04:48,255
providing plenty of flexibility.

80
00:04:48,288 --> 00:04:53,293
Each object thread group passes
payload data to the mesh grid it spawns.

81
00:04:53,327 --> 00:04:57,231
As the name suggests,
the object stage processes objects.

82
00:04:57,264 --> 00:05:01,201
Object is an abstract concept that
you can define according to your needs.

83
00:05:01,235 --> 00:05:04,705
It can be a scene model,
a part of a scene model or,

84
00:05:04,738 --> 00:05:09,743
for example, a region of space where
you want to generate procedural geometry.

85
00:05:09,776 --> 00:05:12,546
The mesh stage is designed
to build meshes

86
00:05:12,579 --> 00:05:15,516
and send geometry data
directly to the rasterizer.

87
00:05:15,549 --> 00:05:19,987
The next two examples will cover
the relation between objects and meshes.

88
00:05:20,020 --> 00:05:23,657
The first one is using mesh shaders
to implement hair rendering.

89
00:05:23,690 --> 00:05:28,262
To simplify this task, instead of
the Bunny model, I'll use a simple plane.

90
00:05:28,295 --> 00:05:32,432
To generate a patch of hair,
I'll divide the input geometry into tiles,

91
00:05:32,466 --> 00:05:35,636
where each tile will calculate
a level of detail

92
00:05:35,669 --> 00:05:38,405
and the number of strands
it needs to produce,

93
00:05:38,438 --> 00:05:41,742
and then generate
each individual strand of hair.

94
00:05:41,775 --> 00:05:45,112
Let me show you how to
procedurally generate hair on this plane

95
00:05:45,145 --> 00:05:46,780
using mesh shaders.

96
00:05:46,813 --> 00:05:49,016
The plane can be split into tiles,

97
00:05:49,049 --> 00:05:52,252
where each tile corresponds
to an object threadgroup.

98
00:05:52,286 --> 00:05:55,722
Each object threadgroup will
calculate the number of hair strands

99
00:05:55,756 --> 00:05:59,693
and generate the curve control
points for each strand.

100
00:05:59,726 --> 00:06:01,762
This will become the payload.

101
00:06:01,795 --> 00:06:04,765
Our object threadgroup then launches
a mesh grid,

102
00:06:04,798 --> 00:06:08,202
where each mesh threadgroup
represents a single strand of hair.

103
00:06:08,235 --> 00:06:11,538
Each mesh threadgroup
outputs the mesh to the rasterizer.

104
00:06:11,572 --> 00:06:14,308
The new geometry pipeline
allows you to map

105
00:06:14,341 --> 00:06:16,476
your geometry processing
closely to hardware

106
00:06:16,510 --> 00:06:21,782
and enables you to take full advantage
of all the threads your GPU offers.

107
00:06:21,815 --> 00:06:25,552
In a mesh render pipeline,
input geometry is split into tiles

108
00:06:25,586 --> 00:06:27,487
for the object shader grid.

109
00:06:27,521 --> 00:06:31,525
Each object shader threadgroup
can independently generate a payload

110
00:06:31,558 --> 00:06:33,260
and launch a mesh grid.

111
00:06:33,293 --> 00:06:37,464
Each mesh shader threadgroup from
the grid generates a metal::mesh

112
00:06:37,497 --> 00:06:41,034
which is further processed in
the rest of the rendering pipeline.

113
00:06:41,068 --> 00:06:46,006
Let's take a closer look at
the data produced by each of those stages.

114
00:06:46,039 --> 00:06:48,709
The payload is defined
in the object shader.

115
00:06:48,742 --> 00:06:51,245
Each object threadgroup
passes the customized payload

116
00:06:51,278 --> 00:06:55,349
to the generated mesh grid
that an object threadgroup spawns.

117
00:06:55,382 --> 00:07:00,187
In the case of hair rendering, the payload
consists of the curve control points.

118
00:07:00,220 --> 00:07:03,924
Meanwhile, the mesh shader
outputs vertex and primitive data

119
00:07:03,957 --> 00:07:08,795
through a new metal::mesh type, which
I will discuss in further detail in a bit.

120
00:07:09,963 --> 00:07:12,332
The object and mesh stages
output mesh data

121
00:07:12,366 --> 00:07:15,369
that is consumed by rest of the pipeline.

122
00:07:15,402 --> 00:07:18,572
Similar to the vertex output
from the traditional pipeline,

123
00:07:18,605 --> 00:07:21,708
the mesh data is first
consumed by the rasterizer,

124
00:07:21,742 --> 00:07:25,546
then the fragment shader executes.

125
00:07:25,579 --> 00:07:30,184
Let's take a deeper dive into how
to set up a hair rendering mesh pipeline.

126
00:07:30,217 --> 00:07:34,755
First, the plane that is to be
covered in hair is split into tiles,

127
00:07:34,788 --> 00:07:38,025
where each tile corresponds
to an object threadgroup.

128
00:07:38,058 --> 00:07:41,228
The object threadgroup
determines the mesh grid size

129
00:07:41,261 --> 00:07:45,332
and initializes the payload data
that it passes to the mesh grid.

130
00:07:45,365 --> 00:07:50,771
In this case, the tile has six strands
of hair and generates a 3x2 mesh grid,

131
00:07:50,804 --> 00:07:53,740
along with a curve
payload data for each strand.

132
00:07:54,408 --> 00:07:57,077
Each threadgroup can generate
unique mesh grid sizes.

133
00:07:57,110 --> 00:07:59,913
For the next threadgroup,
only four strands of hair

134
00:07:59,947 --> 00:08:01,615
need to be generated,

135
00:08:01,648 --> 00:08:03,750
so a 2x2 mesh grid is set

136
00:08:03,784 --> 00:08:07,654
along with initializing curve
payload data for 4 strands.

137
00:08:07,688 --> 00:08:11,592
This is how the object shader
that implements this approach looks like.

138
00:08:11,625 --> 00:08:14,361
The object attribute
has been added to Metal

139
00:08:14,394 --> 00:08:17,564
to specify what code
is an object shader.

140
00:08:17,598 --> 00:08:21,235
In addition to the payload
attribute and object_data address space,

141
00:08:21,268 --> 00:08:24,738
allow payload arguments
to be used in shaders.

142
00:08:26,139 --> 00:08:31,378
The mesh grid properties argument
is used to encode the mesh grid size.

143
00:08:31,411 --> 00:08:34,214
The next step is pipeline initialization.

144
00:08:34,248 --> 00:08:38,018
First, allocate the
mesh render pipeline descriptor,

145
00:08:38,051 --> 00:08:43,991
then initialize the object function and
specify the desired payload length,

146
00:08:44,024 --> 00:08:47,494
along with the maximum number
of threads per threadgroup.

147
00:08:47,528 --> 00:08:50,430
There are certain
constraints on object shaders.

148
00:08:50,464 --> 00:08:54,434
Payload format and contents
are fully customizable.

149
00:08:54,468 --> 00:08:58,939
However, payload size can't exceed
the limit of 16 kilobytes.

150
00:08:58,972 --> 00:09:01,542
Also, the maximum number of
mesh threadgroups

151
00:09:01,575 --> 00:09:06,013
that each object threadgroup
produces can't exceed 1024.

152
00:09:06,046 --> 00:09:08,882
The next step after getting
the object shader stage ready

153
00:09:08,916 --> 00:09:11,718
is initializing the mesh shader stage.

154
00:09:11,752 --> 00:09:15,222
The mesh shader has the user
defined payload as an input.

155
00:09:15,255 --> 00:09:19,860
In this example, the payload
is the set of curve control points.

156
00:09:19,893 --> 00:09:22,529
Each mesh threadgroup produces
a metal::mesh,

157
00:09:22,563 --> 00:09:25,098
which is a single strand of hair.

158
00:09:25,132 --> 00:09:29,236
The output mesh of the mesh shader
must have a metal::mesh type.

159
00:09:29,269 --> 00:09:33,640
A metal::mesh is a built-in structure
in Metal that provides you an interface

160
00:09:33,674 --> 00:09:38,879
to output vertex and primitive data
to the rasterizer and fragment shader.

161
00:09:38,912 --> 00:09:43,784
Each metal::mesh defines a vertex
data type, much like the output type

162
00:09:43,817 --> 00:09:45,319
of a vertex shader,

163
00:09:45,352 --> 00:09:49,356
a primitive data type,
the maximum number of vertices,

164
00:09:49,389 --> 00:09:51,725
the maximum number of primitives,

165
00:09:51,758 --> 00:09:57,364
and finally, the mesh topology--
either point, line, or triangle.

166
00:09:57,397 --> 00:10:00,968
The mesh attribute was added to
Metal shading language

167
00:10:01,001 --> 00:10:04,004
to specify what code is a mesh shader.

168
00:10:04,037 --> 00:10:07,841
Metal::mesh is used as an output
structure in the mesh shader.

169
00:10:09,943 --> 00:10:13,213
Mesh shaders are great for GPU-driven
geometry processing

170
00:10:13,247 --> 00:10:15,849
as they allow you to produce
these metal::meshes on the fly

171
00:10:15,883 --> 00:10:18,318
for the rasterizer to consume.

172
00:10:18,352 --> 00:10:21,455
Mesh shaders leverage the metal::mesh
to their advantage

173
00:10:21,488 --> 00:10:24,324
so you can put more
processing into render commands

174
00:10:24,358 --> 00:10:27,027
without having additional compute passes.

175
00:10:27,060 --> 00:10:31,265
Encoding a mesh is done across threads
within the same thread group.

176
00:10:31,298 --> 00:10:35,836
In this example, the first 9 threads
of a thread group will encode the vertex,

177
00:10:35,869 --> 00:10:39,873
index,
and primitive data of this hair strand.

178
00:10:39,907 --> 00:10:45,279
Threads 0 through 4
each encode one vertex in the mesh.

179
00:10:45,312 --> 00:10:50,017
The remaining threads in the thread
group do not encode vertices in the mesh.

180
00:10:50,050 --> 00:10:55,355
Next, all 9 threads encode one index
into the mesh indices.

181
00:10:57,291 --> 00:11:03,697
Next, the first three threads encode
primitive data for the three triangles.

182
00:11:03,730 --> 00:11:07,234
The rest of the threads
don't encode any primitive data.

183
00:11:07,267 --> 00:11:12,940
And lastly, one thread shall encode
the primitive count for the metal::mesh.

184
00:11:12,973 --> 00:11:16,076
Let me show you the source code
for this mesh shader.

185
00:11:16,109 --> 00:11:19,780
The mesh shader is organized to avoid
as much divergence in threads

186
00:11:19,813 --> 00:11:23,283
as possible--following the
same steps to encode vertex,

187
00:11:23,317 --> 00:11:26,486
index and primitive data,

188
00:11:26,520 --> 00:11:28,856
and finally the primitive count.

189
00:11:30,858 --> 00:11:34,394
Let's switch back to initializing
the mesh pipeline descriptor.

190
00:11:34,428 --> 00:11:37,764
On the mesh pipeline descriptor,
the mesh function

191
00:11:37,798 --> 00:11:41,301
along with the maximum threads
per mesh thread group, is set.

192
00:11:41,335 --> 00:11:45,239
There are limits that metal::mesh
structure needs to adhere to.

193
00:11:45,272 --> 00:11:47,841
Metal::mesh shaders
have the following limits:

194
00:11:47,875 --> 00:11:54,414
metal::mesh supports up to 256
vertices and up to 512 primitives.

195
00:11:54,448 --> 00:11:58,352
The total size of metal::mesh
cannot exceed 16 kilobytes.

196
00:11:58,385 --> 00:12:01,255
Now that the mesh grid has
generated the metal::meshes,

197
00:12:01,288 --> 00:12:06,493
these are then fed to the rasterizer
and finally the fragment shader is run.

198
00:12:06,527 --> 00:12:09,530
So, similar to the traditional
render pipeline,

199
00:12:09,563 --> 00:12:13,066
the fragment function
is set on the mesh pipeline descriptor.

200
00:12:13,100 --> 00:12:15,502
Now that the descriptor has
been initialized,

201
00:12:15,536 --> 00:12:18,572
the pipeline state is created

202
00:12:18,605 --> 00:12:22,209
through the "make render pipeline
state with mesh descriptor" method

203
00:12:22,242 --> 00:12:23,744
on the Metal device.

204
00:12:23,777 --> 00:12:29,082
Encoding a mesh pipeline is very similar
to encoding a traditional draw call.

205
00:12:29,116 --> 00:12:31,718
The pipeline state is set on the encoder.

206
00:12:31,752 --> 00:12:34,788
Each stage in the pipeline
can have resources bound.

207
00:12:34,821 --> 00:12:38,258
In this example the bound resources are:

208
00:12:38,292 --> 00:12:40,861
an object buffer to an object stage,

209
00:12:40,894 --> 00:12:42,629
a texture to a mesh stage,

210
00:12:42,663 --> 00:12:46,667
and a fragment buffer to a fragment stage.

211
00:12:46,700 --> 00:12:51,872
Next, I'm defining a few constants that
I'll need to launch the mesh pipeline:

212
00:12:51,905 --> 00:12:54,141
object grid dimensions,

213
00:12:54,174 --> 00:12:56,643
number of threads per object threadgroup,

214
00:12:56,677 --> 00:12:59,546
number of threads per mesh threadgroup,

215
00:12:59,580 --> 00:13:02,149
and use these constants to encode the draw

216
00:13:02,182 --> 00:13:04,718
through the new
"draw mesh threadgroups" method.

217
00:13:04,751 --> 00:13:07,754
The same approach that is used to
render a plane of hair

218
00:13:07,788 --> 00:13:09,823
can be applied to the whole bunny

219
00:13:09,857 --> 00:13:13,360
to procedurally generate fur
through a mesh pipeline.

220
00:13:13,393 --> 00:13:16,630
Next, let's look at another way
to use mesh shaders.

221
00:13:16,663 --> 00:13:19,233
Mesh shaders can be used to
efficiently process

222
00:13:19,266 --> 00:13:23,003
and render large amounts of
geometry using meshlet culling.

223
00:13:23,036 --> 00:13:26,373
The basis for this technique
is splitting the scene meshes up

224
00:13:26,406 --> 00:13:28,909
into smaller pieces called meshlets.

225
00:13:33,213 --> 00:13:36,884
Splitting scene geometry into meshlets
increases the granularity of the scene,

226
00:13:36,917 --> 00:13:39,753
allowing more
efficient and fine-grained culling.

227
00:13:39,786 --> 00:13:42,856
This allows you to greatly
reduce geometry overhead.

228
00:13:42,890 --> 00:13:44,858
Leveraging meshlet granularity processing

229
00:13:44,892 --> 00:13:47,594
allows for efficient occlusion
and culling algorithms

230
00:13:47,628 --> 00:13:51,632
such as screen space
occlusion culling and normal filtering.

231
00:13:51,665 --> 00:13:54,835
You can use mesh shaders to
implement a fully GPU-driven culling

232
00:13:54,868 --> 00:13:56,069
and rendering pipeline.

233
00:13:56,937 --> 00:13:59,873
Here is a traditional GPU-driven pipeline

234
00:13:59,907 --> 00:14:02,476
that performs scene processing and
rendering

235
00:14:02,509 --> 00:14:05,779
using one compute and one render pass.

236
00:14:05,812 --> 00:14:07,748
The scene data is split into meshlets

237
00:14:07,781 --> 00:14:10,150
and fed into the compute pass,

238
00:14:10,184 --> 00:14:12,853
which is responsible for frustum culling,

239
00:14:12,886 --> 00:14:14,188
LOD selection,

240
00:14:14,221 --> 00:14:17,157
and encoding the draws to device memory.

241
00:14:17,191 --> 00:14:20,561
The render pass then executes
the draw commands for the scene

242
00:14:20,594 --> 00:14:23,030
and produces the final image.

243
00:14:23,063 --> 00:14:27,334
Using mesh shaders, it is possible
to remove synchronization points

244
00:14:27,367 --> 00:14:31,138
and avoid the intermediate
draw commands by merging two passes

245
00:14:31,171 --> 00:14:33,607
into a single mesh shader dispatch.

246
00:14:33,640 --> 00:14:35,375
Let me show you how it can be done.

247
00:14:35,409 --> 00:14:37,878
Here is a single render pass

248
00:14:37,911 --> 00:14:39,947
that executes a mesh shader dispatch.

249
00:14:39,980 --> 00:14:42,149
The object shader performs frustum culling

250
00:14:42,182 --> 00:14:45,586
and calculates LODs for
each of the visible meshlets.

251
00:14:45,619 --> 00:14:50,257
The payload to the mesh shader is a list
of meshlet IDs that should be encoded.

252
00:14:50,290 --> 00:14:53,527
The mesh shader then encodes
the metal::mesh objects

253
00:14:53,560 --> 00:14:55,863
that shall be rasterized and shaded.

254
00:14:55,896 --> 00:14:58,465
The final image is then
shaded in the fragment shader,

255
00:14:58,498 --> 00:15:00,801
identical to the traditional pipeline.

256
00:15:00,834 --> 00:15:02,536
The geometry processing is done entirely

257
00:15:02,569 --> 00:15:04,304
within the mesh threadgroups command

258
00:15:04,338 --> 00:15:05,973
and within a single encoder.

259
00:15:06,006 --> 00:15:08,242
There is no longer a need
for an intermediate buffer

260
00:15:08,275 --> 00:15:09,810
to store these draw commands,

261
00:15:09,843 --> 00:15:12,746
as the triangle data
is encoded in the mesh shader.

262
00:15:13,881 --> 00:15:15,983
Let's turn our attention to culling now--

263
00:15:16,016 --> 00:15:19,152
specifically,
an implementation of meshlet culling.

264
00:15:19,186 --> 00:15:22,956
The scene consists of models
represented by the shapes here.

265
00:15:22,990 --> 00:15:27,628
In this implementation, each model of the
scene will become part of the object grid.

266
00:15:27,661 --> 00:15:30,564
The mesh grids spawned by
the object shader threadgroups

267
00:15:30,597 --> 00:15:32,299
will consist of meshlets--

268
00:15:32,332 --> 00:15:35,636
patches of triangles
that make up the surface of the model.

269
00:15:35,669 --> 00:15:38,038
The new geometry pipeline
is very flexible.

270
00:15:38,071 --> 00:15:41,708
It is up to you to decide how to
map your scene onto an object grid.

271
00:15:41,742 --> 00:15:45,379
In this example, I'm mapping
each model to an object threadgroup,

272
00:15:45,412 --> 00:15:48,982
but you can use the mapping
that better suits your task.

273
00:15:49,016 --> 00:15:51,919
Now, the object shader will determine
the visibility of meshlets

274
00:15:51,952 --> 00:15:53,554
using the viewing frustum

275
00:15:53,587 --> 00:15:58,058
and dispatch work only for
what will be presented in the final image.

276
00:15:58,091 --> 00:16:00,794
Let's focus on two models from the scene.

277
00:16:00,827 --> 00:16:04,498
The object shader launches mesh grids
based on determined visibility.

278
00:16:04,531 --> 00:16:09,570
The mesh shader then processes
the meshlets and constructs metal::meshes.

279
00:16:09,603 --> 00:16:12,773
The programmable mesh grid
size enables flexible dispatching

280
00:16:12,806 --> 00:16:16,410
so only visible meshlets
get processed by the mesh shader.

281
00:16:16,443 --> 00:16:21,315
This reduces the time spent processing
unseen geometry later in the pipeline.

282
00:16:21,348 --> 00:16:25,485
The fixed function rasterizer only
receives surfaces that are known to be

283
00:16:25,519 --> 00:16:27,621
visible and will reduce time spent

284
00:16:27,654 --> 00:16:29,957
processing and clipping out
unseen geometry.

285
00:16:30,791 --> 00:16:35,262
Finally, the programmable fragment shader
is invoked and produces the final image.

286
00:16:35,996 --> 00:16:38,465
As you can see,
there are a wide variety of problems

287
00:16:38,498 --> 00:16:41,101
that the new geometry pipeline
allows you to address

288
00:16:41,134 --> 00:16:45,439
such as creating procedural meshes or
making your draw calls more efficient,

289
00:16:45,472 --> 00:16:48,308
as demonstrated
in this meshlet culling example.

290
00:16:48,342 --> 00:16:52,346
Metal now includes a new geometry
pipeline that is modern and flexible.

291
00:16:52,379 --> 00:16:56,283
It is now easier than ever before
to create procedural geometry,

292
00:16:56,316 --> 00:16:59,253
as demonstrated
in the hair rendering example.

293
00:16:59,286 --> 00:17:02,489
Additionally,
the possibilities for GPU-driven work

294
00:17:02,523 --> 00:17:04,691
in a single render pass have expanded

295
00:17:04,725 --> 00:17:08,529
without requiring additional compute
passes or intermediate buffers,

296
00:17:08,562 --> 00:17:10,964
as seen in the meshlet culling demo.

297
00:17:11,899 --> 00:17:16,270
This new geometry pipeline is available
in Family7 and Mac2 devices.

298
00:17:18,138 --> 00:17:21,575
To help you start learning and
experimenting with mesh shaders,

299
00:17:21,608 --> 00:17:24,344
a sample code is available
on Apple developer web site

300
00:17:24,378 --> 00:17:27,080
that shows how to use the new API.

301
00:17:27,114 --> 00:17:29,583
I'm excited to see
how you use this feature

302
00:17:29,616 --> 00:17:32,853
and utilize the massively
parallel nature of Apple GPUs

303
00:17:32,886 --> 00:17:35,022
to fit your geometry processing needs.

304
00:17:35,055 --> 00:17:36,857
Thank you so much for watching!

