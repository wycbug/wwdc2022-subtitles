1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:11,411
Greg: Hi, I'm Greg.

3
00:00:11,445 --> 00:00:13,881
Welcome to what's new in StoreKit Testing.

4
00:00:13,914 --> 00:00:17,417
In this session, Peter and I will
highlight some great new features

5
00:00:17,451 --> 00:00:20,921
available for testing
in-app purchases in StoreKit.

6
00:00:20,954 --> 00:00:25,092
We'll begin by taking a look at
some of the ways you can use Xcode 14

7
00:00:25,125 --> 00:00:27,861
to streamline
your in-app purchase testing.

8
00:00:27,895 --> 00:00:32,099
Next, we'll take a look at some brand-new
capabilities you can take advantage of

9
00:00:32,132 --> 00:00:37,004
to cover even more corner cases in
your in-app subscription implementations.

10
00:00:37,037 --> 00:00:39,940
And finally,
Peter will show new enhancements

11
00:00:39,973 --> 00:00:42,643
to the sandbox testing environment.

12
00:00:42,676 --> 00:00:44,511
We'll be working with Food Truck,

13
00:00:44,545 --> 00:00:49,116
an app to provide powerful capabilities
to food truck operators who sell donuts.

14
00:00:49,149 --> 00:00:52,352
I already integrated with StoreKit
to offer the full version

15
00:00:52,386 --> 00:00:54,555
of the Food Truck sales history feature,

16
00:00:54,588 --> 00:00:58,392
and a subscription for an enhanced version
of the Social Feed service.

17
00:00:58,425 --> 00:01:01,428
Throughout the session
we'll use StoreKit Testing in Xcode

18
00:01:01,461 --> 00:01:04,398
to test the in-app purchase
functionality of our app.

19
00:01:04,431 --> 00:01:08,836
Back at WWDC 2020,
we introduced StoreKit Testing in Xcode,

20
00:01:08,869 --> 00:01:12,840
allowing you to start testing
your in-app purchases directly in Xcode.

21
00:01:12,873 --> 00:01:16,743
This year, with Xcode 14,
we're excited to share some updates

22
00:01:16,777 --> 00:01:20,047
to the testing life cycle
of a StoreKit app.

23
00:01:20,080 --> 00:01:24,284
Just like before, you can create
a StoreKit Configuration File in Xcode,

24
00:01:24,318 --> 00:01:26,920
and start testing
your in-app purchase implementation

25
00:01:26,954 --> 00:01:30,424
without setting up an app
in App Store Connect.

26
00:01:30,457 --> 00:01:33,026
When you're ready to configure
your app in App Store Connect,

27
00:01:33,060 --> 00:01:35,996
we're introducing
a brand-new feature in Xcode 14

28
00:01:36,029 --> 00:01:38,332
to allow you to use
the same in-app purchase products

29
00:01:38,365 --> 00:01:42,302
that you've entered in App Store Connect
with StoreKit Testing in Xcode.

30
00:01:42,336 --> 00:01:44,171
If you already have an app on the store,

31
00:01:44,204 --> 00:01:47,407
you can start using StoreKit Testing
in Xcode right now,

32
00:01:47,441 --> 00:01:50,744
without needing to set up a StoreKit
Configuration File from scratch.

33
00:01:50,777 --> 00:01:54,581
This convenient feature enables you
to configure your in-app purchases once,

34
00:01:54,615 --> 00:01:58,051
and use the same configuration
locally in Xcode,

35
00:01:58,085 --> 00:02:01,355
inside your unit tests,
in the Sandbox environment,

36
00:02:01,388 --> 00:02:05,025
and when you're ready for release,
on the App Store.

37
00:02:05,058 --> 00:02:08,161
It's easy to sync your products
in App Store Connect with Xcode.

38
00:02:08,195 --> 00:02:11,164
First, you configure your products
in App Store Connect,

39
00:02:11,198 --> 00:02:14,668
like this Social Feed+ subscription,
for example.

40
00:02:14,701 --> 00:02:18,205
Then, you create a synced
configuration file in Xcode

41
00:02:18,238 --> 00:02:21,008
which will load the product data
into Xcode.

42
00:02:21,041 --> 00:02:25,345
If you want to make a change,
for example updating the US English title,

43
00:02:25,379 --> 00:02:27,314
you can make the change
in App Store Connect

44
00:02:27,347 --> 00:02:30,651
and sync your Configuration
in Xcode again.

45
00:02:30,684 --> 00:02:33,086
You can also convert a configuration
you've synced

46
00:02:33,120 --> 00:02:36,890
into a local, editable file
to make on the fly changes.

47
00:02:36,924 --> 00:02:39,960
Converting a synced configuration
to a local configuration

48
00:02:39,993 --> 00:02:41,562
is a one-way operation,

49
00:02:41,595 --> 00:02:45,365
to sync again you'll need to create
a new configuration file.

50
00:02:45,399 --> 00:02:49,570
I've already gotten started by setting up
a subscription group for Social Feed+,

51
00:02:49,603 --> 00:02:53,674
an enhanced version of the Social Feed
service the Food Truck app offers.

52
00:02:53,707 --> 00:02:56,743
Let's jump into Xcode and take a look
at how to use these products

53
00:02:56,777 --> 00:02:58,979
with StoreKit Testing in Xcode.

54
00:02:59,012 --> 00:03:01,181
I have the Food Truck project
open on my Mac.

55
00:03:01,215 --> 00:03:04,852
To get started we'll create a new
StoreKit Configuration File

56
00:03:04,885 --> 00:03:08,322
by going to the File Menu,

57
00:03:08,355 --> 00:03:10,757
making a new file,

58
00:03:10,791 --> 00:03:12,926
filtering by StoreKit,

59
00:03:12,960 --> 00:03:14,728
and clicking next.

60
00:03:17,231 --> 00:03:21,101
In Xcode 14, when we create
a new configuration file,

61
00:03:21,134 --> 00:03:24,538
we get this checkbox to enable keeping
the file in sync

62
00:03:24,571 --> 00:03:26,807
with an app in App Store Connect.

63
00:03:26,840 --> 00:03:32,446
To create a local file, fill in a name
and leave the box unchecked.

64
00:03:32,479 --> 00:03:36,283
To set up syncing,
we just have to check the box,

65
00:03:36,316 --> 00:03:40,020
and confirm that the correct team
and app are selected.

66
00:03:40,053 --> 00:03:45,359
If desired, we could choose a different
team and app using the picker menus.

67
00:03:45,392 --> 00:03:47,561
We click next,

68
00:03:47,594 --> 00:03:51,331
and choose somewhere to save our file.

69
00:03:51,365 --> 00:03:52,966
As soon as we save the file,

70
00:03:53,000 --> 00:03:56,670
the in-app purchase metadata
begins syncing from App Store Connect.

71
00:03:56,703 --> 00:03:59,640
While the data is downloading,
we can keep working on our app

72
00:03:59,673 --> 00:04:02,943
and keep track of its progress
in the Activity Bar.

73
00:04:02,976 --> 00:04:05,879
When the sync is finished,
you'll notice this file looks different

74
00:04:05,913 --> 00:04:09,616
than a typical
StoreKit Configuration File.

75
00:04:09,650 --> 00:04:13,153
That's because the synced file
is in a read-only state.

76
00:04:13,187 --> 00:04:16,223
We can see all the data
in Xcode at a glance,

77
00:04:16,256 --> 00:04:20,360
but to make changes
we have to open App Store Connect.

78
00:04:21,728 --> 00:04:25,499
I have the Social Feed+ monthly product
up in Safari.

79
00:04:25,532 --> 00:04:29,203
Let's update the English title
for this product by adding a suffix

80
00:04:29,236 --> 00:04:32,439
to help differentiate the product
from the yearly plan.

81
00:04:37,010 --> 00:04:41,048
Now that this is updated,
let's save

82
00:04:41,081 --> 00:04:43,116
and go back to Xcode.

83
00:04:45,519 --> 00:04:48,355
To have this change
reflect in our configuration file,

84
00:04:48,388 --> 00:04:52,392
we just have to press this sync button
in the bottom left corner.

85
00:04:56,897 --> 00:04:58,665
Once the sync is complete,

86
00:04:58,699 --> 00:05:01,902
we can see the change reflected in Xcode.

87
00:05:03,804 --> 00:05:06,039
Even though the synced file is read-only,

88
00:05:06,073 --> 00:05:09,109
we can still copy over data
to a local file

89
00:05:09,142 --> 00:05:12,246
to make quick changes inside of Xcode.

90
00:05:21,021 --> 00:05:23,991
In addition to copying items
from the configuration file,

91
00:05:24,024 --> 00:05:29,029
we can also convert an entire synced file
to a local, editable file.

92
00:05:29,062 --> 00:05:34,101
All we need to do is open our synced file,

93
00:05:34,134 --> 00:05:37,037
go to the editor menu,

94
00:05:37,070 --> 00:05:41,275
and click on
"Convert to Local StoreKit Configuration".

95
00:05:43,243 --> 00:05:47,381
Keep in mind, you can't undo
this operation after converting the file.

96
00:05:47,414 --> 00:05:52,286
To sync with the app again, you'll need to
create a new StoreKit Configuration File.

97
00:05:52,319 --> 00:05:55,189
I want to keep this file in sync
with App Store Connect,

98
00:05:55,222 --> 00:05:59,426
so let's cancel out of this alert.

99
00:05:59,459 --> 00:06:01,328
Now that we have our file synced,

100
00:06:01,361 --> 00:06:04,331
let's configure our testing environment.

101
00:06:04,364 --> 00:06:07,734
To get started,
we'll open the scheme editor.

102
00:06:11,271 --> 00:06:13,807
Select the run action,

103
00:06:13,841 --> 00:06:15,642
and select options.

104
00:06:18,078 --> 00:06:21,582
In the options, we can switch between
different StoreKit environments

105
00:06:21,615 --> 00:06:23,283
from the picker menu.

106
00:06:23,317 --> 00:06:26,386
If we choose "None"
we'll connect to Sandbox,

107
00:06:26,420 --> 00:06:30,457
and if we choose "Food Truck"
we'll connect to the Xcode environment.

108
00:06:30,490 --> 00:06:32,960
It's that easy to switch
between environments

109
00:06:32,993 --> 00:06:35,262
depending on our current testing needs,

110
00:06:35,295 --> 00:06:38,765
and both environments will now be using
the exact same product

111
00:06:38,799 --> 00:06:41,502
and subscription metadata.

112
00:06:41,535 --> 00:06:44,671
Let's pick our synced configuration
file for now.

113
00:06:47,074 --> 00:06:51,111
We've now set up StoreKit in Xcode,
so let's get to testing.

114
00:06:51,144 --> 00:06:52,946
Since we're using a SwiftUI app,

115
00:06:52,980 --> 00:06:56,583
we can preview our subscription store
right in Xcode.

116
00:07:00,454 --> 00:07:04,558
Starting in Xcode 14,
products from StoreKit configuration files

117
00:07:04,591 --> 00:07:07,094
will load right into SwiftUI previews.

118
00:07:07,127 --> 00:07:11,431
This makes it super easy to build and test
great looking store user interfaces,

119
00:07:11,465 --> 00:07:14,168
using real in-app purchase data.

120
00:07:14,201 --> 00:07:17,037
Let's try to add some detail
to the product options

121
00:07:17,070 --> 00:07:20,974
by including a subtitle for our products.

122
00:07:21,008 --> 00:07:25,045
We'll just add a Text view containing
the product's localized description.

123
00:07:29,449 --> 00:07:31,752
And watch the preview update immediately

124
00:07:31,785 --> 00:07:34,621
with the description we set up
in App Store Connect.

125
00:07:34,655 --> 00:07:37,324
I think this is looking a lot better now.

126
00:07:38,825 --> 00:07:40,694
Now that our UI is in good shape,

127
00:07:40,727 --> 00:07:42,729
let's run the app on an iPhone

128
00:07:42,763 --> 00:07:45,299
and start some functional testing.

129
00:07:56,176 --> 00:07:59,379
In Xcode 14,
there are some powerful new tools

130
00:07:59,413 --> 00:08:01,515
in the StoreKit Transaction Manager.

131
00:08:01,548 --> 00:08:04,952
With our app running,
we can open the transaction manager

132
00:08:04,985 --> 00:08:08,589
by pressing the purchases
icon in the debug bar.

133
00:08:10,691 --> 00:08:13,627
On the right
there's a new transaction inspector

134
00:08:13,660 --> 00:08:15,262
that allows us to visualize

135
00:08:15,295 --> 00:08:18,832
all of the under the hood details
about a transaction.

136
00:08:18,866 --> 00:08:22,836
This tool can be useful to understand
the state of an in-app transaction.

137
00:08:22,870 --> 00:08:27,941
For example, we can see the date
this subscription to Social Feed+ expired,

138
00:08:27,975 --> 00:08:32,112
and information
about its upcoming renewals.

139
00:08:32,145 --> 00:08:35,716
We can also jump to the configuration file
for a product,

140
00:08:35,749 --> 00:08:38,719
subscription group, or subscription offer.

141
00:08:38,752 --> 00:08:43,257
We just have to click the jump button
next to this subscription group.

142
00:08:45,692 --> 00:08:49,796
And we're brought straight to Social Feed+
in our configuration file.

143
00:08:53,467 --> 00:08:56,136
This inspector will help us out later
in the session

144
00:08:56,170 --> 00:08:58,572
as we look at more advanced test cases.

145
00:09:00,974 --> 00:09:03,477
We can also filter our transactions now,

146
00:09:03,510 --> 00:09:06,847
which is really useful
for navigating the list of transactions

147
00:09:06,880 --> 00:09:10,784
with all of these Social Feed+ renewals.

148
00:09:10,817 --> 00:09:15,923
In our app you'll notice we have access
to the annual sales history feature.

149
00:09:17,858 --> 00:09:19,927
We have all of
these subscription renewals,

150
00:09:19,960 --> 00:09:25,199
which makes it difficult to tell which
transaction entitled us to the feature.

151
00:09:25,232 --> 00:09:27,935
We can easily find the transaction
for the product

152
00:09:27,968 --> 00:09:30,971
by beginning to type out its ID...

153
00:09:32,940 --> 00:09:37,244
And selecting the product ID filter
from the auto-complete menu.

154
00:09:40,681 --> 00:09:43,050
We can also filter by purchase date,

155
00:09:43,083 --> 00:09:46,720
so we can focus on just the purchases
we're making now.

156
00:09:52,926 --> 00:09:55,796
Since our subscription
to Social Feed+ is expired,

157
00:09:55,829 --> 00:09:59,032
let's go into the app and subscribe again.

158
00:10:06,840 --> 00:10:08,909
Now that we've confirmed the subscription,

159
00:10:08,942 --> 00:10:11,845
we can see
just the new transaction appear.

160
00:10:13,247 --> 00:10:17,384
We just looked at some ways to enhance
your in-app purchase testing in Xcode,

161
00:10:17,417 --> 00:10:20,821
by syncing products and subscriptions
from App Store Connect,

162
00:10:20,854 --> 00:10:24,024
using your StoreKit Configurations
with SwiftUI Previews,

163
00:10:24,057 --> 00:10:28,395
and taking advantage of the new tools
in the Transaction Manager.

164
00:10:28,428 --> 00:10:32,933
Now, we're going to continue testing
Food Truck's in-app purchase functionality

165
00:10:32,966 --> 00:10:35,402
by using some new capabilities in Xcode

166
00:10:35,435 --> 00:10:38,472
to cover advanced subscription cases.

167
00:10:38,505 --> 00:10:41,608
First, we'll look at testing
refund requests,

168
00:10:41,642 --> 00:10:46,013
allowing people to request refunds
for their purchases in Food Truck.

169
00:10:46,046 --> 00:10:48,182
Next, we'll test offer codes,

170
00:10:48,215 --> 00:10:51,919
to offer promotions
to Social Feed+ subscribers,

171
00:10:51,952 --> 00:10:54,521
then we'll look at
handling price increases

172
00:10:54,555 --> 00:10:56,523
in Food Truck's user interface,

173
00:10:56,557 --> 00:11:00,794
and last,
reducing Social Feed+ involuntary churn

174
00:11:00,827 --> 00:11:04,565
by supporting billing retry
and grace period.

175
00:11:04,598 --> 00:11:06,567
To begin testing refund requests,

176
00:11:06,600 --> 00:11:09,837
we'll navigate to this support view
in our app,

177
00:11:09,870 --> 00:11:14,041
which allows us to choose
a recent transaction to refund.

178
00:11:14,074 --> 00:11:16,343
The code for this is simple.

179
00:11:16,376 --> 00:11:20,380
I just added a refundRequestSheet
view modifier to our view,

180
00:11:20,414 --> 00:11:22,850
and when we press the refund button,

181
00:11:22,883 --> 00:11:25,552
we'll flip the isPresented Binding
to true.

182
00:11:25,586 --> 00:11:27,855
Now, let's see this in action.

183
00:11:29,756 --> 00:11:34,528
When the Binding is true, the refund
request sheet appears above our view.

184
00:11:34,561 --> 00:11:39,633
When testing in the Xcode environment,
the issue we select corresponds 1:1

185
00:11:39,666 --> 00:11:43,871
with a RevocationReason
in the StoreKit API.

186
00:11:43,904 --> 00:11:48,108
Let's pick "Developer Issue"
and press "Request Refund".

187
00:11:49,476 --> 00:11:53,313
In the App Store, refund requests
will take some time to process,

188
00:11:53,347 --> 00:11:55,516
but when testing with Xcode or Sandbox,

189
00:11:55,549 --> 00:12:00,120
refund requests
will immediately refund the transaction.

190
00:12:00,153 --> 00:12:03,423
In the transaction manager,

191
00:12:03,457 --> 00:12:06,894
we can look at the inspector
for this updated transaction

192
00:12:06,927 --> 00:12:09,730
to see the revocation reason
we just selected,

193
00:12:09,763 --> 00:12:11,899
and the revocation date.

194
00:12:13,667 --> 00:12:17,037
You can also test refunds
by just clicking the refund button

195
00:12:17,070 --> 00:12:19,606
in the transaction manager.

196
00:12:19,640 --> 00:12:23,410
The refund request API helps us provide
great customer support

197
00:12:23,443 --> 00:12:25,579
for people who use Food Truck.

198
00:12:25,612 --> 00:12:28,749
Now that we looked at how to test
refund requests in Xcode,

199
00:12:28,782 --> 00:12:32,853
let's look at some ways you can use
StoreKit to handle refunded transactions.

200
00:12:33,954 --> 00:12:35,889
After refunding a transaction,

201
00:12:35,923 --> 00:12:40,994
an updated Transaction value will emit
from the Transaction.updates sequence.

202
00:12:41,028 --> 00:12:44,598
We can use the revocationDate
and revocationReason properties

203
00:12:44,631 --> 00:12:47,467
to detect these refunded transactions.

204
00:12:47,501 --> 00:12:50,437
It's easy to test
the two revocation reason cases

205
00:12:50,470 --> 00:12:55,409
by selecting the corresponding option
in the refund request sheet in Xcode.

206
00:12:55,442 --> 00:12:58,145
That's how you test
the refund request sheet in Xcode.

207
00:12:58,178 --> 00:13:00,681
This works on iOS and macOS

208
00:13:00,714 --> 00:13:03,984
when using either the Xcode environment
or Sandbox.

209
00:13:04,017 --> 00:13:07,187
For testing with Xcode,
you'll need your iPhone or iPad

210
00:13:07,221 --> 00:13:11,225
to run iOS or iPadOS 15.2 or later.

211
00:13:11,258 --> 00:13:15,963
To test with Xcode on your Mac,
you'll need macOS 12.1 or later.

212
00:13:15,996 --> 00:13:19,867
Now, let's take a look
at testing subscription offer codes.

213
00:13:19,900 --> 00:13:24,371
For this, we'll be using
our local StoreKit Configuration file.

214
00:13:24,404 --> 00:13:27,908
To make a new offer for codes,
we select a subscription,

215
00:13:27,941 --> 00:13:32,012
and press the "+"
under the offer codes table.

216
00:13:32,045 --> 00:13:34,248
We then can configure our offer.

217
00:13:34,281 --> 00:13:38,452
We'll name this "Free month"

218
00:13:38,485 --> 00:13:41,288
and make it a free offer for one month.

219
00:13:42,923 --> 00:13:44,791
Just like in App Store Connect,

220
00:13:44,825 --> 00:13:47,060
we select which customers are eligible,

221
00:13:47,094 --> 00:13:51,632
and whether the introductory offer
can be redeemed with this offer.

222
00:13:51,665 --> 00:13:54,468
Let's leave the default settings for now.

223
00:13:54,501 --> 00:13:58,805
Now that our code is configured,
we'll press "Done".

224
00:13:58,839 --> 00:14:01,742
Of course, if you're syncing
with App Store Connect

225
00:14:01,775 --> 00:14:05,946
your configured offers will show up
in this table automatically.

226
00:14:06,813 --> 00:14:08,749
Now that our offer is configured,

227
00:14:08,782 --> 00:14:12,419
let's navigate to the store view
in the app.

228
00:14:12,452 --> 00:14:14,888
I've added this button
near the bottom of the view

229
00:14:14,922 --> 00:14:18,158
for redeeming a subscription offer.

230
00:14:18,192 --> 00:14:21,795
If we open the store view's
implementation in Xcode,

231
00:14:21,828 --> 00:14:26,767
implementing offer codes is as effortless
as adding an offerCodeRedemption modifier

232
00:14:26,800 --> 00:14:30,437
to our view,
and flipping the isPresented Binding

233
00:14:30,470 --> 00:14:33,540
to true when someone taps the button.

234
00:14:33,574 --> 00:14:35,309
Let's see how this works.

235
00:14:37,711 --> 00:14:39,546
When we press the button,

236
00:14:39,580 --> 00:14:42,115
the redeem sheet appears above our app.

237
00:14:42,149 --> 00:14:44,918
In the App Store,
people can type in offer codes

238
00:14:44,952 --> 00:14:46,687
that you generate in App Store Connect,

239
00:14:46,720 --> 00:14:51,024
but in Xcode the testing experience
is much more streamlined.

240
00:14:51,058 --> 00:14:54,595
We have a list of all the offers for codes
in our configuration file,

241
00:14:54,628 --> 00:14:57,531
grouped by the subscription they unlock.

242
00:14:57,564 --> 00:15:01,268
To redeem,
let's tap the offer we just created,

243
00:15:01,301 --> 00:15:03,704
and press the redeem button.

244
00:15:03,737 --> 00:15:06,874
The payment sheet appears,
and we can see the offer for codes

245
00:15:06,907 --> 00:15:11,478
will start right after
the pay as you go introductory offer.

246
00:15:17,384 --> 00:15:20,854
After subscribing,
we'll get a confirmation screen,

247
00:15:20,888 --> 00:15:22,956
and we can now close the sheet

248
00:15:22,990 --> 00:15:27,761
and verify our app unlocks access
to Social Feed+.

249
00:15:30,564 --> 00:15:33,333
If we look at the inspector
for this new transaction,

250
00:15:33,367 --> 00:15:37,037
we can see the introductory offer
is currently applied.

251
00:15:37,070 --> 00:15:38,939
Since the offer is pay as you go,

252
00:15:38,972 --> 00:15:40,674
the renewals section shows

253
00:15:40,707 --> 00:15:43,844
we'll get two more renewals
of the introductory offer.

254
00:15:43,877 --> 00:15:47,381
After that,
the free month code we just redeemed.

255
00:15:47,414 --> 00:15:51,919
Then, the standard subscription
will renew indefinitely.

256
00:15:51,952 --> 00:15:54,421
The inspector makes it very clear
what's happening

257
00:15:54,454 --> 00:15:56,089
to the state of our subscription,

258
00:15:56,123 --> 00:16:00,694
even with complicated scenarios
like multiple offers.

259
00:16:00,727 --> 00:16:05,399
We just looked at how to configure offer
codes in our local StoreKit configuration,

260
00:16:05,432 --> 00:16:08,235
and how to test redeeming them on iPhone.

261
00:16:08,268 --> 00:16:11,371
Offer codes are a great way to offer
flexible promotions

262
00:16:11,405 --> 00:16:13,907
to our future and existing subscribers,

263
00:16:13,941 --> 00:16:16,043
and now it's easier than ever
to get started

264
00:16:16,076 --> 00:16:18,178
using offer codes in Food Truck.

265
00:16:18,212 --> 00:16:22,916
Now, let's take a look at how to handle
these offers using StoreKit.

266
00:16:22,950 --> 00:16:26,220
After redeeming the code,
both the Transaction.updates

267
00:16:26,253 --> 00:16:30,891
and Status.updates sequences
will emit new values.

268
00:16:30,924 --> 00:16:34,528
We can check the offerType property
on the transaction value

269
00:16:34,561 --> 00:16:38,799
to see if there is an offer applied
to the current transaction.

270
00:16:38,832 --> 00:16:43,103
In the case we just looked at the value
of offerType will be introductory,

271
00:16:43,136 --> 00:16:46,874
because we allowed the subscriber
to redeem the introductory offer

272
00:16:46,907 --> 00:16:49,109
with the offer for codes.

273
00:16:49,142 --> 00:16:51,011
On the renewalInfo value,

274
00:16:51,044 --> 00:16:52,880
we can check the offerType property

275
00:16:52,913 --> 00:16:57,017
to see what kind of offer
will be present in the next renewal.

276
00:16:57,050 --> 00:16:58,952
In the case we just looked at,

277
00:16:58,986 --> 00:17:01,889
we can expect the initial value
to be introductory

278
00:17:01,922 --> 00:17:04,925
since we used a pay as you go offer.

279
00:17:04,958 --> 00:17:08,929
After two subscription periods
we'll see the value switch to code,

280
00:17:08,962 --> 00:17:11,932
as we have a code offer stacked.

281
00:17:11,965 --> 00:17:15,736
When offerType is code,
we can use the offerID property

282
00:17:15,769 --> 00:17:19,873
to get the reference name
of the applied offer for codes.

283
00:17:19,907 --> 00:17:23,010
That's how you test offers for codes in Xcode.

284
00:17:23,043 --> 00:17:27,147
You can configure offers for codes
starting in Xcode 13.3,

285
00:17:27,181 --> 00:17:32,219
and test them on iPhones and iPads
running iOS 15.4 or later.

286
00:17:32,252 --> 00:17:35,455
Now that we've verified
offers for codes work in Food Truck,

287
00:17:35,489 --> 00:17:40,561
let's test how our app handles
a price increase for Social Feed+.

288
00:17:40,594 --> 00:17:43,830
Testing a price increase
is really simple in Xcode.

289
00:17:43,864 --> 00:17:48,669
To get started, we'll increase the price
for the monthly social feed subscription.

290
00:17:50,938 --> 00:17:52,506
This step is optional.

291
00:17:52,539 --> 00:17:54,141
You can leave the price the same

292
00:17:54,174 --> 00:17:56,677
and still simulate a price increase.

293
00:17:56,710 --> 00:18:00,480
Back to the transaction manager,

294
00:18:00,514 --> 00:18:04,818
all we need to do is select the latest
transaction for a subscription

295
00:18:04,852 --> 00:18:09,089
and press "Request Price Increase Consent"
in the toolbar.

296
00:18:10,791 --> 00:18:12,960
We can see in the transaction manager

297
00:18:12,993 --> 00:18:16,263
our transaction is now in
a "Price Increase Pending" state,

298
00:18:16,296 --> 00:18:20,901
and if we look at the device we'll notice
a sheet appeared above our app,

299
00:18:20,934 --> 00:18:24,071
asking to consent to the price increase.

300
00:18:24,104 --> 00:18:27,307
This sheet will appear on its own
without adding any code,

301
00:18:27,341 --> 00:18:32,646
but we took advantage of the new
Messages API to customize its behavior.

302
00:18:33,814 --> 00:18:38,719
Let's take a look at how we integrated
with the Messages API in the code.

303
00:18:48,996 --> 00:18:52,366
We have a for loop iterating
the messages sequence here,

304
00:18:52,399 --> 00:18:55,769
and if we get a message
like price increase,

305
00:18:55,802 --> 00:18:58,572
make sure we don't have
a sensitive view presented,

306
00:18:58,605 --> 00:19:00,307
like the donut editor.

307
00:19:00,340 --> 00:19:03,610
Otherwise,
we'll use the DisplayMessageAction

308
00:19:03,644 --> 00:19:06,013
to display the message.

309
00:19:06,046 --> 00:19:08,448
If the donut editor is presented,

310
00:19:08,482 --> 00:19:10,551
we'll hold on to the Message value

311
00:19:10,584 --> 00:19:13,587
and display it after
the donut editing is finished.

312
00:19:14,955 --> 00:19:16,990
Let's get back to testing.

313
00:19:19,626 --> 00:19:24,398
In the App Store, existing subscribers
may get multiple price increase messages

314
00:19:24,431 --> 00:19:27,000
at different times
until they make a decision

315
00:19:27,034 --> 00:19:29,736
to cancel or consent
to the price increase.

316
00:19:29,770 --> 00:19:33,674
In Xcode, we have full control
of when these messages come.

317
00:19:33,707 --> 00:19:36,844
Each time we press the button
in the transaction manager,

318
00:19:36,877 --> 00:19:38,545
we'll get a message again,

319
00:19:38,579 --> 00:19:43,383
even if the transaction is already
in a price increase state.

320
00:19:43,417 --> 00:19:48,555
Now we can test
if our deferral logic actually works.

321
00:19:48,589 --> 00:19:50,958
So I'll open the donut editor...

322
00:19:54,494 --> 00:19:57,164
And send a message
to open the sheet again.

323
00:20:02,302 --> 00:20:04,671
The sheet doesn't appear yet,

324
00:20:04,705 --> 00:20:08,308
but if we leave the donut editor,

325
00:20:08,342 --> 00:20:10,878
the sheet appears as expected.

326
00:20:10,911 --> 00:20:15,582
While we could accept the price increase,
or cancel the subscription in the sheet,

327
00:20:15,616 --> 00:20:18,719
in reality, users might respond
to the price increase

328
00:20:18,752 --> 00:20:21,421
via an external source, like an email.

329
00:20:21,455 --> 00:20:26,593
To simulate this, we can use
the approve and decline buttons

330
00:20:26,627 --> 00:20:29,162
in the transaction manager.

331
00:20:29,196 --> 00:20:31,832
Since the donut editing experience
was so great,

332
00:20:31,865 --> 00:20:38,505
I'll consent to the new price by pressing
Approve in the transaction manager.

333
00:20:38,539 --> 00:20:42,242
Using StoreKit in Xcode makes testing
a complicated corner case

334
00:20:42,276 --> 00:20:45,112
like a price increase very smooth.

335
00:20:45,145 --> 00:20:47,748
Now that we looked at how
to simulate a price increase,

336
00:20:47,781 --> 00:20:52,152
let's look at how we can use StoreKit
to handle price increases in our app.

337
00:20:53,453 --> 00:20:55,789
When testing the price increase status,

338
00:20:55,822 --> 00:21:00,661
the status updates sequence will emit
new values with every state change.

339
00:21:00,694 --> 00:21:02,896
We can detect these updates
in our app

340
00:21:02,930 --> 00:21:07,901
by checking the priceIncreaseStatus
property on the RenewalInfo value.

341
00:21:07,935 --> 00:21:11,638
If a customer cancels their subscription
due to a price increase,

342
00:21:11,672 --> 00:21:13,240
we'll be able to detect this

343
00:21:13,273 --> 00:21:16,476
by checking for
didNotConsentToPriceIncrease

344
00:21:16,510 --> 00:21:19,813
in the expirationReason property.

345
00:21:19,847 --> 00:21:23,483
We can also write unit tests
around testing price increase.

346
00:21:23,517 --> 00:21:27,187
To start, disabling dialogs
will allow us to test

347
00:21:27,221 --> 00:21:31,658
without actually showing
the price increase UI above our app.

348
00:21:31,692 --> 00:21:33,827
After purchasing the subscription,

349
00:21:33,861 --> 00:21:37,297
we can use the
requestPriceIncreaseConsentForTransaction

350
00:21:37,331 --> 00:21:39,666
API to start the process,

351
00:21:39,700 --> 00:21:44,705
passing in the ID of the latest
transaction for the subscription.

352
00:21:44,738 --> 00:21:47,774
To verify a test transaction
is pending a price increase,

353
00:21:47,808 --> 00:21:52,279
we'll check the
isPendingPriceIncreaseConsent property.

354
00:21:52,312 --> 00:21:55,115
Finally,
depending on what we're testing,

355
00:21:55,148 --> 00:21:58,785
we can call
consentToPriceIncreaseForTransaction

356
00:21:58,819 --> 00:22:02,155
or declinePriceIncreaseForTransaction

357
00:22:02,189 --> 00:22:06,827
to see how our app responds
to finished price increase cases.

358
00:22:06,860 --> 00:22:09,029
That's all for testing price increase.

359
00:22:09,062 --> 00:22:14,334
Price increase is testable with Xcode 13.3
on all platforms.

360
00:22:14,368 --> 00:22:20,240
Note that the price increase message
is only testable on iOS 15.4 or later.

361
00:22:20,274 --> 00:22:26,046
Finally, let's take a look at subscription
billing retry and grace period.

362
00:22:26,079 --> 00:22:29,183
Billing retry is a state
where an error occurred

363
00:22:29,216 --> 00:22:30,951
when trying to renew a subscription,

364
00:22:30,984 --> 00:22:33,387
like an expired credit card.

365
00:22:33,420 --> 00:22:35,822
In the App Store, during billing retry

366
00:22:35,856 --> 00:22:41,195
the App Store will attempt to fix
the issue and recover the subscription.

367
00:22:41,228 --> 00:22:43,730
You can optionally enable a grace period,

368
00:22:43,764 --> 00:22:47,634
which allows people to keep using
their subscription for a limited time,

369
00:22:47,668 --> 00:22:50,304
at the beginning
of the billing retry state.

370
00:22:50,337 --> 00:22:54,508
Let me demonstrate how to simulate this
when testing in Xcode.

371
00:22:54,541 --> 00:22:57,845
To simulate billing issues
on a subscription renewal,

372
00:22:57,878 --> 00:23:01,648
we open the "Editor" menu on the StoreKit
Configuration we're testing with

373
00:23:01,682 --> 00:23:05,919
and enable "Billing Retry on Renewal".

374
00:23:08,956 --> 00:23:11,925
I want Food Truck to support
a billing grace period,

375
00:23:11,959 --> 00:23:15,896
so let's enable "Billing Grace Period"
in the menu as well.

376
00:23:17,931 --> 00:23:20,167
We'll speed up the subscription rate too,

377
00:23:20,200 --> 00:23:22,703
so we can watch how the state changes.

378
00:23:28,909 --> 00:23:33,247
Let's first subscribe to Social Feed+.

379
00:23:44,658 --> 00:23:48,428
Now, let's wait for it to be time
for a renewal.

380
00:23:51,265 --> 00:23:53,233
When the transaction expires,

381
00:23:53,267 --> 00:23:57,237
notice we first enter
the billing grace period state.

382
00:23:57,271 --> 00:24:02,176
We can look at the transaction inspector
and see the time each state will end.

383
00:24:04,011 --> 00:24:06,346
The billing grace period just expired,

384
00:24:06,380 --> 00:24:09,750
and now we're in
the standard billing retry state.

385
00:24:09,783 --> 00:24:14,855
At any time we can use
the "Resolve Issue For Transaction" button

386
00:24:14,888 --> 00:24:17,124
to simulate fixing the billing error.

387
00:24:17,157 --> 00:24:19,860
Let's test resolving the issue.

388
00:24:22,963 --> 00:24:24,932
Now that the issue is resolved,

389
00:24:24,965 --> 00:24:27,234
we get a new transaction.

390
00:24:30,437 --> 00:24:33,440
So long as we have
"Billing retry on renewal" enabled,

391
00:24:33,473 --> 00:24:37,077
each new transaction
will continue to enter billing retry,

392
00:24:37,110 --> 00:24:41,648
so we can repeat this test
as many times as we'd like.

393
00:24:41,682 --> 00:24:44,351
Handling Billing Retry
and Grace Period properly

394
00:24:44,384 --> 00:24:48,889
is key to retaining subscribers
by reducing involuntary churn.

395
00:24:48,922 --> 00:24:52,759
We just looked at how straightforward
it is to simulate these states with Xcode,

396
00:24:52,793 --> 00:24:56,230
so now let's go over
how to handle them using StoreKit.

397
00:24:56,964 --> 00:25:00,167
As the billing retry
and grace period states change,

398
00:25:00,200 --> 00:25:04,137
the status updates sequence
will emit a new value.

399
00:25:04,171 --> 00:25:07,341
Since we offer
a billing grace period in Food Truck,

400
00:25:07,374 --> 00:25:11,278
we need to make sure
to give subscribers access to Social Feed+

401
00:25:11,311 --> 00:25:13,680
while they're in the grace period.

402
00:25:13,714 --> 00:25:16,783
We can see how long the subscriber's
grace period should be

403
00:25:16,817 --> 00:25:21,688
using the gracePeriodExpirationDate
property on the renewal info.

404
00:25:21,722 --> 00:25:26,026
To check for billing retry,
we just have to check isInBillingRetry.

405
00:25:27,461 --> 00:25:33,500
We can also detect either of these states
easily with the state property of Status.

406
00:25:33,534 --> 00:25:36,370
If we see a customer
is in either of these states,

407
00:25:36,403 --> 00:25:41,542
we can direct them to a deep link
to the App Store to fix the billing issue.

408
00:25:41,575 --> 00:25:44,344
If you're using
any current entitlement API,

409
00:25:44,378 --> 00:25:47,281
you'll receive transactions
for expired subscriptions

410
00:25:47,314 --> 00:25:50,117
while they're in the grace period.

411
00:25:50,150 --> 00:25:54,321
We can also control billing retry
and grace period in our unit tests

412
00:25:54,354 --> 00:25:57,558
by setting
billingGracePeriodIsEnabled

413
00:25:57,591 --> 00:26:03,463
and shouldEnterBillingRetryOnRenewal
on our StoreKit test session.

414
00:26:03,497 --> 00:26:07,134
After our app notices
a subscription enter billing retry,

415
00:26:07,167 --> 00:26:12,172
the test transaction's
hasPurchaseIssue property will be true.

416
00:26:12,206 --> 00:26:14,842
After waiting for various status updates

417
00:26:14,875 --> 00:26:17,377
and asserting our app updates as expected,

418
00:26:17,411 --> 00:26:20,714
we can use the resolve issue
for transaction method

419
00:26:20,747 --> 00:26:24,051
to simulate the App Store
recovering the subscription.

420
00:26:24,084 --> 00:26:28,422
Billing retry and grace period
are testable in Xcode 13.3 or later

421
00:26:28,455 --> 00:26:30,357
on all platforms.

422
00:26:30,390 --> 00:26:33,193
Later in the session,
Peter will go more into detail

423
00:26:33,227 --> 00:26:37,664
on how to test these states in Sandbox
on iOS and iPadOS 16.

424
00:26:39,099 --> 00:26:42,669
We covered advanced test cases
from requesting refunds

425
00:26:42,703 --> 00:26:45,405
to handling billing retry
and grace period.

426
00:26:45,439 --> 00:26:48,242
For more details on how to use
the new StoreKit APIs

427
00:26:48,275 --> 00:26:50,043
to support some of these cases,

428
00:26:50,077 --> 00:26:53,380
check out
"What's new with in-app purchase."

429
00:26:55,282 --> 00:26:57,818
This was just a quick overview
of what's new for StoreKit Testing

430
00:26:57,851 --> 00:27:01,455
in Xcode this year,
but we didn't cover everything.

431
00:27:01,488 --> 00:27:04,124
There are new subscription renewal rates,

432
00:27:04,157 --> 00:27:09,363
you can test the StoreKit 2 in-app manage
subscriptions sheet in Xcode,

433
00:27:09,396 --> 00:27:13,534
and you can write unit tests
for your SKAdNetwork implementations

434
00:27:13,567 --> 00:27:15,669
using StoreKitTest.

435
00:27:15,702 --> 00:27:19,907
Check out "What's new in
SKAdNetwork" to learn more.

436
00:27:19,940 --> 00:27:22,342
Now Peter will walk you through what's new

437
00:27:22,376 --> 00:27:25,646
in the Sandbox testing environment
this year.

438
00:27:25,679 --> 00:27:26,914
Peter: Thanks, Greg.

439
00:27:26,947 --> 00:27:29,850
Hi, I'm Peter,
an App Store server engineer.

440
00:27:29,883 --> 00:27:33,153
We saw how new features
with StoreKit Testing in Xcode

441
00:27:33,187 --> 00:27:36,857
can help you test more complex
in-app purchase implementations.

442
00:27:37,724 --> 00:27:39,826
We're constantly listening
to your feedback,

443
00:27:39,860 --> 00:27:43,330
and we know many of you rely on
the App Store Sandbox environment

444
00:27:43,363 --> 00:27:46,800
to test your in-app purchases
and server implementations.

445
00:27:46,834 --> 00:27:50,137
I'm excited to share some new
enhancements we're making in Sandbox

446
00:27:50,170 --> 00:27:55,275
so you can more easily test your app
and server in an online test environment.

447
00:27:55,309 --> 00:27:59,513
We'll be introducing enhancements
to Sandbox Apple ID creation,

448
00:27:59,546 --> 00:28:01,748
the App Store Connect API,

449
00:28:01,782 --> 00:28:04,518
and billing failure simulation.

450
00:28:04,551 --> 00:28:06,353
To use the sandbox environment,

451
00:28:06,386 --> 00:28:10,190
we first need to set up a Sandbox Apple ID
in App Store Connect.

452
00:28:11,158 --> 00:28:13,794
You'll notice we moved
the Sandbox tester list

453
00:28:13,827 --> 00:28:17,998
to the navigation bar
on the Users and Access page.

454
00:28:18,031 --> 00:28:22,336
Here, we can create a new tester
with the Plus button.

455
00:28:22,369 --> 00:28:25,706
We streamlined the creation process
by removing several fields

456
00:28:25,739 --> 00:28:27,274
from the new tester window.

457
00:28:27,307 --> 00:28:30,244
We're now only asking
for the minimum amount of info,

458
00:28:30,277 --> 00:28:32,312
so you can move forward
with creating your account

459
00:28:32,346 --> 00:28:35,549
without unnecessary information.

460
00:28:35,582 --> 00:28:38,485
You can also use a "plus symbol"
in your email address,

461
00:28:38,519 --> 00:28:43,190
so you don't need to create
a brand-new email address for each tester.

462
00:28:43,223 --> 00:28:47,461
We know creating strong passwords can
be tedious, and we made this easier too.

463
00:28:47,494 --> 00:28:51,899
We've also added in-line suggestions for
helping make your password more secure.

464
00:28:53,400 --> 00:28:55,936
We hope streamlined
Apple ID creation form,

465
00:28:55,969 --> 00:28:57,838
and better password complexity hints,

466
00:28:57,871 --> 00:29:00,674
will help you spend less time
setting up accounts

467
00:29:00,707 --> 00:29:03,243
and more time developing your app.

468
00:29:03,277 --> 00:29:05,546
App Store Connect is the central location

469
00:29:05,579 --> 00:29:08,248
where you create and manage
Sandbox Apple IDs,

470
00:29:08,282 --> 00:29:11,618
as well as manage your app content
and organization.

471
00:29:11,652 --> 00:29:14,988
Over the last few years,
we've been adding features to Sandbox

472
00:29:15,022 --> 00:29:16,390
that you've been asking for,

473
00:29:16,423 --> 00:29:20,527
like changing Sandbox account region
and clearing purchase history.

474
00:29:20,561 --> 00:29:23,463
Many of these features are accessible
in App Store Connect

475
00:29:23,497 --> 00:29:27,668
or on-device in the Sandbox
Manage Subscriptions page.

476
00:29:27,701 --> 00:29:31,171
Later this year, we will be bringing
several of these Sandbox features

477
00:29:31,205 --> 00:29:32,906
to the App Store Connect API,

478
00:29:32,940 --> 00:29:36,143
including querying
for a list of Sandbox Apple IDs,

479
00:29:36,176 --> 00:29:40,080
clearing purchase history,
and setting interrupted purchase state.

480
00:29:40,113 --> 00:29:43,317
This will enable faster testing
with your sandbox accounts

481
00:29:43,350 --> 00:29:47,855
and help you setup automation clients
for commonly-used testing tools.

482
00:29:47,888 --> 00:29:53,060
Finally, I'm happy to announce support
for billing failure simulation in Sandbox.

483
00:29:53,093 --> 00:29:56,830
In 2018, we announced Billing Retry
and Grace Period

484
00:29:56,864 --> 00:30:01,401
for auto-renewing subscriptions,
to help you reduce involuntary churn.

485
00:30:01,435 --> 00:30:05,272
Since launching in 2019,
Billing Grace Period has allowed you

486
00:30:05,305 --> 00:30:09,810
to recover 300 million days
of paid service to your customers.

487
00:30:09,843 --> 00:30:12,613
This results in incremental revenue
for your business

488
00:30:12,646 --> 00:30:16,416
while your customers experience
no interruption in service.

489
00:30:16,450 --> 00:30:20,420
While many of you are already handling
billing failure cases in production,

490
00:30:20,454 --> 00:30:23,524
we want to provide
more testing scenarios in Sandbox,

491
00:30:23,557 --> 00:30:25,659
so you can test and handle billing
failures

492
00:30:25,692 --> 00:30:28,962
before your app is published
on the App Store.

493
00:30:28,996 --> 00:30:32,299
You'll be able to use a new
Sandbox Account Settings page

494
00:30:32,332 --> 00:30:35,736
to enable billing failure simulation
for your account,

495
00:30:35,769 --> 00:30:38,472
test foreground and background
subscription failures

496
00:30:38,505 --> 00:30:40,174
in the context of your app,

497
00:30:40,207 --> 00:30:43,243
and verify subscription status
with verifyReceipt,

498
00:30:43,277 --> 00:30:44,878
App Store Server API,

499
00:30:44,912 --> 00:30:48,949
and App Store Server Notifications V2
in Sandbox.

500
00:30:48,982 --> 00:30:52,686
For more info on Billing Retry
and reducing involuntary churn,

501
00:30:52,719 --> 00:30:57,691
I recommend the 2018 WWDC session,
"Engineering Subscriptions".

502
00:30:57,724 --> 00:31:01,628
This year, we're introducing a switch
in the new Sandbox Account Settings

503
00:31:01,662 --> 00:31:04,398
to simulate
a failed in-app purchase attempt.

504
00:31:04,431 --> 00:31:08,168
This is also the new home for
the Sandbox subscriptions page.

505
00:31:08,202 --> 00:31:10,437
With billing failure simulation enabled,

506
00:31:10,470 --> 00:31:12,906
foreground in-app purchases will fail.

507
00:31:12,940 --> 00:31:14,875
This behavior matches the behavior

508
00:31:14,908 --> 00:31:17,544
when your customer's payment method
is declined.

509
00:31:17,578 --> 00:31:22,015
Billing failure simulation also ensures
that auto-renewing subscription states

510
00:31:22,049 --> 00:31:24,985
match those
for billing failures in production.

511
00:31:25,018 --> 00:31:28,121
This means you can test in-app messaging
for your customers

512
00:31:28,155 --> 00:31:30,157
who are having billing problems.

513
00:31:30,190 --> 00:31:32,159
These subscription states
will be reflected

514
00:31:32,192 --> 00:31:37,064
in your in-app purchase receipts,
verified with V2 Notifications.

515
00:31:37,097 --> 00:31:39,900
Let's review the subscription lifecycle.

516
00:31:39,933 --> 00:31:43,036
When you purchase an auto-renewing
subscription in Sandbox,

517
00:31:43,070 --> 00:31:45,506
you already receive V2 Notifications,

518
00:31:45,539 --> 00:31:48,242
like SUBSCRIBED, and DID_RENEW.

519
00:31:48,275 --> 00:31:51,044
When you test failed in-app purchase
attempts for an account

520
00:31:51,078 --> 00:31:52,679
with an active subscription,

521
00:31:52,713 --> 00:31:55,916
the next renewal
will fall into billing retry state.

522
00:31:55,949 --> 00:31:59,219
You'll now receive billing retry
notifications in Sandbox,

523
00:31:59,253 --> 00:32:01,221
like DID_FAIL_TO_RENEW.

524
00:32:01,255 --> 00:32:05,225
If you disable billing failure simulation
before we stop trying to recover

525
00:32:05,259 --> 00:32:07,494
the renewal of your subscription,

526
00:32:07,528 --> 00:32:10,130
the next renewal attempt
will be successful,

527
00:32:10,163 --> 00:32:12,633
and you will receive
a DID_RENEW notification,

528
00:32:12,666 --> 00:32:15,135
with subtype BILLING_RECOVERY.

529
00:32:15,169 --> 00:32:20,174
If we reach the limit for retry attempts,
and billing failure simulation is enabled,

530
00:32:20,207 --> 00:32:23,310
the subscription will expire
and you will receive EXPIRED,

531
00:32:23,343 --> 00:32:26,079
with subtype BILLING_RETRY.

532
00:32:26,113 --> 00:32:28,949
If you're already using
Grace Period in production,

533
00:32:28,982 --> 00:32:31,652
and V2 Notifications in Sandbox,

534
00:32:31,685 --> 00:32:35,122
you can expect to receive
the DID_FAIL_TO_RENEW notification

535
00:32:35,155 --> 00:32:37,624
with subtype GRACE_PERIOD.

536
00:32:37,658 --> 00:32:41,895
Here's an example subscription
in billing retry state, with Grace Period.

537
00:32:41,929 --> 00:32:44,598
You will receive
DID_FAIL_TO_RENEW notifications

538
00:32:44,631 --> 00:32:46,867
with subtype GRACE_PERIOD,

539
00:32:46,900 --> 00:32:48,902
as well as GRACE_PERIOD_EXPIRED,

540
00:32:48,936 --> 00:32:53,907
if billing failure simulation is still
enabled at the end of the grace period.

541
00:32:53,941 --> 00:32:57,845
When verifying subscription information
with App Store Server API,

542
00:32:57,878 --> 00:33:00,914
you can verify subscription state
by decoding the payload

543
00:33:00,948 --> 00:33:03,784
of signedRenewalInfo.

544
00:33:03,817 --> 00:33:09,289
Here, we see the expirationIntent
and billing retry fields are populated.

545
00:33:09,323 --> 00:33:14,161
When calling /verifyReceipt with a receipt
for subscriptions in billing retry state,

546
00:33:14,194 --> 00:33:17,431
you will see that the
is_in_billing_retry_period flag

547
00:33:17,464 --> 00:33:19,299
is set to 1.

548
00:33:19,333 --> 00:33:21,368
Also, when using grace period,

549
00:33:21,401 --> 00:33:25,739
you can now expect grace period
expiration date fields to be populated.

550
00:33:26,573 --> 00:33:29,543
Once you've completed testing
a billing failure in Sandbox,

551
00:33:29,576 --> 00:33:32,913
you can disable the switch
in Sandbox Account Settings.

552
00:33:32,946 --> 00:33:35,082
We hope this new testability
helps you build

553
00:33:35,115 --> 00:33:37,985
the best possible experience
for your customers.

554
00:33:38,018 --> 00:33:41,555
Today we discussed several
new testing capabilities you can use

555
00:33:41,588 --> 00:33:46,126
to streamline testing
your app's in-app purchase functionality.

556
00:33:46,159 --> 00:33:49,796
By syncing your configuration
in App Store Connect with Xcode,

557
00:33:49,830 --> 00:33:53,967
you can use the same in-app purchase
configuration when testing locally

558
00:33:54,001 --> 00:33:56,203
or with the Sandbox environment.

559
00:33:56,236 --> 00:34:00,040
New capabilities like offer code
and refund testing in Xcode

560
00:34:00,073 --> 00:34:03,777
will help you verify complex
StoreKit implementations.

561
00:34:03,810 --> 00:34:08,215
And, subscription management testability
will enable you to evolve your app

562
00:34:08,248 --> 00:34:10,317
to ensure a great customer experience,

563
00:34:10,350 --> 00:34:12,786
even if their service is interrupted.

564
00:34:12,819 --> 00:34:16,557
For details on how a billing failure
impacts subscription receipts,

565
00:34:16,590 --> 00:34:20,527
plus, App Store Server Notifications V2
in Sandbox,

566
00:34:20,561 --> 00:34:23,497
I recommend the WWDC 21 session,

567
00:34:23,530 --> 00:34:26,233
"Manage in-app purchases on your server."

568
00:34:26,266 --> 00:34:29,770
Also, to hear about what's new
in App Store Server API

569
00:34:29,803 --> 00:34:34,141
and V2 Notifications, check out
"What's new with in-app purchase."

570
00:34:34,174 --> 00:34:37,411
We look forward to hearing your feedback
about these new features.

571
00:34:37,444 --> 00:34:39,012
Thank you for joining.

