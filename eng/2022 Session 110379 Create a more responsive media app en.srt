1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:10,844
Jeremy:
Hi. I'm Jeremy,

3
00:00:10,878 --> 00:00:13,714
and I'm here to show you how to create
a more responsive media app

4
00:00:13,747 --> 00:00:15,883
using AVFoundation.

5
00:00:15,916 --> 00:00:17,584
When using media assets in your app,

6
00:00:17,618 --> 00:00:19,553
you might like to do more
than just play them.

7
00:00:19,586 --> 00:00:22,523
You might like to show thumbnails,

8
00:00:22,556 --> 00:00:25,626
combine media into new compositions,

9
00:00:25,659 --> 00:00:28,962
or get information about your assets.

10
00:00:28,996 --> 00:00:31,031
These tasks require loading data,

11
00:00:31,064 --> 00:00:35,269
and with big files like video,
that might take some time to complete.

12
00:00:35,302 --> 00:00:38,472
Unfortunately, it can be easy
to introduce latency issues in your app

13
00:00:38,505 --> 00:00:42,242
if this work is done synchronously
on the main thread.

14
00:00:42,276 --> 00:00:45,479
A great way to keep your app responsive
is to load data asynchronously,

15
00:00:45,512 --> 00:00:48,081
and update your UI when it's finished.

16
00:00:48,115 --> 00:00:51,051
AVFoundation has tools to make this easy.

17
00:00:51,084 --> 00:00:53,520
So here's what we'll talk about today.

18
00:00:53,554 --> 00:00:58,225
First, I'll introduce you
to some new async APIs in AVFoundation.

19
00:00:58,258 --> 00:01:00,561
Then, I'll give you an update
on asset inspection

20
00:01:00,594 --> 00:01:04,164
using the async load(_:) method
we introduced last year.

21
00:01:04,198 --> 00:01:07,000
And I'll show you how to optimize
custom data loading for local

22
00:01:07,034 --> 00:01:10,871
and cached media
using AVAssetResourceLoader.

23
00:01:10,904 --> 00:01:14,741
But first,
let's jump into the new async API.

24
00:01:14,775 --> 00:01:18,312
Grabbing still images from a video
with AVAssetImageGenerator

25
00:01:18,345 --> 00:01:20,547
is a great way to create thumbnails.

26
00:01:20,581 --> 00:01:22,649
But image generation isn't instantaneous.

27
00:01:24,017 --> 00:01:27,421
To generate an image,
image generator needs to load frame data

28
00:01:27,454 --> 00:01:29,723
from your video file.

29
00:01:29,756 --> 00:01:32,960
And for media stored on a remote server,
or on the internet,

30
00:01:32,993 --> 00:01:35,329
that loading will be much slower.

31
00:01:35,362 --> 00:01:39,433
That's why it's important how
you generate your images.

32
00:01:39,466 --> 00:01:41,568
Using a method
that loads data synchronously,

33
00:01:41,602 --> 00:01:44,104
like copyCGImage, on the main thread

34
00:01:44,137 --> 00:01:48,141
can cause your UI to freeze
as it waits for video to be loaded.

35
00:01:48,175 --> 00:01:51,211
This year, we've added
the image(at: time) async method

36
00:01:51,245 --> 00:01:53,780
which uses async/await
to free up the calling thread

37
00:01:53,814 --> 00:01:56,783
while image generator loads data.

38
00:01:56,817 --> 00:01:59,186
Image generator returns a tuple
with the image

39
00:01:59,219 --> 00:02:01,455
and its actual time in the asset.

40
00:02:01,488 --> 00:02:05,025
There are a few reasons the actual time
may vary from the time you requested,

41
00:02:05,058 --> 00:02:06,860
but if you only want the image,

42
00:02:06,894 --> 00:02:10,964
you can directly access it
with the .image property.

43
00:02:10,998 --> 00:02:14,501
Some frames in compressed video
are easier to load than others.

44
00:02:14,535 --> 00:02:16,537
iFrames can be decoded independently,

45
00:02:16,570 --> 00:02:20,174
while other frames
rely on nearby frames to be decoded.

46
00:02:20,207 --> 00:02:23,210
For your requested time,
image generator by default

47
00:02:23,243 --> 00:02:26,847
will use the nearest iFrame
to generate your image.

48
00:02:26,880 --> 00:02:29,183
It might be tempting
to set the tolerances to zero

49
00:02:29,216 --> 00:02:31,852
to get the exact frame
for your requested time.

50
00:02:31,885 --> 00:02:34,788
But keep in mind that
that frame will likely be dependent

51
00:02:34,821 --> 00:02:39,560
on other nearby frames that
image generator will also need to load.

52
00:02:39,593 --> 00:02:42,062
Instead, consider setting wide tolerances

53
00:02:42,095 --> 00:02:44,164
that will still give you the result
you're looking for.

54
00:02:44,198 --> 00:02:47,367
Wide tolerances help image generator
to minimize data loading

55
00:02:47,401 --> 00:02:49,803
by giving it more frames to pick from.

56
00:02:49,837 --> 00:02:53,040
The fewer frames it needs to load,
the faster it can return an image.

57
00:02:54,374 --> 00:02:57,344
To get a series of images
at several times in an asset,

58
00:02:57,377 --> 00:03:02,082
image generator has had
generateCGImagesAsynchronously(forTimes:).

59
00:03:02,115 --> 00:03:06,220
However in Swift, there is some nuance
to watch out for to use it.

60
00:03:06,253 --> 00:03:10,224
New this year we've added
the images(for: times) method.

61
00:03:10,257 --> 00:03:12,526
It now takes an array of CMTimes,

62
00:03:12,559 --> 00:03:15,629
so you don't need to map them
to NSValues first.

63
00:03:15,662 --> 00:03:18,899
It also provides its results
using an Async Sequence.

64
00:03:18,932 --> 00:03:23,871
In Swift, sequences let you iterate
over their items using a for in loop.

65
00:03:23,904 --> 00:03:26,874
For a sequence of items
that aren't ready all at once,

66
00:03:26,907 --> 00:03:31,912
an async sequence lets you await
the next element after each iteration.

67
00:03:31,945 --> 00:03:34,281
For each successfully generated image,

68
00:03:34,314 --> 00:03:36,884
the result includes
the originally requested time

69
00:03:36,917 --> 00:03:39,686
and the actual time alongside the image.

70
00:03:39,720 --> 00:03:43,123
If it fails,
the result has an error to explain why.

71
00:03:44,725 --> 00:03:46,927
And if you are only interested
in the image,

72
00:03:46,960 --> 00:03:50,163
the result has properties
to directly access its values,

73
00:03:50,197 --> 00:03:54,101
which can also throw errors
if generation fails.

74
00:03:54,134 --> 00:03:55,836
To learn more about async sequences,

75
00:03:55,869 --> 00:03:59,306
I recommend checking out
the "meet async sequence" session.

76
00:03:59,339 --> 00:04:01,175
For a task like image generation,

77
00:04:01,208 --> 00:04:03,844
it's a little easier to see
how it involves loading data.

78
00:04:03,877 --> 00:04:06,780
But there are some other
synchronous areas of AVFoundation

79
00:04:06,813 --> 00:04:09,016
that are harder to pick out
as problem spots.

80
00:04:09,917 --> 00:04:13,253
AVMutableComposition
is one of these areas.

81
00:04:13,287 --> 00:04:16,823
Insert time range for asset
needs information about the asset's tracks

82
00:04:16,857 --> 00:04:19,793
to add references to them
in the composition.

83
00:04:19,826 --> 00:04:21,962
It synchronously inspects the tracks,

84
00:04:21,995 --> 00:04:24,198
so if the tracks aren't already loaded,

85
00:04:24,231 --> 00:04:27,968
they'll be synchronously loaded
to create the new composition tracks.

86
00:04:29,603 --> 00:04:33,540
Previously, the solution would've been
to await loading the asset's tracks

87
00:04:33,574 --> 00:04:36,910
before inserting them
into the composition.

88
00:04:36,944 --> 00:04:41,782
However, this year, we're introducing
an async version of insertTimeRange,

89
00:04:41,815 --> 00:04:45,219
which will async load the tracks for you,
as needed.

90
00:04:46,687 --> 00:04:49,556
Video composition
and mutable video composition

91
00:04:49,590 --> 00:04:53,493
have additional methods that require
loading the asset's properties too.

92
00:04:53,527 --> 00:04:56,496
New this year,
the "propertiesOf asset" constructor,

93
00:04:56,530 --> 00:05:01,101
and isValid(for:timeRange:) method
now also have async counterparts.

94
00:05:01,134 --> 00:05:05,472
These new methods will asynchronously
load the tracks and duration of the asset,

95
00:05:05,506 --> 00:05:08,308
so there's no need
for you to pre-load them either.

96
00:05:08,342 --> 00:05:11,778
These new async methods
make it easier to interact with assets

97
00:05:11,812 --> 00:05:14,815
by loading the properties they need
asynchronously.

98
00:05:14,848 --> 00:05:18,352
But for when you need to load
the properties of an asset yourself,

99
00:05:18,385 --> 00:05:21,655
let's get a refresher
of async asset inspection.

100
00:05:21,688 --> 00:05:25,292
You may have noticed there are two ways
to inspect an asset's properties.

101
00:05:25,325 --> 00:05:27,094
When AVFoundation was introduced,

102
00:05:27,127 --> 00:05:31,665
the best way to inspect properties
was with async key value loading.

103
00:05:31,698 --> 00:05:34,468
Last year, we introduced async load(_:).

104
00:05:34,501 --> 00:05:37,704
It uses type safe keys
to identify the properties to load,

105
00:05:37,738 --> 00:05:43,477
where the old async key value loading
technique used hard coded strings as keys.

106
00:05:43,510 --> 00:05:46,346
Typos in these string keys
are difficult to catch.

107
00:05:46,380 --> 00:05:50,017
Misspelling a key prevents it
from being loaded asynchronously,

108
00:05:50,050 --> 00:05:53,487
and when the property is later used,
it'll block while it loads.

109
00:05:54,888 --> 00:05:59,626
It's also very easy to forget to add
new properties to the keys to load

110
00:05:59,660 --> 00:06:03,664
or to forget async loading them entirely.

111
00:06:03,697 --> 00:06:07,534
For these reasons, this year,
we're deprecating async key value loading

112
00:06:07,568 --> 00:06:11,672
and the synchronous properties in Swift,
in favor for async load.

113
00:06:11,705 --> 00:06:15,876
Async load uses type safe identifiers
to prevent typos.

114
00:06:15,909 --> 00:06:18,579
It directly returns property values
as requested

115
00:06:18,612 --> 00:06:21,648
to avoid accessing unloaded properties.

116
00:06:21,682 --> 00:06:24,318
And since all of this is checked
at compile time,

117
00:06:24,351 --> 00:06:28,222
you'll prevent introducing
any new IO bound performance issues.

118
00:06:28,255 --> 00:06:32,526
Async load is now the only recommended way
to asynchronously inspect properties

119
00:06:32,559 --> 00:06:35,262
on AVAsset, AVAssetTrack,

120
00:06:35,295 --> 00:06:38,966
AVMetadataItem, and their sub classes.

121
00:06:38,999 --> 00:06:40,667
However, a handful of these classes

122
00:06:40,701 --> 00:06:43,637
will still offer
synchronous property inspection.

123
00:06:43,670 --> 00:06:48,342
That's because the data for their
properties is already available in memory.

124
00:06:48,375 --> 00:06:51,278
Let's take another look at
mutable composition to see why.

125
00:06:52,613 --> 00:06:55,282
We'll use a mutable composition
to splice together segments

126
00:06:55,315 --> 00:06:58,285
of two existing video tracks.

127
00:06:58,318 --> 00:07:01,321
We'll start by creating
an empty composition

128
00:07:01,355 --> 00:07:03,857
and adding an empty video track.

129
00:07:03,891 --> 00:07:07,127
Then, we can synchronously insert
part of the first video track

130
00:07:07,160 --> 00:07:09,830
into the composition track.

131
00:07:09,863 --> 00:07:12,566
Behind the scenes,
this step isn't loading any data.

132
00:07:12,599 --> 00:07:16,770
Instead, it adds a new track segment
that points to the desired track.

133
00:07:18,572 --> 00:07:21,608
Then we can append part of
the second track in the same way.

134
00:07:23,477 --> 00:07:26,446
Since the composition itself
is backed by an in memory structure

135
00:07:26,480 --> 00:07:30,184
and not a file, we can safely inspect
its properties synchronously

136
00:07:30,217 --> 00:07:33,587
without needing to load them first.

137
00:07:33,620 --> 00:07:35,055
Again, for this reason,

138
00:07:35,088 --> 00:07:39,326
synchronous property inspection
will remain available on these classes

139
00:07:39,359 --> 00:07:43,363
and all classes will use async load
for asynchronous inspection.

140
00:07:44,932 --> 00:07:47,501
All of these new async methods
in AVFoundation

141
00:07:47,534 --> 00:07:51,104
will make it easier to prevent blocking
while loading media data.

142
00:07:51,138 --> 00:07:55,142
But, introducing concurrency into your app
for the first time can be tricky.

143
00:07:55,175 --> 00:07:58,545
Check out these sessions from
WWDC 21 for help getting started

144
00:07:58,579 --> 00:08:04,718
with Swift concurrency and for migrating
to AVFoundation's async load in your app.

145
00:08:04,751 --> 00:08:07,788
For our last topic, let's talk about
optimizing custom data loading

146
00:08:07,821 --> 00:08:09,356
for your assets.

147
00:08:09,389 --> 00:08:13,794
To start, lets take a look
at how AVAsset loads data by default.

148
00:08:13,827 --> 00:08:15,929
When you create an AVAsset with a URL,

149
00:08:15,963 --> 00:08:20,267
the media can either be on the network,
or stored locally on device.

150
00:08:20,300 --> 00:08:23,403
If it's on the network,
AVAsset will dynamically cache

151
00:08:23,437 --> 00:08:27,007
a certain amount of data
to ensure smooth playback.

152
00:08:27,040 --> 00:08:30,143
If the media is local,
AVAsset can bypass the cache

153
00:08:30,177 --> 00:08:32,813
and load data as needed to play.

154
00:08:32,846 --> 00:08:34,815
In some cases,
you might not be able to give

155
00:08:34,848 --> 00:08:37,551
AVAsset a direct pointer to your media.

156
00:08:37,584 --> 00:08:42,289
Maybe you store the raw bytes of an mp4
inside of a custom project file.

157
00:08:42,322 --> 00:08:47,661
For situations like this,
AVAsset can use an AVAssetResourceLoader.

158
00:08:47,694 --> 00:08:50,864
Resource loader provides the asset
with a way to request arbitrary bytes

159
00:08:50,898 --> 00:08:54,201
from your media
that you have a special way to load.

160
00:08:54,234 --> 00:08:57,204
But since the asset is no longer
handling reading in data,

161
00:08:57,237 --> 00:09:01,008
it can't predict how long it'll take
each chunk to load.

162
00:09:01,041 --> 00:09:04,878
So it assumes that accessing the media
involves network communication,

163
00:09:04,912 --> 00:09:09,183
and waits until it caches data
before it becomes ready to play.

164
00:09:09,216 --> 00:09:11,952
This year, if your media
is locally available,

165
00:09:11,985 --> 00:09:14,521
you can enable
entireLengthAvailableOnDemand

166
00:09:14,555 --> 00:09:16,390
for your resource loader.

167
00:09:16,423 --> 00:09:19,560
Setting this flag tells the asset
that it can expect to receive data

168
00:09:19,593 --> 00:09:22,429
as it's requested,
so it can skip caching.

169
00:09:25,232 --> 00:09:28,001
For local media,
entireLengthAvailableOnDemand

170
00:09:28,035 --> 00:09:30,671
can help reduce your app's memory usage
during playback,

171
00:09:30,704 --> 00:09:33,307
since it won't need to cache extra data.

172
00:09:33,340 --> 00:09:35,943
It can also decrease the time it takes
to start playback,

173
00:09:35,976 --> 00:09:39,847
since the asset won't have to wait
for the cache to fill up first.

174
00:09:39,880 --> 00:09:42,349
Use caution when enabling this flag,
though.

175
00:09:42,382 --> 00:09:44,484
If loading requires
any network operations,

176
00:09:44,518 --> 00:09:46,286
including network file storage,

177
00:09:46,320 --> 00:09:48,822
it's likely playback will be unreliable.

178
00:09:50,390 --> 00:09:52,159
That's the new enhancement
for resource loader.

179
00:09:52,192 --> 00:09:55,662
Now lets wrap things up
with some next steps for your app.

180
00:09:56,797 --> 00:10:00,000
When working with media, use async/await
to keep your app responsive

181
00:10:00,033 --> 00:10:02,503
while it loads in the background.

182
00:10:02,536 --> 00:10:07,407
Consider increasing tolerances when
using image generator for faster results.

183
00:10:07,441 --> 00:10:10,511
And if you are using resource loader
for locally available media,

184
00:10:10,544 --> 00:10:14,314
enable entire length available on demand
to help increase performance.

185
00:10:15,249 --> 00:10:16,717
That's everything I have for today.

186
00:10:16,750 --> 00:10:20,654
Thanks for watching,
and enjoy WWDC 22.

