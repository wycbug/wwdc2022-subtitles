1
00:00:00,334 --> 00:00:06,340
[upbeat music]

2
00:00:09,309 --> 00:00:11,245
- Hello, I am Michael Ilseman

3
00:00:11,278 --> 00:00:13,947
and I'm an engineer
on the Swift standard library team.

4
00:00:13,981 --> 00:00:17,084
Join me as we meet
and get to know Regex in Swift.

5
00:00:17,117 --> 00:00:18,619
There's a lot to Swift Regex,

6
00:00:18,652 --> 00:00:21,922
and we'll be getting just a taste
of everything it has to offer.

7
00:00:21,955 --> 00:00:25,592
Let's say we're developers collaborating
with some financial investigators

8
00:00:25,626 --> 00:00:30,030
on a tool to analyze
transactions for irregularities.

9
00:00:30,063 --> 00:00:33,133
Now, you'd think that for
a task this important

10
00:00:33,166 --> 00:00:36,136
we'd be processing well-structured data.

11
00:00:36,170 --> 00:00:40,307
But instead, we have a bunch of strings.

12
00:00:40,340 --> 00:00:43,744
Here the first field
has the transaction kind,

13
00:00:43,777 --> 00:00:46,280
the second the transaction date,

14
00:00:46,313 --> 00:00:49,283
the third field
the individual or institution,

15
00:00:49,316 --> 00:00:53,120
the fourth and final field
the amount in US dollars.

16
00:00:53,153 --> 00:00:59,126
Fields are separated
by either 2-or-more spaces or a tab

17
00:00:59,159 --> 00:01:02,563
for a very important technical reason

18
00:01:02,596 --> 00:01:06,333
that no one involved can remember.

19
00:01:06,366 --> 00:01:11,338
And, yes,
that date field is totally ambiguous.

20
00:01:11,371 --> 00:01:16,543
We're just going to hope that it's
month/day/year and see what happens.

21
00:01:16,577 --> 00:01:20,480
Processing these transactions
involves processing strings,

22
00:01:20,514 --> 00:01:22,516
and string is a collection,

23
00:01:22,549 --> 00:01:26,220
which means we get access
to generic collection algorithms.

24
00:01:26,253 --> 00:01:29,289
These algorithms
basically come in two kinds,

25
00:01:29,323 --> 00:01:33,627
those that operate over elements,
and those that operate over indices.

26
00:01:34,461 --> 00:01:36,897
We can try to use
the element-based algorithms

27
00:01:36,930 --> 00:01:39,233
by splitting out the transaction fields,

28
00:01:39,266 --> 00:01:43,070
but the field separator being either tab
or 2-or-more spaces

29
00:01:43,103 --> 00:01:45,539
makes this difficult.

30
00:01:45,572 --> 00:01:48,675
Splitting on whitespace alone
doesn't cut it.

31
00:01:48,709 --> 00:01:50,978
Another approach is to drop down

32
00:01:51,011 --> 00:01:53,580
to low-level index manipulation code.

33
00:01:55,282 --> 00:01:56,550
But it's hard to do right,

34
00:01:56,583 --> 00:01:58,485
and even if you know what you're doing,

35
00:01:58,519 --> 00:02:01,188
it still takes a lot of code.

36
00:02:01,221 --> 00:02:02,689
Let's come back to split.

37
00:02:02,723 --> 00:02:06,059
The reason this approach doesn't work
is because it is element-based

38
00:02:06,093 --> 00:02:09,730
while the field separator
is a more complex pattern.

39
00:02:09,763 --> 00:02:12,766
A solution found in a wide variety
of languages

40
00:02:12,799 --> 00:02:15,369
is to write a regular expression.

41
00:02:15,402 --> 00:02:18,939
Regular expressions emerged
from formal language theory

42
00:02:18,972 --> 00:02:21,808
where they define a regular language.

43
00:02:21,842 --> 00:02:25,913
They entered practical application for
search in editors and command-line tools

44
00:02:25,946 --> 00:02:28,949
as well as lexical analysis in compilers.

45
00:02:28,982 --> 00:02:31,218
These applications
take regular expressions

46
00:02:31,251 --> 00:02:33,287
beyond their theoretical roots,

47
00:02:33,320 --> 00:02:36,089
as they need to extract
portions of the input,

48
00:02:36,123 --> 00:02:39,059
control and direct execution,

49
00:02:39,092 --> 00:02:40,694
and add expressive power.

50
00:02:40,727 --> 00:02:42,629
And Swift is taking them further.

51
00:02:42,663 --> 00:02:45,032
We call this derivative Regex.

52
00:02:45,532 --> 00:02:48,836
Regex is a struct generic
over its Output,

53
00:02:48,869 --> 00:02:52,105
which is the result of applying it,
including captures.

54
00:02:52,139 --> 00:02:56,009
You can create one using a literal
containing regex syntax

55
00:02:56,043 --> 00:02:58,245
in between slash delimiters.

56
00:02:58,278 --> 00:03:02,983
Swift's regex syntax is compatible
with Perl, Python, Ruby, Java,

57
00:03:03,016 --> 00:03:06,453
NSRegularExpression,
and many, many others.

58
00:03:07,421 --> 00:03:10,624
This regex matches one or more digits.

59
00:03:10,657 --> 00:03:14,695
The compiler knows regex syntax,
so you'll get syntax highlighting,

60
00:03:14,728 --> 00:03:17,965
compile-time errors,
and even strongly-typed captures,

61
00:03:17,998 --> 00:03:20,767
which we'll be meeting later.

62
00:03:20,801 --> 00:03:22,669
A regex can be created at run-time

63
00:03:22,703 --> 00:03:25,739
from a string containing
the same regex syntax.

64
00:03:25,772 --> 00:03:29,543
This is useful for search fields
in editors or command-line tools.

65
00:03:29,576 --> 00:03:34,681
This will throw an error at run-time
if the input contains invalid syntax.

66
00:03:34,715 --> 00:03:38,452
The output type
is an existential AnyRegexOutput,

67
00:03:38,485 --> 00:03:42,990
because the types and number of
captures won't be known until run-time.

68
00:03:44,157 --> 00:03:47,461
And the same regex can be
written using a declarative

69
00:03:47,494 --> 00:03:51,698
and well-structured,
albeit more verbose, regex builder.

70
00:03:53,100 --> 00:03:57,771
Let's adapt our split approach
from earlier to use a regex literal.

71
00:03:57,804 --> 00:04:03,277
The first portion matches 2-or-more
occurrences of any whitespace character.

72
00:04:03,310 --> 00:04:07,848
The second portion
matches a single horizontal tab.

73
00:04:07,881 --> 00:04:11,685
And the pipe character
denotes a choice between alternatives,

74
00:04:11,718 --> 00:04:17,324
giving us a field separator of either
2-or-more-spaces or a single tab.

75
00:04:17,357 --> 00:04:19,459
Now that our fields are split,

76
00:04:19,493 --> 00:04:23,197
let's make a contribution
to civilization itself

77
00:04:23,230 --> 00:04:29,169
and normalize that field separator
to a single tab and be done with it.

78
00:04:29,203 --> 00:04:32,272
We could call 'join'
on the result after splitting,

79
00:04:32,306 --> 00:04:34,641
but there's a better algorithm
for that:

80
00:04:34,675 --> 00:04:39,213
'replacing' lets us replace
all field separators with a single tab.

81
00:04:40,247 --> 00:04:44,484
So we go out and evangelize
our clearly superior approach

82
00:04:44,518 --> 00:04:46,253
to anyone who will listen.

83
00:04:46,286 --> 00:04:49,990
Adoption is...slow but promising.

84
00:04:50,023 --> 00:04:52,326
If you are familiar
with regular expressions,

85
00:04:52,359 --> 00:04:55,629
you may also know
of their mixed reputation.

86
00:04:55,662 --> 00:05:00,367
As the old saying goes, "I had a problem,
so I wrote a regular expression.

87
00:05:00,400 --> 00:05:02,903
Now I have two problems."

88
00:05:02,936 --> 00:05:03,770
But Swift regex is different.

89
00:05:05,372 --> 00:05:09,142
Swift advances the art
in four key areas.

90
00:05:09,176 --> 00:05:12,446
Regex syntax is concise and expressive,

91
00:05:12,479 --> 00:05:15,048
but it can become terse
and difficult to read.

92
00:05:15,082 --> 00:05:19,019
And newer features have to use
increasingly cryptic syntax.

93
00:05:20,387 --> 00:05:23,090
Swift regexes can be structured
and organized

94
00:05:23,123 --> 00:05:26,760
the way we structure and organize
source code through Regex builders.

95
00:05:26,793 --> 00:05:31,498
Literals are concise,
builders give structure,

96
00:05:31,532 --> 00:05:35,869
and literals can be used within builders
to find that perfect balance.

97
00:05:36,803 --> 00:05:40,307
Textual representations for data
have become a lot more complicated,

98
00:05:40,340 --> 00:05:45,512
and handling them correctly requires
a standards-conforming parser.

99
00:05:45,546 --> 00:05:49,316
Swift regex lets you
interweave industrial-strength parsers

100
00:05:49,349 --> 00:05:52,085
as individual components of a regex.

101
00:05:52,119 --> 00:05:54,755
This is done
in a library-extensible fashion,

102
00:05:54,788 --> 00:05:57,124
meaning any parsers can participate.

103
00:05:58,458 --> 00:06:01,061
Much of the history of applied
regular expressions

104
00:06:01,094 --> 00:06:04,965
took place in a world
where the entire computer system

105
00:06:04,998 --> 00:06:08,602
only supported
a single language and encoding,

106
00:06:08,635 --> 00:06:10,838
most notably ASCII.

107
00:06:10,871 --> 00:06:13,140
But the modern world is Unicode.

108
00:06:13,173 --> 00:06:18,145
Swift regex does the Unicode
without compromising expressivity.

109
00:06:18,178 --> 00:06:21,014
And finally,
the power of regular expressions

110
00:06:21,048 --> 00:06:25,519
can open up a broad search space
that must be exhaustively explored.

111
00:06:25,552 --> 00:06:28,589
This makes their execution
difficult to reason about.

112
00:06:28,622 --> 00:06:30,791
Some languages support controls,

113
00:06:30,824 --> 00:06:33,327
but because
they're behind cryptic syntax,

114
00:06:33,360 --> 00:06:35,462
they tend to be obscure.

115
00:06:35,495 --> 00:06:41,335
Swift regex provides predictable execution
and surfaces controls prominently.

116
00:06:41,368 --> 00:06:44,738
Let's go back to the financial statements
we've been working with

117
00:06:44,771 --> 00:06:48,709
and fully parse each transaction
using Regex builders,

118
00:06:48,742 --> 00:06:52,312
a declarative approach
to string processing in Swift.

119
00:06:52,346 --> 00:06:56,383
We'll import the RegexBuilder module
to get started.

120
00:06:56,416 --> 00:07:01,088
We can re-use the field separator
regex that we just defined.

121
00:07:01,121 --> 00:07:05,459
The first field is simple;
it's either a CREDIT or a DEBIT.

122
00:07:05,492 --> 00:07:10,230
We can use the regex literal syntax
we've already seen to write that.

123
00:07:10,264 --> 00:07:13,534
After that comes a field separator,
and then the date.

124
00:07:13,567 --> 00:07:16,737
Parsing dates by hand is a bad idea.

125
00:07:16,770 --> 00:07:20,040
Foundation has really good parsers
for types like dates,

126
00:07:20,073 --> 00:07:24,511
numbers, and URLs, and we can
use them directly in a Regex Builder.

127
00:07:25,812 --> 00:07:30,951
We supply an explicit locale which is
our best guess at the author's intent.

128
00:07:30,984 --> 00:07:35,255
We do this instead of implicitly
using the system's current locale.

129
00:07:35,289 --> 00:07:37,958
We can always change it later,
and it's easy to do

130
00:07:37,991 --> 00:07:41,895
because we made our
assumptions _explicit_ in code.

131
00:07:43,063 --> 00:07:44,898
The third field can be "anything,"

132
00:07:44,932 --> 00:07:48,402
so it's tempting to just write
"one or more of anything."

133
00:07:48,435 --> 00:07:50,871
And while
that will give us the right answer,

134
00:07:50,904 --> 00:07:53,373
it does a lot of unnecessary work first,

135
00:07:53,407 --> 00:07:57,978
because it starts off by matching
anything else that comes after it.

136
00:07:58,011 --> 00:08:02,916
The regex will back up one character
at a time and try the rest of the pattern.

137
00:08:02,950 --> 00:08:08,288
We want to tell the regex to stop when
it sees the terminating field separator.

138
00:08:08,322 --> 00:08:10,858
There are a quite a few ways
that we could accomplish this.

139
00:08:10,891 --> 00:08:14,728
One good way to do this
is to use NegativeLookahead

140
00:08:14,761 --> 00:08:20,000
which peeks at the next part of the input
without actually consuming it.

141
00:08:20,033 --> 00:08:22,269
Here we peek at the input to make sure

142
00:08:22,302 --> 00:08:26,540
a field separator isn't coming up
before matching any character.

143
00:08:26,573 --> 00:08:30,043
NegativeLookahead
is one of a family of tools

144
00:08:30,077 --> 00:08:34,481
that let you precisely control
how a Regex matches its components.

145
00:08:35,816 --> 00:08:40,053
Finally, we match the amount,
again using one of Foundation's parsers,

146
00:08:40,087 --> 00:08:42,122
this time for currency.

147
00:08:42,155 --> 00:08:45,325
We've been assuming that comma
is a thousands separator

148
00:08:45,359 --> 00:08:50,397
while period is a decimal separator,
and we make this assumption explicit.

149
00:08:51,331 --> 00:08:55,903
We've built a regex that lets us parse
a line from the transaction ledger.

150
00:08:55,936 --> 00:09:01,408
We don't just want to recognize the lines.
We want to extract some of this data out.

151
00:09:01,441 --> 00:09:04,611
To do this, we use captures,

152
00:09:04,645 --> 00:09:08,782
which extract portions
of our input for later processing.

153
00:09:08,815 --> 00:09:12,452
By convention,
the '0th' capture is the part of the input

154
00:09:12,486 --> 00:09:17,791
that the entire regex matched,
and each explicit capture follows.

155
00:09:17,824 --> 00:09:23,697
Our transaction kind is captured as
a Substring that is a slice of our input.

156
00:09:23,730 --> 00:09:27,234
For dates, we actually capture
the strongly-typed value

157
00:09:27,267 --> 00:09:31,271
that was parsed out
without needing to post-process the text.

158
00:09:31,305 --> 00:09:37,044
The individual or institution is again
captured as a portion of our input,

159
00:09:37,077 --> 00:09:41,048
and the decimal capture
is another strongly-typed value.

160
00:09:41,081 --> 00:09:44,618
To use it, we extract date and decimal
values from the match result,

161
00:09:44,651 --> 00:09:47,287
and the investigators take it from here.

162
00:09:47,321 --> 00:09:52,192
It's at this point that we recommend
they dump the data into a real database

163
00:09:52,226 --> 00:09:55,996
for obvious benefits
like structured queries.

164
00:09:56,029 --> 00:09:58,799
They have a...different opinion.

165
00:09:58,832 --> 00:10:01,668
They want to
keep everything as strings.

166
00:10:01,702 --> 00:10:07,207
Which is good news for this talk because
we get to see even more of Swift Regex.

167
00:10:07,241 --> 00:10:11,512
Everything's going well
until suddenly it's not.

168
00:10:11,545 --> 00:10:14,681
We just learned that the date order
in the transaction text,

169
00:10:14,715 --> 00:10:20,354
which we told everyone was
totally ambiguous, is in fact ambiguous.

170
00:10:20,387 --> 00:10:22,322
It's not always the same,

171
00:10:22,356 --> 00:10:28,495
and the leading theory is that it depends
on the currency used in the transaction.

172
00:10:28,529 --> 00:10:30,898
Because of course it does.

173
00:10:30,931 --> 00:10:35,869
This means that US dollars
is month/day/year

174
00:10:35,903 --> 00:10:40,407
and British pounds is day/month/year.

175
00:10:40,440 --> 00:10:44,745
So let's write a sed-like script
to disambiguate this.

176
00:10:44,778 --> 00:10:48,215
For our regex, we're going to use
an extended delimiter.

177
00:10:48,248 --> 00:10:53,220
This allows us to have slashes inside
without having to escape them.

178
00:10:53,253 --> 00:10:57,524
This also gives us access
to an extended syntax mode

179
00:10:57,558 --> 00:10:59,660
where whitespace is ignored,

180
00:10:59,693 --> 00:11:05,065
which means we can use whitespace
for readability, just like in normal code.

181
00:11:05,098 --> 00:11:10,871
We used named captures, which show up
in the Regex's output as tuple labels.

182
00:11:11,772 --> 00:11:15,776
And we use a Unicode Property
to recognize currency symbols.

183
00:11:15,809 --> 00:11:18,312
This makes our regex more adaptable;

184
00:11:18,345 --> 00:11:21,582
we will handle the specific symbols
in application logic.

185
00:11:23,450 --> 00:11:27,221
Rather than try
to cut and splice text manually,

186
00:11:27,254 --> 00:11:30,390
we're going to yet again use
Foundation's date parser.

187
00:11:30,424 --> 00:11:33,026
pickStrategy receives the currency symbol

188
00:11:33,060 --> 00:11:35,929
and will determine
a parse strategy based on it.

189
00:11:35,963 --> 00:11:38,699
All of our assumptions
are explicit in code,

190
00:11:38,732 --> 00:11:41,101
which makes it easier to adapt
and evolve,

191
00:11:41,134 --> 00:11:43,871
something we almost
certainly will end up needing.

192
00:11:46,707 --> 00:11:50,644
Let's use our regex and helper function
with a find-and-replace algorithm

193
00:11:50,677 --> 00:11:55,315
by supplying a closure which uses
the match result, including captures,

194
00:11:55,349 --> 00:11:58,218
to construct the replacement string.

195
00:11:58,252 --> 00:12:02,856
We pick a strategy based on the captured
currency and parse the captured date.

196
00:12:02,890 --> 00:12:07,361
We can access the captures by name,
instead of only by position.

197
00:12:07,394 --> 00:12:12,099
For our output,
we'll format the new date using ISO-8601,

198
00:12:12,132 --> 00:12:14,902
an unambiguous industry standard.

199
00:12:14,935 --> 00:12:20,207
Our tool transforms this ledger Into
an unambiguous one.

200
00:12:20,240 --> 00:12:23,610
Because we're using
a real date parser and formatter,

201
00:12:23,644 --> 00:12:27,281
we're far more adaptable
to changing requirements.

202
00:12:27,314 --> 00:12:30,851
And using a Unicode property
to recognize currency symbols

203
00:12:30,884 --> 00:12:33,620
helps us evolve that much quicker.

204
00:12:33,654 --> 00:12:38,825
A regex declares an algorithm
over some model of String.

205
00:12:38,859 --> 00:12:43,497
Swift's String presents multiple models
for working with Unicode.

206
00:12:43,530 --> 00:12:50,137
This string, representing a love story
for the ages, contains 3 characters.

207
00:12:50,170 --> 00:12:52,573
These characters are complex entities

208
00:12:52,606 --> 00:12:56,210
formally called Unicode
extended grapheme clusters.

209
00:12:56,243 --> 00:13:02,549
A single Character is composed
of one or more Unicode scalar values.

210
00:13:02,583 --> 00:13:04,918
String provides a UnicodeScalarView

211
00:13:04,952 --> 00:13:08,989
to access this lower-level
representation of its contents.

212
00:13:09,022 --> 00:13:14,895
This enables advanced usage as well
as compatibility with other systems.

213
00:13:15,963 --> 00:13:19,132
Our first Character,
who is our story's protagonist,

214
00:13:19,166 --> 00:13:22,336
is composed of 4 Unicode scalars:

215
00:13:22,369 --> 00:13:27,875
ZOMBIE,
Zero Width Joiner, FEMALE SIGN, and uh...

216
00:13:27,908 --> 00:13:29,710
VARIATION SELECTOR-16,

217
00:13:29,743 --> 00:13:35,182
which in this context signals
a preference to be rendered as emoji.

218
00:13:35,215 --> 00:13:37,284
Of course!

219
00:13:37,317 --> 00:13:41,421
These scalars produce
the single emoji we see visually.

220
00:13:41,455 --> 00:13:47,227
When strings are stored in memory,
they are encoded as UTF-8 bytes.

221
00:13:47,261 --> 00:13:50,564
We can view these bytes
using the UTF-8 view.

222
00:13:50,597 --> 00:13:56,069
UTF-8 is a variable-width encoding,
meaning multiple bytes may be needed

223
00:13:56,103 --> 00:13:58,338
for a single scalar, and as we saw,

224
00:13:58,372 --> 00:14:03,010
multiple scalars may be needed
for a single character.

225
00:14:03,043 --> 00:14:07,581
Our story's protagonist,
represented by 4 Unicode scalars,

226
00:14:07,614 --> 00:14:11,251
is encoded using 13 UTF-8 bytes.

227
00:14:11,285 --> 00:14:15,255
In addition
to being composed of multiple scalars,

228
00:14:15,289 --> 00:14:20,427
the same exact character can sometimes be
represented by different sets of scalars.

229
00:14:20,460 --> 00:14:24,898
This comes up a lot when handling
languages other than English.

230
00:14:24,932 --> 00:14:27,701
In this example,
the 'e' with an acute accent

231
00:14:27,734 --> 00:14:33,340
can be represented as either a single
scalar, precomposed ‘e’ with acute accent,

232
00:14:33,373 --> 00:14:38,245
or as an ASCII 'e' followed
by a combining acute accent.

233
00:14:38,278 --> 00:14:43,183
These are the same characters,
so String comparison will return true.

234
00:14:43,217 --> 00:14:45,819
This is because String obeys
what is formally called

235
00:14:45,853 --> 00:14:48,322
Unicode Canonical Equivalence.

236
00:14:49,590 --> 00:14:52,292
From the perspective
of the UnicodeScalarView,

237
00:14:52,326 --> 00:14:55,429
or the UTF-8 view,
the contents are different,

238
00:14:55,462 --> 00:14:59,933
and we see this difference when we
compare within these lower-level views.

239
00:14:59,967 --> 00:15:05,239
Just like String, Swift regex is
obsessively Unicode correct by default.

240
00:15:05,272 --> 00:15:09,009
But it does this without
compromising expressivity.

241
00:15:09,042 --> 00:15:11,545
Let's switch over a pair of strings.

242
00:15:11,578 --> 00:15:16,383
For the first string, we'll match the
named Unicode Scalar SPARKLING HEART

243
00:15:16,416 --> 00:15:19,620
surrounded by
any characters denoted by dot (.).

244
00:15:21,288 --> 00:15:24,291
The any character class
will match any Swift character;

245
00:15:24,324 --> 00:15:27,027
that is, any Unicode extended
grapheme cluster.

246
00:15:29,830 --> 00:15:34,801
For the second string, characters
that are equal compare as equals...

247
00:15:34,835 --> 00:15:37,004
and we can ignore case.

248
00:15:37,037 --> 00:15:41,475
And now our simple love story
has become a lot more complicated.

249
00:15:41,508 --> 00:15:45,779
Sometimes life, or in this case un-life,

250
00:15:45,812 --> 00:15:48,382
has complexities that we need to process.

251
00:15:49,416 --> 00:15:54,555
Just like String, if you do need to
process Unicode scalar values yourself,

252
00:15:54,588 --> 00:15:58,625
either for compatibility or sub-grapheme
cluster precision,

253
00:15:58,659 --> 00:16:02,262
you can by matching with
'unicodeScalar' semantics.

254
00:16:02,296 --> 00:16:04,598
When we match at the Unicode Scalar level,

255
00:16:04,631 --> 00:16:07,501
the dot matches
a single Unicode Scalar value

256
00:16:07,534 --> 00:16:09,870
instead of a full Swift Character.

257
00:16:09,903 --> 00:16:14,508
Which means we get to see our
friend again: VARIATION-SELECTOR 16.

258
00:16:14,541 --> 00:16:18,645
This friendly little selector gets
matched by the dot, and you can't see it

259
00:16:18,679 --> 00:16:23,083
because when it's all alone,
it renders as empty whitespace.

260
00:16:23,116 --> 00:16:25,118
So helpful.

261
00:16:26,920 --> 00:16:30,524
Now that we've worked with
precision and correctness,

262
00:16:30,557 --> 00:16:34,027
let's do something a little different,
and get back to finance.

263
00:16:34,061 --> 00:16:36,296
The investigators have returned,

264
00:16:36,330 --> 00:16:40,234
and this time they have
an interesting request.

265
00:16:40,267 --> 00:16:43,770
They modified our transaction
matching tool to sniff transactions

266
00:16:43,804 --> 00:16:48,909
live off the wire instead of
processing ledgers after the fact.

267
00:16:48,942 --> 00:16:52,513
Looking at their code,
they actually did a reasonably good job,

268
00:16:52,546 --> 00:16:56,116
but they're facing scaling issues
and need our help.

269
00:16:56,149 --> 00:17:01,555
The transactions they are processing are
very similar, but with minor differences.

270
00:17:01,588 --> 00:17:05,792
Instead of a date,
they have a precise time stamp instead.

271
00:17:05,826 --> 00:17:09,162
This is represented in a clear,
unambiguous,

272
00:17:09,196 --> 00:17:12,866
and shockingly proprietary format.

273
00:17:12,900 --> 00:17:16,737
They have a regular expression
written in a prior century

274
00:17:16,770 --> 00:17:19,106
that matches this just fine.

275
00:17:19,139 --> 00:17:22,042
It's fine.

276
00:17:22,075 --> 00:17:23,911
Next they have a details field

277
00:17:23,944 --> 00:17:26,813
which includes individuals
and identification codes.

278
00:17:26,847 --> 00:17:29,416
They filter transactions
against this field

279
00:17:29,449 --> 00:17:33,453
by using a run-time compiled regex
derived from input.

280
00:17:33,487 --> 00:17:36,990
Because this is live,
and there are more fields later on,

281
00:17:37,024 --> 00:17:41,295
they like to bail early on
any uninteresting transactions.

282
00:17:41,328 --> 00:17:44,898
Then comes an amount
and other fields like checksums,

283
00:17:44,932 --> 00:17:47,234
which they handle just fine on their own.

284
00:17:47,267 --> 00:17:54,208
And of course, fields are still separated
by 2-or-more spaces or a tab.

285
00:17:55,375 --> 00:17:58,512
Their transaction matcher
looks a lot like ours.

286
00:17:58,545 --> 00:18:01,114
They have their own regex
for the timestamp,

287
00:18:01,148 --> 00:18:04,551
their details regex
is compiled from input,

288
00:18:04,585 --> 00:18:06,887
and they handle the rest of the fields.

289
00:18:06,920 --> 00:18:10,724
They did a reasonably good job.
Everything technically works.

290
00:18:10,757 --> 00:18:12,793
It just isn't scaling well.

291
00:18:12,826 --> 00:18:15,829
They notice that their timestamp
and details regexes

292
00:18:15,863 --> 00:18:19,433
often match much more
of the input than their fields.

293
00:18:19,466 --> 00:18:22,202
Ideally, these regexes
would be constrained

294
00:18:22,236 --> 00:18:25,539
to only run over a single field.

295
00:18:25,572 --> 00:18:29,910
We handled a similar issue in
our project by using negative lookahead,

296
00:18:29,943 --> 00:18:32,079
so let's pull that regex in.

297
00:18:33,714 --> 00:18:36,083
'field' will efficiently match
any character

298
00:18:36,116 --> 00:18:38,619
until it encounters a field separator,

299
00:18:38,652 --> 00:18:43,090
and we'd like to use it
to contain their regexes.

300
00:18:43,123 --> 00:18:47,661
We could do this as a post-processing
step, but because this is running live,

301
00:18:47,694 --> 00:18:52,132
we want to bail early if these
regexes don't match their fields.

302
00:18:52,165 --> 00:18:55,802
We can do this using TryCapture.

303
00:18:55,836 --> 00:18:59,873
TryCapture passes the matched field
to our closure,

304
00:18:59,907 --> 00:19:04,978
where we test against the investigator's
timestamp and details regexes.

305
00:19:05,012 --> 00:19:08,749
If they match,
we return the field's value,

306
00:19:08,782 --> 00:19:12,486
meaning that matching succeeded
and the field is captured.

307
00:19:12,519 --> 00:19:17,157
Otherwise we return nil,
which signals that matching failed.

308
00:19:18,125 --> 00:19:21,862
TryCapture's closure
actively participates in matching,

309
00:19:21,895 --> 00:19:24,598
which is exactly what we need.

310
00:19:24,631 --> 00:19:27,668
And with this,
we've solved a major scaling issue.

311
00:19:27,701 --> 00:19:29,203
But there's still one more problem:

312
00:19:29,236 --> 00:19:32,606
when something later on
in the transaction matcher fails,

313
00:19:32,639 --> 00:19:35,309
it can take a long time to exit.

314
00:19:37,578 --> 00:19:41,048
Our fieldSeparator regex
we defined at the very beginning

315
00:19:41,081 --> 00:19:45,986
matches 2-or-more whitespaces or a tab,
which is what we want.

316
00:19:46,019 --> 00:19:48,522
If there are 8 whitespace characters,

317
00:19:48,555 --> 00:19:53,160
it will match all of them
before trying the rest of the regex.

318
00:19:53,193 --> 00:19:56,129
But if the regex later fails,
it will back up

319
00:19:56,163 --> 00:20:00,367
and only match 7 whitespace characters
before trying again.

320
00:20:00,400 --> 00:20:05,672
And if that fails, it will match
only 6 whitespace characters, and so on.

321
00:20:10,544 --> 00:20:15,949
Only after trying all alternatives
does matching fail.

322
00:20:15,983 --> 00:20:21,622
This backing up in order to try
alternatives is called global backtracking

323
00:20:21,655 --> 00:20:24,791
or, in formal logics, the Kleene closure.

324
00:20:24,825 --> 00:20:28,996
It's what gives regular expressions
their characteristic power.

325
00:20:29,029 --> 00:20:32,399
But it opens up
a broad search space to explore,

326
00:20:32,432 --> 00:20:36,069
and here we want
a more linear search space.

327
00:20:36,103 --> 00:20:39,973
We want to match all of the whitespace
and never give any up.

328
00:20:40,007 --> 00:20:42,943
There are a couple tools
that we could use;

329
00:20:42,976 --> 00:20:45,679
the more general tool
is to put fieldSeparator

330
00:20:45,712 --> 00:20:50,284
in a local backtracking scope
instead of a global one.

331
00:20:51,318 --> 00:20:54,321
The Local builder creates a scope where,

332
00:20:54,354 --> 00:20:57,891
if the contained regex
ever successfully matches,

333
00:20:57,925 --> 00:21:01,528
any untried alternatives are discarded.

334
00:21:02,896 --> 00:21:06,633
Even if our transaction matcher
fails later on,

335
00:21:06,667 --> 00:21:10,771
we don't go back
to try consuming fewer spaces.

336
00:21:10,804 --> 00:21:14,107
Global backtracking,
the default for regex,

337
00:21:14,141 --> 00:21:17,544
is great for search and fuzzy matching.

338
00:21:17,578 --> 00:21:22,449
Local is useful for matching
precisely specified tokens.

339
00:21:22,482 --> 00:21:28,222
The field separator,
as vexing as it may be, is precise.

340
00:21:29,389 --> 00:21:33,527
Local is known elsewhere as
an atomic non-capturing group,

341
00:21:33,560 --> 00:21:36,864
which can be a… frightening name.

342
00:21:36,897 --> 00:21:40,100
Makes it seem like
your regex might blow up.

343
00:21:40,133 --> 00:21:45,038
But it actually does the opposite--
it contains the search space.

344
00:21:46,573 --> 00:21:50,677
And with this, we've helped them
solve their scaling issues.

345
00:21:50,711 --> 00:21:53,680
Today we got to meet Swift Regex,

346
00:21:53,714 --> 00:21:56,950
but there's so much more
that we weren't able to cover.

347
00:21:56,984 --> 00:22:02,256
Be sure to check out Swift Regex: Beyond
the Basics by my colleague Richard.

348
00:22:02,289 --> 00:22:05,826
Before we leave,
I want to highlight a few points.

349
00:22:05,859 --> 00:22:11,131
Regex builders give structure.
Regex literals are concise.

350
00:22:11,164 --> 00:22:14,268
The choice between when to use one
over the other

351
00:22:14,301 --> 00:22:16,870
will ultimately be subjective.

352
00:22:17,771 --> 00:22:21,608
Make sure to use real parsers
whenever possible.

353
00:22:21,642 --> 00:22:26,980
This will save you massive
amounts of time and avoid headaches.

354
00:22:27,014 --> 00:22:29,816
Just by using Swift's defaults,
you're going to get

355
00:22:29,850 --> 00:22:33,687
far more Unicode support
and goodness than anywhere else.

356
00:22:33,720 --> 00:22:37,558
Look for ways to use things
like character properties effectively,

357
00:22:37,591 --> 00:22:40,928
such as when we
matched the currency symbols.

358
00:22:40,961 --> 00:22:44,731
And finally, simplify
your search and processing algorithms

359
00:22:44,765 --> 00:22:49,703
by using controls such as lookahead
and local backtracking scopes.

360
00:22:49,736 --> 00:22:51,338
Thank you for watching.

