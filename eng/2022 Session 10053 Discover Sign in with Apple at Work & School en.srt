1
00:00:00,000 --> 00:00:03,070
♪ instrumental hip hop music ♪

2
00:00:03,070 --> 00:00:09,543
♪

3
00:00:09,543 --> 00:00:11,612
Hello.
My name is Ashwath

4
00:00:11,612 --> 00:00:14,548
and I am an engineer
with the Education team.

5
00:00:14,548 --> 00:00:16,283
Today I am excited
to talk to you

6
00:00:16,283 --> 00:00:19,419
about Sign in with Apple
at Work & School.

7
00:00:19,419 --> 00:00:20,988
In this presentation,
I will be covering

8
00:00:20,988 --> 00:00:24,825
the key features that we are
introducing this fall.

9
00:00:24,825 --> 00:00:25,993
I will first walk you through

10
00:00:25,993 --> 00:00:30,631
what Sign in with Apple at Work
& School is and how it works.

11
00:00:30,631 --> 00:00:32,432
Then I will talk
about the Roster API

12
00:00:32,432 --> 00:00:36,169
and specifics about
how you can make use of it.

13
00:00:36,169 --> 00:00:39,139
And finally, I will be talking
about access management,

14
00:00:39,139 --> 00:00:42,876
where I discuss how IT admins
can manage access

15
00:00:42,876 --> 00:00:45,245
to Sign in with Apple
at Work & School

16
00:00:45,245 --> 00:00:49,182
and the Roster API
on behalf of their organization.

17
00:00:49,182 --> 00:00:51,785
Let me begin
by covering two concepts

18
00:00:51,785 --> 00:00:54,488
you may be familiar with
but are important to review

19
00:00:54,488 --> 00:00:56,156
for this session.

20
00:00:56,156 --> 00:00:58,425
The first is Sign in with Apple.

21
00:00:58,425 --> 00:01:00,827
Sign in with Apple
is a fast and easy way

22
00:01:00,827 --> 00:01:04,731
for users to sign in to apps
with their Apple ID.

23
00:01:04,731 --> 00:01:07,000
Users are able to create
an account within your app

24
00:01:07,000 --> 00:01:10,037
with a simple tap.

25
00:01:10,037 --> 00:01:12,739
The second concept
is Managed Apple IDs.

26
00:01:12,739 --> 00:01:14,675
Like Apple IDs,
Managed Apple IDs

27
00:01:14,675 --> 00:01:16,810
are used to personalize
a device.

28
00:01:16,810 --> 00:01:20,881
They're also used to access
Apple apps and services.

29
00:01:20,881 --> 00:01:23,183
Unlike Apple IDs,
Managed Apple IDs

30
00:01:23,183 --> 00:01:26,453
are owned by an organization
and managed through

31
00:01:26,453 --> 00:01:30,023
Apple School Manager
or Apple Business Manager.

32
00:01:30,023 --> 00:01:31,525
With those definitions in mind,

33
00:01:31,525 --> 00:01:34,061
I am excited to share
that Sign in with Apple

34
00:01:34,061 --> 00:01:37,297
has now been extended
to support Managed Apple IDs.

35
00:01:37,297 --> 00:01:39,999
Now you can get the benefits
of a fast and easy

36
00:01:39,999 --> 00:01:42,269
sign-in experience
of Sign in with Apple,

37
00:01:42,269 --> 00:01:44,237
but with the management
capabilities

38
00:01:44,237 --> 00:01:46,006
of Managed Apple IDs.

39
00:01:46,006 --> 00:01:47,407
To showcase the user experience

40
00:01:47,407 --> 00:01:49,509
of Sign in with Apple
at Work & School,

41
00:01:49,509 --> 00:01:52,379
let us take a look
at an example.

42
00:01:52,379 --> 00:01:54,915
Here is the login screen
for Slack.

43
00:01:54,915 --> 00:01:56,149
To use Sign in with Apple,

44
00:01:56,149 --> 00:01:59,953
a user can just tap
Continue with Apple.

45
00:01:59,953 --> 00:02:03,190
When using an Apple ID,
they will then see

46
00:02:03,190 --> 00:02:06,193
this welcome screen
for Sign in with Apple.

47
00:02:06,193 --> 00:02:09,663
On the other hand, if they are
using a Managed Apple ID,

48
00:02:09,663 --> 00:02:11,198
they will see
the welcome screen

49
00:02:11,198 --> 00:02:15,102
for Sign in with Apple
at Work & School.

50
00:02:15,102 --> 00:02:18,038
You will notice a difference
in the welcome screen.

51
00:02:18,038 --> 00:02:19,639
What do we mean when we say

52
00:02:19,639 --> 00:02:23,610
we make it easy for apps
to provide access control?

53
00:02:23,610 --> 00:02:26,747
Let's take a look at an example.

54
00:02:26,747 --> 00:02:28,415
When using their personal
Apple ID

55
00:02:28,415 --> 00:02:29,950
with Sign in with Apple,

56
00:02:29,950 --> 00:02:32,619
the user sees
the account creation screen

57
00:02:32,619 --> 00:02:34,855
where they may
edit their name

58
00:02:34,855 --> 00:02:38,825
and choose whether to share
or hide their email.

59
00:02:38,825 --> 00:02:41,094
But in an organizational
context,

60
00:02:41,094 --> 00:02:44,965
it is important for the app
to understand who is logging in

61
00:02:44,965 --> 00:02:47,968
and what level of access
to provide them.

62
00:02:47,968 --> 00:02:50,437
In the example
shown on this screen,

63
00:02:50,437 --> 00:02:53,907
the user is signing in
to Slack at work.

64
00:02:53,907 --> 00:02:55,542
In order to know
which Slack channels

65
00:02:55,542 --> 00:02:58,045
this employee should be
allowed to join,

66
00:02:58,045 --> 00:03:01,448
Slack needs to know
which user is signing in.

67
00:03:01,448 --> 00:03:05,685
So this is an example of Slack
providing access control

68
00:03:05,685 --> 00:03:09,022
using the name and email
shared with their app

69
00:03:09,022 --> 00:03:12,392
when using Sign in with Apple
at Work & School.

70
00:03:12,392 --> 00:03:16,463
So this is what the user sees,
but what does this mean for you?

71
00:03:16,463 --> 00:03:17,831
It means when a user

72
00:03:17,831 --> 00:03:20,400
uses Sign in with Apple
at Work & School,

73
00:03:20,400 --> 00:03:25,272
the name and email fields
will always be accessible.

74
00:03:25,272 --> 00:03:29,076
If you are a developer
working on a client-side app,

75
00:03:29,076 --> 00:03:31,244
here's a look
at some example code

76
00:03:31,244 --> 00:03:34,281
showing the authorization
controller.

77
00:03:34,281 --> 00:03:37,417
On a successful authorization,
the highlighted statements

78
00:03:37,417 --> 00:03:42,355
indicate the full name and email
received by your app.

79
00:03:42,355 --> 00:03:45,025
This assumes that
the request for authorization

80
00:03:45,025 --> 00:03:49,696
included the scopes
for the full name and email.

81
00:03:49,696 --> 00:03:51,164
If you are a developer

82
00:03:51,164 --> 00:03:54,000
supporting Sign in with Apple
on the web,

83
00:03:54,000 --> 00:03:56,236
here's a look
at some example code

84
00:03:56,236 --> 00:04:01,241
that uses the signIn method to
start the authorization process.

85
00:04:01,241 --> 00:04:03,310
Upon successful authorization,

86
00:04:03,310 --> 00:04:07,114
the server returns the response
to the data object.

87
00:04:07,114 --> 00:04:11,084
That data object
looks like this.

88
00:04:11,084 --> 00:04:13,753
The highlighted fields
contain the email

89
00:04:13,753 --> 00:04:18,258
and full name
of the user signing in.

90
00:04:18,258 --> 00:04:21,461
It is important to note
a few points here.

91
00:04:21,461 --> 00:04:24,564
In this release, Sign in
with Apple at Work & School

92
00:04:24,564 --> 00:04:27,400
uses the primary
Managed Apple ID

93
00:04:27,400 --> 00:04:30,770
that is signed in on the device.

94
00:04:30,770 --> 00:04:33,373
Even though the example screens
that we showed you

95
00:04:33,373 --> 00:04:36,243
were for the login flow
on the device,

96
00:04:36,243 --> 00:04:39,212
the web flow is supported
as well.

97
00:04:39,212 --> 00:04:42,716
Some accounts may not have
email addresses provided.

98
00:04:42,716 --> 00:04:45,919
For example, schools may not
assign email addresses

99
00:04:45,919 --> 00:04:47,787
to younger students.

100
00:04:47,787 --> 00:04:50,790
Let's see what the account
creation screen looks like

101
00:04:50,790 --> 00:04:54,895
in this scenario where
an email address is not present.

102
00:04:54,895 --> 00:04:59,099
This user, Fatima Silva,
does not have an email address,

103
00:04:59,099 --> 00:05:01,201
so only their full name
is present

104
00:05:01,201 --> 00:05:04,004
on the account creation screen.

105
00:05:04,004 --> 00:05:06,439
If you have already implemented
Sign in with Apple,

106
00:05:06,439 --> 00:05:08,742
there is no work
needed from your end

107
00:05:08,742 --> 00:05:11,378
to add support
for Managed Apple IDs.

108
00:05:11,378 --> 00:05:13,480
If you haven't implemented
support yet,

109
00:05:13,480 --> 00:05:15,949
I would highly suggest
taking a look

110
00:05:15,949 --> 00:05:18,952
at the "Get the most out
of Sign in with Apple" session

111
00:05:18,952 --> 00:05:21,021
from WWDC2020

112
00:05:21,021 --> 00:05:24,491
and the "Enhance your Sign in
with Apple experience" session

113
00:05:24,491 --> 00:05:26,493
from this year.

114
00:05:26,493 --> 00:05:29,196
That was Sign in with Apple
at Work & School,

115
00:05:29,196 --> 00:05:31,998
which brings the fast and easy
sign-in experience

116
00:05:31,998 --> 00:05:35,202
of Sign in with Apple
to Managed Apple IDs.

117
00:05:35,202 --> 00:05:37,804
Now let's dive into
the Roster API.

118
00:05:37,804 --> 00:05:39,706
But before jumping into
any specifics,

119
00:05:39,706 --> 00:05:42,609
let's consider
the following scenario.

120
00:05:42,609 --> 00:05:45,412
You're a developer
in the education space.

121
00:05:45,412 --> 00:05:48,048
Your app is being used
by school districts.

122
00:05:48,048 --> 00:05:51,851
You have implemented support for
Sign in with Apple in your app.

123
00:05:51,851 --> 00:05:52,919
That's great!

124
00:05:52,919 --> 00:05:56,590
Students, teachers, and staff
can use their Managed Apple IDs

125
00:05:56,590 --> 00:05:58,625
to log in to your app.

126
00:05:58,625 --> 00:06:01,161
In this scenario,
your app allows teachers

127
00:06:01,161 --> 00:06:02,929
to share assignments
and announcements

128
00:06:02,929 --> 00:06:04,297
with their students.

129
00:06:04,297 --> 00:06:06,566
To support this,
IT administrators

130
00:06:06,566 --> 00:06:10,570
need to enter students,
teachers, and classes

131
00:06:10,570 --> 00:06:14,908
into your app prior to the start
of the school year.

132
00:06:14,908 --> 00:06:18,178
For a school with hundreds
or thousands of students,

133
00:06:18,178 --> 00:06:20,180
creating these records by hand

134
00:06:20,180 --> 00:06:22,549
would quickly become
a time-consuming

135
00:06:22,549 --> 00:06:24,718
and tedious process.

136
00:06:24,718 --> 00:06:28,355
We've created the Roster API
to address this problem.

137
00:06:28,355 --> 00:06:31,591
The Roster API provides
programmatic access

138
00:06:31,591 --> 00:06:34,194
to resources
like users and classes

139
00:06:34,194 --> 00:06:36,196
in Apple School Manager.

140
00:06:36,196 --> 00:06:39,165
This allows an IT admin
to automate the process

141
00:06:39,165 --> 00:06:42,669
of importing this information
to your app.

142
00:06:42,669 --> 00:06:47,374
These resources are defined
in the form of REST endpoints.

143
00:06:47,374 --> 00:06:50,377
This data can be
accessed by your app

144
00:06:50,377 --> 00:06:53,346
after the IT admin
has granted permission

145
00:06:53,346 --> 00:06:57,350
through a successful OAuth 2.0
authorization.

146
00:06:57,350 --> 00:07:00,120
The Administrator
and Site Manager accounts

147
00:07:00,120 --> 00:07:01,521
in Apple School Manager

148
00:07:01,521 --> 00:07:06,993
can manage which apps
are able to access the data.

149
00:07:06,993 --> 00:07:08,328
As part of this release,

150
00:07:08,328 --> 00:07:10,730
we have created
a standardized way

151
00:07:10,730 --> 00:07:14,834
for apps to request access
to organizational data.

152
00:07:14,834 --> 00:07:18,305
We call this
Organizational Data Sharing.

153
00:07:18,305 --> 00:07:20,507
We wanted to follow
industry standards

154
00:07:20,507 --> 00:07:23,476
when it comes
to UI design patterns

155
00:07:23,476 --> 00:07:28,214
and choice of technology
so developer adoption is easy.

156
00:07:28,214 --> 00:07:32,519
So we created an authorization
flow using OAuth 2.0,

157
00:07:32,519 --> 00:07:37,023
which includes using scopes
and asking the IT admin

158
00:07:37,023 --> 00:07:40,527
to consent to sharing
their organizational data.

159
00:07:40,527 --> 00:07:43,330
Here is what it looks like.

160
00:07:43,330 --> 00:07:46,999
The consent screen provides
information on which app

161
00:07:46,999 --> 00:07:50,303
is requesting access
to the organization's data

162
00:07:50,303 --> 00:07:54,107
and what data the app
is requesting access to.

163
00:07:54,107 --> 00:07:57,110
Looking more closely,
the consent screen

164
00:07:57,110 --> 00:08:00,213
contains information
on the requestor --

165
00:08:00,213 --> 00:08:04,050
which represents the app
requesting access to the data

166
00:08:04,050 --> 00:08:06,486
made available by
Apple School Manager;

167
00:08:06,486 --> 00:08:08,888
in this case, the requesting app
is Quizzler --

168
00:08:08,888 --> 00:08:11,624
and the scopes,
which represent the data

169
00:08:11,624 --> 00:08:14,327
that the app
will have access to.

170
00:08:14,327 --> 00:08:17,097
In this case,
once the IT admin consents,

171
00:08:17,097 --> 00:08:19,165
Quizzler will be able to access

172
00:08:19,165 --> 00:08:24,738
all user and class information
for this organization.

173
00:08:24,738 --> 00:08:27,240
What does your implementation
journey look like?

174
00:08:27,240 --> 00:08:30,643
The first step is to register
in the developer portal,

175
00:08:30,643 --> 00:08:33,279
which involves
requesting scopes.

176
00:08:33,279 --> 00:08:37,050
The next step is to request
consent from the IT admin

177
00:08:37,050 --> 00:08:39,352
to share the data with your app

178
00:08:39,352 --> 00:08:42,689
through the OAuth 2.0
authorization flow.

179
00:08:42,689 --> 00:08:46,259
Finally, your app queries
the Roster API endpoints

180
00:08:46,259 --> 00:08:48,395
to fetch the data.

181
00:08:48,395 --> 00:08:51,464
Let us take a look
at each of these steps.

182
00:08:51,464 --> 00:08:55,034
To request scopes,
visit the Developer portal.

183
00:08:55,034 --> 00:08:58,638
Under the Certificates,
Identifiers & Profiles page,

184
00:08:58,638 --> 00:09:00,540
click on Configure

185
00:09:00,540 --> 00:09:03,843
under Account & Organizational
Data Sharing.

186
00:09:03,843 --> 00:09:08,815
In the next step, click on
"Set up a configuration."

187
00:09:08,815 --> 00:09:12,218
Choose the primary app ID
from the drop-down

188
00:09:12,218 --> 00:09:15,955
and hit Continue.

189
00:09:15,955 --> 00:09:18,691
In the additional configuration
details page,

190
00:09:18,691 --> 00:09:21,928
under Organizational Data
Sharing Scopes,

191
00:09:21,928 --> 00:09:24,063
choose the scopes desired.

192
00:09:24,063 --> 00:09:28,735
Right now, we offer two:
user access and class access.

193
00:09:28,735 --> 00:09:32,405
Ensure return URLs
are configured for your app.

194
00:09:32,405 --> 00:09:35,942
This step is important
as the return URLs will be used

195
00:09:35,942 --> 00:09:39,045
in the OAuth 2.0
authorization flow.

196
00:09:39,045 --> 00:09:41,414
Hit Continue.

197
00:09:41,414 --> 00:09:44,150
Finally, confirm
your configuration.

198
00:09:44,150 --> 00:09:47,320
Now we're ready
for the next step.

199
00:09:47,320 --> 00:09:49,823
The second step
in the implementation journey

200
00:09:49,823 --> 00:09:53,193
is getting the access token
through the OAuth 2.0

201
00:09:53,193 --> 00:09:55,094
authorization flow.

202
00:09:55,094 --> 00:09:57,797
Let us look at this in detail.

203
00:09:57,797 --> 00:10:00,900
The IT admin
first logs in to your app.

204
00:10:00,900 --> 00:10:02,969
The IT admin then
interacts with your app

205
00:10:02,969 --> 00:10:05,371
to initiate
the authorization flow --

206
00:10:05,371 --> 00:10:07,941
for example,
by clicking a button

207
00:10:07,941 --> 00:10:10,577
named "Connect to Apple
School Manager."

208
00:10:10,577 --> 00:10:12,946
This starts a sequence of events

209
00:10:12,946 --> 00:10:16,015
following the OAuth 2.0
standard.

210
00:10:16,015 --> 00:10:19,118
The first step is
to execute a GET API call

211
00:10:19,118 --> 00:10:20,854
to the authorize endpoint.

212
00:10:20,854 --> 00:10:24,824
Let us take a look
at the details of this request.

213
00:10:24,824 --> 00:10:28,061
The request takes in
a few query parameters:

214
00:10:28,061 --> 00:10:30,530
the client_id,
the redirect_uri,

215
00:10:30,530 --> 00:10:34,167
the state, response_type,
and scopes.

216
00:10:34,167 --> 00:10:36,102
The response will be a redirect

217
00:10:36,102 --> 00:10:38,338
to the Apple OAuth
consent screen

218
00:10:38,338 --> 00:10:41,875
to request access
from the IT admin.

219
00:10:41,875 --> 00:10:45,078
In this diagram,
we assume that the IT admin

220
00:10:45,078 --> 00:10:48,381
has authenticated
with their Managed Apple ID.

221
00:10:48,381 --> 00:10:49,449
If they have not,

222
00:10:49,449 --> 00:10:52,785
they would be prompted
to authenticate first.

223
00:10:52,785 --> 00:10:56,022
The IT admin is presented
with the consent screen

224
00:10:56,022 --> 00:10:58,224
to confirm that they
would like to share

225
00:10:58,224 --> 00:11:01,427
their organizational data
with your app.

226
00:11:01,427 --> 00:11:04,531
This is the same consent screen
that we saw earlier.

227
00:11:04,531 --> 00:11:08,735
As a reminder,
it looks like this.

228
00:11:08,735 --> 00:11:11,671
Once they click Allow,
your app is provided

229
00:11:11,671 --> 00:11:14,774
with an authorization code
at your return URL

230
00:11:14,774 --> 00:11:19,112
that you registered
in the developer portal.

231
00:11:19,112 --> 00:11:23,016
The final step involves a POST
request to the token endpoint

232
00:11:23,016 --> 00:11:26,252
to retrieve your app's
access token.

233
00:11:26,252 --> 00:11:29,589
Let us see what this request
looks like.

234
00:11:29,589 --> 00:11:33,660
The request body is composed
of standard OAuth parameters

235
00:11:33,660 --> 00:11:38,998
including the authorization code
received on your return URL.

236
00:11:38,998 --> 00:11:41,734
The response would have
the access token,

237
00:11:41,734 --> 00:11:44,571
its expiration,
and the refresh token

238
00:11:44,571 --> 00:11:49,275
that is used to create a new
access token when it expires.

239
00:11:49,275 --> 00:11:51,644
Let us take a look
at the request details

240
00:11:51,644 --> 00:11:55,949
to generate a new access token
using a refresh token.

241
00:11:55,949 --> 00:11:59,652
The request body is composed of
the standard OAuth parameters,

242
00:11:59,652 --> 00:12:02,655
including the refresh token,
and the response would have

243
00:12:02,655 --> 00:12:06,326
the access token
and its expiration.

244
00:12:06,326 --> 00:12:07,894
After successfully completing

245
00:12:07,894 --> 00:12:10,296
the OAuth 2.0
authorization flow,

246
00:12:10,296 --> 00:12:12,632
your app now has
the access token,

247
00:12:12,632 --> 00:12:16,169
which can be used to fetch
user and class information

248
00:12:16,169 --> 00:12:18,705
from the Roster API.

249
00:12:18,705 --> 00:12:20,673
As part of our current release,

250
00:12:20,673 --> 00:12:22,542
we are introducing
five endpoints

251
00:12:22,542 --> 00:12:24,477
that the apps can query.

252
00:12:24,477 --> 00:12:27,814
These include
fetching a list of classes,

253
00:12:27,814 --> 00:12:30,516
a list of users,
a specific class,

254
00:12:30,516 --> 00:12:34,320
a specific user,
users in a class.

255
00:12:34,320 --> 00:12:36,656
Let's walk through
a simple example flow

256
00:12:36,656 --> 00:12:40,793
to demonstrate how you can
fetch users and classes.

257
00:12:40,793 --> 00:12:42,929
Your app server
can first retrieve

258
00:12:42,929 --> 00:12:46,466
the list of students,
teachers, and staff

259
00:12:46,466 --> 00:12:49,369
by querying the users endpoint.

260
00:12:49,369 --> 00:12:53,973
Let us take a look at the
request and response in detail.

261
00:12:53,973 --> 00:12:57,477
The users endpoint takes in
three query parameters.

262
00:12:57,477 --> 00:13:01,547
The pageToken and limit
are pagination parameters,

263
00:13:01,547 --> 00:13:03,116
and an optional role parameter

264
00:13:03,116 --> 00:13:07,520
lets you query for students,
instructors, or staff.

265
00:13:07,520 --> 00:13:10,189
The request requires
the authorization header

266
00:13:10,189 --> 00:13:11,724
with the access token

267
00:13:11,724 --> 00:13:14,227
generated from
the authorization flow.

268
00:13:14,227 --> 00:13:18,931
The response is a JSON payload
that includes a "users" key,

269
00:13:18,931 --> 00:13:20,967
which has the list of users;

270
00:13:20,967 --> 00:13:22,402
the "nextPageToken" key

271
00:13:22,402 --> 00:13:25,004
that is used to fetch
the next set of records,

272
00:13:25,004 --> 00:13:28,408
and a "moreToFollow"
Boolean key that indicates

273
00:13:28,408 --> 00:13:32,712
if there are any more records
to query.

274
00:13:32,712 --> 00:13:35,715
Let's take a look
at an example request.

275
00:13:35,715 --> 00:13:39,252
The API call here is retrieving
a list of students

276
00:13:39,252 --> 00:13:42,622
with a maximum of 10 students
in the response.

277
00:13:42,622 --> 00:13:44,957
This is the first API request,

278
00:13:44,957 --> 00:13:49,162
so the pageToken query
parameter is not specified.

279
00:13:49,162 --> 00:13:51,831
The response has
standard user information

280
00:13:51,831 --> 00:13:54,901
such as givenName,
familyName, etcetera,

281
00:13:54,901 --> 00:13:57,103
but I would like
to draw your attention

282
00:13:57,103 --> 00:14:00,239
to the stable unique identifier
for the user.

283
00:14:00,239 --> 00:14:03,242
This is the same identifier
your app receives

284
00:14:03,242 --> 00:14:06,913
when the user authenticates
with Sign in with Apple.

285
00:14:06,913 --> 00:14:09,082
The email address of the user

286
00:14:09,082 --> 00:14:12,952
and their roles in the
organization are also included.

287
00:14:12,952 --> 00:14:15,088
The nextPageToken
needs to be used

288
00:14:15,088 --> 00:14:18,291
in the subsequent API request
as a query parameter

289
00:14:18,291 --> 00:14:20,093
to fetch the next
set of students,

290
00:14:20,093 --> 00:14:24,330
since the moreToFollow key
is set to true.

291
00:14:24,330 --> 00:14:26,332
After querying
the users endpoint,

292
00:14:26,332 --> 00:14:30,002
your app server can now query
the classes endpoint,

293
00:14:30,002 --> 00:14:32,371
which gives you
the list of classes

294
00:14:32,371 --> 00:14:34,140
for that particular
school district

295
00:14:34,140 --> 00:14:37,977
and the relationship between
the class and the students

296
00:14:37,977 --> 00:14:40,780
and teachers associated
with that class.

297
00:14:40,780 --> 00:14:45,985
Let us take a look at the
request and response in detail.

298
00:14:45,985 --> 00:14:48,187
As part of
the get classes request,

299
00:14:48,187 --> 00:14:51,157
the request takes in
two query parameters:

300
00:14:51,157 --> 00:14:53,793
the pageToken
and the limit parameter,

301
00:14:53,793 --> 00:14:56,095
both of which we saw before.

302
00:14:56,095 --> 00:14:59,799
The headers are the same
as when querying users.

303
00:14:59,799 --> 00:15:02,101
The response is a JSON payload

304
00:15:02,101 --> 00:15:07,240
in which the "classes" key
holds the list of classes.

305
00:15:07,240 --> 00:15:10,143
Let us take a look
at an example request.

306
00:15:10,143 --> 00:15:12,845
This request retrieves
a list of classes

307
00:15:12,845 --> 00:15:17,416
with a maximum of 200
to be included in the response.

308
00:15:17,416 --> 00:15:20,453
The API request also has
the pageToken parameter,

309
00:15:20,453 --> 00:15:25,191
which means it is in the middle
of fetching all classes.

310
00:15:25,191 --> 00:15:27,994
The response has
standard class information

311
00:15:27,994 --> 00:15:31,130
such as the name,
the class identifier, etcetera,

312
00:15:31,130 --> 00:15:33,232
but I would like
to draw your attention

313
00:15:33,232 --> 00:15:36,702
to the list of instructor IDs
and student IDs

314
00:15:36,702 --> 00:15:38,838
that belong to the class.

315
00:15:38,838 --> 00:15:40,773
That was the Roster API.

316
00:15:40,773 --> 00:15:42,742
With these endpoints,
your app can now

317
00:15:42,742 --> 00:15:45,178
programmatically query
users and classes

318
00:15:45,178 --> 00:15:47,280
from Apple School Manager.

319
00:15:47,280 --> 00:15:51,484
Finally, I would like to talk
to you about access management.

320
00:15:51,484 --> 00:15:54,120
It is vital to provide
management capabilities

321
00:15:54,120 --> 00:15:57,523
to organizations using
Organizational Data Sharing

322
00:15:57,523 --> 00:16:00,359
and Sign in with Apple
at Work & School.

323
00:16:00,359 --> 00:16:04,163
Let me explain what this means
in more detail.

324
00:16:04,163 --> 00:16:05,798
When using Sign in with Apple,

325
00:16:05,798 --> 00:16:09,335
users manage their own account
and it's solely up to them

326
00:16:09,335 --> 00:16:12,905
to decide which apps
they choose to sign in to.

327
00:16:12,905 --> 00:16:15,741
But when using Sign in
with Apple at Work & School,

328
00:16:15,741 --> 00:16:20,179
the IT admin at the organization
centrally manages access

329
00:16:20,179 --> 00:16:24,317
on behalf of all the users
at that organization.

330
00:16:24,317 --> 00:16:27,687
This is because the IT admin
is responsible for ensuring

331
00:16:27,687 --> 00:16:31,490
the safety and security
of the organization's data.

332
00:16:31,490 --> 00:16:34,894
So, they must be empowered
to manage which apps

333
00:16:34,894 --> 00:16:38,998
users are allowed to use Sign in
with Apple at Work & School,

334
00:16:38,998 --> 00:16:43,269
and which apps are allowed to
use Organizational Data Sharing.

335
00:16:43,269 --> 00:16:46,772
These access management
capabilities can be configured

336
00:16:46,772 --> 00:16:50,743
in Apple School Manager
and Apple Business Manager.

337
00:16:50,743 --> 00:16:53,045
For Sign in with Apple
at Work & School,

338
00:16:53,045 --> 00:16:54,947
we offer two modes.

339
00:16:54,947 --> 00:16:58,551
The first mode
is "Allow all apps."

340
00:16:58,551 --> 00:17:01,587
Let us see what this mode
looks like.

341
00:17:01,587 --> 00:17:05,892
Here, the IT admin is logged in
to Apple Business Manager.

342
00:17:05,892 --> 00:17:08,594
On selecting Access Management
from the sidebar

343
00:17:08,594 --> 00:17:10,863
and choosing Sign in with Apple,

344
00:17:10,863 --> 00:17:13,566
they are presented
with the two modes.

345
00:17:13,566 --> 00:17:17,737
The "Allow all apps" mode lets
all users of the organization

346
00:17:17,737 --> 00:17:21,207
log in to all apps that support
Sign in with Apple.

347
00:17:21,207 --> 00:17:25,211
The second mode
is "Allow only certain apps."

348
00:17:25,211 --> 00:17:28,214
Let us see what this mode
looks like.

349
00:17:28,214 --> 00:17:31,350
The "Allow only certain apps"
mode lets the IT admin

350
00:17:31,350 --> 00:17:34,353
search for apps that support
Sign in with Apple

351
00:17:34,353 --> 00:17:36,355
to add to the list.

352
00:17:36,355 --> 00:17:39,258
Users will only be able
to use Sign in with Apple

353
00:17:39,258 --> 00:17:42,161
with the apps that have been
added to the list.

354
00:17:42,161 --> 00:17:45,765
If a user tries to log in to
an app that is not on the list,

355
00:17:45,765 --> 00:17:48,067
they will see
an error message.

356
00:17:48,067 --> 00:17:50,336
It is important to note
that this functionality

357
00:17:50,336 --> 00:17:52,772
is the same
for Apple School Manager,

358
00:17:52,772 --> 00:17:54,140
Apple Business Manager,

359
00:17:54,140 --> 00:17:56,709
and Business Essentials
customers.

360
00:17:56,709 --> 00:17:59,278
Similar to Sign in with Apple
at Work & School,

361
00:17:59,278 --> 00:18:02,848
Organizational Data Sharing
also has the same two modes.

362
00:18:02,848 --> 00:18:04,917
Let's take a look.

363
00:18:04,917 --> 00:18:08,220
The "Allow only certain apps"
mode lets the IT admin

364
00:18:08,220 --> 00:18:11,390
search for supported apps
to add to the list.

365
00:18:11,390 --> 00:18:15,361
It is these apps that can access
user and class information

366
00:18:15,361 --> 00:18:17,196
using the Roster API.

367
00:18:17,196 --> 00:18:19,165
In addition
to the consent screen,

368
00:18:19,165 --> 00:18:22,468
this is a second layer
of control for the IT admin

369
00:18:22,468 --> 00:18:26,806
to manage which apps
can access organizational data.

370
00:18:26,806 --> 00:18:29,508
With the release of Sign in
with Apple at Work & School,

371
00:18:29,508 --> 00:18:33,412
now users in any environment
can use an Apple ID

372
00:18:33,412 --> 00:18:36,549
or a Managed Apple ID
to log in to your app.

373
00:18:36,549 --> 00:18:39,518
If you haven't already
implemented Sign in with Apple,

374
00:18:39,518 --> 00:18:42,355
I encourage you to do so.

375
00:18:42,355 --> 00:18:45,257
I would also highly encourage
you to adopt the Roster API

376
00:18:45,257 --> 00:18:47,626
if you are
in the education space.

377
00:18:47,626 --> 00:18:49,628
Implementing support
for Roster API

378
00:18:49,628 --> 00:18:52,298
will provide a seamless
onboarding experience

379
00:18:52,298 --> 00:18:57,870
for IT administrators, staff,
teachers, and students.

380
00:18:57,870 --> 00:19:00,072
As always,
we love hearing from you.

381
00:19:00,072 --> 00:19:03,242
So please submit
any feedback you may have.

382
00:19:03,242 --> 00:19:05,911
If you'd like to learn more,
I would highly suggest

383
00:19:05,911 --> 00:19:09,582
the "Get the most out of Sign in
with Apple" session from 2020

384
00:19:09,582 --> 00:19:13,052
and the "Enhance your Sign in
with Apple experience" session

385
00:19:13,052 --> 00:19:14,186
this year.

386
00:19:14,186 --> 00:19:15,588
Thank you so much for watching

387
00:19:15,588 --> 00:19:17,823
and we hope you enjoy
this year's WWDC.

388
00:19:17,823 --> 00:19:24,597
♪

