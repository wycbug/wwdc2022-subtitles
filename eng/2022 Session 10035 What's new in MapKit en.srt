1
00:00:01,001 --> 00:00:07,007
[spacey music]

2
00:00:09,309 --> 00:00:12,746
Eric: Hello!
Welcome to WWDC!

3
00:00:12,779 --> 00:00:13,947
My name is Eric.

4
00:00:13,981 --> 00:00:16,250
I'm an engineer from the Maps team.

5
00:00:16,283 --> 00:00:19,786
Today, I'm joined by my colleague Yingxiu,
and together,

6
00:00:19,820 --> 00:00:21,922
we're going to explore what's new
in MapKit.

7
00:00:23,357 --> 00:00:27,427
It's been 3 years since Apple
Maps introduced its all-new map

8
00:00:27,461 --> 00:00:29,663
and its immersive Look Around experience.

9
00:00:31,031 --> 00:00:33,367
Originally launched with U.S. support,

10
00:00:33,400 --> 00:00:36,837
the all-new map and Look Around coverage
has been expanding since

11
00:00:36,870 --> 00:00:38,405
and now includes Canada,

12
00:00:38,438 --> 00:00:41,341
many European countries, Japan, and more.

13
00:00:42,910 --> 00:00:45,712
Last year, Apple Maps took things
to the next level

14
00:00:45,746 --> 00:00:49,983
by introducing 3D City Experiences,
featuring turn lanes,

15
00:00:50,017 --> 00:00:51,885
crosswalks, bike lanes,

16
00:00:51,919 --> 00:00:55,589
and beautifully handcrafted 3D landmarks
like the Ferry Building.

17
00:00:57,457 --> 00:00:59,526
The additional detail of the map
allows you

18
00:00:59,560 --> 00:01:01,728
to provide context and precision

19
00:01:01,762 --> 00:01:04,264
that was never before possible,

20
00:01:04,298 --> 00:01:06,633
and the addition of 3D terrain elevation

21
00:01:06,667 --> 00:01:09,469
provides a level of realism
like no other map!

22
00:01:10,704 --> 00:01:13,674
This year, MapKit brings
the latest innovations

23
00:01:13,707 --> 00:01:15,576
from Apple Maps to your apps,

24
00:01:15,609 --> 00:01:19,012
letting your users explore the world
in amazing details.

25
00:01:20,247 --> 00:01:24,484
In this talk, we'll be covering
several new MapKit features.

26
00:01:24,518 --> 00:01:27,721
First, we'll talk about adopting
the all-new map

27
00:01:27,754 --> 00:01:30,858
and fully leveraging it using
the Map Configuration API.

28
00:01:31,992 --> 00:01:35,863
Next, we'll cover various improvements
we made to our overlay APIs

29
00:01:35,896 --> 00:01:39,533
to allow for a seamless integration
of your content with the map.

30
00:01:40,834 --> 00:01:43,136
We'll also discuss
our new blend modes support

31
00:01:43,170 --> 00:01:47,040
and show how you can make use of it
to further enhance the presentation

32
00:01:47,074 --> 00:01:49,510
of your map content.

33
00:01:49,543 --> 00:01:53,113
Then, we'll cover ways of making your maps
more interactive

34
00:01:53,146 --> 00:01:56,450
by adopting our brand-new
Selectable Map Features API.

35
00:01:57,384 --> 00:02:01,154
And finally, we'll cover integrating
the immersive Look Around experience

36
00:02:01,188 --> 00:02:03,190
directly into your applications.

37
00:02:04,124 --> 00:02:08,395
We've got a lot to cover, so buckle up
as we head for our first topic:

38
00:02:08,428 --> 00:02:12,332
adopting the all-new map
and using the Map Configuration API.

39
00:02:13,600 --> 00:02:16,170
Adopting the all-new map in your iOS,

40
00:02:16,203 --> 00:02:18,505
macOS, or tvOS application

41
00:02:18,539 --> 00:02:20,307
couldn't be easier.

42
00:02:20,340 --> 00:02:23,610
Simply recompile your app
with the new SDK,

43
00:02:23,644 --> 00:02:27,347
and it will be automatically opted in
to the all-new Apple map,

44
00:02:27,381 --> 00:02:30,083
including the 3D City Experience,
where available.

45
00:02:30,717 --> 00:02:34,588
For many applications, a simple recompile
is all that's needed.

46
00:02:36,089 --> 00:02:39,059
Of course, there may be situations
where you need more control

47
00:02:39,092 --> 00:02:40,727
over the presentation of the map.

48
00:02:41,495 --> 00:02:46,033
In iOS 15, the way you configure the map
is through various properties

49
00:02:46,066 --> 00:02:47,267
on MKMapView.

50
00:02:48,202 --> 00:02:53,173
In iOS 16, however,
we're soft deprecating those properties,

51
00:02:53,207 --> 00:02:56,376
and we're introducing
our new Map Configuration API

52
00:02:56,410 --> 00:02:57,344
as a replacement.

53
00:02:58,779 --> 00:03:03,984
MKMapConfiguration is the central class
of the new Map Configuration API.

54
00:03:04,017 --> 00:03:07,454
MKMapConfiguration is
an abstract base class

55
00:03:07,487 --> 00:03:09,489
with three concrete subclasses.

56
00:03:11,058 --> 00:03:16,296
The imagery map configuration is used
to present satellite-style imagery.

57
00:03:16,330 --> 00:03:20,167
The hybrid map configuration is used
to present an imagery-based map

58
00:03:20,200 --> 00:03:24,505
with added map features such
as road labels and points of interest.

59
00:03:26,006 --> 00:03:30,644
The standard map configuration is used
to present a fully graphics-based map.

60
00:03:31,411 --> 00:03:35,549
These three map configurations may sound
familiar to you, as they're similar

61
00:03:35,582 --> 00:03:37,251
to our existing map types.

62
00:03:40,153 --> 00:03:44,691
The base map configuration class
supportsÂ an elevationStyle property,

63
00:03:44,725 --> 00:03:47,294
which can be either flat or realistic.

64
00:03:48,562 --> 00:03:52,533
A flat elevation style means
that the ground appears flat.

65
00:03:52,566 --> 00:03:57,137
Roads, including
bridges and overpasses, also appear flat.

66
00:03:57,171 --> 00:03:59,673
Flat is the default elevation style.

67
00:04:00,741 --> 00:04:03,110
A realistic elevation style means

68
00:04:03,143 --> 00:04:06,346
that the ground terrain reproduces
the real-world elevation

69
00:04:06,380 --> 00:04:08,782
such as hills and mountains.

70
00:04:08,815 --> 00:04:12,553
Roads are depicted
with realistic elevation details.

71
00:04:13,754 --> 00:04:17,591
Now let's take a closer look
at the map configuration subclasses.

72
00:04:18,825 --> 00:04:22,496
The imagery map configuration
only shows satellite imagery

73
00:04:22,529 --> 00:04:26,667
with no additional map features,
so it doesn't have any other properties.

74
00:04:28,068 --> 00:04:31,104
The hybrid map configuration
has additional properties

75
00:04:31,138 --> 00:04:33,907
to control filtering
of point of interest categories

76
00:04:33,941 --> 00:04:35,909
and whether to show traffic or not.

77
00:04:37,911 --> 00:04:41,949
The standard map configuration supports
an emphasisStyle property

78
00:04:41,982 --> 00:04:44,051
which can be either default or muted.

79
00:04:45,485 --> 00:04:48,755
As the name implies, this is
the default emphasis style

80
00:04:48,789 --> 00:04:50,324
unless otherwise stated.

81
00:04:51,458 --> 00:04:55,762
The muted emphasis style softens
the contrasts of the map details,

82
00:04:55,796 --> 00:04:59,633
allowing you to bring more attention
to additional graphical information

83
00:04:59,666 --> 00:05:02,102
you might want to show on top.

84
00:05:02,903 --> 00:05:06,540
The standard map configuration
also has additional properties

85
00:05:06,573 --> 00:05:09,343
to control filtering
of point of interest categories

86
00:05:09,376 --> 00:05:11,278
and whether to show traffic or not.

87
00:05:12,379 --> 00:05:15,682
And that sums up
the available map configuration classes

88
00:05:15,716 --> 00:05:16,850
and their properties.

89
00:05:18,819 --> 00:05:21,421
This new API ensures
you can only configure

90
00:05:21,455 --> 00:05:23,824
supported combinations of options.

91
00:05:23,857 --> 00:05:27,661
It also allows you to change
the map configuration atomically.

92
00:05:27,694 --> 00:05:31,331
We think this is a great improvement
over our existing APIs.

93
00:05:32,799 --> 00:05:34,535
To recap what we just discussed,

94
00:05:34,568 --> 00:05:36,370
here's a table that shows
the correspondence

95
00:05:36,403 --> 00:05:40,507
between the new map configuration classes
and the MKMapType property.

96
00:05:42,109 --> 00:05:44,611
The all-new map
with the 3D City Experience

97
00:05:44,645 --> 00:05:46,914
requires compatible hardware.

98
00:05:46,947 --> 00:05:53,020
On iOS, the new map support requires
A12-based iPhones and iPads or later.

99
00:05:53,053 --> 00:05:55,722
On macOS, the new map support requires

100
00:05:55,756 --> 00:05:57,958
any M1-based computer or later.

101
00:05:59,593 --> 00:06:02,829
In areas where the 3D City Experience is
not available,

102
00:06:02,863 --> 00:06:06,266
the map will automatically fall back
to present the all-new map

103
00:06:06,300 --> 00:06:08,001
with a flat elevation.

104
00:06:09,236 --> 00:06:11,772
On all other devices, the all-new map

105
00:06:11,805 --> 00:06:13,807
will be presented with a flat elevation.

106
00:06:15,375 --> 00:06:19,813
On M1 Macs, Xcode allows you to simulate
both experiences

107
00:06:19,847 --> 00:06:21,815
simply by changing the OS version.

108
00:06:22,683 --> 00:06:24,585
We encourage you to try out both,

109
00:06:24,618 --> 00:06:26,753
to ensure that your app looks great

110
00:06:26,787 --> 00:06:28,055
on all devices!

111
00:06:29,423 --> 00:06:31,925
The 3D City Experience is available

112
00:06:31,959 --> 00:06:34,361
in many metropolitan areas
around the world.

113
00:06:35,362 --> 00:06:38,098
We're continuously adding new cities
to this list,

114
00:06:38,131 --> 00:06:41,735
so I encourage you to check out
the 3D City Experience section

115
00:06:41,768 --> 00:06:45,272
on the feature availability website linked
in the session notes.

116
00:06:45,305 --> 00:06:48,942
This concludes our section on adopting
the all-new map

117
00:06:48,976 --> 00:06:51,011
and using the Map Configuration API.

118
00:06:52,646 --> 00:06:55,115
Now let's dive into overlays.

119
00:06:55,148 --> 00:06:59,520
MapKit has supported overlays
with several styling options for years.

120
00:06:59,553 --> 00:07:01,021
In iOS 16,

121
00:07:01,054 --> 00:07:03,257
we are improving our existing APIs

122
00:07:03,290 --> 00:07:06,894
to allow your overlays to seamlessly
integrate with the map.

123
00:07:06,927 --> 00:07:10,163
Let's start with a quick recap
of overlay levels.

124
00:07:11,632 --> 00:07:14,434
Overlays can be rendered
at two different levels:

125
00:07:14,468 --> 00:07:17,004
above roads and above labels.

126
00:07:17,037 --> 00:07:20,374
You can specify the rendering level
at insertion time

127
00:07:20,407 --> 00:07:23,477
using one of MapKit's
many overlay insertion functions.

128
00:07:24,778 --> 00:07:28,949
Above labels renders your overlay
above everything, including labels.

129
00:07:29,716 --> 00:07:32,953
Since labels
provide important context information,

130
00:07:32,986 --> 00:07:36,857
we encourage you to only use above labels
in those rare cases

131
00:07:36,890 --> 00:07:40,661
where you don't want your data
to interact with the map at all.

132
00:07:40,694 --> 00:07:43,263
If what you're trying to achieve
is for your content

133
00:07:43,297 --> 00:07:45,065
to stand out against the map,

134
00:07:45,098 --> 00:07:48,202
you might want to consider
using the muted map emphasis

135
00:07:48,235 --> 00:07:50,938
or the blend modes,
which we'll talk about later.

136
00:07:52,840 --> 00:07:56,610
Above roads means the overlay
will be shown on top of the terrain,

137
00:07:56,643 --> 00:08:00,080
including roads, land cover,
or bodies of water.

138
00:08:00,113 --> 00:08:04,418
It will, however, be shown below labels
and, to some degree,

139
00:08:04,451 --> 00:08:06,119
trees and buildings.

140
00:08:06,153 --> 00:08:07,888
More on that in a second.

141
00:08:07,921 --> 00:08:10,991
Above roads will be
the new default mode in iOS 16.

142
00:08:11,925 --> 00:08:16,230
Next, let's talk about a new feature
we're introducing in iOS 16

143
00:08:16,263 --> 00:08:17,698
called transparent buildings.

144
00:08:18,832 --> 00:08:21,101
Regardless of whether your overlay level

145
00:08:21,134 --> 00:08:23,504
is above roads or above labels,

146
00:08:23,537 --> 00:08:26,373
your overlay will always be rendered
on top of buildings

147
00:08:26,406 --> 00:08:28,475
when viewed top-down with no pitch.

148
00:08:28,509 --> 00:08:30,711
However, we've made some improvements

149
00:08:30,744 --> 00:08:32,846
to the experience when using above roads

150
00:08:32,880 --> 00:08:34,648
in combination with a pitched map.

151
00:08:35,883 --> 00:08:38,318
Ground objects such as trees and buildings

152
00:08:38,352 --> 00:08:41,088
are now automatically rendered
with transparency

153
00:08:41,121 --> 00:08:43,023
when appearing above overlays,

154
00:08:43,056 --> 00:08:45,592
so as not to fully obscure them.

155
00:08:45,626 --> 00:08:49,730
The alpha value varies
with the map's pitch angle.

156
00:08:49,763 --> 00:08:54,067
If we revert to showing the map top-down
with a 0Âº pitch angle,

157
00:08:54,101 --> 00:08:57,371
colliding ground objects effectively
disappear from view,

158
00:08:57,404 --> 00:08:59,306
leaving your overlays fully visible.

159
00:09:00,607 --> 00:09:04,811
Transparent buildings also work
for semi-transparent overlays.

160
00:09:04,845 --> 00:09:07,748
The alpha value of the overlay
will be added to combine

161
00:09:07,781 --> 00:09:11,218
with the alpha value
of the transparent buildings.

162
00:09:11,251 --> 00:09:13,921
There's one more change
we're making to overlays.

163
00:09:14,855 --> 00:09:17,024
When adding an overlay to a map

164
00:09:17,057 --> 00:09:18,458
with realistic terrain,

165
00:09:18,492 --> 00:09:22,996
MapKit will automatically transition
the map to a flat representation.

166
00:09:23,030 --> 00:09:26,266
The map will automatically go back
to realistic when you remove

167
00:09:26,300 --> 00:09:27,668
the last overlay.

168
00:09:28,635 --> 00:09:32,506
One notable exception to this rule
are overlays sourced

169
00:09:32,539 --> 00:09:35,609
through MapKit's directions API.

170
00:09:35,642 --> 00:09:39,012
Those overlays
automatically follow the terrain.

171
00:09:39,680 --> 00:09:42,282
And with that, I'm going
to hand it over to Yingxiu.

172
00:09:42,316 --> 00:09:45,452
Yingxiu: Thank you, Eric.
Hi! I'm Yingxiu.

173
00:09:45,485 --> 00:09:47,387
I'm an engineer on the Maps team.

174
00:09:47,421 --> 00:09:50,224
I'm going to demonstrate
our new MapKit features

175
00:09:50,257 --> 00:09:54,094
and show you how easy it is to build
beautiful map experiences

176
00:09:54,127 --> 00:09:56,363
with our updated APIs.

177
00:09:56,396 --> 00:09:57,865
I will be using our sample app,

178
00:09:57,898 --> 00:09:59,499
which helps users rent scooters

179
00:09:59,533 --> 00:10:01,168
to tour San Francisco.

180
00:10:04,571 --> 00:10:06,740
Our app offers a number of features,

181
00:10:06,773 --> 00:10:09,109
as shown by the rows in this table view.

182
00:10:10,077 --> 00:10:14,915
"Operating Area" allows the user
to see where they can take our scooters.

183
00:10:14,948 --> 00:10:19,753
"Ride" takes the user on a tour
across the Golden Gate Bridge.

184
00:10:19,786 --> 00:10:22,689
"Explore" gives the user
an interactive map

185
00:10:22,723 --> 00:10:25,425
of downtown San Francisco,
which they can use

186
00:10:25,459 --> 00:10:28,028
to explore attractions
near the waterfront.

187
00:10:28,662 --> 00:10:32,833
"Highlights" offers a closer look
at must-see places.

188
00:10:33,534 --> 00:10:36,870
We will implement or upgrade
these features throughout this session.

189
00:10:36,904 --> 00:10:38,572
Let's get started!

190
00:10:42,576 --> 00:10:45,412
First, I'm going to use
the Operating Area feature

191
00:10:45,445 --> 00:10:49,316
to demonstrate how easy it is
to adopt the all-new map,

192
00:10:49,349 --> 00:10:50,784
and then I'll show you

193
00:10:50,817 --> 00:10:53,453
some of the improvements we have made
to overlays.

194
00:10:54,254 --> 00:10:57,457
I already have the project opened
in Xcode.

195
00:10:57,491 --> 00:11:00,294
Let's compile it with iOS 16 SDK

196
00:11:00,327 --> 00:11:01,862
and see how it looks.

197
00:11:05,399 --> 00:11:06,333
Here we are!

198
00:11:06,366 --> 00:11:09,403
We are already opted into the all-new map.

199
00:11:09,436 --> 00:11:11,471
We get a map view with rich details,

200
00:11:11,505 --> 00:11:13,540
including these beautiful lighting

201
00:11:13,574 --> 00:11:16,476
and hill-shading effects on the terrain.

202
00:11:16,510 --> 00:11:20,581
As we zoom in,
you will see buildings, trees...

203
00:11:26,053 --> 00:11:27,087
â¦and landmarks.

204
00:11:29,089 --> 00:11:33,093
Now let's add a polygon overlay
to visualize our operating area.

205
00:11:37,164 --> 00:11:41,869
Here I already have the polygon data ready
for the operating area.

206
00:11:41,902 --> 00:11:47,140
When the view is loaded, we'll first set
the region and the camera boundary.

207
00:11:47,174 --> 00:11:49,309
Make sure we look at the correct area.

208
00:11:50,544 --> 00:11:52,913
Then, we simply add the overlay.

209
00:11:53,914 --> 00:11:55,782
Let's build it and check it out!

210
00:11:57,818 --> 00:12:01,522
The polygon overlay is opaque
when viewed straight down.

211
00:12:01,555 --> 00:12:08,362
As we zoom in and pitch,

212
00:12:08,395 --> 00:12:09,897
the buildings begin to show,

213
00:12:09,930 --> 00:12:13,700
with the transparency increasing
as we pitch further.

214
00:12:13,734 --> 00:12:18,238
This effect is only available
when using the overlay level AboveRoads.

215
00:12:18,272 --> 00:12:21,141
If you want to leverage
transparent buildings and trees,

216
00:12:21,175 --> 00:12:23,510
make sure you choose
the correct overlay level.

217
00:12:25,412 --> 00:12:28,916
The overlay looks great,
but I'd like the map to show through

218
00:12:28,949 --> 00:12:30,651
even when not pitched.

219
00:12:30,684 --> 00:12:33,287
Let's go back to the code
and make it semi-transparent.

220
00:12:37,324 --> 00:12:39,693
Let's change alpha to 0.8.

221
00:12:44,131 --> 00:12:45,999
Now we have a transparent overlay

222
00:12:46,033 --> 00:12:49,736
and I can see roads and buildings
even when not pitched.

223
00:12:49,770 --> 00:12:53,240
If I zoom in and pitch the map,

224
00:12:53,273 --> 00:12:55,642
I still get an increase in transparency.

225
00:12:55,676 --> 00:12:57,411
This looks great!

226
00:12:57,444 --> 00:12:59,680
That's it for polygon overlays.

227
00:12:59,713 --> 00:13:03,417
Next, I want to show you
how to integrate realistic terrain

228
00:13:03,450 --> 00:13:05,719
and show adding an elevated route line.

229
00:13:05,752 --> 00:13:08,355
This will complete our "Ride" feature,

230
00:13:08,388 --> 00:13:10,657
a tour across the Golden Gate Bridge.

231
00:13:14,962 --> 00:13:17,831
Let's start by configuring the map view.

232
00:13:17,865 --> 00:13:20,334
We can change the elevation style in code,

233
00:13:20,367 --> 00:13:23,303
or we can just open
the Interface Builder inspector

234
00:13:23,337 --> 00:13:24,605
on the right-hand side.

235
00:13:26,874 --> 00:13:30,110
Here are the available map view
configuration settings.

236
00:13:30,143 --> 00:13:32,579
Let's select elevation realistic.

237
00:13:34,214 --> 00:13:36,016
Next, let's work on the route.

238
00:13:38,752 --> 00:13:41,121
For this feature, we want to show a route

239
00:13:41,154 --> 00:13:44,324
when the user toggles
the Show Route switch.

240
00:13:44,358 --> 00:13:47,761
We will also animate the camera
to focus on the route.

241
00:13:52,599 --> 00:13:56,069
Since we want to show a route
across the Golden Gate Bridge,

242
00:13:56,103 --> 00:13:59,239
we'll use the Presidio Park entry
as the start point

243
00:13:59,273 --> 00:14:01,909
and the Battery Spencer as the end point.

244
00:14:05,112 --> 00:14:08,015
When the map view is loaded,
we'll create annotations

245
00:14:08,048 --> 00:14:10,651
to mark the start and destination points.

246
00:14:16,557 --> 00:14:18,759
Set coordinates and title,

247
00:14:18,792 --> 00:14:21,428
append it to the annotation array,

248
00:14:21,461 --> 00:14:23,497
then add them to the map view.

249
00:14:31,839 --> 00:14:34,308
Now, we can focus on the route polyline.

250
00:14:37,211 --> 00:14:39,580
While normal overlays will flatten the
map,

251
00:14:39,613 --> 00:14:42,249
the polyline returned
by MapKit's Directions API

252
00:14:42,282 --> 00:14:44,284
will preserve the realistic terrain.

253
00:14:45,986 --> 00:14:50,490
In this action function, once the switch
is turned on,

254
00:14:50,524 --> 00:14:54,027
we'll create place marks
with the coordinates defined above.

255
00:14:57,998 --> 00:15:02,736
Then we create a direction request,

256
00:15:02,769 --> 00:15:06,206
with source and destination.

257
00:15:06,240 --> 00:15:08,675
Finally, we request the directions.

258
00:15:11,812 --> 00:15:13,847
If the fetch operation succeeds,

259
00:15:13,881 --> 00:15:16,483
simply add the route polyline
as an overlay.

260
00:15:21,889 --> 00:15:22,723
All right.

261
00:15:22,756 --> 00:15:24,725
Let's compile it and see how it looks!

262
00:15:29,830 --> 00:15:33,100
You'll notice the annotations are
automatically upgraded

263
00:15:33,133 --> 00:15:35,135
to the new gradient look.

264
00:15:35,169 --> 00:15:38,572
They are also seamlessly displayed
at the correct elevation.

265
00:15:38,605 --> 00:15:40,474
Once I toggle show route,

266
00:15:40,507 --> 00:15:41,909
the camera will pitch.

267
00:15:41,942 --> 00:15:43,977
Then, you can get a better view of them.

268
00:15:46,079 --> 00:15:48,415
As you can see, the route line follows

269
00:15:48,448 --> 00:15:50,083
the elevated terrain.

270
00:15:50,117 --> 00:15:51,518
This comes in handy

271
00:15:51,552 --> 00:15:54,121
when navigating complex intersections.

272
00:15:54,154 --> 00:15:57,157
It also follows the road
across the bridge.

273
00:15:57,191 --> 00:15:59,159
Also, notice how the route

274
00:15:59,193 --> 00:16:01,261
subtly shows through the bridge pillars.

275
00:16:03,830 --> 00:16:06,733
Finally, when the map is really pitched,

276
00:16:06,767 --> 00:16:08,302
you can see the route show

277
00:16:08,335 --> 00:16:11,004
through the trees
that stand in front of it.

278
00:16:11,038 --> 00:16:14,575
Well, look, the route line color
is washed out here,

279
00:16:14,608 --> 00:16:16,176
where there is no trees.

280
00:16:16,210 --> 00:16:18,779
Let's zoom out and check
what's happening here.

281
00:16:22,850 --> 00:16:26,153
All right, this part of the route goes
through a tunnel,

282
00:16:26,186 --> 00:16:28,555
so we get transparency for it.

283
00:16:28,589 --> 00:16:32,259
ElevationRealisticStyle
and the elevated route line feature

284
00:16:32,292 --> 00:16:35,662
are supported on A12-based iOS devices.

285
00:16:35,696 --> 00:16:39,166
If I run the same app
on an older iOS device,

286
00:16:39,199 --> 00:16:44,872
I will automatically get a 2D route
on a 2D map..

287
00:16:44,905 --> 00:16:47,174
It's that simple to add an
elevated route line

288
00:16:47,207 --> 00:16:49,409
to a 3D city experience map!

289
00:16:49,443 --> 00:16:51,945
With that, I hand it back to Eric.

290
00:16:51,979 --> 00:16:53,247
Eric: Thanks, Yingxiu!

291
00:16:53,280 --> 00:16:55,249
That scooter ride across
the Golden Gate Bridge

292
00:16:55,282 --> 00:16:57,384
looks absolutely stunning!

293
00:16:57,417 --> 00:17:00,821
So that's just some of what's new
with MapKit overlays.

294
00:17:02,556 --> 00:17:05,459
Next up, let's talk about blend modes.

295
00:17:05,492 --> 00:17:09,730
This new API gives you more control
over the look and feel of your overlays

296
00:17:09,763 --> 00:17:12,833
and unlocks a whole range
of new creative possibilities.

297
00:17:14,067 --> 00:17:16,103
I'm sure many of you are already familiar

298
00:17:16,136 --> 00:17:18,705
with blend modes from photo editing apps

299
00:17:18,739 --> 00:17:21,275
or Apple's CoreGraphics API.

300
00:17:21,308 --> 00:17:23,177
During a blend operation,

301
00:17:23,210 --> 00:17:25,078
two graphical layers are combined

302
00:17:25,112 --> 00:17:26,647
following a set of equations

303
00:17:26,680 --> 00:17:28,815
specified by the blend mode.

304
00:17:28,849 --> 00:17:32,486
Now, let's look at an example
of how we might use blend modes

305
00:17:32,519 --> 00:17:34,121
in a MapKit context.

306
00:17:35,522 --> 00:17:38,458
In this scenario, I want to highlight
the area

307
00:17:38,492 --> 00:17:41,128
of the Presidio National Park
in San Francisco

308
00:17:41,161 --> 00:17:43,096
in the center of this map.

309
00:17:43,130 --> 00:17:45,599
First, I'm going to create an overlay

310
00:17:45,632 --> 00:17:47,568
covering my entire map area,

311
00:17:47,601 --> 00:17:50,003
with a cutout in the shape
of the Presidio.

312
00:17:51,338 --> 00:17:53,273
I'm not using any blend modes yet.

313
00:17:53,307 --> 00:17:55,442
This is just a plain overlay,

314
00:17:55,475 --> 00:17:58,011
in the shape of a big square doughnut.

315
00:17:58,045 --> 00:18:00,747
Next, I assign a hue blend mode

316
00:18:00,781 --> 00:18:04,384
to the overlay, with a gray fill.

317
00:18:04,418 --> 00:18:06,320
This desaturates the map

318
00:18:06,353 --> 00:18:08,288
outside of the Presidio.

319
00:18:08,322 --> 00:18:11,091
Next, I'm going to duplicate that overlay

320
00:18:11,124 --> 00:18:13,460
and assign it a hard light blend mode,

321
00:18:13,493 --> 00:18:14,928
with a dark gray fill.

322
00:18:16,263 --> 00:18:18,732
This has the effect of darkening the area

323
00:18:18,765 --> 00:18:20,567
around the Presidio.

324
00:18:20,601 --> 00:18:22,236
This already looks nice,

325
00:18:22,269 --> 00:18:23,937
but lets add another overlay.

326
00:18:23,971 --> 00:18:27,641
This time, we'll add an overlay
in the shape of the Presidio

327
00:18:27,674 --> 00:18:29,810
and assign a saturation blend mode,

328
00:18:29,843 --> 00:18:31,311
with a yellow fill.

329
00:18:32,279 --> 00:18:36,316
Whoa, that's not exactly the effect
I was aiming for here.

330
00:18:36,350 --> 00:18:38,886
The colors are way too bright.

331
00:18:38,919 --> 00:18:40,687
Let's try something else.

332
00:18:40,721 --> 00:18:43,924
We'll apply a color burn blend mode
with a gray fill.

333
00:18:44,992 --> 00:18:47,327
There, that's a little more subtle.

334
00:18:47,361 --> 00:18:48,795
Perfect!

335
00:18:48,829 --> 00:18:50,697
Now, let's look at some code.

336
00:18:52,099 --> 00:18:54,434
To enable the kind of effects we just saw,

337
00:18:54,468 --> 00:18:57,738
we added a property to MKOverlayRenderer,

338
00:18:57,771 --> 00:18:59,573
called blendMode.

339
00:18:59,606 --> 00:19:01,341
All you need to do is set

340
00:19:01,375 --> 00:19:05,245
the desired CoreGraphics blend mode
on the overlay renderer, and you're done!

341
00:19:06,113 --> 00:19:09,917
As previously mentioned, blend modes
are order dependent.

342
00:19:09,950 --> 00:19:11,885
The overlay at the bottom of the stack

343
00:19:11,919 --> 00:19:13,720
is blended with the map,

344
00:19:13,754 --> 00:19:16,290
the second-to-last overlay is then blended

345
00:19:16,323 --> 00:19:18,926
with the result
of the previous blend operation,

346
00:19:18,959 --> 00:19:21,128
and so on.

347
00:19:21,161 --> 00:19:23,764
In MapKit, the order of overlays is

348
00:19:23,797 --> 00:19:25,799
determined at insertion time.

349
00:19:25,832 --> 00:19:29,403
You can use either absolute
or relative positioning

350
00:19:29,436 --> 00:19:33,106
using one of MKMapView's
many overlay insertion functions.

351
00:19:35,576 --> 00:19:38,278
MapKit supports a wide range
of blend modes

352
00:19:38,312 --> 00:19:41,114
and we can't possibly cover
all of them today.

353
00:19:41,148 --> 00:19:42,783
I encourage you try them out.

354
00:19:43,317 --> 00:19:45,752
And that's it for blend modes!

355
00:19:45,786 --> 00:19:47,087
As you've just seen,

356
00:19:47,120 --> 00:19:49,456
blend modes are a powerful tool to control

357
00:19:49,489 --> 00:19:51,258
the styling of your map.

358
00:19:51,291 --> 00:19:54,328
You can use it
to highlight geographical areas,

359
00:19:54,361 --> 00:19:57,397
deemphasize the map to make
your content stand out,

360
00:19:57,431 --> 00:19:58,599
and so much more.

361
00:20:00,133 --> 00:20:03,637
Next up, let's talk
about Selectable Map Features!

362
00:20:03,670 --> 00:20:06,006
This has been a highly requested feature,

363
00:20:06,039 --> 00:20:07,941
and I'm really excited to show it to you!

364
00:20:09,943 --> 00:20:12,846
If you are using MapKit in your app today,

365
00:20:12,880 --> 00:20:16,683
you're likely leveraging annotations
to show the location of cities,

366
00:20:16,717 --> 00:20:19,353
points of interest, or physical objects.

367
00:20:20,554 --> 00:20:22,890
Unless you're using POI filtering,

368
00:20:22,923 --> 00:20:25,893
you are placing those annotations
on a map which already contains

369
00:20:25,926 --> 00:20:28,862
a number of similar annotations
provided by Apple.

370
00:20:29,830 --> 00:20:32,866
Up until now, your users
could only interact

371
00:20:32,900 --> 00:20:34,868
with the annotations you provided.

372
00:20:35,636 --> 00:20:39,506
In iOS 16, we're going to change that.

373
00:20:39,540 --> 00:20:42,643
Using our new Selectable Map Features API,

374
00:20:42,676 --> 00:20:47,181
you'll now have the option to let
your users select features on the map.

375
00:20:48,715 --> 00:20:51,952
Selectable map features include
points of interest,

376
00:20:51,985 --> 00:20:55,689
such as stores, restaurants,
and landmarks;

377
00:20:55,722 --> 00:20:59,059
territories, such as cities and states;

378
00:20:59,092 --> 00:21:02,629
and physical features,
such as mountain ranges and lakes.

379
00:21:03,897 --> 00:21:07,000
To adopt Selectable Map Features
in your app,

380
00:21:07,034 --> 00:21:10,737
all you need to do is go
through a few simple steps.

381
00:21:10,771 --> 00:21:14,441
First, configure which feature types
should be selectable.

382
00:21:14,474 --> 00:21:17,277
As we just saw,
there are three main feature types,

383
00:21:17,311 --> 00:21:19,279
and it might not make sense
for all of them

384
00:21:19,313 --> 00:21:21,782
to be interactive in the context
of your app.

385
00:21:22,616 --> 00:21:24,318
For points-of-interest features,

386
00:21:24,351 --> 00:21:27,087
you can also use our existing filter API

387
00:21:27,120 --> 00:21:30,490
to further restrict which
points-of-interest categories can appear

388
00:21:30,524 --> 00:21:31,959
and therefore be selectable.

389
00:21:33,627 --> 00:21:36,964
Second, implement the MKMapView
delegate callbacks

390
00:21:36,997 --> 00:21:38,932
to handle selection events.

391
00:21:38,966 --> 00:21:42,369
You are free to handle these events
however you choose.

392
00:21:42,402 --> 00:21:45,372
You might want to control how selected
features appear,

393
00:21:45,405 --> 00:21:47,674
or you might want to show
some additional UI

394
00:21:47,708 --> 00:21:49,510
in response to the selection events.

395
00:21:50,944 --> 00:21:53,480
Third, you'll want to request and display

396
00:21:53,514 --> 00:21:54,982
additional place information

397
00:21:55,015 --> 00:21:56,917
in your application's user interface.

398
00:21:57,618 --> 00:21:59,586
The information embedded
in the map feature

399
00:21:59,620 --> 00:22:01,522
is limited to what you see on screen.

400
00:22:02,756 --> 00:22:06,059
To give users more context about the place
they selected,

401
00:22:06,093 --> 00:22:08,428
you'll need to request
additional information.

402
00:22:09,196 --> 00:22:11,632
Let me walk you through the new APIs

403
00:22:11,665 --> 00:22:13,267
for each of these steps.

404
00:22:14,768 --> 00:22:17,137
We'll start with configuring
which map features

405
00:22:17,171 --> 00:22:18,839
should be selectable

406
00:22:18,872 --> 00:22:22,376
using the new selectableMapFeatures
property.

407
00:22:23,977 --> 00:22:27,714
You can choose any combination
of points of interest, territories,

408
00:22:27,748 --> 00:22:29,850
and physical features.

409
00:22:29,883 --> 00:22:32,619
Once you have configured
the selectable map features

410
00:22:32,653 --> 00:22:35,389
and the user taps one of those features,

411
00:22:35,422 --> 00:22:38,258
you'll start receiving
some new delegate callbacks

412
00:22:38,292 --> 00:22:41,695
allowing you to customize
the selection behavior.

413
00:22:41,728 --> 00:22:45,732
The first callback you'll get is
the new didSelect annotation callback.

414
00:22:46,333 --> 00:22:50,404
This callback is a great opportunity
for you to request additional data

415
00:22:50,437 --> 00:22:51,839
about the map item

416
00:22:51,872 --> 00:22:54,842
using the new request API we'll cover
in a moment.

417
00:22:56,210 --> 00:23:00,914
The second callback you'll get is
the existing viewFor annotation callback.

418
00:23:00,948 --> 00:23:03,183
This is where you can customize the view

419
00:23:03,217 --> 00:23:06,053
which will be shown
for the selected state.

420
00:23:06,086 --> 00:23:07,955
While this is existing API,

421
00:23:07,988 --> 00:23:10,991
we've added a new type of annotation class

422
00:23:11,024 --> 00:23:13,760
called MapFeatureAnnotation.

423
00:23:13,794 --> 00:23:16,463
This class will be passed to view
for annotation

424
00:23:16,496 --> 00:23:18,699
when the user selects a map feature.

425
00:23:19,800 --> 00:23:23,003
MapFeatureAnnotation
has a number of properties.

426
00:23:23,036 --> 00:23:25,138
You can inspect the FeatureType property

427
00:23:25,172 --> 00:23:26,640
to determine whether the map feature

428
00:23:26,673 --> 00:23:28,041
is a point of interest,

429
00:23:28,075 --> 00:23:30,344
a territory, or a physical feature.

430
00:23:31,345 --> 00:23:33,814
If the map feature is a point of interest,

431
00:23:33,847 --> 00:23:35,616
the pointOfInterestCategory property

432
00:23:35,649 --> 00:23:37,818
will let you know what its category is,

433
00:23:37,851 --> 00:23:40,287
and the iconStyle property will let you

434
00:23:40,320 --> 00:23:42,756
obtain additional information
about the icon,

435
00:23:42,789 --> 00:23:45,125
such as its background color

436
00:23:45,158 --> 00:23:46,727
and the icon image itself.

437
00:23:48,262 --> 00:23:51,598
Let's look at an example of how
to customize your annotation view

438
00:23:51,632 --> 00:23:53,600
using the viewFor annotation callback.

439
00:23:55,102 --> 00:23:57,738
If you want to achieve
the same selection style

440
00:23:57,771 --> 00:24:00,007
as the Maps app, all you have to do

441
00:24:00,040 --> 00:24:01,108
is return nil.

442
00:24:02,309 --> 00:24:04,845
If you want to customize
the selection style,

443
00:24:04,878 --> 00:24:06,947
you can return an annotationView,

444
00:24:06,980 --> 00:24:09,783
the same way you would
for your own annotations.

445
00:24:10,784 --> 00:24:13,554
The markerAnnotationView
is a great option.

446
00:24:13,587 --> 00:24:15,689
It will give you
the same balloon-style shape

447
00:24:15,722 --> 00:24:17,024
as the Maps app,

448
00:24:17,057 --> 00:24:18,525
a gradient treatment,

449
00:24:18,559 --> 00:24:21,428
and it allows you to choose your own color
or icon.

450
00:24:22,429 --> 00:24:26,333
In my example here, I've chosen to use
the same image obtained

451
00:24:26,366 --> 00:24:29,870
from the feature's icon style
and only change the color

452
00:24:29,903 --> 00:24:31,872
to match the application's tint color.

453
00:24:33,040 --> 00:24:35,008
If you want to go fully custom,

454
00:24:35,042 --> 00:24:37,444
you can provide
any annotation view subclass

455
00:24:37,477 --> 00:24:39,079
that you create.

456
00:24:40,047 --> 00:24:42,950
As you just saw, you can use
the feature annotation

457
00:24:42,983 --> 00:24:45,986
to retrieve visual information
about the selected feature.

458
00:24:46,854 --> 00:24:51,925
By passing the feature annotation on to
our new MKMapItemRequest API,

459
00:24:51,959 --> 00:24:55,028
you can also retrieve a map item
for the selected feature.

460
00:24:57,231 --> 00:25:00,901
This map item contains additional metadata
about the place,

461
00:25:00,934 --> 00:25:06,139
such as an address, a name,
a phone number, and a URL.

462
00:25:07,508 --> 00:25:11,144
The map item also provides a function
to punch out to the Maps app

463
00:25:11,178 --> 00:25:13,881
if your users want to see
additional metadata

464
00:25:13,914 --> 00:25:15,983
which isn't available through MapKit.

465
00:25:17,184 --> 00:25:20,220
And now, I will again hand it over
to Yingxiu.

466
00:25:20,254 --> 00:25:21,688
Yingxiu: Thank you, Eric.

467
00:25:22,956 --> 00:25:26,159
Eric just walked you through
the Selectable Map Features.

468
00:25:26,193 --> 00:25:30,063
I'm going to show you
how easy it is to leverage that API.

469
00:25:33,000 --> 00:25:36,470
For that, we will implement
our Explore feature.

470
00:25:36,503 --> 00:25:40,107
We want our users to be able to explore
some interesting places

471
00:25:40,140 --> 00:25:41,575
near the waterfront.

472
00:25:41,608 --> 00:25:43,076
If they tap on POIs,

473
00:25:43,110 --> 00:25:44,978
annotations should show up.

474
00:25:45,012 --> 00:25:48,315
We will perform a camera animation
to the tapped location,

475
00:25:48,348 --> 00:25:50,617
and show an info card from the bottom.

476
00:25:52,452 --> 00:25:55,422
First, let's filter points of interest
on the map

477
00:25:55,455 --> 00:25:59,059
and remove the categories
which are irrelevant to our tour.

478
00:26:00,661 --> 00:26:03,230
Aside from applying the filter in code,

479
00:26:03,263 --> 00:26:07,167
we can also apply it
in Interface Builder inspector.

480
00:26:07,201 --> 00:26:09,069
Let's select the map view,

481
00:26:09,102 --> 00:26:11,371
and go to inspector
on the right-hand side.

482
00:26:13,307 --> 00:26:16,243
Here, we will do an exclusion filter.

483
00:26:18,278 --> 00:26:21,048
I'll select the categories
that we don't want,

484
00:26:21,081 --> 00:26:25,319
for example: airport,

485
00:26:25,352 --> 00:26:31,925
car rental, hospital, and laundry.

486
00:26:33,227 --> 00:26:36,163
Now we should only have
desired point of interests

487
00:26:36,196 --> 00:26:37,664
on the map view.

488
00:26:42,436 --> 00:26:45,639
It's very simple to enable
Selectable Map Features.

489
00:26:45,672 --> 00:26:47,908
All we need to do is to specify

490
00:26:47,941 --> 00:26:50,911
an option set
of desired selectable features.

491
00:26:54,848 --> 00:26:59,152
In the scope of this sample app,
we'll just use points of interest,

492
00:26:59,186 --> 00:27:00,921
but keep in mind, we also support

493
00:27:00,954 --> 00:27:02,489
selectable physical features

494
00:27:02,523 --> 00:27:03,991
and territories.

495
00:27:10,397 --> 00:27:15,169
We can use the existing delegate method
mapView viewForAnnotation

496
00:27:15,202 --> 00:27:17,404
to create a view
for the feature annotation.

497
00:27:19,039 --> 00:27:22,242
Here, we'll just return nil for now...

498
00:27:26,280 --> 00:27:29,883
To use the default gradient annotation
offered by MapKit.

499
00:27:30,651 --> 00:27:32,986
We'll come back to customize it later.

500
00:27:35,756 --> 00:27:38,158
If an annotation is on Selected state,

501
00:27:38,192 --> 00:27:41,962
we will be informed
through the new delegate method

502
00:27:41,995 --> 00:27:44,598
mapView didSelectAnnotation.

503
00:27:46,200 --> 00:27:49,636
Let's use this function
to perform a camera animation

504
00:27:49,670 --> 00:27:51,839
and zoom in on the selected feature.

505
00:27:53,640 --> 00:27:58,111
First, let's cast the annotation
to featureAnnotation,

506
00:27:58,145 --> 00:28:00,814
then create a map item request with it.

507
00:28:04,751 --> 00:28:08,856
This is a new API to fetch
additional place informations

508
00:28:08,889 --> 00:28:10,691
with feature annotations.

509
00:28:11,992 --> 00:28:13,994
Let's issue the request.

510
00:28:19,099 --> 00:28:21,802
Once the fetch operation succeeds,

511
00:28:21,835 --> 00:28:24,204
we will animate to the map item.

512
00:28:27,007 --> 00:28:29,543
When the camera animation has completed,

513
00:28:29,576 --> 00:28:31,879
we will get details from the feature item

514
00:28:31,912 --> 00:28:33,647
and show them on an info card.

515
00:28:34,781 --> 00:28:36,984
Compile it and see how it looks.

516
00:28:41,555 --> 00:28:44,892
Let's check out some interesting places
at the waterfront.

517
00:28:47,261 --> 00:28:49,229
The gradient annotations show up.

518
00:28:49,263 --> 00:28:51,932
The camera animates to the tab location.

519
00:28:51,965 --> 00:28:53,667
Then the info card shows up.

520
00:28:54,601 --> 00:28:55,802
This is a museum.

521
00:28:55,836 --> 00:28:57,037
Here is the URL.

522
00:28:57,070 --> 00:28:59,039
We can check it out if we're interested.

523
00:28:59,773 --> 00:29:01,708
And we get the full address.

524
00:29:03,443 --> 00:29:05,279
If it's a landmark,

525
00:29:05,312 --> 00:29:07,748
we will get this beautiful iconography.

526
00:29:14,655 --> 00:29:16,223
Now let's go back to the code

527
00:29:16,256 --> 00:29:18,125
and customize our annotation

528
00:29:18,158 --> 00:29:19,293
for the selection state.

529
00:29:22,663 --> 00:29:25,899
Instead of nil, let's create
a MarkerAnnotationView.

530
00:29:26,700 --> 00:29:29,703
We'll cast the annotation
to featureAnnotation first,

531
00:29:29,736 --> 00:29:33,674
so we can use specific data from it
to customize the view.

532
00:29:34,875 --> 00:29:37,978
Let's tint the annotation
with a purple-ish color

533
00:29:38,011 --> 00:29:41,181
so it's in line
with our corporate identity.

534
00:29:42,950 --> 00:29:45,552
We can also customize
the annotation glyph.

535
00:29:47,054 --> 00:29:51,158
SelectedGlyphImage
is for annotations on Selected state.

536
00:29:52,659 --> 00:29:54,895
GlyphImage is smaller.

537
00:29:54,928 --> 00:29:58,332
It is the glyph for annotations
on Unselected state.

538
00:29:59,333 --> 00:30:02,202
We recommend assigning them the same glyph

539
00:30:02,236 --> 00:30:06,573
for a smooth transition
from the Unselected to Selected state.

540
00:30:08,242 --> 00:30:12,346
Let's use the icon style image we got
from the featureAnnotation.

541
00:30:13,881 --> 00:30:17,951
MKIconStyle is a new class in iOS16.

542
00:30:17,985 --> 00:30:22,689
It has the iconography and color info
of the selected POI.

543
00:30:22,723 --> 00:30:24,758
Compile and see how it looks in the app.

544
00:30:29,696 --> 00:30:30,931
Here you go!

545
00:30:30,964 --> 00:30:32,332
Now we have an annotation

546
00:30:32,366 --> 00:30:34,334
that matches our corporate colors,

547
00:30:34,368 --> 00:30:36,503
but still uses Apple iconography.

548
00:30:40,374 --> 00:30:43,143
That's how you can enable
selectable map features

549
00:30:43,177 --> 00:30:46,113
and customize annotations
in your own apps!

550
00:30:46,146 --> 00:30:48,382
With that, I hand it back to Eric.

551
00:30:49,183 --> 00:30:50,384
Eric: Thanks, Yingxiu!

552
00:30:50,417 --> 00:30:53,554
As you just saw,
the Selectable Map Features API

553
00:30:53,587 --> 00:30:55,689
enables your users to interact
with the map

554
00:30:55,722 --> 00:30:57,424
in a whole new way.

555
00:30:57,457 --> 00:30:59,359
The MapFeatureAnnotation class,

556
00:30:59,393 --> 00:31:02,262
in combination
with the MapView delegate callbacks,

557
00:31:02,296 --> 00:31:05,065
allow you to customize
the selection look and feel,

558
00:31:05,098 --> 00:31:08,235
while the MapItemRequest
allows you to resolve a feature

559
00:31:08,268 --> 00:31:10,437
to a map item, giving you access

560
00:31:10,470 --> 00:31:11,705
to additional information

561
00:31:11,738 --> 00:31:13,440
about the selected map feature.

562
00:31:14,074 --> 00:31:16,977
Next, let's talk about around Look Around!

563
00:31:18,245 --> 00:31:21,782
The Maps app introduced Look Around
in iOS 13,

564
00:31:21,815 --> 00:31:24,117
and people absolutely love it.

565
00:31:24,151 --> 00:31:25,319
You can use Look Around

566
00:31:25,352 --> 00:31:27,621
to get a real sense of a place.

567
00:31:27,654 --> 00:31:30,958
Look Around imagery offers
an incredible level of detail,

568
00:31:30,991 --> 00:31:33,994
leveraging 3D models to provide a level
of realism

569
00:31:34,027 --> 00:31:35,362
like no other map.

570
00:31:37,331 --> 00:31:39,199
Look Around is available in many places

571
00:31:39,233 --> 00:31:41,468
around the world, including these cities,

572
00:31:41,502 --> 00:31:43,036
and entire countries!

573
00:31:44,872 --> 00:31:47,908
We're continuously adding support
for new regions,

574
00:31:47,941 --> 00:31:51,111
so I again encourage you to check out
the Look Around section

575
00:31:51,144 --> 00:31:54,715
on the feature availability website
linked in the session notes.

576
00:31:54,748 --> 00:31:58,919
With iOS 16, we're bringing Look Around
to MapKit,

577
00:31:58,952 --> 00:32:01,889
and adopting it only requires
three simple steps.

578
00:32:03,590 --> 00:32:05,692
First, you'll need to check whether data

579
00:32:05,726 --> 00:32:07,694
is available for the desired location.

580
00:32:08,362 --> 00:32:11,131
Even if Look Around is available
in your target region,

581
00:32:11,164 --> 00:32:13,934
not every location can be seen
from a street,

582
00:32:13,967 --> 00:32:15,736
and therefore, Look Around imagery

583
00:32:15,769 --> 00:32:18,305
might not always be available.

584
00:32:18,338 --> 00:32:21,475
Once you've determined
whether Look Around data is available,

585
00:32:21,508 --> 00:32:22,910
you'll need to pass that data on

586
00:32:22,943 --> 00:32:25,045
to either the Look Around View Controller

587
00:32:25,078 --> 00:32:26,713
or the Look Around Snapshotter.

588
00:32:27,848 --> 00:32:30,684
And finally, if Look Around data
is available,

589
00:32:30,717 --> 00:32:32,386
you'll want to update your app UI

590
00:32:32,419 --> 00:32:35,155
to show the Look Around preview.

591
00:32:35,189 --> 00:32:37,791
Let's take a look at the new APIs
you will be using

592
00:32:37,824 --> 00:32:39,826
to accomplish those three simple tasks.

593
00:32:41,762 --> 00:32:44,631
The first step in attempting to show
a Look Around preview

594
00:32:44,665 --> 00:32:46,800
is to check for data availability.

595
00:32:46,834 --> 00:32:50,304
For this, you'll need to create
a LookAroundSceneRequest,

596
00:32:50,337 --> 00:32:54,208
which is a new class we're introducing
in iOS 16.

597
00:32:54,241 --> 00:32:57,845
You can initialize a new instance
with either a coordinate

598
00:32:57,878 --> 00:32:59,313
or a map item.

599
00:33:00,547 --> 00:33:03,984
Next, you'll want to retrieve
its scene property.

600
00:33:04,017 --> 00:33:07,855
This is an optional async property.

601
00:33:07,888 --> 00:33:11,525
If data is available, you will get back
a scene instance.

602
00:33:11,558 --> 00:33:12,926
If data is not available,

603
00:33:12,960 --> 00:33:15,128
you will get back a nil instead.

604
00:33:15,162 --> 00:33:17,297
And if there
was a problem with the request,

605
00:33:17,331 --> 00:33:18,765
an error will be thrown.

606
00:33:20,200 --> 00:33:22,402
The Look Around Scene is an opaque object

607
00:33:22,436 --> 00:33:23,871
with no properties.

608
00:33:23,904 --> 00:33:25,205
It acts as a token

609
00:33:25,239 --> 00:33:27,908
that ensures the availability
of Look Around imagery

610
00:33:27,941 --> 00:33:29,510
for a requested location.

611
00:33:30,978 --> 00:33:33,914
To show an interactive preview
of the Look Around scene,

612
00:33:33,947 --> 00:33:35,883
you simply pass the scene on

613
00:33:35,916 --> 00:33:38,652
to a new
Look Around View Controller instance

614
00:33:38,685 --> 00:33:41,121
as an init parameter

615
00:33:41,154 --> 00:33:43,857
or assign it
to the read write scene property

616
00:33:43,891 --> 00:33:46,527
of an existing instance.

617
00:33:46,560 --> 00:33:49,596
Alternatively, if all you need
is a static image,

618
00:33:49,630 --> 00:33:51,331
you can also pass the scene on

619
00:33:51,365 --> 00:33:53,934
to a new Look Around View
Snapshotter instance

620
00:33:53,967 --> 00:33:55,702
as an init parameter

621
00:33:55,736 --> 00:33:58,639
and subsequently retrieve
its snapshot async property.

622
00:34:00,174 --> 00:34:01,942
The Look Around view controller is

623
00:34:01,975 --> 00:34:04,311
designed to make it as easy as possible

624
00:34:04,344 --> 00:34:07,814
to embed a smaller static preview
of a Look Around image,

625
00:34:07,848 --> 00:34:09,683
which the user can tap on to enter

626
00:34:09,716 --> 00:34:12,219
a full-screen
Look Around interactive session.

627
00:34:13,687 --> 00:34:16,557
And now, we'll hand it over to Yingxiu
once more

628
00:34:16,590 --> 00:34:20,160
so that she can show us how easy
it really is to put it all together.

629
00:34:20,928 --> 00:34:22,930
Yingxiu: Thank you, Eric.

630
00:34:22,963 --> 00:34:26,300
Eric just showed us the immersive
Look Around experience support

631
00:34:26,333 --> 00:34:27,868
coming to MapKit.

632
00:34:27,901 --> 00:34:30,370
I'm going to show you
how straightforward it is

633
00:34:30,404 --> 00:34:32,472
to integrate it in our sample app.

634
00:34:32,506 --> 00:34:36,743
For that, we'll move on
to our last feature, Highlights.

635
00:34:36,777 --> 00:34:39,880
Users can get a realistic view
of must-see places.

636
00:34:44,251 --> 00:34:47,254
We already have a couple
of San Francisco landmark names

637
00:34:47,287 --> 00:34:49,723
in the segment control bar
on top of the screen.

638
00:34:50,757 --> 00:34:52,359
When users tap on one of them,

639
00:34:52,392 --> 00:34:54,728
we want to perform a camera animation

640
00:34:54,761 --> 00:34:55,929
to the tapped location.

641
00:34:57,030 --> 00:35:01,201
We also want to show a Look around preview
at bottom left,

642
00:35:01,235 --> 00:35:03,637
which our users can expand
to full screen.

643
00:35:04,404 --> 00:35:05,372
Let's do it!

644
00:35:06,907 --> 00:35:08,909
First we need to add a container view

645
00:35:08,942 --> 00:35:10,310
for our Look Around preview.

646
00:35:22,723 --> 00:35:24,558
Let's go to the size inspector.

647
00:35:27,661 --> 00:35:33,400
Let's give it a position and size.

648
00:35:37,171 --> 00:35:39,373
We want to hide this preview
at the beginning,

649
00:35:39,406 --> 00:35:45,512
so let's open the attributes inspector
and check Hidden.

650
00:35:48,415 --> 00:35:51,518
Next, we need to create
a Look Around view controller...

651
00:36:00,027 --> 00:36:02,362
And embed it
to the container view.

652
00:36:09,303 --> 00:36:11,138
Same as any other segue,

653
00:36:11,171 --> 00:36:13,207
I need to give it an identifier.

654
00:36:15,008 --> 00:36:16,443
Let's call it

655
00:36:16,476 --> 00:36:22,583
"presentLookAroundEmbedded."

656
00:36:27,988 --> 00:36:30,057
And import it to code so we can update
its visibility later.

657
00:36:44,071 --> 00:36:46,640
Let's name it "preview."

658
00:36:53,547 --> 00:36:56,817
Here, we already have
a LookAroundViewController declared.

659
00:36:56,850 --> 00:36:59,653
We just need to grab
the instance in the prepare function.

660
00:37:04,391 --> 00:37:06,960
Make sure the segue identifier is matched.

661
00:37:12,432 --> 00:37:16,170
Then, in the segment control function,

662
00:37:16,203 --> 00:37:19,740
we'll create a local search
with the landmark name.

663
00:37:24,511 --> 00:37:27,748
If the request succeeds,
we will get a map item

664
00:37:27,781 --> 00:37:30,484
which will be used
in the following camera animation

665
00:37:30,517 --> 00:37:32,452
and Look Around scene retrieval.

666
00:37:35,589 --> 00:37:37,124
For camera animation,

667
00:37:37,157 --> 00:37:40,861
we first need to create a camera
with the new API.

668
00:37:44,665 --> 00:37:47,568
MapCamera looking at map item.

669
00:37:47,601 --> 00:37:50,637
Let's use map view frame size
for the view size,

670
00:37:50,671 --> 00:37:52,873
and set allow pitch to true.

671
00:37:56,610 --> 00:37:59,179
This will give us
a pitch view to landmarks

672
00:37:59,213 --> 00:38:01,248
and a top-down view to other places.

673
00:38:02,482 --> 00:38:04,551
Assign the new camera.
That's it.

674
00:38:07,120 --> 00:38:09,389
Once the camera animation is completed,

675
00:38:09,423 --> 00:38:11,859
we'll show its Look Around preview.

676
00:38:15,262 --> 00:38:18,432
First, we need to determine
if the Look Around data

677
00:38:18,465 --> 00:38:20,801
is available for this map item.

678
00:38:20,834 --> 00:38:22,536
To do that, we need to use

679
00:38:22,569 --> 00:38:24,738
the new LookAroundSceneRequest class.

680
00:38:25,339 --> 00:38:28,609
Let's create our request
and pass in the map item.

681
00:38:29,610 --> 00:38:31,645
Then perform the request.

682
00:38:36,650 --> 00:38:39,620
If get scene request succeeds,

683
00:38:39,653 --> 00:38:40,787
just assign the scene

684
00:38:40,821 --> 00:38:43,724
to our LookAroundViewController.

685
00:38:43,757 --> 00:38:47,294
If there is no error but we get nil
for the scene,

686
00:38:47,327 --> 00:38:51,331
it means Look Around data
is not available at the request location.

687
00:38:53,567 --> 00:38:55,802
Finally, don't forget to show the preview.

688
00:38:57,271 --> 00:38:59,106
Let's see how it looks in the app!

689
00:39:04,144 --> 00:39:06,346
Let's try with the Ferry Building.

690
00:39:08,582 --> 00:39:09,483
There you go.

691
00:39:09,516 --> 00:39:11,919
The Ferry Building is a landmark,
so we see

692
00:39:11,952 --> 00:39:14,254
this fantastic curated camera framing

693
00:39:14,288 --> 00:39:16,056
to a hero angle,

694
00:39:16,089 --> 00:39:17,891
and the Look Around preview shows up.

695
00:39:18,825 --> 00:39:21,495
Let's try with another place, Dragon Gate.

696
00:39:23,263 --> 00:39:25,098
Dragon Gate is not a landmark,

697
00:39:25,132 --> 00:39:26,767
so we get its top-down view.

698
00:39:29,469 --> 00:39:31,939
Let's tap on the preview
to enter full screen.

699
00:39:34,174 --> 00:39:37,177
It's an interactive view,
so I can navigate around.

700
00:39:42,015 --> 00:39:45,319
I also get these beautiful icons
and labels for stores

701
00:39:45,352 --> 00:39:47,187
in the Look Around full-screen view.

702
00:39:51,792 --> 00:39:54,795
It's that easy to add
an immersive Look Around experience

703
00:39:54,828 --> 00:39:56,063
in your own app.

704
00:39:56,096 --> 00:39:57,998
With that, I hand it back to Eric.

705
00:39:58,699 --> 00:39:59,967
Eric: Thank you, Yingxiu!

706
00:40:00,000 --> 00:40:01,768
The Interface Builder support
for Look Around

707
00:40:01,802 --> 00:40:03,170
makes it look so easy!

708
00:40:03,904 --> 00:40:06,573
So we've covered a lot of topics today,

709
00:40:07,541 --> 00:40:09,810
from the automatic adoption
of the all-new map

710
00:40:09,843 --> 00:40:12,112
and the new Map Configuration API,

711
00:40:12,145 --> 00:40:14,448
new behaviors and advances for overlays,

712
00:40:14,481 --> 00:40:17,417
to all-new capabilities
like Selectable Map Features

713
00:40:17,451 --> 00:40:19,219
and Look Around support.

714
00:40:19,253 --> 00:40:20,954
We think you'll agree there's a lot here

715
00:40:20,988 --> 00:40:24,958
you can use to take the map experience
in your app to the next level,

716
00:40:24,992 --> 00:40:27,160
and we can't wait to see
what you'll accomplish with it.

717
00:40:28,028 --> 00:40:29,730
Before I go, there's a few things

718
00:40:29,763 --> 00:40:30,898
I'd like to leave you with.

719
00:40:32,332 --> 00:40:34,801
As always, your feedback is instrumental

720
00:40:34,835 --> 00:40:37,838
in helping us prioritize
what we focus on next,

721
00:40:37,871 --> 00:40:40,741
so please be sure
to use the Feedback Assistant

722
00:40:40,774 --> 00:40:43,911
to send us your bug reports
and the features you'd find

723
00:40:43,944 --> 00:40:45,279
most helpful for your app.

724
00:40:46,980 --> 00:40:50,050
In addition, we've updated
many of our existing samples

725
00:40:50,083 --> 00:40:52,319
to incorporate what we just discussed.

726
00:40:52,352 --> 00:40:53,954
We encourage you to check them out.

727
00:40:55,322 --> 00:40:58,792
And finally, we've announced a new set
of REST APIs

728
00:40:58,825 --> 00:41:00,527
you'll want to take a look at.

729
00:41:00,561 --> 00:41:02,796
We think these APIs will be really useful

730
00:41:02,829 --> 00:41:05,332
for those of you looking to move
common calls

731
00:41:05,365 --> 00:41:09,603
for geocoding, ETA determination,
and more to your server.

732
00:41:10,904 --> 00:41:13,140
For all the details, be sure to check out

733
00:41:13,173 --> 00:41:16,543
the session titled
Meet Apple Maps Server APIs.

734
00:41:17,678 --> 00:41:20,814
On behalf of the Maps team,
thanks for watching...

735
00:41:20,848 --> 00:41:22,850
both: And have a great WWDC!

736
00:41:22,883 --> 00:41:25,853
[spacey music]

