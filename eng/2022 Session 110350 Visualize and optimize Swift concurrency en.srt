1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,810 --> 00:00:12,779
Welcome to Visualize and Optimize
Swift Concurrency.

3
00:00:12,813 --> 00:00:16,016
My name is Mike,
and I work on the Swift runtime library.

4
00:00:16,049 --> 00:00:18,919
Hi, I'm Harjas,
and I work on Instruments.

5
00:00:18,952 --> 00:00:21,421
Together, we're going to
discuss ways to better understand

6
00:00:21,455 --> 00:00:24,124
your Swift Concurrency code
and make it go faster,

7
00:00:24,157 --> 00:00:28,395
including a new visualization tool
available in Instruments 14.

8
00:00:28,428 --> 00:00:32,299
Let's start off with a really quick recap
of the various parts of Swift Concurrency

9
00:00:32,332 --> 00:00:35,969
and how they work together,
to make sure you're up to speed.

10
00:00:36,003 --> 00:00:38,906
After that, we'll demo
the new concurrency instrument.

11
00:00:38,939 --> 00:00:41,775
We'll show you how we use it
to solve some real performance issues

12
00:00:41,808 --> 00:00:44,778
with an app using Swift Concurrency.

13
00:00:44,811 --> 00:00:48,115
Finally, we'll discuss the potential
problems of thread pool exhaustion

14
00:00:48,148 --> 00:00:51,552
and continuation misuse
and how to avoid them.

15
00:00:51,585 --> 00:00:54,321
Last year,
we introduced Swift Concurrency.

16
00:00:54,354 --> 00:00:58,258
This was a new language feature
that includes async/await,

17
00:00:58,292 --> 00:01:01,195
structured concurrency, and Actors.

18
00:01:01,228 --> 00:01:04,498
We've been pleased to see a great deal
of adoption of these features since then,

19
00:01:04,531 --> 00:01:07,634
both inside and outside Apple.

20
00:01:07,668 --> 00:01:10,103
Swift concurrency adds
several new features to the language

21
00:01:10,137 --> 00:01:14,875
which work together to make concurrent
programming easier and safer.

22
00:01:14,908 --> 00:01:19,012
Async/await are basic syntactic
building blocks for concurrent code.

23
00:01:19,046 --> 00:01:22,449
They allow you to create and call
functions that can suspend their work

24
00:01:22,482 --> 00:01:25,352
in the middle of execution,
then resume that work later,

25
00:01:25,385 --> 00:01:27,988
without blocking an execution thread.

26
00:01:29,256 --> 00:01:32,960
Tasks are the basic unit of work
in concurrent code.

27
00:01:32,993 --> 00:01:37,531
Tasks execute concurrent code
and manage its state and associated data.

28
00:01:37,564 --> 00:01:40,267
They contain local variables,
handle cancellation,

29
00:01:40,300 --> 00:01:44,471
and begin and suspend execution
of async code.

30
00:01:44,505 --> 00:01:47,307
Structured concurrency makes it easy
to spawn child tasks

31
00:01:47,341 --> 00:01:50,310
to run in parallel
and wait for them to complete.

32
00:01:50,344 --> 00:01:53,614
The language provides syntax
which keeps the work grouped together

33
00:01:53,647 --> 00:01:59,019
and ensures that tasks are awaited
or automatically canceled if not used.

34
00:01:59,052 --> 00:02:03,290
Actors coordinate multiple tasks
that need to access shared data.

35
00:02:03,323 --> 00:02:05,492
They isolate data from the outside,

36
00:02:05,526 --> 00:02:09,296
and allow only one task at a time
to manipulate their internal state,

37
00:02:09,329 --> 00:02:12,733
avoiding data races
from concurrent mutation.

38
00:02:12,766 --> 00:02:16,003
New in Instruments 14,
we're introducing a set of instruments

39
00:02:16,036 --> 00:02:19,506
that can capture and visualize
all of this activity in your app,

40
00:02:19,540 --> 00:02:21,842
helping you to understand
what your app is doing,

41
00:02:21,875 --> 00:02:24,645
locate problems, and improve performance.

42
00:02:24,678 --> 00:02:28,515
For a more in-depth discussion
of the fundamentals of Swift Concurrency,

43
00:02:28,549 --> 00:02:30,417
we have several videos
about these features

44
00:02:30,450 --> 00:02:32,819
linked in the Related Videos section.

45
00:02:34,288 --> 00:02:38,559
Let's take a look at optimizing an app
using Swift Concurrency code.

46
00:02:38,592 --> 00:02:41,628
Swift concurrency makes it easy to
to write correct concurrent

47
00:02:41,662 --> 00:02:43,330
and parallel code.

48
00:02:43,363 --> 00:02:48,235
However, it's still possible to write code
that misuses concurrency constructs.

49
00:02:48,268 --> 00:02:50,237
It's also possible to use them correctly

50
00:02:50,270 --> 00:02:52,606
but in a way that doesn't get the
performance benefits you were aiming for.

51
00:02:54,875 --> 00:02:57,778
There are a few common problems
that can arise when writing code

52
00:02:57,811 --> 00:03:02,349
using Swift concurrency that can cause
poor performance or bugs.

53
00:03:02,382 --> 00:03:06,353
Main Actor blocking
can cause your app to hang.

54
00:03:06,386 --> 00:03:10,324
Actor contention and thread pool
exhaustion hurt performance

55
00:03:10,357 --> 00:03:13,594
by reducing parallel execution.

56
00:03:13,627 --> 00:03:17,164
Continuation misuse
causes leaks or crashes.

57
00:03:17,197 --> 00:03:22,135
The new Swift Concurrency instrument can
help you discover and fix these problems.

58
00:03:22,169 --> 00:03:26,073
Let's take a look at each of these,
starting with main Actor blocking.

59
00:03:26,106 --> 00:03:28,876
Main Actor blocking occurs
when a long-running task

60
00:03:28,909 --> 00:03:31,378
runs on the main Actor.

61
00:03:31,411 --> 00:03:34,581
The main Actor is a special Actor
which executes all of its work

62
00:03:34,615 --> 00:03:36,483
on the main thread.

63
00:03:36,517 --> 00:03:39,052
UI work must be done on the main thread,

64
00:03:39,086 --> 00:03:43,357
and the main Actor allows you to integrate
UI code into Swift Concurrency.

65
00:03:43,390 --> 00:03:46,293
However, because the main thread
is so important for UI,

66
00:03:46,326 --> 00:03:50,964
it needs to be available and can't be
occupied by a long-running unit of work.

67
00:03:50,998 --> 00:03:55,903
When this happens, your app appears
to lock up and becomes unresponsive.

68
00:03:55,936 --> 00:03:58,772
Code running on the main Actor
must finish quickly,

69
00:03:58,805 --> 00:04:01,208
and either complete its work
or move computation

70
00:04:01,241 --> 00:04:04,011
off of the main Actor
and into the background.

71
00:04:04,044 --> 00:04:07,447
Work can be moved into the background
by putting it in a normal Actor

72
00:04:07,481 --> 00:04:09,550
or in a detached task.

73
00:04:09,583 --> 00:04:13,353
Small units of work can be executed
on the main Actor to update UI

74
00:04:13,387 --> 00:04:16,723
or perform other tasks
that must be done on the main thread.

75
00:04:16,757 --> 00:04:18,825
Let's see a demo of this in action.

76
00:04:18,859 --> 00:04:19,993
Thanks, Mike.

77
00:04:20,027 --> 00:04:22,496
Here we have
our File Squeezer application.

78
00:04:22,529 --> 00:04:25,499
We built this application
to be able to quickly compress

79
00:04:25,532 --> 00:04:27,434
all the files in a folder.

80
00:04:27,467 --> 00:04:30,304
It seems to work alright for small files.

81
00:04:30,337 --> 00:04:34,675
However, when I use larger files,
it takes much longer than expected

82
00:04:34,708 --> 00:04:39,379
and the UI is completely frozen
and does not respond to any interactions.

83
00:04:39,413 --> 00:04:42,349
This behavior is very off-putting to users

84
00:04:42,382 --> 00:04:45,252
and may make them think
that the application has crashed

85
00:04:45,285 --> 00:04:46,587
or will never finish.

86
00:04:46,620 --> 00:04:50,057
We should strive to ensure
that our UI is always responsive

87
00:04:50,090 --> 00:04:51,892
for the best user experience.

88
00:04:51,925 --> 00:04:54,328
To investigate this performance problem,

89
00:04:54,361 --> 00:04:58,131
we can use the new Swift Concurrency
template in Instruments.

90
00:04:58,165 --> 00:05:02,369
The Swift Tasks and Swift Actors
instruments provide a full suite of tools

91
00:05:02,402 --> 00:05:06,139
to help you visualize
and optimize your concurrency code.

92
00:05:06,173 --> 00:05:08,909
When you're just starting
to investigate a performance problem

93
00:05:08,942 --> 00:05:12,379
you should first take a look
at the top-level statistics

94
00:05:12,412 --> 00:05:15,215
provided to you
by the Swift Tasks instrument.

95
00:05:15,249 --> 00:05:18,085
The first of these is Running Tasks,

96
00:05:18,118 --> 00:05:22,055
which show you how many tasks
are executing simultaneously.

97
00:05:22,089 --> 00:05:24,191
Next, we have Alive Tasks,

98
00:05:24,224 --> 00:05:28,529
which show how many tasks are present
at a given point in time.

99
00:05:28,562 --> 00:05:30,998
And finally, Total Tasks;

100
00:05:31,031 --> 00:05:33,834
graph the total number of tasks
that have been created

101
00:05:33,867 --> 00:05:36,270
up until that point in time.

102
00:05:36,303 --> 00:05:39,540
When you're attempting to reduce
your application memory footprint,

103
00:05:39,573 --> 00:05:44,178
you should take a close look at
the Alive and Total Tasks statistics.

104
00:05:44,211 --> 00:05:47,047
The combination of all of these statistics

105
00:05:47,080 --> 00:05:50,617
give you a good picture of how well your
code is parallelizing

106
00:05:50,651 --> 00:05:53,854
and how many resources you are consuming.

107
00:05:53,887 --> 00:05:57,991
One of the many detail views
for this instrument is the Task Forest;

108
00:05:58,025 --> 00:06:02,729
shown in the bottom half of this window,
it provides a graphical representation

109
00:06:02,763 --> 00:06:05,599
of the parent-child relationships

110
00:06:05,632 --> 00:06:09,269
between Tasks
in structured concurrency code.

111
00:06:09,303 --> 00:06:12,005
Next, we have our Task Summary view.

112
00:06:12,039 --> 00:06:17,277
This shows how much time
each Task spends in different states.

113
00:06:17,311 --> 00:06:21,348
We have super-charged the view by allowing
you to right-click on a Task

114
00:06:21,381 --> 00:06:25,152
to be able to pin a Track
containing all the information

115
00:06:25,185 --> 00:06:27,588
about the selected Task to the timeline.

116
00:06:27,621 --> 00:06:31,992
This allows you to quickly find and learn
about Tasks of interest

117
00:06:32,025 --> 00:06:34,494
that may be running for a very long time

118
00:06:34,528 --> 00:06:38,966
or stuck waiting to get access
to an Actor.

119
00:06:38,999 --> 00:06:43,237
Once you pin a Swift Task to the timeline,
you get four key features.

120
00:06:43,270 --> 00:06:48,275
First, is the track that shows you
what state your Swift Task is in.

121
00:06:48,308 --> 00:06:53,113
Second, is the Task creation backtrace
in the extended detail view.

122
00:06:53,146 --> 00:06:56,583
Third, is the narrative view
that provides more context

123
00:06:56,617 --> 00:06:58,385
about the state a Swift Task is in.

124
00:06:58,418 --> 00:07:00,988
Such as, if it's waiting on a Task,

125
00:07:01,021 --> 00:07:04,324
it will inform you
which Task you are waiting on.

126
00:07:04,358 --> 00:07:08,428
Lastly, you have access to
the same pin action in the narrative view

127
00:07:08,462 --> 00:07:10,364
as you did in the summary view.

128
00:07:10,397 --> 00:07:13,467
So, you can pin a child Task, a thread,

129
00:07:13,500 --> 00:07:16,370
or even a Swift Actor to the timeline.

130
00:07:16,403 --> 00:07:21,808
This narrative view will be instrumental
in finding how a Swift Task is related

131
00:07:21,842 --> 00:07:25,979
to your other concurrency primitives
and the CPU.

132
00:07:26,013 --> 00:07:28,348
Now that we have seen a brief overview

133
00:07:28,382 --> 00:07:30,717
of some of the features
in the new instrument,

134
00:07:30,751 --> 00:07:33,787
let's profile our application
and optimize our code.

135
00:07:33,820 --> 00:07:38,025
We can do this by pulling up our project
in Xcode and pressing Command-I.

136
00:07:38,058 --> 00:07:40,894
This will compile our application,
open up instruments,

137
00:07:40,928 --> 00:07:44,364
and pre-select the target
to the File Squeezer application.

138
00:07:44,398 --> 00:07:48,068
From here you can pick the Swift
Concurrency option in the template picker

139
00:07:48,101 --> 00:07:49,603
and start recording.

140
00:07:52,005 --> 00:07:54,942
Once again,
I'll drop the large files onto the app.

141
00:07:56,844 --> 00:08:01,415
Again, we see that the app starts spinning
and the UI is not responsive.

142
00:08:01,448 --> 00:08:03,650
We will let this run
for a few more seconds

143
00:08:03,684 --> 00:08:07,287
so that Instruments can capture
all the information about our application.

144
00:08:08,922 --> 00:08:11,925
Now that we have a trace,
we can start investigating.

145
00:08:11,959 --> 00:08:15,095
I'm going to fullscreen this trace
to better see all the information.

146
00:08:17,798 --> 00:08:21,935
We can use option-drag
to zoom in on our area of interest.

147
00:08:24,304 --> 00:08:26,573
In the process track,

148
00:08:26,607 --> 00:08:31,111
Instruments shows us exactly
where this UI hang was occurring.

149
00:08:31,144 --> 00:08:34,581
This can be useful for cases
when it is not clear

150
00:08:34,615 --> 00:08:37,451
when the hang occurred
or how long it lasted.

151
00:08:37,484 --> 00:08:39,820
As I mentioned earlier,
a good place to start

152
00:08:39,853 --> 00:08:42,589
is the top-level Swift Task statistics.

153
00:08:42,623 --> 00:08:46,593
What catches my eye right away
is the Running Tasks count.

154
00:08:46,627 --> 00:08:49,696
For most of the time,
only one Task is running.

155
00:08:49,730 --> 00:08:51,832
This tells us part of the problem is that

156
00:08:51,865 --> 00:08:55,002
all of our work is being forced
to serialize.

157
00:08:55,035 --> 00:08:59,039
We can use the Task State summary
to find our longest running Task

158
00:08:59,072 --> 00:09:02,009
and use the pin action
to pin it to the timeline.

159
00:09:03,544 --> 00:09:08,115
The narrative view for this Task tells us
that it ran on a background thread

160
00:09:08,148 --> 00:09:09,917
for a short amount of time,

161
00:09:09,950 --> 00:09:14,321
and then ran on the Main Thread
for a long time.

162
00:09:14,354 --> 00:09:18,358
To further investigate, we can pin
the Main Thread to the timeline.

163
00:09:23,864 --> 00:09:27,668
The Main Thread is being blocked
by several long running Tasks.

164
00:09:27,701 --> 00:09:31,872
This demonstrates the issue of
Main Actor blocking that Mike spoke about.

165
00:09:31,905 --> 00:09:34,842
So the questions
we have to ask ourselves are,

166
00:09:34,875 --> 00:09:38,111
"What is this Task doing?"
and "Where did this Task come from?"

167
00:09:38,145 --> 00:09:43,217
We can switch back to the narrative view
to answer both of these questions.

168
00:09:43,250 --> 00:09:45,853
The creation backtrace in
the extended detail view

169
00:09:45,886 --> 00:09:50,457
shows that the task was created
in the compressAllFiles function.

170
00:09:50,490 --> 00:09:55,095
The narrative shows that
the Task is executing closure number one

171
00:09:55,128 --> 00:09:56,964
in compressAllFiles.

172
00:09:56,997 --> 00:10:01,268
By right-clicking on this symbol,
we can open this in the source viewer.

173
00:10:03,837 --> 00:10:08,041
Closure number one inside this function
is calling our compression work.

174
00:10:08,075 --> 00:10:12,112
Now that we know where this Task
was created and what it is doing,

175
00:10:12,145 --> 00:10:14,581
we can open our code in Xcode and adapt it

176
00:10:14,615 --> 00:10:16,917
so that we don't run
these heavy computations

177
00:10:16,950 --> 00:10:18,185
on the Main Thread.

178
00:10:18,218 --> 00:10:24,024
The compress file function is located
within the CompressionState class.

179
00:10:24,057 --> 00:10:29,129
The entire CompressionState class
is annotated to run on the @MainActor.

180
00:10:29,162 --> 00:10:32,432
This explains why the Task also ran
on the Main Thread.

181
00:10:32,466 --> 00:10:35,903
We need this entire class to be on the MainActor

182
00:10:35,936 --> 00:10:38,505
because the @Published property here

183
00:10:38,539 --> 00:10:40,908
must only be updated from the Main Thread,

184
00:10:40,941 --> 00:10:44,378
otherwise,
we could run into runtime issues.

185
00:10:44,411 --> 00:10:49,917
So, instead we could try to convert
this class into its own Actor.

186
00:10:49,950 --> 00:10:53,187
However, the compiler will tell us
that we can't do this

187
00:10:53,220 --> 00:10:57,891
because essentially we would be saying
that this shared mutable state

188
00:10:57,925 --> 00:11:01,361
needs to be protected
by two different Actors.

189
00:11:01,395 --> 00:11:04,898
But that does give us a hint
for what the real solution is.

190
00:11:04,932 --> 00:11:09,136
We have two different pieces
of mutable state here within this class.

191
00:11:09,169 --> 00:11:11,471
One piece of state,
the 'files' property,

192
00:11:11,505 --> 00:11:16,677
needs to be isolated to the MainActor
because it is observed by SwiftUI.

193
00:11:16,710 --> 00:11:19,413
But access to the other piece of state,
the logs,

194
00:11:19,446 --> 00:11:22,482
needs to be protected
from concurrent access,

195
00:11:22,516 --> 00:11:27,054
but which thread accesses logs
at any given point doesn't matter.

196
00:11:27,087 --> 00:11:32,092
Thus, it doesn't actually need
to be on the Main Actor.

197
00:11:32,125 --> 00:11:35,229
We still want to protect it
from concurrent access, though,

198
00:11:35,262 --> 00:11:38,799
so we wrap it in its own Actor.

199
00:11:38,832 --> 00:11:45,672
All we need now is add a way for Tasks
to hop between the two as needed.

200
00:11:45,706 --> 00:11:50,644
We can create a new Actor
and call it ParallelCompressor.

201
00:11:53,480 --> 00:11:59,419
We can then copy the log state into the
new Actor,

202
00:11:59,453 --> 00:12:02,122
and add some extra setup code.

203
00:12:04,324 --> 00:12:08,428
From here, we need to make these Actors
communicate with each other.

204
00:12:08,462 --> 00:12:12,266
First, let's remove the code
that referred to the logs variable

205
00:12:12,299 --> 00:12:18,472
from the CompressionState class,

206
00:12:18,505 --> 00:12:22,543
and add it
to our ParallelCompressor Actor.

207
00:12:27,681 --> 00:12:30,551
Then finally,
we need to update CompressionState

208
00:12:30,584 --> 00:12:35,255
to invoke compressFile
on the ParallelCompressor.

209
00:12:43,297 --> 00:12:48,702
With these changes,
let's test our application again.

210
00:12:48,735 --> 00:12:52,773
Once again, I'll drop the large files
onto our application.

211
00:12:55,375 --> 00:12:58,912
The UI is no longer hung,
which is a great improvement,

212
00:12:58,946 --> 00:13:01,915
but we aren't getting the speed
that we would expect.

213
00:13:01,949 --> 00:13:06,119
We really want to take full advantage
of all the cores in the machine

214
00:13:06,153 --> 00:13:08,522
to do this work as fast as possible.

215
00:13:08,555 --> 00:13:11,291
Mike, what else
should we be watching out for?

216
00:13:12,926 --> 00:13:16,129
Mike: We've solved our hang
by moving work off of the Main Actor,

217
00:13:16,163 --> 00:13:19,233
but we're still not getting
the performance we want.

218
00:13:19,266 --> 00:13:22,402
To see why,
we need to take a closer look at Actors.

219
00:13:22,436 --> 00:13:26,740
Actors make it safe for multiple tasks
to manipulate shared state.

220
00:13:26,773 --> 00:13:31,078
However, they do this by serializing
access to that shared state.

221
00:13:31,111 --> 00:13:34,781
Only one task at a time
is allowed to occupy the Actor,

222
00:13:34,815 --> 00:13:38,519
and other tasks
that need to use that Actor will wait.

223
00:13:38,552 --> 00:13:42,890
Swift concurrency allows for parallel
computation using unstructured tasks,

224
00:13:42,923 --> 00:13:45,425
task groups, and async let.

225
00:13:45,459 --> 00:13:49,563
Ideally, these constructs are able
to use many CPU cores simultaneously.

226
00:13:49,596 --> 00:13:53,767
When using Actors from such code,
beware of performing large amounts of work

227
00:13:53,800 --> 00:13:57,004
on an Actor
that's shared among these tasks.

228
00:13:57,037 --> 00:14:00,474
When multiple tasks attempt
to use the same Actor simultaneously,

229
00:14:00,507 --> 00:14:04,178
the Actor serializes
execution of those tasks.

230
00:14:04,211 --> 00:14:08,448
Because of this, we lose the performance
benefits of parallel computation.

231
00:14:11,151 --> 00:14:16,023
This is because each task must wait
for the Actor to become available.

232
00:14:16,056 --> 00:14:19,693
To fix this, we need make sure
that tasks only run on the Actor

233
00:14:19,726 --> 00:14:23,130
when they really need exclusive access
to the Actor's data.

234
00:14:23,163 --> 00:14:25,632
Everything else should run
off of the Actor.

235
00:14:25,666 --> 00:14:28,735
We divide the task into chunks.

236
00:14:28,769 --> 00:14:32,239
Some chunks must run on the Actor,
and the others don't.

237
00:14:32,272 --> 00:14:36,076
The non-Actor isolated chunks
can be executed in parallel,

238
00:14:36,109 --> 00:14:39,446
which means the computer
can finish the work much faster.

239
00:14:39,479 --> 00:14:41,248
Let's see a demo of this in action.

240
00:14:41,281 --> 00:14:43,183
Harjas: Thanks, Mike.

241
00:14:43,217 --> 00:14:47,154
Let's take a look at the trace
of our updated "File Squeezer" application

242
00:14:47,187 --> 00:14:49,790
and keep in mind
what Mike has just taught us.

243
00:14:49,823 --> 00:14:53,827
The Task Summary view shows us
that our concurrency code

244
00:14:53,861 --> 00:14:57,197
is spending an alarming amount of time
in the Enqueued state.

245
00:14:57,231 --> 00:15:02,336
This means we have a lot of Tasks waiting
to get exclusive access to an Actor.

246
00:15:02,369 --> 00:15:05,072
Let's pin one of these Tasks to learn why.

247
00:15:07,841 --> 00:15:11,278
This Task spends quite a while
waiting to get onto

248
00:15:11,311 --> 00:15:16,016
the ParallelCompressor Actor
before it runs the compression work.

249
00:15:16,049 --> 00:15:18,819
Let's go ahead
and pin the Actor to our timeline.

250
00:15:23,090 --> 00:15:27,995
Here we have some top-level data
for the ParallelCompressor Actor.

251
00:15:28,028 --> 00:15:33,267
This Actor Queue seems to be getting
blocked by some long running Tasks.

252
00:15:33,300 --> 00:15:37,271
Tasks should really only stay on an Actor
for as long as needed.

253
00:15:37,304 --> 00:15:39,673
Let's go back to the Task narrative.

254
00:15:42,543 --> 00:15:45,345
After the enqueue on ParallelCompressor,

255
00:15:45,379 --> 00:15:50,184
the Task runs in closure number one
in compressAllFiles.

256
00:15:50,217 --> 00:15:52,653
So let's start our investigation there.

257
00:15:52,686 --> 00:15:59,226
The source code shows us that this closure
is primarily running our compression work.

258
00:15:59,259 --> 00:16:04,831
Since the compressFile function
is part of the ParallelCompressor Actor,

259
00:16:04,865 --> 00:16:09,369
the entire execution of this function
happens on the Actor;

260
00:16:09,403 --> 00:16:11,872
blocking all other compression work.

261
00:16:11,905 --> 00:16:15,742
To resolve this issue,
we need to pull the compressFile function

262
00:16:15,776 --> 00:16:20,047
out of Actor-isolation
and into a detached task.

263
00:16:22,583 --> 00:16:27,054
By doing this, we can have
the detached task only on an Actor

264
00:16:27,087 --> 00:16:31,859
for as long as needed
to update the relevant mutable state.

265
00:16:31,892 --> 00:16:35,929
So now the compress function
can be executed freely,

266
00:16:35,963 --> 00:16:38,031
on any thread
in the thread pool,

267
00:16:38,065 --> 00:16:42,135
until it needs to access
Actor-protected state.

268
00:16:42,169 --> 00:16:45,739
For example, when it needs
to access the 'files' property,

269
00:16:45,772 --> 00:16:48,742
it'll move onto the Main Actor.

270
00:16:48,775 --> 00:16:53,847
But as soon as it's done there, it moves
into the "sea of concurrency" again,

271
00:16:53,881 --> 00:16:57,784
until it needs to access
the logs property,

272
00:16:57,818 --> 00:17:01,488
for which it moves on
to the ParallelCompressor Actor.

273
00:17:01,522 --> 00:17:03,590
But again, as soon as it's done there,

274
00:17:03,624 --> 00:17:08,495
it leaves the Actor again
to be executed on the thread pool.

275
00:17:08,529 --> 00:17:12,466
But of course, we don't have just one task
doing compression work;

276
00:17:12,499 --> 00:17:14,034
we have many.

277
00:17:14,067 --> 00:17:19,473
And by not being constrained to an Actor,
they can all be executed concurrently,

278
00:17:19,506 --> 00:17:22,276
only limited by the number of threads.

279
00:17:23,610 --> 00:17:28,982
Of course, each Actor
can only execute one task at a time,

280
00:17:29,016 --> 00:17:33,620
but most of the time,
our Tasks don't need to be on an Actor.

281
00:17:33,654 --> 00:17:37,724
So like Mike explained,
this allows our compression tasks

282
00:17:37,758 --> 00:17:43,463
to executed in parallel
and utilize all available CPU cores.

283
00:17:43,497 --> 00:17:45,532
So let's make this change now.

284
00:17:47,134 --> 00:17:50,971
We can mark the compressFile function
as nonisolated.

285
00:17:53,006 --> 00:17:56,176
This does result in a few compiler errors.

286
00:17:56,210 --> 00:18:00,314
By marking it as nonisolated,
we told the Swift compiler

287
00:18:00,347 --> 00:18:04,251
that we don't need access
to the shared state of this Actor.

288
00:18:04,284 --> 00:18:06,720
But that isn't entirely true.

289
00:18:06,753 --> 00:18:13,727
This log function is Actor-isolated and it
needs access to the shared mutable state.

290
00:18:13,760 --> 00:18:19,499
In order to fix this,
we need to make this function async

291
00:18:19,533 --> 00:18:24,805
and then mark all of our log invocations
with the await keyword.

292
00:18:29,376 --> 00:18:35,282
Now we need to update our task creation
to create a detached task.

293
00:18:40,554 --> 00:18:43,690
We do this to ensure
the Task does not inherit

294
00:18:43,724 --> 00:18:47,194
the Actor-context that it was created in.

295
00:18:47,227 --> 00:18:51,632
For detached tasks,
we need to explicitly capture self.

296
00:18:56,203 --> 00:18:58,005
Let's test our application again.

297
00:19:05,546 --> 00:19:09,650
The app is able to compress
all the files simultaneously

298
00:19:09,683 --> 00:19:12,219
and the UI remains responsive.

299
00:19:12,252 --> 00:19:18,258
To verify our improvements,
we can check the Swift Actors instrument.

300
00:19:18,292 --> 00:19:20,928
Looking at the ParallelCompressor Actor,

301
00:19:20,961 --> 00:19:23,597
most of the work executed on the Actor

302
00:19:23,630 --> 00:19:26,066
is only for a short amount of time

303
00:19:26,099 --> 00:19:30,571
and the queue size never gets out of hand.

304
00:19:30,604 --> 00:19:35,209
To recap, we used the Instrument
to Isolate the cause of a UI hang,

305
00:19:35,242 --> 00:19:38,612
we restructured our concurrency code
for better parallelism,

306
00:19:38,645 --> 00:19:42,382
and verified performance improvements
using data.

307
00:19:42,416 --> 00:19:46,553
Now Mike is gonna tell us about
some other potential performance issues.

308
00:19:46,587 --> 00:19:48,822
Mike: There are two common problems
I'd like to cover

309
00:19:48,856 --> 00:19:50,624
beyond what we've seen in the demo.

310
00:19:50,657 --> 00:19:53,527
First, let's talk about
thread pool exhaustion.

311
00:19:53,560 --> 00:19:55,796
Thread pool exhaustion
can hurt performance

312
00:19:55,829 --> 00:19:57,965
or even deadlock an application.

313
00:19:57,998 --> 00:20:02,803
Swift concurrency requires tasks to make
forward progress when they're running.

314
00:20:02,836 --> 00:20:06,807
When a task waits for something,
it normally does so by suspending.

315
00:20:06,840 --> 00:20:10,911
However, it's possible for code
within a task to perform a blocking call,

316
00:20:10,944 --> 00:20:15,949
such as blocking file or network IO,
or acquiring locks, without suspending.

317
00:20:15,983 --> 00:20:20,354
This breaks the requirement
for tasks to make forward progress.

318
00:20:20,387 --> 00:20:23,390
When this happens,
the task continues to occupy the thread

319
00:20:23,423 --> 00:20:27,561
where it's executing,
but it isn't actually using a CPU core.

320
00:20:27,594 --> 00:20:30,898
Because the pool of threads is limited
and some of them are blocked,

321
00:20:30,931 --> 00:20:34,902
the concurrency runtime is
unable to fully use all CPU cores.

322
00:20:34,935 --> 00:20:37,137
This reduces the amount
of parallel computation

323
00:20:37,171 --> 00:20:40,974
that can be done
and the maximum performance of your app.

324
00:20:41,008 --> 00:20:45,546
In extreme cases, when the entire
thread pool is occupied by blocked tasks,

325
00:20:45,579 --> 00:20:48,115
and they're waiting on something
that requires a new task

326
00:20:48,148 --> 00:20:52,586
to run on the thread pool,
the concurrency runtime can deadlock.

327
00:20:52,619 --> 00:20:55,756
Be sure to avoid blocking calls in tasks.

328
00:20:55,789 --> 00:21:00,160
File and network IO must be performed
using async APIs.

329
00:21:00,194 --> 00:21:03,564
Avoid waiting on condition variables
or semaphores.

330
00:21:03,597 --> 00:21:07,367
Fine-grained, briefly-held locks
are acceptable if necessary,

331
00:21:07,401 --> 00:21:09,436
but avoid locks
that have a lot of contention

332
00:21:09,469 --> 00:21:12,172
or are held for long periods of time.

333
00:21:12,206 --> 00:21:14,641
If you have code
that needs to do these things,

334
00:21:14,675 --> 00:21:17,611
move that code
outside of the concurrency thread pool–

335
00:21:17,644 --> 00:21:20,113
for example,
by running it on a Dispatch queue–

336
00:21:20,147 --> 00:21:23,951
and bridge it to the concurrency world
using continuations.

337
00:21:23,984 --> 00:21:27,654
Whenever possible,
use async APIs for blocking operations

338
00:21:27,688 --> 00:21:30,757
to keep the system operating smoothly.

339
00:21:30,791 --> 00:21:35,562
When you're using continuations,
you must be careful to use them correctly.

340
00:21:35,596 --> 00:21:40,667
Continuations are the bridge between Swift
concurrency and other forms of async code.

341
00:21:40,701 --> 00:21:43,270
A continuation suspends
the current task

342
00:21:43,303 --> 00:21:47,140
and provides a callback
which resumes the task when called.

343
00:21:47,174 --> 00:21:51,111
This can then be used
with callback-based async APIs.

344
00:21:51,144 --> 00:21:54,781
From the perspective of Swift concurrency,
the task suspends,

345
00:21:54,815 --> 00:21:58,252
and then it resumes
when the continuation is resumed.

346
00:21:58,285 --> 00:22:02,256
From the perspective of the callback-based
async API, the work begins,

347
00:22:02,289 --> 00:22:05,025
and then the callback is called
when the work completes.

348
00:22:05,058 --> 00:22:07,895
The Swift Concurrency instrument
knows about continuations

349
00:22:07,928 --> 00:22:10,097
and will mark
the time interval accordingly,

350
00:22:10,130 --> 00:22:14,101
showing you that the task was waiting on
a continuation to be called.

351
00:22:14,134 --> 00:22:16,837
Continuation callbacks have
a special requirement:

352
00:22:16,870 --> 00:22:20,574
they must be called exactly once,
no more, no less.

353
00:22:20,607 --> 00:22:23,577
This is a common requirement
in callback-based APIs,

354
00:22:23,610 --> 00:22:25,312
but it tends to be an informal one

355
00:22:25,345 --> 00:22:27,814
and is not enforced by the language,

356
00:22:27,848 --> 00:22:29,616
and oversights are common.

357
00:22:29,650 --> 00:22:32,586
Swift concurrency
makes this a hard requirement.

358
00:22:32,619 --> 00:22:36,890
If the callback is called twice,
the program will crash or misbehave.

359
00:22:36,924 --> 00:22:40,761
If the callback is never called,
the task will leak.

360
00:22:40,794 --> 00:22:43,497
In this code snippet
we use withCheckedContinuation

361
00:22:43,530 --> 00:22:45,399
to get a continuation.

362
00:22:45,432 --> 00:22:48,402
We then invoke a callback-based API.

363
00:22:48,435 --> 00:22:51,205
In the callback,
we resume the continuation.

364
00:22:51,238 --> 00:22:54,842
This meets the requirement of calling it
exactly once.

365
00:22:54,875 --> 00:22:58,212
It's important to be careful
when the code is more complex.

366
00:22:58,245 --> 00:23:00,214
On the left, we've modified the callback

367
00:23:00,247 --> 00:23:02,950
to only resume the continuation
on success.

368
00:23:02,983 --> 00:23:04,618
This is a bug.

369
00:23:04,651 --> 00:23:07,287
On failure,
the continuation will not be resumed,

370
00:23:07,321 --> 00:23:10,224
and the task will be suspended forever.

371
00:23:10,257 --> 00:23:13,627
On the right,
we're resuming the continuation twice.

372
00:23:13,660 --> 00:23:17,598
This is also a bug,
and the app will misbehave or crash.

373
00:23:17,631 --> 00:23:19,867
Both of these snippets
violate the requirement

374
00:23:19,900 --> 00:23:23,036
to resume the continuation exactly once.

375
00:23:23,070 --> 00:23:27,908
Two kinds of continuations
are available: checked and unsafe.

376
00:23:27,941 --> 00:23:32,479
Always use the withCheckedContinuation API
for continuations

377
00:23:32,513 --> 00:23:35,849
unless performance is absolutely critical.

378
00:23:35,883 --> 00:23:40,254
Checked continuations automatically
detect misuse and flag an error.

379
00:23:40,287 --> 00:23:44,958
When a checked continuation
is called twice, the continuation traps.

380
00:23:44,992 --> 00:23:47,394
When the continuation
is never called at all,

381
00:23:47,427 --> 00:23:50,931
a message is printed to the console
when the continuation is destroyed

382
00:23:50,964 --> 00:23:53,567
warning you that the continuation leaked.

383
00:23:53,600 --> 00:23:56,703
The Swift Concurrency instrument
will show the corresponding task

384
00:23:56,737 --> 00:24:00,107
stuck indefinitely
in the continuation state.

385
00:24:00,140 --> 00:24:03,610
There is much more to look into
for the new Swift Concurrency template

386
00:24:03,644 --> 00:24:04,912
in Instruments.

387
00:24:04,945 --> 00:24:08,115
You can get graphic visualization
of structured concurrency,

388
00:24:08,148 --> 00:24:12,119
view task creation calltrees, and inspect
the exact assembly instructions

389
00:24:12,152 --> 00:24:15,255
to get a full picture
of the Swift Concurrency runtime.

390
00:24:15,289 --> 00:24:18,292
To learn more about how Swift Concurrency
works under the hood,

391
00:24:18,325 --> 00:24:22,162
watch last year's session on
"Swift Concurrency: Behind the Scenes."

392
00:24:22,196 --> 00:24:23,931
And to learn more about data races,

393
00:24:23,964 --> 00:24:27,100
watch "Eliminate data races
using Swift Concurrency."

394
00:24:27,134 --> 00:24:28,302
Thanks for watching!

395
00:24:28,335 --> 00:24:31,405
And have fun
debugging your concurrency code.

