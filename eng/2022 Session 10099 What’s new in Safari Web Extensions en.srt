1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,810 --> 00:00:11,912
Kiara Rose: Hi, my name is Kiara Rose,

3
00:00:11,945 --> 00:00:15,148
and I work as a Safari Extensions
Engineer.

4
00:00:15,182 --> 00:00:19,353
Today I'm very excited to be speaking
to you all about what's new

5
00:00:19,386 --> 00:00:22,823
in Safari Web Extensions this year.

6
00:00:22,856 --> 00:00:25,259
Before we dive into today's presentation,

7
00:00:25,292 --> 00:00:27,494
I'd like to take a moment
to thank all of you

8
00:00:27,528 --> 00:00:33,634
for submitting your iOS, iPadOS,
and macOS extensions to the App Store.

9
00:00:33,667 --> 00:00:38,272
Moving forward, our goal is to continue
to implement new features and APIs

10
00:00:38,305 --> 00:00:42,142
so that you can deliver
even better experiences for your users.

11
00:00:42,176 --> 00:00:45,812
And today, I'm going to highlight
some of the exciting new features

12
00:00:45,846 --> 00:00:48,515
that we've implemented over the past year,

13
00:00:48,549 --> 00:00:52,052
such as a new Manifest version
for extensions,

14
00:00:52,085 --> 00:00:54,254
updated APIs,

15
00:00:54,288 --> 00:00:58,559
and syncing extensions
across multiple devices.

16
00:00:58,592 --> 00:01:01,261
Let's get started with Manifest version 3.

17
00:01:02,062 --> 00:01:06,867
Manifest version 3 is the next iteration
of the web extension platform.

18
00:01:06,900 --> 00:01:09,736
It introduces performance
and security improvements

19
00:01:09,770 --> 00:01:13,874
and consolidates popular extension APIs.

20
00:01:13,907 --> 00:01:18,478
For those of who have already updated
your extension to use version 3,

21
00:01:18,512 --> 00:01:23,283
your extension
will now work in Safari 15.4 and onwards.

22
00:01:23,317 --> 00:01:26,386
For those of you who haven't,
there's no need to worry,

23
00:01:26,420 --> 00:01:29,156
because we will continue
to support extensions

24
00:01:29,189 --> 00:01:32,559
using Manifest version 2 in Safari.

25
00:01:32,593 --> 00:01:35,362
One of the key new features
in Manifest version 3

26
00:01:35,395 --> 00:01:39,533
is that your extension can use a service
worker instead of a background page.

27
00:01:39,566 --> 00:01:43,470
If you're a web developer, you're likely
familiar with service workers.

28
00:01:43,504 --> 00:01:46,707
These are event driven pages
where you can register listeners

29
00:01:46,740 --> 00:01:50,110
using the addEventListener API.

30
00:01:50,143 --> 00:01:52,846
These pages are also compatible
with other browsers

31
00:01:52,880 --> 00:01:55,682
that support Manifest version 3.

32
00:01:55,716 --> 00:01:59,353
If you prefer to keep using
background pages for your extension,

33
00:01:59,386 --> 00:02:03,790
you're more than welcome to do so,
but they must be non-persistent.

34
00:02:03,824 --> 00:02:08,795
Another improvement in version 3 is
that the APIs for executing JavaScript

35
00:02:08,829 --> 00:02:14,301
and styling on a web page have moved from
the tabs API to the new scripting API.

36
00:02:15,269 --> 00:02:18,238
Most of the functionality of these methods
remain the same,

37
00:02:18,272 --> 00:02:22,242
but there are some new, additional
features that scripting provides,

38
00:02:22,276 --> 00:02:26,313
such as new ways to inject code
on a webpage,

39
00:02:26,346 --> 00:02:31,218
more options for which frames on the page
the code should be executed in,

40
00:02:31,251 --> 00:02:36,924
and the ability to decide which execution
environment the code should run in.

41
00:02:36,957 --> 00:02:39,860
Let's take a look at how the code
for the new scripting API

42
00:02:39,893 --> 00:02:42,629
differs from the tabs API.

43
00:02:42,663 --> 00:02:46,733
In this code snippet,
I'm using the tabs.executeScript API

44
00:02:46,767 --> 00:02:51,138
to change the background color
of a webpage to blue.

45
00:02:51,171 --> 00:02:55,576
And with this API, I can only
inject code that's contained in a string,

46
00:02:55,609 --> 00:02:58,278
by passing along the "code" property,

47
00:02:58,312 --> 00:03:01,515
But now, with the new scripting API,

48
00:03:01,548 --> 00:03:05,519
I can pass along a function object
containing this code.

49
00:03:05,552 --> 00:03:07,487
And like any other function,

50
00:03:07,521 --> 00:03:10,390
it can contain arguments
that can be passed in.

51
00:03:10,424 --> 00:03:13,293
This is a much more improved way
of executing a script

52
00:03:13,327 --> 00:03:17,931
because you're not confined
to writing code in a string.

53
00:03:17,965 --> 00:03:22,369
And note that with scripting,
there's a new property called target.

54
00:03:22,402 --> 00:03:26,540
This property is used to specify
where the script should run.

55
00:03:26,573 --> 00:03:28,509
In order to execute a script,

56
00:03:28,542 --> 00:03:33,347
you have to specify the ID of the tab
you want to script to execute in.

57
00:03:33,380 --> 00:03:37,651
This API will return an error
if the tab ID isn't specified.

58
00:03:37,684 --> 00:03:41,321
Then, if you'd like to select which frames
of the webpage

59
00:03:41,355 --> 00:03:45,726
to inject the code,
you can specify the frame IDs.

60
00:03:45,759 --> 00:03:50,264
Note that with the tabs API,
you can only specify one ID.

61
00:03:50,297 --> 00:03:55,035
But with scripting, you can specify
multiple IDs.

62
00:03:55,068 --> 00:03:57,337
But let's say I have a lot more code

63
00:03:57,371 --> 00:04:02,543
and it would look much cleaner
if I could contain it in multiple files.

64
00:04:02,576 --> 00:04:05,379
In the tabs.executeScript API,

65
00:04:05,412 --> 00:04:08,348
I can only specify one file,

66
00:04:08,382 --> 00:04:13,654
but in scripting.executeScript,
I can specify multiple files.

67
00:04:13,687 --> 00:04:17,224
Similarly, the same can be done
for insertCSS,

68
00:04:17,257 --> 00:04:20,594
where you can inject styling
on a webpage,

69
00:04:20,627 --> 00:04:24,531
and the same for removeCSS
where you can remove injected styling

70
00:04:24,565 --> 00:04:26,066
from a webpage.

71
00:04:26,099 --> 00:04:31,004
These APIs are available to use
in both Manifest versions 2 and 3.

72
00:04:31,038 --> 00:04:37,044
However, the tabs.executeScript APIs
are not available in version 3.

73
00:04:37,077 --> 00:04:39,513
In addition to the new scripting API,

74
00:04:39,546 --> 00:04:43,717
there have been some slight modifications
to a few other APIs as well.

75
00:04:43,750 --> 00:04:47,521
One of these modifications
is for web_accessible_resources.

76
00:04:48,755 --> 00:04:52,893
In Manifest version 2,
if you want to include resources,

77
00:04:52,926 --> 00:04:55,996
you'd do so by passing along
an array of files

78
00:04:56,029 --> 00:04:58,599
you'd like a webpage to have access to.

79
00:04:58,632 --> 00:05:02,536
But this can be problematic
since it'd give any webpage access

80
00:05:02,569 --> 00:05:06,139
to all the resources
you specify in the Manifest.

81
00:05:07,374 --> 00:05:09,977
With the new format in version 3,

82
00:05:10,010 --> 00:05:14,948
you're in control of which resources
are available on any given site.

83
00:05:14,982 --> 00:05:17,451
Let's take a look at an example.

84
00:05:17,484 --> 00:05:20,654
Previously,
the cookie and pie images were available

85
00:05:20,687 --> 00:05:23,757
on every site the extension had access to.

86
00:05:23,790 --> 00:05:26,126
But now, with version 3,

87
00:05:26,159 --> 00:05:30,397
I can make the pie image available
only on apple.com URLs,

88
00:05:30,430 --> 00:05:34,501
and the cookie image
just on webkit.org pages.

89
00:05:34,535 --> 00:05:37,104
Now let's take a look
at the modifications

90
00:05:37,137 --> 00:05:40,274
to the browser_action and page_action
APIs.

91
00:05:41,608 --> 00:05:46,713
In Manifest version 2, the actions
were specified distinctly like this.

92
00:05:46,747 --> 00:05:49,750
But since these
APIs fulfill similar roles,

93
00:05:49,783 --> 00:05:54,855
they've been consolidated to use just
one API in version 3, which is action.

94
00:05:56,256 --> 00:05:59,860
We've also made updates to how
you declare content security policies

95
00:05:59,893 --> 00:06:01,962
for your extension.

96
00:06:01,995 --> 00:06:06,900
In version 2, an extension's policy
was defined using a string.

97
00:06:06,934 --> 00:06:10,838
However, in version 3,
the policy is defined

98
00:06:10,871 --> 00:06:15,242
using an object
with the key "extension_pages".

99
00:06:15,275 --> 00:06:18,412
It's important to note
that remote sources for scripts

100
00:06:18,445 --> 00:06:21,381
are no longer allowed for version 3.

101
00:06:21,415 --> 00:06:24,518
The final API change has been
to the deprecated

102
00:06:24,551 --> 00:06:28,388
browser.extension.getURL API.

103
00:06:28,422 --> 00:06:31,658
This API is no longer supported
in version 3.

104
00:06:31,692 --> 00:06:35,929
Instead, use the equivalent API
in browser.runtime.

105
00:06:35,963 --> 00:06:40,133
So I've talked about the new features
introduced in Manifest version 3,

106
00:06:40,167 --> 00:06:43,670
now let's step through the process
of updating your extensions

107
00:06:43,704 --> 00:06:46,173
so that you can use these new features.

108
00:06:47,774 --> 00:06:51,178
I'll update the Sea Creator extension
from last year's presentation

109
00:06:51,211 --> 00:06:54,815
to use Manifest version 3.

110
00:06:54,848 --> 00:07:00,020
This extension replaces all occurrences
of the word fish with an emoji.

111
00:07:00,053 --> 00:07:04,491
The first thing I'll do is change
the version number from 2 to 3.

112
00:07:06,660 --> 00:07:10,163
And even though I can still use
a non-persistent background page

113
00:07:10,197 --> 00:07:13,967
for version 3,
I'll update this to use a service worker

114
00:07:14,001 --> 00:07:17,104
so that my extension
will be compatible with Chrome.

115
00:07:19,406 --> 00:07:23,510
Lastly,
I'll change browser_action to action.

116
00:07:25,712 --> 00:07:28,315
And in terms of the structure
of the Manifest,

117
00:07:28,348 --> 00:07:31,185
these are the key changes I'll need to
make to have this extension

118
00:07:31,218 --> 00:07:34,521
be compatible with the new
specifications in version 3.

119
00:07:34,555 --> 00:07:40,360
So to test this out,
I'll build the extension,

120
00:07:40,394 --> 00:07:42,763
and enable it in Safari.

121
00:07:47,835 --> 00:07:51,505
Then I'll navigate to a webkit.org
blog page

122
00:07:51,538 --> 00:07:55,175
where I'll use this extension to replace
every instance of the word fish

123
00:07:55,209 --> 00:07:57,511
with a fish emoji.

124
00:07:59,213 --> 00:08:01,548
But it looks like something went wrong.

125
00:08:01,582 --> 00:08:05,686
As you can see, none of the words on this
page have been replaced with an emoji.

126
00:08:05,719 --> 00:08:08,822
Let's inspect the popover
to see if there are any error messages.

127
00:08:15,429 --> 00:08:18,398
In the console tab,
I see that there is an error message

128
00:08:18,432 --> 00:08:22,836
stating that browser.tabs.executeScript
is undefined.

129
00:08:22,870 --> 00:08:26,907
That's because this API
is no longer available in version 3,

130
00:08:26,940 --> 00:08:31,879
so I should update my extension
to use the new scripting API instead.

131
00:08:31,912 --> 00:08:35,983
In Xcode, I'll go back
to the popup.js file,

132
00:08:36,016 --> 00:08:39,453
and then I'll change this line
to use scripting instead.

133
00:08:42,256 --> 00:08:44,291
I'll add the target property,

134
00:08:44,324 --> 00:08:48,328
which is used to specify
where the script should be injected into.

135
00:08:50,230 --> 00:08:52,232
And with the new scripting API,

136
00:08:52,266 --> 00:08:54,735
I'll have to specify the ID of the tab.

137
00:08:54,768 --> 00:08:57,838
I can do this by using
the tabs.getCurrent API

138
00:08:57,871 --> 00:09:01,308
to get an object containing
the information of the current tab.

139
00:09:08,048 --> 00:09:12,319
Then I can use that object
to retrieve the tab ID.

140
00:09:15,556 --> 00:09:18,892
Next, I'll add the file
containing the script to run.

141
00:09:21,094 --> 00:09:24,565
Finally, the last change I'll make
is to add the scripting permission

142
00:09:24,598 --> 00:09:26,466
in the Manifest.

143
00:09:29,803 --> 00:09:34,608
I'll go ahead and build the extension

144
00:09:34,641 --> 00:09:38,278
and use these changes in Safari.

145
00:09:38,312 --> 00:09:41,682
And as you can see,
this extension now works in Safari,

146
00:09:41,715 --> 00:09:44,318
using the new features
in Manifest version 3.

147
00:09:44,351 --> 00:09:47,221
So that's how simple it is
to upgrade your extension.

148
00:09:47,254 --> 00:09:49,990
But if you're not yet comfortable
with these new changes,

149
00:09:50,023 --> 00:09:53,193
a lot of the features
such as scripting and services workers

150
00:09:53,227 --> 00:09:56,230
are also available to use in version 2.

151
00:09:56,263 --> 00:10:00,834
Now let's take a look at some of the APIs
we've updated this year,

152
00:10:00,868 --> 00:10:03,437
starting with declarative net request.

153
00:10:03,470 --> 00:10:06,607
Declarative net request is
a content blocking API

154
00:10:06,640 --> 00:10:10,878
that provides web extensions with a fast
and privacy preserving way

155
00:10:10,911 --> 00:10:15,182
to block or modify network requests
using rulesets.

156
00:10:15,215 --> 00:10:18,819
This API allows you to delegate
all the work of intercepting

157
00:10:18,852 --> 00:10:22,723
and modifying requests off to Safari
and all you have to do

158
00:10:22,756 --> 00:10:26,293
is specify the content blocking rules
that should be applied.

159
00:10:26,326 --> 00:10:29,396
You can specify a ruleset in the Manifest.

160
00:10:30,831 --> 00:10:34,468
Here I've added the declarative
net request permission,

161
00:10:34,501 --> 00:10:37,204
and I've used
the declarative_net_request key

162
00:10:37,237 --> 00:10:40,541
to add one ruleset that should applied
to all pages.

163
00:10:40,574 --> 00:10:45,245
Previously, I could only declare
up to 10 rulesets in the Manifest.

164
00:10:45,279 --> 00:10:48,282
But now with the new updates
to this feature,

165
00:10:48,315 --> 00:10:50,617
you can declare up to 50 rulesets,

166
00:10:50,651 --> 00:10:54,488
which means your extension
can be more customizable.

167
00:10:54,521 --> 00:10:59,760
But keep in mind that only 10 of these
rulesets can be enabled at once.

168
00:10:59,793 --> 00:11:03,297
For more information
on how to create rulesets,

169
00:11:03,330 --> 00:11:06,700
check out last year's presentation
on Safari Web Extensions,

170
00:11:06,733 --> 00:11:09,703
where we go into more depth on this API.

171
00:11:09,736 --> 00:11:13,841
Let's move on to some of the new features
for declarative net request.

172
00:11:13,874 --> 00:11:17,778
Previously, you could only declare
rulesets in the Manifest,

173
00:11:17,811 --> 00:11:21,515
but now we've implemented
the following two APIs

174
00:11:21,548 --> 00:11:25,118
that will allow you
to update your rules dynamically.

175
00:11:25,152 --> 00:11:28,322
The first API is updateSessionRules,

176
00:11:28,355 --> 00:11:31,959
which will allow you to add or remove
rules for your extension.

177
00:11:31,992 --> 00:11:35,195
But it's important to note
that these rules will not persist

178
00:11:35,229 --> 00:11:39,266
across browser sessions
or extension updates.

179
00:11:39,299 --> 00:11:41,902
If you would like to update rules
that will persist,

180
00:11:41,935 --> 00:11:45,839
use the updateDynamicRules API instead.

181
00:11:45,873 --> 00:11:48,141
This will allow you to update
your blocking rules

182
00:11:48,175 --> 00:11:50,777
without updating your entire extension.

183
00:11:50,811 --> 00:11:53,547
Let's take a look
at how we can use one of these APIs

184
00:11:53,580 --> 00:11:56,984
to make modifications to our rulesets.

185
00:11:57,017 --> 00:12:01,788
I'm going to block some content on
webpages using the sea creator extension,

186
00:12:01,822 --> 00:12:06,827
and then, I'll use the new APIs
to unblock content on select pages.

187
00:12:06,860 --> 00:12:09,563
In the extensions Manifest,
the first thing I'll do

188
00:12:09,596 --> 00:12:11,932
is add the declarative net request
permission.

189
00:12:15,235 --> 00:12:20,040
Then, I'll use the declarative net request
key to add a ruleset.

190
00:12:24,912 --> 00:12:30,517
The rule that's being applied
is located in the rules.json file.

191
00:12:30,551 --> 00:12:36,356
In this file, I've declared one rule
which blocks all images on all URLs.

192
00:12:36,390 --> 00:12:40,394
Let's build the extension and
see how this rule is applied in Safari.

193
00:12:43,664 --> 00:12:47,267
As you can see,
the image on this page has disappeared.

194
00:12:47,301 --> 00:12:49,736
Which is exactly what we expected.

195
00:12:49,770 --> 00:12:54,608
This shows that Safari has successfully
applied our content blocking rule.

196
00:12:54,641 --> 00:12:58,178
And if I navigate
to this Wikipedia page on fish,

197
00:12:58,212 --> 00:13:01,682
I'll see that the image on this site
has been blocked as well.

198
00:13:01,715 --> 00:13:05,352
But let's say we want to update
our rules to block images on all pages

199
00:13:05,385 --> 00:13:09,022
expect webkit.org blog pages.

200
00:13:09,056 --> 00:13:12,993
Using one of the updated APIs
for declarative net request,

201
00:13:13,026 --> 00:13:16,496
we can do just that.

202
00:13:16,530 --> 00:13:20,067
Let's go back to Xcode
and make some changes.

203
00:13:20,100 --> 00:13:22,002
In the popup.js file,

204
00:13:22,035 --> 00:13:25,806
I'll declare a function
to update our content blocking rules.

205
00:13:28,275 --> 00:13:33,547
I'll set the rule to allow images
on webkit.org/blog-files pages.

206
00:13:33,580 --> 00:13:39,987
Then, I'll use the updateSessionRules API
to add this rule to our ruleset.

207
00:13:40,020 --> 00:13:44,725
Lastly, I'll build the extension
and test our changes in Safari.

208
00:13:48,462 --> 00:13:52,099
As you can see,
the image on this blog post has loaded,

209
00:13:52,132 --> 00:13:56,370
showing that our new rule to allow images
on this site has worked.

210
00:13:56,403 --> 00:13:58,605
And if I go to the Wikipedia site,

211
00:13:58,639 --> 00:14:01,942
we'll see that the images on this page
are still blocked,

212
00:14:01,975 --> 00:14:05,579
showing that the new rule
wasn't applied to this page.

213
00:14:05,612 --> 00:14:08,549
So that's how you can use the new
declarative net request APIs

214
00:14:08,582 --> 00:14:11,018
to update your content blocking rules.

215
00:14:12,219 --> 00:14:17,024
Now, let's take a look at how your
extension can communicate with a webpage.

216
00:14:17,057 --> 00:14:20,994
This awesome feature allows websites
to create custom behavior

217
00:14:21,028 --> 00:14:24,431
if the user has your extension enabled.

218
00:14:24,464 --> 00:14:28,535
The API is called externally_connectable.

219
00:14:28,569 --> 00:14:32,940
To use it, you declare match patterns
in the Manifest.

220
00:14:32,973 --> 00:14:37,344
These match patterns determine which pages
can communicate with your extension.

221
00:14:39,313 --> 00:14:43,250
And an important thing to note
is that this feature only works

222
00:14:43,283 --> 00:14:45,986
using the browser namespace.

223
00:14:46,019 --> 00:14:50,324
And lastly, the user has to grant
your extension access to the page

224
00:14:50,357 --> 00:14:54,628
before it can send or receive messages.

225
00:14:54,661 --> 00:14:59,433
Let's take a look at the code you'd add
in the web page to use this feature.

226
00:14:59,466 --> 00:15:02,703
First, you'll need to get the extensionID.

227
00:15:02,736 --> 00:15:04,905
It's the bundle identifier
of the extension

228
00:15:04,938 --> 00:15:08,175
and the team identifier in this format.

229
00:15:08,208 --> 00:15:11,979
You can find your team identifier
on developer.apple.com,

230
00:15:12,012 --> 00:15:14,982
in the membership tab
in your account settings.

231
00:15:15,015 --> 00:15:21,455
Then you'll use the send message API
to post a message to the extension.

232
00:15:21,488 --> 00:15:24,391
You can handle the response
you'll receive from the extension

233
00:15:24,424 --> 00:15:27,294
by passing along a function.

234
00:15:27,327 --> 00:15:30,063
Now let's take a look at the code
your extension will have

235
00:15:30,097 --> 00:15:32,199
to receive messages.

236
00:15:32,232 --> 00:15:34,768
Your extension can receive messages
from the webpage

237
00:15:34,801 --> 00:15:38,672
by listening to the event
called onMessageExternal.

238
00:15:38,705 --> 00:15:41,675
The extension can send a message
back to the web page

239
00:15:41,708 --> 00:15:45,045
using the method passed
to the event listener.

240
00:15:45,078 --> 00:15:49,383
Because there are different extension
web stores for different browsers,

241
00:15:49,416 --> 00:15:52,252
extensions can have
many different identifiers.

242
00:15:52,286 --> 00:15:55,622
So you'll need to determine
the correct one to use

243
00:15:55,656 --> 00:15:58,692
to make sure you're messaging
a Safari web extension,

244
00:15:58,725 --> 00:16:01,528
and not a Chrome or Edge extension.

245
00:16:01,562 --> 00:16:07,167
To do this, you can use
the browser.runtime.sendMessage API

246
00:16:07,201 --> 00:16:10,704
with a call to Promise.all.

247
00:16:10,737 --> 00:16:16,143
Next, let's look at some example code
that will help you do this.

248
00:16:16,176 --> 00:16:19,379
From the webpage,
you can broadcast multiple messages

249
00:16:19,413 --> 00:16:21,715
using multiple extension IDs.

250
00:16:21,748 --> 00:16:24,751
You'll get exactly one response
from an extension

251
00:16:24,785 --> 00:16:30,791
and that'll let you know which extension
ID to use for further communication.

252
00:16:30,824 --> 00:16:36,363
Here, I have a function
called determineExtensionID.

253
00:16:36,396 --> 00:16:39,066
This function sends a message
to the extension

254
00:16:39,099 --> 00:16:43,370
using the browser.runtime.sendMessage API.

255
00:16:43,403 --> 00:16:46,173
If you have multiple IDs
and you want to determine

256
00:16:46,206 --> 00:16:50,077
the correct one to use,
then you can use Promise.all

257
00:16:50,110 --> 00:16:55,249
to make multiple calls
using the determineExtensionID function.

258
00:16:55,282 --> 00:16:59,386
Promise.all takes an array of promises
and then returns a single promise

259
00:16:59,419 --> 00:17:03,223
with an array
of all of the resolved values.

260
00:17:03,257 --> 00:17:08,195
You can use this array to find
the extension that the user has installed.

261
00:17:08,228 --> 00:17:10,364
In the extension's background page,

262
00:17:10,397 --> 00:17:14,334
you'll need to listen for a message
from the web page.

263
00:17:14,368 --> 00:17:17,304
When you receive the message,
you'll need to send one back

264
00:17:17,337 --> 00:17:20,874
to tell the web page
that your extension is installed.

265
00:17:20,908 --> 00:17:24,244
So that's how you can use
the new externally_connectable API

266
00:17:24,278 --> 00:17:28,081
to allow your extension
to communicate with a web page.

267
00:17:28,115 --> 00:17:31,251
The next feature we've updated
is a personal favorite of mine,

268
00:17:31,285 --> 00:17:33,420
and that is unlimitedStorage.

269
00:17:33,453 --> 00:17:37,824
And I'm so happy to announce that
unlimitedStorage is actually unlimited!

270
00:17:37,858 --> 00:17:41,328
Given that this feature
was so highly requested by you,

271
00:17:41,361 --> 00:17:46,567
we're excited to share that your extension
will no longer have a 10 MB quota.

272
00:17:46,600 --> 00:17:50,404
You are free to use
as much data as you see fit.

273
00:17:50,437 --> 00:17:52,773
Although, it's important to note

274
00:17:52,806 --> 00:17:55,976
that users have the ability
to clear the data being used

275
00:17:56,009 --> 00:17:59,313
by your extension at any given time.

276
00:17:59,346 --> 00:18:02,616
So be sure to only store data
that's strictly necessary

277
00:18:02,649 --> 00:18:06,386
so users don't feel inclined
to clear your data.

278
00:18:06,420 --> 00:18:10,557
To use this feature, simply claim the
storage and unlimitedStorage permission

279
00:18:10,591 --> 00:18:14,361
in the Manifest, and you're good to go.

280
00:18:14,394 --> 00:18:18,999
So those were all of the APIs we've
updated for web extensions this past year.

281
00:18:19,032 --> 00:18:23,470
Lastly, let's talk about a new feature
that will easily allow your users

282
00:18:23,504 --> 00:18:27,274
to get your extension
on all of their devices.

283
00:18:27,307 --> 00:18:33,480
In Safari 16, we've made the experience
of using extensions more seamless.

284
00:18:33,514 --> 00:18:37,184
If a user turns on your extension
on one of their devices,

285
00:18:37,217 --> 00:18:40,821
it'll be turned on
on all of their devices.

286
00:18:40,854 --> 00:18:46,927
On top of this, we've made the process of
downloading your extension much simpler.

287
00:18:46,960 --> 00:18:49,129
Let's take a look at how this works.

288
00:18:49,162 --> 00:18:53,901
Let's say a user has one of
your extensions enabled on their Mac.

289
00:18:53,934 --> 00:18:57,404
In Extension Settings
on any of their other devices,

290
00:18:57,437 --> 00:19:00,440
they'll be given the option
to download your extension.

291
00:19:00,474 --> 00:19:03,510
Once it's downloaded,
it'll automatically be enabled

292
00:19:03,544 --> 00:19:07,781
on their device,
improving their user experience.

293
00:19:07,814 --> 00:19:10,851
Now, let's dive into
how you can set this up

294
00:19:10,884 --> 00:19:13,487
for web extensions and content blockers.

295
00:19:13,520 --> 00:19:17,925
First, we recommend that you list
your extension for iOS,

296
00:19:17,958 --> 00:19:22,329
iPadOS, and macOS
when submitting to the App Store.

297
00:19:22,362 --> 00:19:28,001
This way, your extension will be available
across all of your users' devices.

298
00:19:28,035 --> 00:19:31,839
Then, to allow your extension
to sync across their devices,

299
00:19:31,872 --> 00:19:35,375
you'll need to use one of
the following two methods.

300
00:19:35,409 --> 00:19:37,945
The simplest and recommended way,

301
00:19:37,978 --> 00:19:41,782
is to adopt universal purchase.

302
00:19:41,815 --> 00:19:46,653
Universal purchase allows your users to
enjoy your extension across all platforms,

303
00:19:46,687 --> 00:19:49,690
by only purchasing it once.

304
00:19:49,723 --> 00:19:52,826
If you use this method, you're all set.

305
00:19:52,860 --> 00:19:55,128
Your users will get all of the features
I've shown

306
00:19:55,162 --> 00:19:58,999
after they download your extension once.

307
00:19:59,032 --> 00:20:00,934
To set up universal purchase,

308
00:20:00,968 --> 00:20:03,704
you'll need to use
a single bundle identifier

309
00:20:03,737 --> 00:20:08,242
across your extensions so that it can be
associated with the same app record

310
00:20:08,275 --> 00:20:11,411
in App Store Connect.

311
00:20:11,445 --> 00:20:14,014
For more information on how to do this,

312
00:20:14,047 --> 00:20:17,551
check out our documentation
on how to set up universal purchase

313
00:20:17,584 --> 00:20:19,353
for your extensions.

314
00:20:19,386 --> 00:20:22,022
But if you choose not to set up
universal purchase,

315
00:20:22,055 --> 00:20:24,491
you can manually link your apps.

316
00:20:24,525 --> 00:20:29,162
To do this, you'll use Xcode to add
bundle identifiers in the info plist

317
00:20:29,196 --> 00:20:32,432
for the apps
and extensions you'd like to sync.

318
00:20:32,466 --> 00:20:36,503
To sync your iOS app
and extension with the macOS ones,

319
00:20:36,537 --> 00:20:40,407
you'll need to use specific keys
in the info plist.

320
00:20:40,440 --> 00:20:44,178
You'll put this key
in your macOS app plist,

321
00:20:44,211 --> 00:20:48,215
and this key in
the macOS extension plist.

322
00:20:48,248 --> 00:20:53,720
Similarly, you'll follow the same process
for syncing your macOS app.

323
00:20:53,754 --> 00:20:58,125
By adding this key to the iOS app plist

324
00:20:58,158 --> 00:21:01,962
and this key to the iOS extension plist.

325
00:21:01,995 --> 00:21:04,364
Let's see how this works in Xcode.

326
00:21:04,398 --> 00:21:09,670
In Xcode, the first thing we'll need to do
is update the settings for each target

327
00:21:09,703 --> 00:21:14,341
to include the bundle identifiers of
the extensions and apps we want to sync.

328
00:21:14,374 --> 00:21:18,712
I'll start by adding the bundle identifier
for the corresponding macOS app

329
00:21:18,745 --> 00:21:21,715
in the info plist for the iOS app.

330
00:21:24,051 --> 00:21:28,021
And as you can see, I've done the same
process for the macOS app

331
00:21:28,055 --> 00:21:30,991
by adding the iOS app bundle identifier.

332
00:21:31,024 --> 00:21:37,497
And similarly for iOS extension by adding
the macOS extension bundle identifier.

333
00:21:37,531 --> 00:21:40,133
And lastly, for the macOS extension

334
00:21:40,167 --> 00:21:43,871
by adding the iOS extension
bundle identifier.

335
00:21:43,904 --> 00:21:46,874
And that's how simple it is
to link your apps and extensions

336
00:21:46,907 --> 00:21:50,043
so that your users
can use them everywhere.

337
00:21:50,077 --> 00:21:54,314
To recap, you can make
this feature available for your users

338
00:21:54,348 --> 00:21:57,384
by either setting up universal purchase

339
00:21:57,417 --> 00:22:04,491
or by adding bundle identifiers for each
iOS and macOS app and extension in Xcode.

340
00:22:04,525 --> 00:22:08,896
Today we discussed Manifest version 3,

341
00:22:08,929 --> 00:22:10,664
the APIs we've updated,

342
00:22:10,697 --> 00:22:14,434
and syncing extensions
across multiple devices.

343
00:22:14,468 --> 00:22:17,838
I hope you're as excited as I am
about these all these new features

344
00:22:17,871 --> 00:22:20,174
for Safari Web Extensions.

345
00:22:20,207 --> 00:22:24,244
Feel free to download the sample project
containing the code from today's session

346
00:22:24,278 --> 00:22:28,315
and to play around
with some of the APIs we featured.

347
00:22:28,348 --> 00:22:30,951
Next, we'd love to know what you think.

348
00:22:30,984 --> 00:22:34,021
Use Feedback Assistant to file bugs
or chat with us

349
00:22:34,054 --> 00:22:37,057
on the Safari Developer Forums
to provide feedback

350
00:22:37,090 --> 00:22:40,928
on how we can make developing extensions
better for you.

351
00:22:40,961 --> 00:22:43,397
No, really.
We want to know what you think!

352
00:22:43,430 --> 00:22:46,400
Consider joining
the WebExtensions community group

353
00:22:46,433 --> 00:22:49,236
to shape the future of web extensions.

354
00:22:49,269 --> 00:22:55,108
Finally, check out our WWDC presentation
on creating web inspector extensions.

355
00:22:55,142 --> 00:22:59,913
Thanks for tuning in to this session,
and have a great rest of your WWDC.

