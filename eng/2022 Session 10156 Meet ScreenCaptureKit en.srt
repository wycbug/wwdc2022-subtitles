1
00:00:01,368 --> 00:00:07,374
[spacey music]

2
00:00:09,710 --> 00:00:11,211
Ernest: Hello and welcome.

3
00:00:11,245 --> 00:00:13,480
My name is Ernest,
and I'm a software engineer

4
00:00:13,514 --> 00:00:15,382
on the ScreenCaptureKit team.

5
00:00:15,415 --> 00:00:17,684
Over the past couple of years,

6
00:00:17,718 --> 00:00:20,787
we all have been more reliant
on remote collaboration,

7
00:00:20,821 --> 00:00:22,990
which often involves screen sharing.

8
00:00:25,659 --> 00:00:27,094
On top of that,

9
00:00:27,127 --> 00:00:31,532
streaming gameplay using
a recording application like OBS Studio,

10
00:00:31,565 --> 00:00:33,700
and content creation as a whole,

11
00:00:33,734 --> 00:00:38,839
has been a continually growing area
for people's education and entertainment.

12
00:00:40,574 --> 00:00:43,177
With this in mind,
we created a framework

13
00:00:43,210 --> 00:00:48,115
that meets developers' needs
for performant and robust screen capture.

14
00:00:48,148 --> 00:00:49,616
Meet ScreenCaptureKit!

15
00:00:51,618 --> 00:00:55,055
ScreenCaptureKit is a brand-new framework
on macOS

16
00:00:55,088 --> 00:00:56,823
that is designed to help you create

17
00:00:56,857 --> 00:00:59,259
your application's
screen sharing experience.

18
00:01:00,227 --> 00:01:04,064
ScreenCaptureKit provides APIs that
will let you choose the content

19
00:01:04,097 --> 00:01:05,599
you want to capture,

20
00:01:05,632 --> 00:01:10,170
with developer controls and toggles
for your application's needs.

21
00:01:10,204 --> 00:01:13,941
And all of the filters and controls
can be updated on the fly.

22
00:01:15,409 --> 00:01:18,412
The framework delivers
high quality and performance

23
00:01:18,445 --> 00:01:22,916
up to the native resolution
and frame rate of your display,

24
00:01:22,950 --> 00:01:26,186
all while having privacy
in mind with global safeguards.

25
00:01:27,454 --> 00:01:31,425
In this session, I'll help you get started
with the ScreenCaptureKit framework.

26
00:01:32,559 --> 00:01:34,962
Once you have the basics down,
take a look

27
00:01:34,995 --> 00:01:37,431
at "Take ScreenCaptureKit
to the next level"

28
00:01:37,464 --> 00:01:39,099
for more advanced topics.

29
00:01:40,501 --> 00:01:43,904
First, I'll go over the key features
of the framework.

30
00:01:45,305 --> 00:01:48,942
Next, I'll cover
the main ScreenCaptureKit constructs

31
00:01:48,976 --> 00:01:50,177
in an API overview.

32
00:01:51,512 --> 00:01:54,214
Then, I'll show you how to set up
your stream

33
00:01:54,248 --> 00:01:55,749
with a filter and configuration.

34
00:01:56,850 --> 00:01:59,453
And finally,
I'll walk you through how to stream

35
00:01:59,486 --> 00:02:01,889
video and audio samples
to your application.

36
00:02:03,457 --> 00:02:05,959
Let's start with the key features
of ScreenCaptureKit.

37
00:02:07,294 --> 00:02:11,331
ScreenCaptureKit lets you specify
the type of content you want to share

38
00:02:11,365 --> 00:02:13,467
or filter out.

39
00:02:13,500 --> 00:02:17,804
You can capture screen content
from any combination of displays,

40
00:02:17,838 --> 00:02:22,910
applications, and windows
as well as the audio that goes with it.

41
00:02:25,879 --> 00:02:29,149
ScreenCaptureKit supports
a variety of developer controls,

42
00:02:29,183 --> 00:02:33,787
including pixel format, color space,

43
00:02:33,820 --> 00:02:37,424
frame rate, and resolution,

44
00:02:37,457 --> 00:02:41,862
and on the audio side, controls
such as sample rate and channel count.

45
00:02:44,598 --> 00:02:47,100
And all of these filters
and configurations

46
00:02:47,134 --> 00:02:49,436
can be adjusted on the fly,

47
00:02:49,469 --> 00:02:52,372
allowing for more flexibility
in application design.

48
00:02:54,174 --> 00:02:59,079
And in order to deliver audio samples
up to 48kHz stereo

49
00:02:59,112 --> 00:03:03,650
and video samples at up to your display's
native resolution and frame rate,

50
00:03:03,684 --> 00:03:08,622
ScreenCaptureKit is performance focused
and leverages the power of Mac GPUs

51
00:03:08,655 --> 00:03:13,026
with a lower CPU overhead
than existing capture methods.

52
00:03:13,060 --> 00:03:16,930
And of course, ScreenCaptureKit
is built with privacy in mind,

53
00:03:16,964 --> 00:03:21,335
providing global privacy safeguards
for all applications using the framework.

54
00:03:23,203 --> 00:03:27,941
The framework will require consent
before capturing video and audio content,

55
00:03:27,975 --> 00:03:31,144
and the choice will be stored
in the Screen Recording privacy setting

56
00:03:31,178 --> 00:03:32,746
in system preferences.

57
00:03:34,181 --> 00:03:37,417
Now that you've seen
what ScreenCaptureKit is all about,

58
00:03:37,451 --> 00:03:41,021
I'll show you some
of the most important concepts in the API.

59
00:03:41,054 --> 00:03:44,358
The ScreenCaptureKit framework
is centered on SCStream.

60
00:03:45,559 --> 00:03:49,363
SCStream handles control methods
like start and stop

61
00:03:49,396 --> 00:03:52,799
and is created along with
SCShareableContent,

62
00:03:52,833 --> 00:03:57,104
SCContentFilter,
and SCStreamConfiguration.

63
00:03:58,172 --> 00:04:01,508
These objects determine
what content you want to capture

64
00:04:01,542 --> 00:04:03,410
and how you want to capture it.

65
00:04:04,811 --> 00:04:09,216
Once created and started,
media samples will be delivered

66
00:04:09,249 --> 00:04:12,853
to your application
through the SCStreamOutput protocol.

67
00:04:13,487 --> 00:04:15,589
I'll explain more about that a bit later.

68
00:04:17,391 --> 00:04:22,596
Now, I'll show you how to use the API
to set up a stream in your application.

69
00:04:24,498 --> 00:04:28,368
Here are the objects you want to get
familiar with when setting up your stream.

70
00:04:30,137 --> 00:04:33,607
These are the objects that
will determine what you capture

71
00:04:33,640 --> 00:04:36,276
and the quality
and the performance of the capture.

72
00:04:37,845 --> 00:04:41,381
The first one I want to go into
is SCShareableContent.

73
00:04:44,318 --> 00:04:50,791
On this desktop, there are windows,
applications, and the display itself.

74
00:04:52,259 --> 00:04:55,662
ScreenCaptureKit has
a corresponding class for each of these

75
00:04:55,696 --> 00:04:58,699
that you can use to build
the content you want to share.

76
00:05:01,001 --> 00:05:03,904
First, let's take a look at SCDisplay.

77
00:05:05,105 --> 00:05:10,043
ScreenCaptureKit categorizes displays
as SCDisplays, with read-only properties

78
00:05:10,077 --> 00:05:13,180
including display identifier

79
00:05:13,213 --> 00:05:16,717
and size properties width and height.

80
00:05:19,119 --> 00:05:23,223
Within the display, there may be
many different running applications,

81
00:05:23,257 --> 00:05:27,461
and each of these will have
a corresponding SCRunningApplication.

82
00:05:29,196 --> 00:05:31,865
SCRunningApplications have
read-only properties

83
00:05:31,899 --> 00:05:34,034
for application-level information

84
00:05:34,067 --> 00:05:36,770
such as bundle identifier,

85
00:05:36,803 --> 00:05:40,040
application name,
and its process identifier.

86
00:05:41,909 --> 00:05:45,579
In the example here,
there will be an SCRunningApplication

87
00:05:45,612 --> 00:05:48,048
for Keynote and Safari.

88
00:05:49,249 --> 00:05:52,519
And, of course,
these applications have windows.

89
00:05:53,787 --> 00:05:56,957
These windows will have
a corresponding SCWindow

90
00:05:56,990 --> 00:05:58,392
with read-only properties

91
00:05:58,425 --> 00:06:04,398
that define the window
such as window id, frame, title,

92
00:06:04,431 --> 00:06:07,134
and if the window
is on screen or minimized.

93
00:06:08,602 --> 00:06:11,705
The SCWindow will also have
an owning application.

94
00:06:12,973 --> 00:06:16,009
In this case, both Safari SCWindows

95
00:06:16,043 --> 00:06:18,212
will have
the same Safari owning application.

96
00:06:22,015 --> 00:06:27,221
SCWindows, SCRunningApplications,
and SCDisplays combine together

97
00:06:27,254 --> 00:06:29,823
to give you the possible content you can
share

98
00:06:29,857 --> 00:06:32,059
in SCShareableContent.

99
00:06:32,092 --> 00:06:36,063
You can get a list
of all shareable content on the device,

100
00:06:36,096 --> 00:06:38,765
or you can specify certain parameters.

101
00:06:41,168 --> 00:06:44,137
Suppose you'd like to list
all the applications and windows

102
00:06:44,171 --> 00:06:45,506
that are on screen

103
00:06:45,539 --> 00:06:48,208
so people can choose
which ones they'd like to share.

104
00:06:49,009 --> 00:06:52,379
Well, ScreenCaptureKit has
a simple API for that.

105
00:06:54,815 --> 00:06:57,985
This short code snippet
is from the capture sample code available

106
00:06:58,018 --> 00:06:59,720
on developer.apple.com.

107
00:07:00,754 --> 00:07:05,058
Only windows that are on screen
are returned with the SCShareableContent,

108
00:07:05,092 --> 00:07:11,265
which includes the associated SCWindows,
SCApplications and SCDisplays.

109
00:07:12,566 --> 00:07:14,635
And now that you have
the shareable content,

110
00:07:14,668 --> 00:07:16,170
you can create a filter.

111
00:07:18,205 --> 00:07:21,942
There are two main types
of SCContentFilters:

112
00:07:21,975 --> 00:07:25,712
A display independent window filter,
which will capture the window

113
00:07:25,746 --> 00:07:28,882
as you move it across multiple displays,

114
00:07:28,916 --> 00:07:31,351
and display dependent filters,

115
00:07:31,385 --> 00:07:36,356
with options to include or exclude
specific windows and applications.

116
00:07:37,357 --> 00:07:40,460
A quick note here is that audio capture
can only be filtered

117
00:07:40,494 --> 00:07:41,962
at an application level.

118
00:07:43,063 --> 00:07:46,600
I'll walk you through some examples
to demonstrate what a filter is

119
00:07:48,468 --> 00:07:51,205
Imagine you're only interested
in sharing a keynote window.

120
00:07:53,473 --> 00:07:56,510
You would choose
a display independent window filter

121
00:07:56,543 --> 00:07:59,379
that will capture the window
as it moves across displays.

122
00:08:00,614 --> 00:08:04,651
Even if you wanted to share
all of the content on a display,

123
00:08:04,685 --> 00:08:07,487
there may be certain content
you'd like to exclude.

124
00:08:07,521 --> 00:08:11,058
For example, you'll want to avoid
the hall of mirrors effect

125
00:08:11,091 --> 00:08:13,727
by excluding your own capture application.

126
00:08:16,330 --> 00:08:21,802
There may also be sensitive information
in a particular window or application,

127
00:08:21,835 --> 00:08:24,738
and you'd want to exclude that
from the capture as well.

128
00:08:24,771 --> 00:08:28,609
All these scenarios will be handled
by SCContentFilter,

129
00:08:28,642 --> 00:08:31,111
so let's jump into the code
and see how to do this.

130
00:08:34,214 --> 00:08:36,617
Here is the code snippet
I showed previously.

131
00:08:38,051 --> 00:08:40,587
After the shareable content is queried,

132
00:08:40,621 --> 00:08:44,191
the code looks for the application
with the same bundleIdentifier

133
00:08:44,224 --> 00:08:45,759
as the capture sample app.

134
00:08:46,827 --> 00:08:51,498
Then, a display dependent content filter
excludes the app from the stream.

135
00:08:54,535 --> 00:08:58,472
In addition to content filters,
ScreenCaptureKit provides quality

136
00:08:58,505 --> 00:09:01,475
and performance controls
that can be adjusted per stream.

137
00:09:02,943 --> 00:09:06,213
These controls can be set
in SCStreamConfiguration.

138
00:09:08,182 --> 00:09:13,086
Some of the video controls include
output resolution, frame rate,

139
00:09:13,120 --> 00:09:14,988
and whether or not
to show the mouse cursor.

140
00:09:16,723 --> 00:09:21,161
On the audio side, you can enable audio,
change the sample rate,

141
00:09:21,195 --> 00:09:22,863
and adjust the channel count.

142
00:09:23,997 --> 00:09:28,001
I'll take you through some scenarios where
these parameters might come into play.

143
00:09:29,970 --> 00:09:34,141
When sharing low-motion screen content
where text clarity is important,

144
00:09:34,174 --> 00:09:37,211
such as from notes or a spreadsheet,

145
00:09:37,244 --> 00:09:41,682
set output resolution of the capture
to 4k, at 10 frames per second.

146
00:09:43,350 --> 00:09:45,752
And because the content doesn't have
any audio,

147
00:09:45,786 --> 00:09:47,454
you can leave audio disabled.

148
00:09:48,522 --> 00:09:50,791
But in the case of high motion content,

149
00:09:50,824 --> 00:09:53,827
such as sharing a video
of a recent vacation,

150
00:09:53,861 --> 00:09:57,264
you should prioritize
frame rate over resolution

151
00:09:57,297 --> 00:10:00,033
by lowering the output resolution
to 1080p

152
00:10:00,067 --> 00:10:02,769
and increasing
the frames per second to 60.

153
00:10:04,471 --> 00:10:07,107
And since cursor movement
could be distracting,

154
00:10:07,140 --> 00:10:08,742
you may want to hide the cursor.

155
00:10:10,344 --> 00:10:14,815
You can also have audio capture enabled
for a more immersive experience.

156
00:10:16,383 --> 00:10:19,353
All of these controls can be set
through the different properties

157
00:10:19,386 --> 00:10:20,988
in SCStreamConfiguration.

158
00:10:24,424 --> 00:10:27,961
Here's one possible configuration
for sharing high motion content.

159
00:10:29,563 --> 00:10:34,034
In this code sample, the output resolution
of the capture is set to 1080p.

160
00:10:34,935 --> 00:10:39,973
Then, the minimum frame interval
is set to 1/60 in order to capture

161
00:10:40,007 --> 00:10:41,441
at 60 frames per second.

162
00:10:42,643 --> 00:10:45,979
And finally, the stream configuration
will hide the cursor.

163
00:10:47,681 --> 00:10:52,719
On the audio side, first enable audio
by setting capturesAudio to true,

164
00:10:52,753 --> 00:10:58,125
then, set the sample rate to 48kHz
and the channel count to 2.

165
00:11:00,027 --> 00:11:04,164
With an SCContentFilter
and an SCStreamConfiguration,

166
00:11:04,198 --> 00:11:06,867
you have the information you need
to set up screen capture

167
00:11:06,900 --> 00:11:08,468
to your application's needs.

168
00:11:09,536 --> 00:11:12,339
Together, you can now create an SCStream.

169
00:11:15,342 --> 00:11:16,977
Let's go back to the overview.

170
00:11:18,212 --> 00:11:20,214
You will need to initialize the stream

171
00:11:20,247 --> 00:11:22,583
with your desired filter
and configuration.

172
00:11:23,784 --> 00:11:26,053
And you can also pass in
an optional delegate

173
00:11:26,086 --> 00:11:27,688
in order to handle errors.

174
00:11:29,022 --> 00:11:33,427
Once set up, you can call start capture,
and ScreenCaptureKit will provide

175
00:11:33,460 --> 00:11:37,064
the SCStream with samples
when they are available.

176
00:11:38,365 --> 00:11:43,237
With a filter and configuration created,
starting a stream in code is easy.

177
00:11:43,270 --> 00:11:44,271
Let me show you.

178
00:11:47,307 --> 00:11:50,410
Once again, with the filter
and configuration you want,

179
00:11:50,444 --> 00:11:52,980
you can initialize an SCStream object.

180
00:11:54,648 --> 00:11:59,119
In the capture sample project, self
is passed as the error handling delegate.

181
00:12:01,054 --> 00:12:05,125
With an SCStream created,
you can now call startCapture.

182
00:12:06,894 --> 00:12:09,396
Once you've initialized
and started a stream,

183
00:12:09,429 --> 00:12:12,599
the next step is to get media samples
to your application.

184
00:12:16,136 --> 00:12:19,239
Audio and video samples are
sent to your application

185
00:12:19,273 --> 00:12:21,441
in the form of CMSampleBuffers.

186
00:12:22,910 --> 00:12:26,146
In order to get those media samples
from your stream,

187
00:12:26,180 --> 00:12:27,648
you will need to add an object

188
00:12:27,681 --> 00:12:31,385
that implements the
SCStreamOutput protocol to your stream.

189
00:12:32,553 --> 00:12:36,890
When you add your stream output,
you may also specify a handler queue.

190
00:12:38,825 --> 00:12:41,728
This may be useful if you want
your sample to be delivered

191
00:12:41,762 --> 00:12:45,265
in a particular queue
without needing an extra dispatch.

192
00:12:47,434 --> 00:12:51,038
If you don't specify a queue,
a default queue will be used.

193
00:12:54,775 --> 00:12:59,746
With a stream started and an output added,
ScreenCaptureKit will provide a callback

194
00:12:59,780 --> 00:13:01,415
when a new sample is available.

195
00:13:02,683 --> 00:13:06,119
Now, I'll show you how
to get media samples in code.

196
00:13:09,089 --> 00:13:12,793
Here's an implementation
of the SCStreamOutputProtocol

197
00:13:12,826 --> 00:13:15,729
which will be called
when new media samples are available.

198
00:13:17,297 --> 00:13:21,068
ScreenCaptureKit delivers
these samples as CMSampleBuffers

199
00:13:21,101 --> 00:13:23,837
and provides the stream and sample type.

200
00:13:25,873 --> 00:13:31,078
After implementing sample buffer handlers,
you simply need to add your streamOutput.

201
00:13:32,713 --> 00:13:35,816
And with that, media samples
from the stream,

202
00:13:35,849 --> 00:13:39,419
with the content you want,
in the format you want,

203
00:13:39,453 --> 00:13:41,355
will be delivered to your application.

204
00:13:44,157 --> 00:13:48,128
ScreenCaptureKit delivers samples
in the form of a CMSampleBuffers,

205
00:13:48,161 --> 00:13:50,564
so let's talk a little bit
about how to use them.

206
00:13:53,267 --> 00:13:57,304
On the video side,
the CMSampleBuffer is IOSurface backed.

207
00:13:58,805 --> 00:14:00,974
ScreenCaptureKit
also provides attachments

208
00:14:01,008 --> 00:14:04,678
to the CMSampleBuffer
in SCStreamFrameInfo.

209
00:14:06,980 --> 00:14:10,450
This attachment provides information
about the video sample you're receiving.

210
00:14:12,219 --> 00:14:15,389
Check frame status
for the current state of the stream.

211
00:14:15,422 --> 00:14:19,626
A complete frame status indicates
that there is a new video frame.

212
00:14:19,660 --> 00:14:22,896
An idle frame status
means the video sample hasn't changed,

213
00:14:22,930 --> 00:14:25,065
so there's no new IOSurface.

214
00:14:26,233 --> 00:14:30,637
Otherwise, the sample provided
is like any CMSampleBuffer,

215
00:14:30,671 --> 00:14:33,941
so you can use existing
CMSampleBuffer utilities.

216
00:14:35,209 --> 00:14:39,079
ScreenCaptureKit includes APIs
to help you get filtered screen

217
00:14:39,112 --> 00:14:40,647
audio and video content.

218
00:14:41,481 --> 00:14:43,584
On top of that,
the framework provides

219
00:14:43,617 --> 00:14:47,087
many different developer controls
to suit your application's needs.

220
00:14:48,455 --> 00:14:50,924
I also covered some basics
to get you started

221
00:14:50,958 --> 00:14:53,894
with the different screen capture
experiences you will create.

222
00:14:56,463 --> 00:14:59,833
With the release of ScreenCaptureKit,
older capture frameworks

223
00:14:59,867 --> 00:15:04,571
CGDisplayStream and CGWindowList
will be deprecated in the future.

224
00:15:06,240 --> 00:15:08,075
I hope you're as excited as I am

225
00:15:08,108 --> 00:15:10,143
with this introduction
of ScreenCaptureKit!

226
00:15:11,845 --> 00:15:14,281
When you're ready to look
at more advanced topics,

227
00:15:14,314 --> 00:15:17,684
please hop over to "Take ScreenCaptureKit
to the next level."

228
00:15:18,785 --> 00:15:20,420
Thanks for watching!

229
00:15:20,454 --> 00:15:22,523
[spacey music]

