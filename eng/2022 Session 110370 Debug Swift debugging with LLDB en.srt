1
00:00:00,501 --> 00:00:08,509
â™ª â™ª

2
00:00:09,977 --> 00:00:11,378
Hello, everyone.

3
00:00:11,411 --> 00:00:15,649
My name is Adrian, and I'll be talking
to you about how to set up your project

4
00:00:15,682 --> 00:00:19,119
for a great debugging experience
with LLDB.

5
00:00:19,152 --> 00:00:23,857
LLDB is the underlying debugging
technology that ships with Xcode.

6
00:00:23,891 --> 00:00:27,728
LLDB allows you to set breakpoints
in your application,

7
00:00:27,761 --> 00:00:29,296
pause its execution,

8
00:00:29,329 --> 00:00:32,266
inspect the state of variables
and objects,

9
00:00:32,299 --> 00:00:35,669
explore your code, and much more.

10
00:00:35,702 --> 00:00:39,473
LLDB can help you understand
what your code is doing

11
00:00:39,506 --> 00:00:43,510
and it enables you to find the point where
the behavior of your code

12
00:00:43,544 --> 00:00:46,513
diverges from your expectation.

13
00:00:46,547 --> 00:00:51,185
It's a powerful tool for
understanding and exploring code.

14
00:00:51,218 --> 00:00:54,922
If you want to learn more about LLDB,
please check out earlier videos,

15
00:00:54,955 --> 00:00:59,726
for example "Discover breakpoint
improvements" from WWDC21.

16
00:00:59,760 --> 00:01:02,729
Today we are going to look at
some advanced workflows

17
00:01:02,763 --> 00:01:06,834
that have unique implications
on debugging Swift code.

18
00:01:06,867 --> 00:01:10,871
Maybe you are integrating
a third-party framework into your app.

19
00:01:10,904 --> 00:01:13,407
Maybe your app and your team has grown
to the point

20
00:01:13,440 --> 00:01:18,245
where most of your code is being built
by a continuous integration system.

21
00:01:18,278 --> 00:01:20,914
Maybe you are using a custom
build system to integrate

22
00:01:20,948 --> 00:01:23,684
with your company's infrastructure.

23
00:01:23,717 --> 00:01:28,088
Maybe you are building software
for other software developers.

24
00:01:28,121 --> 00:01:30,924
Or you just want to learn more about LLDB.

25
00:01:30,958 --> 00:01:35,295
My goal is to provide a better
understanding of how LLDB works,

26
00:01:35,329 --> 00:01:39,967
and what information it needs from
the build system in order to function.

27
00:01:40,000 --> 00:01:44,071
I have a little project here that we are
going to use as our running example.

28
00:01:44,104 --> 00:01:47,407
I'm a compiler engineer,
and I like games,

29
00:01:47,441 --> 00:01:50,677
so in my spare time
I write parsers for text adventures.

30
00:01:50,711 --> 00:01:54,147
This one I recently started in pure Swift.

31
00:01:54,181 --> 00:01:56,149
Let me show you what I've got so far.

32
00:01:56,183 --> 00:02:00,120
The game uses a text interface
so I'm running it in Terminal.

33
00:02:00,153 --> 00:02:04,324
As in every good adventure,
we'll start by checking our inventory.

34
00:02:07,194 --> 00:02:10,030
This game takes place
in a contemporary setting.

35
00:02:10,063 --> 00:02:12,199
I see that I have an iPhone.

36
00:02:12,232 --> 00:02:15,569
Next, let's have a look
at our surroundings.

37
00:02:17,538 --> 00:02:21,608
Hmm, this sensor looks intriguing.

38
00:02:21,642 --> 00:02:24,711
Maybe we can use the iPhone on the sensor?

39
00:02:30,350 --> 00:02:32,186
I dropped the iPhone?

40
00:02:32,219 --> 00:02:35,255
Uh, that's not what I wanted to show you.

41
00:02:35,289 --> 00:02:39,026
I think that my game has a bug.

42
00:02:39,059 --> 00:02:41,028
Good thing this is a debugger talk.

43
00:02:41,061 --> 00:02:45,332
Let's set a breakpoint in the parser
and run our command again.

44
00:02:51,371 --> 00:02:55,375
[typing sounds]

45
00:02:59,413 --> 00:03:03,283
We should first verify
that the command was read correctly.

46
00:03:03,317 --> 00:03:06,854
The "words" variable contains
the tokenized command.

47
00:03:11,859 --> 00:03:15,095
Ah, this did not go as expected.

48
00:03:15,128 --> 00:03:17,231
I don't know what's going on here.

49
00:03:17,264 --> 00:03:19,900
Yesterday I was using the debugger
with no problems,

50
00:03:19,933 --> 00:03:22,803
and then last night I integrated
this UI framework

51
00:03:22,836 --> 00:03:25,272
for styling text on the terminal.

52
00:03:25,305 --> 00:03:28,775
The developers of that framework
have a continuous integration system

53
00:03:28,809 --> 00:03:31,311
that cranks out nightly builds
of the framework,

54
00:03:31,345 --> 00:03:34,381
and I'm linking
directly against the latest one.

55
00:03:34,414 --> 00:03:39,319
I wonder if this framework has something
to do with my debugging troubles.

56
00:03:39,353 --> 00:03:41,255
Case in point, I already noticed

57
00:03:41,288 --> 00:03:44,191
that I can't step
into the framework's source code,

58
00:03:44,224 --> 00:03:47,160
even though I explicitly downloaded
the debug build.

59
00:03:47,194 --> 00:03:48,862
Look at that.

60
00:03:51,732 --> 00:03:53,600
I only see disassembly.

61
00:03:54,768 --> 00:03:56,770
Let's try to understand
what happened there,

62
00:03:56,803 --> 00:04:01,475
and let's start by figuring out
why I couldn't see any source code.

63
00:04:01,508 --> 00:04:05,746
What does LLDB need
in order to show source code?

64
00:04:05,779 --> 00:04:09,416
When the compiler compiles a function,

65
00:04:09,449 --> 00:04:12,119
it generates machine code.

66
00:04:15,556 --> 00:04:18,892
And it leaves breadcrumbs for the debugger

67
00:04:18,926 --> 00:04:22,496
so an address in the executable
can be mapped to a source file

68
00:04:22,529 --> 00:04:24,865
and line number and vice versa.

69
00:04:24,898 --> 00:04:28,502
These breadcrumbs are called debug info.

70
00:04:28,535 --> 00:04:33,340
On Apple platforms
debug info is stored in object files.

71
00:04:33,373 --> 00:04:39,213
For archiving and distribution, debug info
can be linked into .dSYM bundles.

72
00:04:39,246 --> 00:04:43,617
The debug info linker is called dsymutil.

73
00:04:43,650 --> 00:04:46,453
LLDB uses Spotlight
to locate .dSYM bundles,

74
00:04:46,486 --> 00:04:50,090
so it's quite flexible
in terms of where on disk they are.

75
00:04:50,123 --> 00:04:55,762
Now that we know how debug info works,
let's get back to the example.

76
00:04:55,796 --> 00:05:01,502
First, let's verify that LLDB has actually
found the dSYM for the framework.

77
00:05:01,535 --> 00:05:04,938
We can do this
with the image list command.

78
00:05:04,972 --> 00:05:09,276
The UI framework
is called "TerminalInterface".

79
00:05:15,516 --> 00:05:19,453
Yes, LLDB did find the dSYM
for the framework.

80
00:05:19,486 --> 00:05:22,489
That means it has access
to the debug info.

81
00:05:22,523 --> 00:05:26,560
We can use "image lookup"

82
00:05:26,593 --> 00:05:29,530
to get more info
about the current address.

83
00:05:30,697 --> 00:05:34,001
By the way, if you want to learn more
about the various options,

84
00:05:34,034 --> 00:05:36,670
LLDB has an excellent built-in help.

85
00:05:37,738 --> 00:05:40,974
Ah, I think I see
why there is no source code:

86
00:05:41,008 --> 00:05:45,212
This source path here points to where
the sources were on the build server,

87
00:05:45,245 --> 00:05:48,148
not to where they are on my local machine.

88
00:05:48,182 --> 00:05:49,850
We can fix that.

89
00:05:49,883 --> 00:05:55,622
LLDB has a built-in source map
that we can use to redirect these paths.

90
00:06:04,531 --> 00:06:06,633
We could type in the command right now,

91
00:06:06,667 --> 00:06:09,670
but I'd rather make this change
more permanent.

92
00:06:09,703 --> 00:06:14,308
In the Scheme editor, which you can
bring up by going to Product, Scheme,

93
00:06:14,341 --> 00:06:18,011
Edit scheme,

94
00:06:18,045 --> 00:06:21,348
or by just option-clicking
onto the play button,

95
00:06:21,381 --> 00:06:25,118
you can define
a per-project LLDB init file.

96
00:06:25,152 --> 00:06:27,187
I already added one for this project.

97
00:06:38,699 --> 00:06:43,103
Now that we set up LLDB,
let's run our project again.

98
00:06:52,813 --> 00:06:55,883
And we have source code.

99
00:06:58,852 --> 00:07:04,825
LLDB can remap source paths
using "settings set target.source-map".

100
00:07:04,858 --> 00:07:08,028
You can put this command
into your project's .lldbinit file

101
00:07:08,061 --> 00:07:10,764
to have this run automatically.

102
00:07:10,797 --> 00:07:15,469
Alternatively, each .dSYM bundle contains
a XML .plist file

103
00:07:15,502 --> 00:07:18,906
where you can put a path prefix
remapping dictionary.

104
00:07:18,939 --> 00:07:22,876
If you have a download script that
fetches the latest builds from a server,

105
00:07:22,910 --> 00:07:25,479
you could modify that script
to automatically inject

106
00:07:25,512 --> 00:07:29,816
the appropriate remapping dictionary
into the downloaded .dSYM.

107
00:07:29,850 --> 00:07:33,754
You can learn more about this process
on the LLDB website.

108
00:07:35,289 --> 00:07:38,258
Source paths
are not language-specific at all,

109
00:07:38,292 --> 00:07:44,231
so this method works for Swift,
C++, and Objective-C projects alike.

110
00:07:44,264 --> 00:07:46,667
To learn more about
symbols on Apple platforms,

111
00:07:46,700 --> 00:07:52,339
check out "Symbolication:
Beyond the basics" from WWDC21.

112
00:07:52,372 --> 00:07:55,642
When source code is compiled
on a build server farm,

113
00:07:55,676 --> 00:08:00,881
the remote paths to source files could be
different from machine to machine.

114
00:08:00,914 --> 00:08:04,751
To avoid having to define
one remap prefix per machine,

115
00:08:04,785 --> 00:08:07,955
we can instruct the compiler
to canonicalize source paths

116
00:08:07,988 --> 00:08:10,691
before putting them into the debug info.

117
00:08:10,724 --> 00:08:14,795
This is done using
the -debug-prefix-map option.

118
00:08:14,828 --> 00:08:18,465
This way the machine-specific
path prefix can be replaced

119
00:08:18,498 --> 00:08:21,001
by a unique, canonical placeholder name

120
00:08:21,034 --> 00:08:24,905
that can then be remapped
to the local path in LLDB.

121
00:08:24,938 --> 00:08:26,807
Before we went on the source tangent,

122
00:08:26,840 --> 00:08:30,143
I was trying to print
the object description of "words".

123
00:08:33,981 --> 00:08:35,449
That did not work.

124
00:08:35,482 --> 00:08:39,553
In fact, even just evaluating
the expression "words" did not work.

125
00:08:45,559 --> 00:08:49,029
At least we can see the variables
in the variables view.

126
00:08:51,932 --> 00:08:55,235
The console equivalent
of the Xcode variable view

127
00:08:55,269 --> 00:08:58,572
is the "frame variable" or "v" command.

128
00:09:05,712 --> 00:09:09,650
If you want to learn more about
the nuances between these commands,

129
00:09:09,683 --> 00:09:14,288
check out "LLDB: Beyond 'po'"
from WWDC19.

130
00:09:14,321 --> 00:09:18,258
So what is po
and why is it still not working?

131
00:09:18,292 --> 00:09:21,962
To understand what this means,
we need to learn more about LLDB.

132
00:09:21,995 --> 00:09:25,666
As a reminder, LLDB is a debugger.

133
00:09:25,699 --> 00:09:27,901
But LLDB is not just a debugger.

134
00:09:27,935 --> 00:09:30,170
It is also a compiler!

135
00:09:30,204 --> 00:09:32,973
In addition to the functionality
of a debugger,

136
00:09:33,006 --> 00:09:37,945
LLDB also includes a fully functioning
copy of the Swift and Clang compilers.

137
00:09:37,978 --> 00:09:41,748
These compilers power
LLDB's expression evaluator,

138
00:09:41,782 --> 00:09:45,652
which you may know through
p and po command aliases.

139
00:09:45,686 --> 00:09:49,423
With the expression evaluator
we can go beyond looking at variables,

140
00:09:49,456 --> 00:09:52,693
we can perform computation,
call functions,

141
00:09:52,726 --> 00:09:55,596
and even change the state of the program.

142
00:09:55,629 --> 00:10:00,567
Check out "Advanced Debugging
with Xcode and LLDB" from WWDC18

143
00:10:00,601 --> 00:10:04,671
to get some ideas for what's possible
with those commands.

144
00:10:04,705 --> 00:10:09,042
How does a debugger format
a local variable?

145
00:10:09,076 --> 00:10:12,346
The debug info provided by the compiler
tells the debugger

146
00:10:12,379 --> 00:10:15,282
where in memory a variable is stored.

147
00:10:15,315 --> 00:10:19,653
But with that information alone,
LLDB would only be able to show us

148
00:10:19,686 --> 00:10:22,422
a random assortment of raw bytes.

149
00:10:22,456 --> 00:10:26,460
So how does LLDB turn that into
nicely formatted output?

150
00:10:26,493 --> 00:10:28,395
The answer is types.

151
00:10:28,428 --> 00:10:32,032
Type information allows LLDB
to understand the structure

152
00:10:32,065 --> 00:10:34,868
and memory layout of a source variable.

153
00:10:34,902 --> 00:10:39,339
With type information, LLDB knows
what fields an aggregate type has

154
00:10:39,373 --> 00:10:43,277
and types allow LLDB to use
the appropriate data formatters

155
00:10:43,310 --> 00:10:45,279
to pretty-print them.

156
00:10:45,312 --> 00:10:49,983
Now let's look at
where type information comes from.

157
00:10:50,017 --> 00:10:54,621
On the debugger side, where the frame
variable and v commands live,

158
00:10:54,655 --> 00:10:59,059
LLDB gets type information
from Debug Info.

159
00:10:59,092 --> 00:11:04,298
And LLDB also gets types
from Swift reflection metadata.

160
00:11:04,331 --> 00:11:08,869
On the compiler side, where the expression
evaluator and po live,

161
00:11:08,902 --> 00:11:12,039
LLDB gets type information from Modules.

162
00:11:12,072 --> 00:11:15,576
This clean separation is new in Xcode 14

163
00:11:15,609 --> 00:11:18,278
and explains why the variable view
can be fully functional

164
00:11:18,312 --> 00:11:21,048
even if the expression evaluator isn't.

165
00:11:21,081 --> 00:11:24,785
Modules are how the compiler organizes
type declarations.

166
00:11:24,818 --> 00:11:28,055
The Swift compiler knows
many ways of importing modules,

167
00:11:28,088 --> 00:11:31,491
but before we dive into that,
I want to show you a handy new feature.

168
00:11:32,826 --> 00:11:37,097
How do we start diagnosing an issue
that is happening on the compiler side?

169
00:11:38,031 --> 00:11:42,603
This year LLDB has added
a new "swift-healthcheck" command.

170
00:11:42,636 --> 00:11:47,241
It's your first stop for figuring out
if a module import failed.

171
00:11:47,274 --> 00:11:49,243
Let me show you how this works.

172
00:11:49,276 --> 00:11:52,980
By running swift-healthcheck
after a problem occurred,

173
00:11:53,013 --> 00:11:57,651
we can get access to a log of the Swift
expression evaluator configuration.

174
00:12:05,292 --> 00:12:08,896
At the end of the log
we see that LLDB had trouble importing

175
00:12:08,929 --> 00:12:11,698
the "TerminalUI" Swift module.

176
00:12:11,732 --> 00:12:14,902
Based on the name, I assume
that this is an implementation detail

177
00:12:14,935 --> 00:12:18,338
of the TerminalInterface framework.

178
00:12:18,372 --> 00:12:23,944
This missing module is a problem
because the type of self is generic

179
00:12:23,977 --> 00:12:28,315
over the UI implementation and
without the module containing that type,

180
00:12:28,348 --> 00:12:33,587
the expression evaluator cannot realize
the dynamic type of "self".

181
00:12:33,620 --> 00:12:35,956
I'm sending a message
to the developers of the framework

182
00:12:35,989 --> 00:12:37,858
and ask them to investigate.

183
00:12:37,891 --> 00:12:41,228
In my experience,
they have always been very responsive.

184
00:12:41,261 --> 00:12:45,832
Who knows, maybe we can even find
a solution before the end of this video.

185
00:12:45,866 --> 00:12:51,405
In the meantime, let's take a look at
how LLDB's compiler finds Swift modules.

186
00:12:52,940 --> 00:12:55,943
My app has its own Swift module.

187
00:12:55,976 --> 00:13:00,180
It may import a system framework,
such as Foundation.

188
00:13:00,214 --> 00:13:06,353
System frameworks are textual stable Swift
interface files that live in the SDK.

189
00:13:06,386 --> 00:13:09,823
Any Swift module
might import a Clang module,

190
00:13:09,857 --> 00:13:13,527
which is a fancy name for one or more
header files that are grouped together

191
00:13:13,560 --> 00:13:16,964
with the help of a module map file.

192
00:13:16,997 --> 00:13:20,100
Clang modules
can depend on other Clang modules.

193
00:13:21,902 --> 00:13:26,507
My app might also import a Swift module
that belongs to a locally built framework.

194
00:13:26,540 --> 00:13:29,977
It could also import textual
Swift interface files

195
00:13:30,010 --> 00:13:32,913
that are not part of the SDK.

196
00:13:32,946 --> 00:13:39,553
If you want to learn how, check out
"Binary Frameworks in Swift" from WWDC19.

197
00:13:39,586 --> 00:13:44,124
My app might also link against
a static library that contains Swift code,

198
00:13:44,157 --> 00:13:47,327
and then that comes
with a Swift module too.

199
00:13:47,361 --> 00:13:48,996
Hmm, we're not done, though.

200
00:13:49,029 --> 00:13:51,532
I should mention there are also
bridging headers,

201
00:13:51,565 --> 00:13:54,635
which can also import Clang modules.

202
00:13:54,668 --> 00:13:58,005
Finally, as a special feature
in LLDB only,

203
00:13:58,038 --> 00:14:02,476
some module contents can be reconstructed
from debug info alone.

204
00:14:02,509 --> 00:14:04,077
That's a lot of sources!

205
00:14:04,111 --> 00:14:05,879
How does LLDB find them all?

206
00:14:07,514 --> 00:14:12,586
It's the build system's job to package up
the modules so LLDB can find them.

207
00:14:12,619 --> 00:14:16,657
Modules from system frameworks
stay in the SDK.

208
00:14:16,690 --> 00:14:22,563
LLDB will find a matching SDK to read them
from as it's attaching to your program.

209
00:14:22,596 --> 00:14:25,265
When debugging
straight from the object files,

210
00:14:25,299 --> 00:14:29,703
LLDB will find all non-SDK modules
where they were at build time.

211
00:14:29,736 --> 00:14:33,707
Dsymutil can package a debug info archive
called a .DSYM bundle

212
00:14:33,740 --> 00:14:38,612
for every dynamic library,
framework or dylib, and executable.

213
00:14:40,013 --> 00:14:43,483
Each .dSYM bundle can contain
binary Swift modules,

214
00:14:43,517 --> 00:14:45,686
which may contain bridging headers,

215
00:14:45,719 --> 00:14:47,788
textual Swift interface files,

216
00:14:47,821 --> 00:14:49,923
and most importantly, debug info.

217
00:14:49,957 --> 00:14:51,892
That covers everything.

218
00:14:51,925 --> 00:14:53,527
Everything?

219
00:14:53,560 --> 00:14:57,497
Everything except Swift modules
that belong to static archives.

220
00:14:59,032 --> 00:15:02,202
In order for a Swift module
to be picked up by dsymutil,

221
00:15:02,236 --> 00:15:05,005
it needs to be registered with the linker.

222
00:15:05,038 --> 00:15:07,207
For dynamic libraries and executables,

223
00:15:07,241 --> 00:15:10,444
the build system will do this
automatically for you.

224
00:15:10,477 --> 00:15:14,014
But static archives are
not produced by the linker,

225
00:15:14,047 --> 00:15:18,385
they are just collections of object files,
like a zip file.

226
00:15:18,418 --> 00:15:22,489
That means that the responsibility
for registering any Swift modules

227
00:15:22,523 --> 00:15:25,559
with the linker
falls onto every executable

228
00:15:25,592 --> 00:15:29,763
or dynamic library
that links the static archive.

229
00:15:29,796 --> 00:15:34,168
In many cases, Xcode's build system
will do this for you.

230
00:15:34,201 --> 00:15:37,037
But if you are maintaining
your own custom build system,

231
00:15:37,070 --> 00:15:40,274
or if you have defined custom build rules,

232
00:15:40,307 --> 00:15:42,309
this is something to be aware of.

233
00:15:44,478 --> 00:15:46,580
When using the Apple linker,

234
00:15:46,613 --> 00:15:52,352
Swift modules need to be registered
with the -add-ast-path option.

235
00:15:52,386 --> 00:15:57,124
Check your build log to verify
that this is the case.

236
00:15:57,157 --> 00:16:01,662
You can also use dsymutil to dump
the symbol table of your executable

237
00:16:01,695 --> 00:16:05,132
and grep for "swiftmodule"
to verify that it worked.

238
00:16:08,202 --> 00:16:10,404
On other platforms like Linux,

239
00:16:10,437 --> 00:16:13,507
the swift driver supports
a -modulewrap action

240
00:16:13,540 --> 00:16:16,677
that converts binary Swift module files
into objects

241
00:16:16,710 --> 00:16:20,848
that you can link into your binary
together with the rest of the debug info.

242
00:16:20,881 --> 00:16:23,617
LLDB will find it there.

243
00:16:23,650 --> 00:16:27,054
The developers of the framework
were incredibly responsive.

244
00:16:27,087 --> 00:16:31,692
As we suspected, it turns out that
as a part of the framework's build system

245
00:16:31,725 --> 00:16:33,594
a static archive is used.

246
00:16:33,627 --> 00:16:36,830
And it was the Swift module
that belongs to that static archive

247
00:16:36,864 --> 00:16:38,866
that was missing from the dSYM bundle.

248
00:16:38,899 --> 00:16:41,835
I have now installed a fixed version
of the framework.

249
00:16:41,869 --> 00:16:45,205
It has registered the missing
static module with the linker

250
00:16:45,239 --> 00:16:47,941
and so dsymutil was able to collect it.

251
00:16:49,543 --> 00:16:52,012
Now self can be resolved.

252
00:16:54,815 --> 00:16:58,118
And we can print the object description
of "words".

253
00:17:01,755 --> 00:17:04,958
Since we're using the console anyway,
I'm using the s alias

254
00:17:04,992 --> 00:17:07,728
to step into the parseFrom function.

255
00:17:12,399 --> 00:17:14,401
And now we can also easily find the bug,

256
00:17:14,434 --> 00:17:16,737
which is just a copy-and-paste error here.

257
00:17:26,780 --> 00:17:33,787
[typing sounds]

258
00:17:44,865 --> 00:17:49,036
And with that, we not only solved
the puzzle of the missing Swift module,

259
00:17:49,069 --> 00:17:51,505
but also the first puzzle of the game.

260
00:17:53,173 --> 00:17:57,511
Before we wrap up,
I have one more detail to watch out for.

261
00:17:57,544 --> 00:18:00,981
The Swift compiler will serialize
Clang header search paths

262
00:18:01,014 --> 00:18:04,852
and other related options into
the binary .swiftmodule files.

263
00:18:04,885 --> 00:18:08,589
This is great because it makes
importing their Clang module dependencies

264
00:18:08,622 --> 00:18:11,425
just work during the build.

265
00:18:11,458 --> 00:18:16,330
But when building on a different machine,
these local paths can be detrimental.

266
00:18:16,363 --> 00:18:20,567
So before shipping a binary .swiftmodule
to another machine,

267
00:18:20,601 --> 00:18:22,035
consider building with the

268
00:18:22,069 --> 00:18:25,706
-no-serialize-debugging-options
Compiler flag.

269
00:18:25,739 --> 00:18:27,741
In Xcode this is controlled via the

270
00:18:27,774 --> 00:18:30,644
SWIFT_SERIALIZE_DEBUGGING_OPTIONS
setting.

271
00:18:32,045 --> 00:18:38,252
You can reintroduce these search paths in
LLDB with one of the following settings.

272
00:18:38,285 --> 00:18:40,120
Let's recap what we learned.

273
00:18:40,153 --> 00:18:43,190
If you want to ship code
from one machine to another,

274
00:18:43,223 --> 00:18:47,361
you should ask yourself what level of
debugging you expect to be doing.

275
00:18:47,394 --> 00:18:51,565
For example, if you ship
a binary framework to another developer

276
00:18:51,598 --> 00:18:55,402
and you don't expect them
to step into your code in the debugger,

277
00:18:55,435 --> 00:18:59,873
it's best to just ship the Swift module
as a textual .swiftinterface file.

278
00:18:59,907 --> 00:19:03,877
But if you are setting up a build server
or a continuous integration system,

279
00:19:03,911 --> 00:19:08,582
where developers are expected to debug
the downloaded build artifacts,

280
00:19:08,615 --> 00:19:11,485
you will want to make sure to build
a binary Swift module

281
00:19:11,518 --> 00:19:15,022
and consider turning off
search path serialization.

282
00:19:15,055 --> 00:19:18,292
You can also canonicalize the source paths
on the server

283
00:19:18,325 --> 00:19:21,895
in the debug info
using the -debug-prefix-map option.

284
00:19:21,929 --> 00:19:24,331
That's all I have for you.

285
00:19:24,364 --> 00:19:30,003
Today we learned about LLDB's dual nature
as a debugger and a compiler.

286
00:19:30,037 --> 00:19:34,441
The debugger needs debug info
and reflection metadata to function

287
00:19:34,474 --> 00:19:38,912
and provides the Xcode variable view,
and the v command.

288
00:19:38,946 --> 00:19:43,517
The compiler needs Modules
and is sensitive to search paths.

289
00:19:43,550 --> 00:19:47,654
It's behind the expr, p, and po commands.

290
00:19:47,688 --> 00:19:50,057
A good way to get at
the compiler diagnostics

291
00:19:50,090 --> 00:19:54,695
is the new swift-healthcheck command
in LLDB.

292
00:19:54,728 --> 00:19:56,430
Thank you for watching!  â™ª â™ª

