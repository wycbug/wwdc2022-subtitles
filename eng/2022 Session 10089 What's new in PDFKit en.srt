1
00:00:01,468 --> 00:00:07,474
[spacey music]

2
00:00:09,877 --> 00:00:11,912
Conrad: I'm Conrad Carlen, and today,

3
00:00:11,945 --> 00:00:14,481
I'll be talking about what's new
in PDFKit.

4
00:00:14,515 --> 00:00:15,883
Here's our agenda.

5
00:00:15,916 --> 00:00:19,520
First a quick review of PDFKit,

6
00:00:19,553 --> 00:00:21,455
and then, look at what's new,

7
00:00:21,488 --> 00:00:24,558
including Live text and forms,

8
00:00:24,591 --> 00:00:27,628
a new way to make PDF pages from images,

9
00:00:27,661 --> 00:00:30,831
and, finally, overlay views.

10
00:00:30,864 --> 00:00:33,567
Let's start with a quick refresher
on how PDFKit works.

11
00:00:34,501 --> 00:00:38,539
PDFKit is a full-featured framework
that helps your app view,

12
00:00:38,572 --> 00:00:41,041
edit, and write PDF files.

13
00:00:41,074 --> 00:00:44,978
It's available on iOS, macOS,
and Mac Catalyst,

14
00:00:45,012 --> 00:00:49,616
and it can also be used in SwiftUI
by way of UIViewRepresentable,

15
00:00:49,650 --> 00:00:54,888
a wrapper that lets you integrate
UI views into your app.

16
00:00:54,922 --> 00:00:58,592
PDFKit consists of 4 core classes
that cover most of the functionality

17
00:00:58,625 --> 00:01:00,694
you'll need in your app.

18
00:01:00,727 --> 00:01:03,430
PDFView is the widget
that you include in your layout

19
00:01:03,463 --> 00:01:05,966
using SwiftUI or Interface Builder.

20
00:01:05,999 --> 00:01:09,670
It displays the content of a PDF document
and lets people navigate,

21
00:01:09,703 --> 00:01:12,372
set zoom level,
and copy text to the Pasteboard.

22
00:01:13,507 --> 00:01:16,710
PDFDocument represents a PDF file.

23
00:01:16,743 --> 00:01:20,681
It's not common to subclass PDFDocument,
but you will always use one.

24
00:01:20,714 --> 00:01:24,518
It's the root of the PDF object graph,
or the trunk of the tree.

25
00:01:24,551 --> 00:01:26,720
You can't have a tree
without one of these.

26
00:01:28,455 --> 00:01:32,192
Each document contains one
or more PDFPage objects.

27
00:01:32,226 --> 00:01:36,263
Pages render content and store resources
like fonts and images

28
00:01:36,296 --> 00:01:37,631
that are unique to that page.

29
00:01:38,799 --> 00:01:41,969
At the leaves of our object graph
are PDFAnnotations.

30
00:01:42,002 --> 00:01:43,537
These are optional.

31
00:01:43,570 --> 00:01:46,306
Whereas the content of a PDFPage
is not intended to be edited,

32
00:01:46,340 --> 00:01:49,610
annotations are interactive
by nature and often editable.

33
00:01:50,177 --> 00:01:53,947
Each of these objects will play a role
in what I'll cover today.

34
00:01:53,981 --> 00:01:55,949
To learn more about the fundamentals
of PDFKit,

35
00:01:55,983 --> 00:01:59,953
check out the great presentation
"Introducing PDFKit" in the link below.

36
00:02:01,989 --> 00:02:07,160
Now, let's talk about new features
introduced in iOS 16 and macOS Ventura.

37
00:02:08,228 --> 00:02:11,131
PDFKit now supports Live Text.

38
00:02:11,164 --> 00:02:13,000
It's different than in Photos,
where the text

39
00:02:13,033 --> 00:02:16,703
is often a small amount
that you can tap to copy.

40
00:02:16,737 --> 00:02:21,275
Unlike with photos, with a PDF,
if you see text, it generally is text,

41
00:02:21,308 --> 00:02:25,312
and people expect it to behave as such
without doing anything special.

42
00:02:25,345 --> 00:02:27,614
Now, with Live Text,
you can select and search

43
00:02:27,648 --> 00:02:30,517
text in a PDF document like this one.

44
00:02:30,551 --> 00:02:32,886
It's just a scanned bitmap,
with no text at all.

45
00:02:34,188 --> 00:02:36,890
Of course, PDFs can have many pages.

46
00:02:36,924 --> 00:02:40,594
You wouldn't want to grind through OCR
on all the pages of a PDF document

47
00:02:40,627 --> 00:02:41,895
when you open it,

48
00:02:41,929 --> 00:02:45,566
so PDFKit does it on demand,
as you interact with each page,

49
00:02:45,599 --> 00:02:47,534
if you interact with it.

50
00:02:47,568 --> 00:02:51,605
OCR is done in place, so there's no need
to make a copy of the document.

51
00:02:52,472 --> 00:02:55,209
And, if you choose to save text
for the whole document,

52
00:02:55,242 --> 00:02:56,877
there's an option to do so when saving.

53
00:02:58,478 --> 00:03:02,783
In addition to live text,
PDFKit has improved form handling.

54
00:03:02,816 --> 00:03:05,719
Documents that contain form fields
are automatically recognized,

55
00:03:05,752 --> 00:03:08,522
even if they don't contain
built-in text fields.

56
00:03:08,555 --> 00:03:11,191
You can tab through these text fields
and enter text,

57
00:03:11,225 --> 00:03:12,526
just like you would expect.

58
00:03:14,394 --> 00:03:18,365
Next, let's talk about a new API
for creating PDF pages from images.

59
00:03:20,567 --> 00:03:24,605
In iOS 16 and macOS Ventura,
there's a new, flexible API

60
00:03:24,638 --> 00:03:28,041
that lets your app create PDF pages
using images as inputs.

61
00:03:28,809 --> 00:03:32,012
Your app supplies images using CGImageRef.

62
00:03:32,045 --> 00:03:35,549
PDFKit takes the CGImageRef
that you provide and compresses it

63
00:03:35,582 --> 00:03:37,518
using high-quality JPEG encoding.

64
00:03:38,285 --> 00:03:41,455
Because CGImageRef is
a native data type in CoreGraphics,

65
00:03:41,488 --> 00:03:43,657
additional conversions are unnecessary.

66
00:03:44,725 --> 00:03:48,161
There are several options that help you
handle the most common cases.

67
00:03:49,463 --> 00:03:52,599
MediaBox specifies the size of the page.

68
00:03:52,633 --> 00:03:56,937
You can choose to fit the image exactly,
or choose a paper size, like Letter.

69
00:03:58,372 --> 00:04:02,009
Rotation lets you specify
portrait or landscape orientation.

70
00:04:03,210 --> 00:04:04,444
UpscaleIfSmaller.

71
00:04:04,478 --> 00:04:07,080
By default,
if the image is larger than the MediaBox,

72
00:04:07,114 --> 00:04:09,216
the image is downscaled to fit.

73
00:04:09,249 --> 00:04:12,452
If UpscaleIfSmaller is specified,
that still applies,

74
00:04:12,486 --> 00:04:16,456
but, if the image is small,
it will be upscaled to fill the page.

75
00:04:18,292 --> 00:04:21,562
And now, to answer a question
that many of you have asked--

76
00:04:21,595 --> 00:04:24,865
"How can I draw on PDF pages
using PencilKit?"--

77
00:04:24,898 --> 00:04:27,301
the answer is to use an overlay view.

78
00:04:28,535 --> 00:04:31,538
In the past, the only way to do
additional drawing on PDFs

79
00:04:31,572 --> 00:04:34,842
was to subclass PDFPage
and override the drawing method,

80
00:04:34,875 --> 00:04:37,678
or by using custom PDF annotations.

81
00:04:37,711 --> 00:04:41,615
But starting in iOS 16 and macOS Ventura,
it's now possible

82
00:04:41,648 --> 00:04:44,952
to overlay your own view
on top of each PDF page.

83
00:04:44,985 --> 00:04:47,988
This allows your app to create
live, fully interactive views

84
00:04:48,021 --> 00:04:49,756
that appear on top of PDF pages.

85
00:04:50,557 --> 00:04:53,961
Here are the 3 things you need
to know about overlaying views.

86
00:04:54,695 --> 00:04:58,265
First, you'll use a new protocol
to install your overlay view

87
00:04:58,298 --> 00:04:59,733
on a PDF page.

88
00:05:00,934 --> 00:05:05,339
When it comes time to save, you'll need
to incorporate your content into the PDF.

89
00:05:06,306 --> 00:05:09,576
And, speaking of saving, we'll cover
some best practices

90
00:05:09,610 --> 00:05:11,311
when saving a PDF document.

91
00:05:13,280 --> 00:05:17,885
Installing overlay views
on PDF Pages is straightforward.

92
00:05:17,918 --> 00:05:21,121
Because PDFs can contain hundreds,
if not thousands, of pages,

93
00:05:21,154 --> 00:05:25,792
there's no way you want to create views
for all of those pages when opening a PDF.

94
00:05:25,826 --> 00:05:28,562
And what if the user scrolls
back and forth rapidly?

95
00:05:28,595 --> 00:05:30,464
How do you know when to create your views?

96
00:05:31,732 --> 00:05:35,869
Fortunately, PDFKit is already designed
to intelligently prepare content

97
00:05:35,903 --> 00:05:38,238
before people scroll pages into view.

98
00:05:38,272 --> 00:05:41,341
So it knows best
when to ask for an overlay view.

99
00:05:41,375 --> 00:05:43,777
Your app just needs to respond
to its requests

100
00:05:43,810 --> 00:05:45,546
that are made through the new protocol.

101
00:05:47,881 --> 00:05:51,685
PDFPageOverlayViewProvider
is the new protocol.

102
00:05:51,718 --> 00:05:56,924
By the way, PDFKitPlatformView is just
a define of UIView or NSView,

103
00:05:56,957 --> 00:05:59,593
depending on the platform.

104
00:05:59,626 --> 00:06:03,730
The most important method you need
to implement is overlayViewForPage.

105
00:06:04,398 --> 00:06:07,835
Simply provide an instance
of your view, and PDFKit will size it

106
00:06:07,868 --> 00:06:10,070
by applying the appropriate constraints.

107
00:06:10,103 --> 00:06:13,173
It will also rotate it
if the page has a non-zero rotation.

108
00:06:14,641 --> 00:06:16,643
The next 2 methods are optional.

109
00:06:16,677 --> 00:06:20,414
willDisplayOverlayView can be used
to install your own gesture handlers,

110
00:06:20,447 --> 00:06:23,917
or to set up failure relationships
with those of PDFKit.

111
00:06:25,619 --> 00:06:30,224
willEndDisplayingOverlayView is called
when PDFKit is done with your view,

112
00:06:30,257 --> 00:06:32,559
likely because
the page scrolled out of view.

113
00:06:32,593 --> 00:06:37,431
You can release your view here, but there
is another important use for this method.

114
00:06:37,464 --> 00:06:40,968
Assuming your view has some data
to represent what it's drawing,

115
00:06:41,001 --> 00:06:44,671
you can use this method
to get that data and set it aside.

116
00:06:44,705 --> 00:06:47,474
We'll do that in
our example with PencilKit,

117
00:06:47,508 --> 00:06:49,977
but, if your view data lives
somewhere else,

118
00:06:50,010 --> 00:06:51,612
you won't need to implement this.

119
00:06:53,380 --> 00:06:57,150
In the example, this is the class
we're using as the provider.

120
00:06:57,184 --> 00:07:01,154
It implements
the PDFPageOverlayViewProvider protocol.

121
00:07:01,188 --> 00:07:05,392
This is iOS, so the PDFKitPlatformView
is a UIView.

122
00:07:05,425 --> 00:07:09,029
It uses a map
to go from a PDFPage to a UIView.

123
00:07:09,930 --> 00:07:12,132
Here are the placeholder protocol methods.

124
00:07:12,165 --> 00:07:15,169
Next, lets look at the implementations.

125
00:07:15,202 --> 00:07:18,238
overlayViewForPage checks
its pageToView map

126
00:07:18,272 --> 00:07:20,908
to see if it's already made a view
for the given page.

127
00:07:20,941 --> 00:07:23,010
If not, it creates a new view.

128
00:07:23,043 --> 00:07:25,679
In either case, we get the drawing
from the page

129
00:07:25,712 --> 00:07:28,182
and set that on the canvas view.

130
00:07:28,215 --> 00:07:32,252
In these examples,
I'm using a subclass of PDFPage.

131
00:07:32,286 --> 00:07:34,521
All it does is
to add a "drawing" property.

132
00:07:37,691 --> 00:07:42,196
And now, let's focus on the next method:
WillEndDisplayingOverlay.

133
00:07:44,264 --> 00:07:46,466
willEndDisplayingOverlayView is simple.

134
00:07:46,500 --> 00:07:51,939
It gets the drawing from the view
and stores it on our custom page class.

135
00:07:51,972 --> 00:07:54,408
Now that we've done that,
let's see it in action.

136
00:07:56,076 --> 00:07:59,713
Normally, around this time off the year,
I would be in Maine, fishing,

137
00:07:59,746 --> 00:08:01,982
but instead, I'm here at WWDC,

138
00:08:02,015 --> 00:08:04,618
so another person is taking my place
on the trip,

139
00:08:04,651 --> 00:08:07,521
and I'm going to show him
some of my favorite spots.

140
00:08:07,554 --> 00:08:09,723
I'll be doing that with this app,

141
00:08:09,756 --> 00:08:12,159
which uses PencilKit in an overlay view.

142
00:08:12,793 --> 00:08:16,129
This app consists of the code we just saw
and little else.

143
00:08:16,163 --> 00:08:21,001
The entirety of the code to get
overlay views onscreen is about 30 lines!

144
00:08:21,034 --> 00:08:24,972
So, Grand Lake Stream.
This is the dam pool.

145
00:08:25,005 --> 00:08:28,675
There are always lots of fish in there.
It's where most of the action is.

146
00:08:28,709 --> 00:08:30,811
You can get to the dam pool

147
00:08:30,844 --> 00:08:33,647
by taking this trail down
through the woods and then fishing.

148
00:08:33,680 --> 00:08:35,449
You can fish all of that stuff,

149
00:08:35,482 --> 00:08:40,053
or you can take this road,
go over the dam,

150
00:08:40,087 --> 00:08:41,522
and down around through here.

151
00:08:41,555 --> 00:08:43,857
From there, you can fish up into here,

152
00:08:43,891 --> 00:08:46,326
go around the island, down into here,

153
00:08:46,360 --> 00:08:49,763
but whatever you do,
don't go past here.

154
00:08:49,796 --> 00:08:52,599
The water gets deep and fast.

155
00:08:52,633 --> 00:08:56,670
Avoid that and come down here,

156
00:08:56,703 --> 00:08:58,572
to the hatchery.

157
00:08:58,605 --> 00:09:02,009
Walk down beside the hatchery

158
00:09:02,042 --> 00:09:04,578
and enter this pool here.

159
00:09:04,611 --> 00:09:06,580
You can cast all around through here

160
00:09:06,613 --> 00:09:09,283
This is a great spot.
I always catch fish here.

161
00:09:10,317 --> 00:09:14,588
All right, now that we have some marks
on the page,

162
00:09:14,621 --> 00:09:16,423
let's exercise zooming and scrolling.

163
00:09:17,891 --> 00:09:19,059
See how responsive it is?

164
00:09:25,299 --> 00:09:26,233
And there we have it.

165
00:09:26,266 --> 00:09:28,235
Overlay views in PDFKit.

166
00:09:28,268 --> 00:09:31,738
So, now that you have these sketches,
how do you save them?

167
00:09:31,772 --> 00:09:34,441
We'll use the PDFAnnotation class
to do this.

168
00:09:34,474 --> 00:09:37,144
There are 2 things we want to achieve when
saving:

169
00:09:37,177 --> 00:09:39,379
We want to match the onscreen appearance

170
00:09:39,413 --> 00:09:40,848
with high fidelity,

171
00:09:40,881 --> 00:09:43,217
and we want to do round-trip editing.

172
00:09:43,250 --> 00:09:47,554
PDF annotations have some features
that will facilitate this.

173
00:09:47,588 --> 00:09:49,590
PDF annotations can have an
"appearance stream,"

174
00:09:49,623 --> 00:09:52,526
which is a stream of PDF drawing commands.

175
00:09:52,559 --> 00:09:55,195
Nearly anything that you can draw
using Quartz2D

176
00:09:55,229 --> 00:09:57,731
can be recorded in an appearance stream.

177
00:09:57,764 --> 00:10:02,102
Anything else can be rendered
into an image, and that can be recorded.

178
00:10:02,135 --> 00:10:03,904
That's how we do it if we're using Metal.

179
00:10:04,771 --> 00:10:07,074
And, since it's recorded as PDF drawing,

180
00:10:07,107 --> 00:10:10,043
it will look identical in Adobe Reader,
Chrome, etc.

181
00:10:11,378 --> 00:10:14,915
PDF annotations are stored
as dictionaries in a PDF document.

182
00:10:14,948 --> 00:10:18,685
That means we can also store custom data
in private key/value pairs.

183
00:10:19,653 --> 00:10:22,756
So let's see what the code looks like.

184
00:10:22,789 --> 00:10:26,360
Start by creating a subclass
of PDFAnnotation.

185
00:10:26,393 --> 00:10:28,795
We do this in order to override
the draw() method.

186
00:10:29,596 --> 00:10:32,766
PDFKit will call this method when it saves
the appearance stream

187
00:10:32,799 --> 00:10:34,434
that I mentioned on the last slide.

188
00:10:36,336 --> 00:10:39,640
To save our document, we override
UIDocument's contents().

189
00:10:39,673 --> 00:10:43,610
Here is an overview of the function,
for context later.

190
00:10:43,644 --> 00:10:47,147
We loop through all pages
of the PDFDocument.

191
00:10:47,181 --> 00:10:49,316
We'll flesh out the loop next.

192
00:10:51,084 --> 00:10:53,253
We do the following for each page:

193
00:10:53,287 --> 00:10:57,090
create an annotation of our custom class;

194
00:10:57,124 --> 00:11:00,527
encode our drawing into data;

195
00:11:00,561 --> 00:11:02,129
add the data to our annotation.

196
00:11:02,162 --> 00:11:06,300
Next time, when we open this document,
we can use value:forAnnotationKey

197
00:11:06,333 --> 00:11:08,235
to read back the stored drawing data

198
00:11:08,268 --> 00:11:10,003
and put that into our overlay view.

199
00:11:11,238 --> 00:11:14,174
Finally, add the annotation to the page.

200
00:11:15,075 --> 00:11:16,944
Back to our contents() override.

201
00:11:16,977 --> 00:11:20,881
Now that we have added annotations
to our pages,

202
00:11:20,914 --> 00:11:25,018
We use PDFDocument's dataRepresentation()
and return the result.

203
00:11:26,153 --> 00:11:28,589
When your content
is saved as an annotation,

204
00:11:28,622 --> 00:11:31,892
a recipient of the document can move it,
resize it, or delete it.

205
00:11:31,925 --> 00:11:33,260
Often, that's what you want.

206
00:11:33,293 --> 00:11:38,232
But sometimes, you want your annotations
to be "burned in," as part of the page.

207
00:11:38,265 --> 00:11:42,970
There is a new PDFDocumentWriteOption
in iOS 16 and macOS Ventura

208
00:11:43,003 --> 00:11:44,404
that makes this easy.

209
00:11:44,438 --> 00:11:47,274
Just add burnInAnnotationsOption = true

210
00:11:47,307 --> 00:11:49,142
to the save options, and that does it.

211
00:11:50,544 --> 00:11:52,779
Speaking of PDF writing options,
there are a few

212
00:11:52,813 --> 00:11:56,717
that have been made available
in iOS 16 and macOS Ventura.

213
00:11:56,750 --> 00:11:58,418
Let's look at them.

214
00:11:58,452 --> 00:12:01,488
CoreGraphics has always strived
to save images in PDFs

215
00:12:01,522 --> 00:12:03,423
with maximum fidelity,

216
00:12:03,457 --> 00:12:07,294
so images are saved at full resolution,
with lossless compression.

217
00:12:07,327 --> 00:12:10,898
That's great if the PDF will be printed
on a large-format printer.

218
00:12:10,931 --> 00:12:13,634
More likely, though,
it will be displayed on screen,

219
00:12:13,667 --> 00:12:18,005
and all of that high-fidelity image data
will result in a file that's very large.

220
00:12:18,038 --> 00:12:20,807
To address that, I introduce
the next two options.

221
00:12:21,942 --> 00:12:25,379
saveAllImagesAsJPEG
does just what it says.

222
00:12:25,412 --> 00:12:28,015
No matter how the image was created,
it will be saved

223
00:12:28,048 --> 00:12:30,150
with JPEG encoding in the PDF.

224
00:12:31,351 --> 00:12:34,154
optimizeImagesForScreen
will downsample images

225
00:12:34,188 --> 00:12:37,057
to a maximum of HiDPI screen resolution.

226
00:12:37,090 --> 00:12:39,159
These two options may be used together.

227
00:12:41,428 --> 00:12:44,665
createLinearizedPDF will create
a special kind of PDF

228
00:12:44,698 --> 00:12:46,600
that's optimized for the internet.

229
00:12:46,633 --> 00:12:50,971
The PDF format, as originally designed
right before the Internet came along,

230
00:12:51,004 --> 00:12:53,207
is read from the end of the file.

231
00:12:53,240 --> 00:12:55,876
That means the entirety of it needs
to be downloaded first

232
00:12:55,909 --> 00:12:57,911
before anything is displayed.

233
00:12:57,945 --> 00:13:01,415
A linearized PDF has everything
needed to display the first page

234
00:13:01,448 --> 00:13:03,450
at the beginning of the file,

235
00:13:03,483 --> 00:13:05,419
so a web browser can show that quickly

236
00:13:05,452 --> 00:13:06,920
while the rest of it is loaded.

237
00:13:08,722 --> 00:13:12,059
You can pass these options
to PDFDocument's dataRepresentation

238
00:13:12,092 --> 00:13:14,394
or writeToURL methods.

239
00:13:14,428 --> 00:13:18,131
And there we have it.
PDFKit is powerful, yet easy to use,

240
00:13:18,165 --> 00:13:21,902
used by many of your apps today on iOS
and macOS,

241
00:13:21,935 --> 00:13:25,239
and now with new features for iOS 16 and
macOS Ventura.

242
00:13:25,272 --> 00:13:27,307
I'm stoked to see what you do with them!

243
00:13:28,642 --> 00:13:30,511
To learn more,
check out the sessions below

244
00:13:30,544 --> 00:13:32,012
for additional information.

245
00:13:32,045 --> 00:13:33,146
Thank you for watching!

246
00:13:33,180 --> 00:13:36,183
[spacey music]

