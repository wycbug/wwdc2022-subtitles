1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,810 --> 00:00:13,914
Ahmed: Hi, my name is Ahmed, and
I work on the Clang and Swift compilers.

3
00:00:13,947 --> 00:00:17,684
In this session we're going to dive deep
into changes we've made

4
00:00:17,718 --> 00:00:21,788
to make common Swift and Objective-C
operations faster and more efficient,

5
00:00:21,822 --> 00:00:24,558
so that we can improve your app's size
and runtime performance.

6
00:00:25,259 --> 00:00:27,494
When you write code
in Swift or Objective-C,

7
00:00:27,528 --> 00:00:30,764
you're always really interacting
with two major components.

8
00:00:30,797 --> 00:00:32,733
First, you build using Xcode,

9
00:00:32,766 --> 00:00:35,435
and that uses the Swift
and Clang compilers.

10
00:00:35,469 --> 00:00:38,138
But when you run your app,
a lot of the heavy lifting is done

11
00:00:38,172 --> 00:00:41,441
in the Swift and Objective-C Runtime.

12
00:00:41,475 --> 00:00:45,345
The runtime is embedded in the operating
systems for all of our platforms.

13
00:00:45,379 --> 00:00:50,584
What the compiler cannot do at build time,
the runtime does, well, at run time.

14
00:00:50,617 --> 00:00:52,386
We're going to look at several
improvements we've made

15
00:00:52,419 --> 00:00:54,488
in both compilers and runtimes.

16
00:00:54,521 --> 00:00:58,192
Now, this session is a bit unusual;
there are no new APIs,

17
00:00:58,225 --> 00:01:00,727
language changes, or new build settings.

18
00:01:00,761 --> 00:01:03,430
You don't have to change your code,
so all these improvements are transparent

19
00:01:03,463 --> 00:01:05,632
to you, the developer.

20
00:01:05,666 --> 00:01:06,700
Let's dive in.

21
00:01:06,733 --> 00:01:08,902
We're going to look at four improvements.

22
00:01:08,936 --> 00:01:11,538
We've made protocol checks in Swift
more efficient,

23
00:01:11,572 --> 00:01:14,708
we've also made Objective-C message send
calls smaller,

24
00:01:14,741 --> 00:01:16,944
as we did retain and release calls,

25
00:01:16,977 --> 00:01:21,248
and finally, we've made autorelease
elision faster and smaller.

26
00:01:21,281 --> 00:01:22,783
Let's take a closer look.

27
00:01:23,917 --> 00:01:25,953
Let's start with protocol checks in Swift.

28
00:01:27,421 --> 00:01:30,090
Here we have a CustomLoggable protocol.

29
00:01:30,123 --> 00:01:33,527
It has a read-only computed property
customLogString,

30
00:01:33,560 --> 00:01:35,262
and we can use it in our log function,

31
00:01:35,295 --> 00:01:38,832
that has special handling
for CustomLoggable objects.

32
00:01:38,866 --> 00:01:42,636
Later, we're defining an Event type
with name and date fields.

33
00:01:42,669 --> 00:01:45,272
And we're conforming
to the CustomLoggable protocol,

34
00:01:45,305 --> 00:01:48,809
by defining the getter
for the customLogString property.

35
00:01:49,910 --> 00:01:53,247
And this lets us pass
Event objects to our 'log' function.

36
00:01:53,280 --> 00:01:56,450
When we execute this code,
the 'log' function needs to check

37
00:01:56,483 --> 00:01:59,553
whether the value we passed
conforms to the protocol.

38
00:01:59,586 --> 00:02:04,024
And it does that using the 'as' operator.
You may also have seen the 'is' operator.

39
00:02:05,425 --> 00:02:09,930
Whenever possible, this check is optimized
away at build time, in the compiler.

40
00:02:09,963 --> 00:02:13,767
However, we don't always
have enough information yet.

41
00:02:13,800 --> 00:02:15,802
So this often needs to happen
in the runtime,

42
00:02:15,836 --> 00:02:20,340
with the help of protocol check metadata
we compute earlier.

43
00:02:20,374 --> 00:02:23,810
With this metadata, the runtime knows
whether this particular object

44
00:02:23,844 --> 00:02:25,846
really does conform to the protocol,

45
00:02:25,879 --> 00:02:27,581
and the check succeeds.

46
00:02:29,016 --> 00:02:31,485
Part of the metadata is built
at compile time,

47
00:02:31,518 --> 00:02:33,587
but a lot can only be built
at launch time,

48
00:02:33,620 --> 00:02:35,656
particularly when using Generics.

49
00:02:36,390 --> 00:02:40,761
When you use a lot of protocols, this can
add up to hundreds of milliseconds.

50
00:02:40,794 --> 00:02:45,599
On real-world apps, we've seen this take
up to half of the launch time.

51
00:02:45,632 --> 00:02:48,869
With the new Swift runtime,
we now precompute these ahead of time,

52
00:02:48,902 --> 00:02:51,538
as part of the dyld closure
for the app executable

53
00:02:51,572 --> 00:02:54,074
and any dylib it uses at launch.

54
00:02:54,107 --> 00:02:56,877
Best of all,
this is enabled even for existing apps

55
00:02:56,910 --> 00:03:01,048
when running on iOS 16, tvOS 16,
or watchOS 9.

56
00:03:01,081 --> 00:03:03,684
If you'd like to learn more
about dyld and launch closures,

57
00:03:03,717 --> 00:03:07,521
watch the talk "App Startup Time:
Past, Present, and Future."

58
00:03:07,554 --> 00:03:09,389
That was protocol checks in Swift.

59
00:03:10,791 --> 00:03:13,427
Let's move on to message send.

60
00:03:14,361 --> 00:03:17,197
With the new compilers
and linker in Xcode 14,

61
00:03:17,231 --> 00:03:19,833
we've made message send calls
up to 8 bytes smaller,

62
00:03:19,867 --> 00:03:22,636
down from 12, on ARM64.

63
00:03:22,669 --> 00:03:25,205
As we'll see in just a moment,
message send is really everywhere,

64
00:03:25,239 --> 00:03:26,607
so this adds up,

65
00:03:26,640 --> 00:03:30,811
and we've seen up to 2% code size
improvements on binaries.

66
00:03:30,844 --> 00:03:33,714
This is enabled automatically
when building with Xcode 14,

67
00:03:33,747 --> 00:03:38,051
even if you use an older OS release
as deployment target.

68
00:03:38,085 --> 00:03:40,854
It defaults to a balance
of size win and performance,

69
00:03:40,888 --> 00:03:43,223
but you can opt into optimizing
for size only,

70
00:03:43,257 --> 00:03:46,593
using the objc_stubs_small linker flag.

71
00:03:46,627 --> 00:03:49,496
Now let's look into what changed.

72
00:03:49,530 --> 00:03:50,831
So let's start with an example.

73
00:03:50,864 --> 00:03:54,168
Here we're trying to make an NSDate
for the start day of the conference.

74
00:03:54,201 --> 00:03:56,303
We start by making an NSCalendar,

75
00:03:56,336 --> 00:03:58,205
then we fill out NSDateComponents,

76
00:03:58,238 --> 00:04:01,742
make a date out of that,
and finally return it.

77
00:04:01,775 --> 00:04:05,012
Now let's look at the assembly
the compiler generates.

78
00:04:05,045 --> 00:04:07,314
Now, the details of the assembly
aren't super important.

79
00:04:07,347 --> 00:04:11,018
Us compiler folks stare at it all day
so that you don't have to.

80
00:04:11,051 --> 00:04:13,820
What's important is that
almost every line here

81
00:04:13,854 --> 00:04:16,690
ends up needing an instruction
to call objc_msgSend,

82
00:04:16,723 --> 00:04:21,628
even when doing property accesses
like we do for the date components.

83
00:04:21,662 --> 00:04:24,464
This is because at compile time,
we don't know which method to call,

84
00:04:24,498 --> 00:04:26,834
and it's only the objc runtime that does.

85
00:04:26,867 --> 00:04:29,002
So we call into the runtime
using objc_msgSend

86
00:04:29,036 --> 00:04:32,039
to ask it to find the right method.

87
00:04:32,072 --> 00:04:34,608
Let's focus on one of these calls.

88
00:04:34,641 --> 00:04:37,411
We already mentioned
the instruction to call objc_msgSend.

89
00:04:37,444 --> 00:04:38,745
But there's more.

90
00:04:38,779 --> 00:04:40,614
To tell the runtime which method to call,

91
00:04:40,647 --> 00:04:44,952
we have to pass a selector
to these objc_msgSend calls.

92
00:04:44,985 --> 00:04:48,422
That needs a couple more instructions
to prepare the selector.

93
00:04:48,455 --> 00:04:52,292
When we look at the binary, each of these
instructions takes a little bit of space.

94
00:04:52,326 --> 00:04:55,529
On ARM64, that's 4 bytes each.

95
00:04:55,562 --> 00:04:59,566
So for each of these objc_msgSend calls,
we're using 12 bytes,

96
00:04:59,600 --> 00:05:01,602
and we need that for every single one
of these calls;

97
00:05:01,635 --> 00:05:04,505
that really adds up.

98
00:05:04,538 --> 00:05:06,473
Let's see what we can do to improve that.

99
00:05:08,509 --> 00:05:09,843
Now, as we've seen before,

100
00:05:09,877 --> 00:05:13,447
8 of those bytes are dedicated
to preparing the selector.

101
00:05:13,480 --> 00:05:17,885
Interesting thing is, for any given
selector, it's always the same code.

102
00:05:17,918 --> 00:05:21,088
And this is where
our optimization comes in.

103
00:05:21,121 --> 00:05:23,190
Since this is always the same code,
we can share it

104
00:05:23,223 --> 00:05:25,292
and only emit it once per selector

105
00:05:25,325 --> 00:05:27,961
instead of every time
we do a message send.

106
00:05:27,995 --> 00:05:30,797
We can take it out and put it
into a little helper function,

107
00:05:30,831 --> 00:05:33,534
and call that function instead.

108
00:05:33,567 --> 00:05:35,702
Over many calls using the same selector,

109
00:05:35,736 --> 00:05:38,338
we can save all these instruction bytes.

110
00:05:38,372 --> 00:05:40,941
We call this helper function
a "selector stub."

111
00:05:42,442 --> 00:05:45,245
We still need to call the real
objc_msgSend function, though,

112
00:05:45,279 --> 00:05:47,681
so we continue onto that.

113
00:05:47,714 --> 00:05:51,084
And again, that has another,
different, indirection to load the address

114
00:05:51,118 --> 00:05:53,520
of the function itself and call it.

115
00:05:53,554 --> 00:05:55,989
The details aren't important,
but what's important is that we need

116
00:05:56,023 --> 00:05:58,192
another several bytes of code to do that.

117
00:05:59,860 --> 00:06:01,695
And this is where you can choose
which mode you want,

118
00:06:01,728 --> 00:06:03,630
as I mentioned earlier.

119
00:06:03,664 --> 00:06:07,434
We can either keep these two little stub
functions separate, like we've done here.

120
00:06:07,467 --> 00:06:09,636
We get to share the most code,
and make these functions

121
00:06:09,670 --> 00:06:11,905
as small as possible.

122
00:06:11,939 --> 00:06:14,174
But unfortunately,
this would do two calls back to back,

123
00:06:14,208 --> 00:06:17,444
which is not ideal for performance.

124
00:06:17,477 --> 00:06:20,781
So we can further improve this
with an alternative version.

125
00:06:20,814 --> 00:06:25,652
We can take these two stub functions
we've created, combine them into one.

126
00:06:25,686 --> 00:06:29,156
That way, we keep the code closer together
and we don't need as many calls.

127
00:06:29,189 --> 00:06:31,124
And that's on the right here.

128
00:06:32,226 --> 00:06:33,894
So these are the two options.

129
00:06:33,927 --> 00:06:36,096
You can choose whether
to optimize for size alone,

130
00:06:36,129 --> 00:06:38,765
and get the maximum
size savings available.

131
00:06:38,799 --> 00:06:42,636
You can enable that using
the -objc_stubs_small linker flag,

132
00:06:42,669 --> 00:06:45,906
or you can use the code generation
that provides size benefits

133
00:06:45,939 --> 00:06:48,375
while keeping the best performance.

134
00:06:48,408 --> 00:06:51,345
And unless you're severely
size-constrained, we recommend using this,

135
00:06:51,378 --> 00:06:54,181
and that's why it's the default.

136
00:06:54,214 --> 00:06:57,050
And that was smaller message send
using stubs.

137
00:06:57,084 --> 00:07:01,488
Another improvement we've made
is making retain/release cheaper.

138
00:07:01,522 --> 00:07:03,357
With the new compilers in Xcode 14,

139
00:07:03,390 --> 00:07:05,759
retain/release calls are now
up to 4 bytes smaller,

140
00:07:05,792 --> 00:07:08,629
down from 8 on ARM64.

141
00:07:08,662 --> 00:07:11,131
As we'll see in just a moment,
just like message send,

142
00:07:11,164 --> 00:07:13,000
retain/release is also everywhere.

143
00:07:13,033 --> 00:07:18,539
So this adds up, and we've seen up to 2%
more code size improvements on binaries.

144
00:07:18,572 --> 00:07:21,775
Now, unlike message send stubs,
this does need runtime support,

145
00:07:21,808 --> 00:07:24,545
so you'll get this automatically
as you migrate to a deployment target

146
00:07:24,578 --> 00:07:28,248
of iOS 16, tvOS 16, or watchOS 9.

147
00:07:28,282 --> 00:07:31,018
Now let's look into what changed.

148
00:07:31,051 --> 00:07:32,853
Let's go back to our example.

149
00:07:32,886 --> 00:07:35,055
We talked about msgSend calls,

150
00:07:35,088 --> 00:07:37,591
but with automatic reference counting,
or ARC,

151
00:07:37,624 --> 00:07:39,726
we also end up with a lot
of retain/release calls

152
00:07:39,760 --> 00:07:42,462
inserted by the compiler.

153
00:07:42,496 --> 00:07:45,999
At a very high level, whenever we make
a copy of a pointer to an object,

154
00:07:46,033 --> 00:07:49,102
we need to increment
its retain count to keep it live.

155
00:07:49,136 --> 00:07:53,707
And here, this happens with our variables
cal, dateComponent, and theDate.

156
00:07:53,740 --> 00:07:57,644
We do that by calling into the runtime,
using objc_retain.

157
00:07:57,678 --> 00:07:59,079
When the variables go out of scope,

158
00:07:59,112 --> 00:08:03,383
we then need to decrement the retain count
using objc_release.

159
00:08:03,417 --> 00:08:06,353
Of course, part of the benefit of ARC
is all the compiler magic

160
00:08:06,386 --> 00:08:10,257
that eliminates a lot of these calls,
to keep them to a minimum.

161
00:08:10,290 --> 00:08:13,894
And we're going to go into one
of these magic tricks a little bit later.

162
00:08:13,927 --> 00:08:17,898
But even with all the magic,
we still often need these calls.

163
00:08:17,931 --> 00:08:21,435
In this example, we end up needing
to release our local copies of calendar

164
00:08:21,468 --> 00:08:23,036
and dateComponents.

165
00:08:24,605 --> 00:08:27,474
Under the hood,
these objc_retain/release functions

166
00:08:27,508 --> 00:08:29,276
are just plain C functions;

167
00:08:29,309 --> 00:08:32,613
take a single argument,
the object to be released.

168
00:08:32,646 --> 00:08:36,049
So with ARC, the compiler inserts calls
to these C functions,

169
00:08:36,083 --> 00:08:38,852
passing the appropriate object pointers.

170
00:08:38,886 --> 00:08:42,189
Because of that, these calls
have to respect the C calling convention,

171
00:08:42,222 --> 00:08:46,093
defined by our platform
Application Binary Interface, or ABI.

172
00:08:46,126 --> 00:08:49,496
Concretely, what that means
is that we need even more code

173
00:08:49,530 --> 00:08:53,433
to do these calls,
to pass the pointer in the right register.

174
00:08:53,467 --> 00:08:57,037
So we end up with a few additional
'move' instructions just for that.

175
00:08:57,070 --> 00:09:00,440
And that's where
our new optimization comes in.

176
00:09:00,474 --> 00:09:03,877
By specializing retain/release
with a custom calling convention,

177
00:09:03,911 --> 00:09:06,547
we can opportunistically use
the right variant

178
00:09:06,580 --> 00:09:09,316
depending on where
the object pointer already is,

179
00:09:09,349 --> 00:09:11,919
so that we don't need to move it.

180
00:09:11,952 --> 00:09:15,455
Concretely, what this means is,
we get rid of a bunch of redundant code

181
00:09:15,489 --> 00:09:17,124
for all these calls.

182
00:09:17,157 --> 00:09:18,692
And again,
while this may not seem like much

183
00:09:18,725 --> 00:09:20,494
for these puny little instructions,

184
00:09:20,527 --> 00:09:23,530
over an entire app, it really adds up.

185
00:09:23,564 --> 00:09:26,533
That's how we made retain/release
operations cheaper.

186
00:09:26,567 --> 00:09:29,870
Finally,
let's talk about autorelease elision.

187
00:09:29,903 --> 00:09:32,339
Now this one is even more interesting.

188
00:09:32,372 --> 00:09:36,376
With objc runtime changes,
we've made autorelease elision faster.

189
00:09:36,410 --> 00:09:38,512
That happens automatically
for existing apps

190
00:09:38,545 --> 00:09:41,548
when you run them on the new OS releases.

191
00:09:41,582 --> 00:09:44,718
Building on top of that,
with additional compiler changes,

192
00:09:44,751 --> 00:09:47,321
we also made the code smaller.

193
00:09:47,354 --> 00:09:49,323
And you'll get this size benefit
automatically

194
00:09:49,356 --> 00:09:53,927
as you migrate to a deployment target
of iOS 16, tvOS 16, or watchOS 9.

195
00:09:55,462 --> 00:09:59,600
Now this is all great, but what's
autorelease elision in the first place?

196
00:09:59,633 --> 00:10:02,102
Let's go back to our example.

197
00:10:02,135 --> 00:10:05,072
I mentioned earlier that ARC
already gives us a lot of compiler magic

198
00:10:05,105 --> 00:10:07,040
to optimize retains and releases.

199
00:10:07,074 --> 00:10:08,909
So let's focus on one case here:

200
00:10:08,942 --> 00:10:11,378
autoreleased return values.

201
00:10:11,411 --> 00:10:13,614
In this example,
we made a temporary object,

202
00:10:13,647 --> 00:10:15,349
and we're returning it to our caller.

203
00:10:15,382 --> 00:10:17,951
So let's look at how that works.

204
00:10:17,985 --> 00:10:19,953
So we have our temporary theDate,

205
00:10:19,987 --> 00:10:21,889
we return it, the call completes,

206
00:10:21,922 --> 00:10:24,825
and the caller saves it
to its own variable.

207
00:10:24,858 --> 00:10:28,028
So let's see how that works with ARC.

208
00:10:28,061 --> 00:10:32,232
ARC inserts a retain in the caller,
and a release in the called function.

209
00:10:32,266 --> 00:10:35,969
Here, when we return our temporary object,
we need to release it first

210
00:10:36,003 --> 00:10:38,972
in the function,
because it's going out of scope.

211
00:10:39,006 --> 00:10:43,343
But we can't do that just yet, because
it doesn't have any other references yet.

212
00:10:43,377 --> 00:10:46,547
If we did release it, it would be
destroyed before we even return,

213
00:10:46,580 --> 00:10:48,048
and that's no good.

214
00:10:48,081 --> 00:10:51,952
So a special convention is used
to be able to return the temporary.

215
00:10:51,985 --> 00:10:56,056
We autorelease it before the return
so that the caller can then retain it.

216
00:10:56,089 --> 00:10:58,992
You've likely seen autorelease
and autoreleasepools before:

217
00:10:59,026 --> 00:11:02,729
it's simply a way to defer a release
until some later point.

218
00:11:02,763 --> 00:11:05,899
Runtime doesn't really make any guarantees
as to when the release happens,

219
00:11:05,933 --> 00:11:09,069
but as long as it's not right here,
right now, it's convenient,

220
00:11:09,102 --> 00:11:12,039
because it lets us
return this temporary object.

221
00:11:12,072 --> 00:11:13,473
Now, this isn't free.

222
00:11:13,507 --> 00:11:16,276
There is some overhead
to doing an autorelease.

223
00:11:16,310 --> 00:11:19,613
This is where
autorelease elision comes in.

224
00:11:19,646 --> 00:11:21,014
So to understand how that works,

225
00:11:21,048 --> 00:11:24,518
let's look at the assembly
and retrace this return.

226
00:11:24,551 --> 00:11:27,821
When we call autorelease,
that goes into the objc runtime,

227
00:11:27,855 --> 00:11:30,824
and that's where the fun begins.

228
00:11:30,858 --> 00:11:33,126
The runtime tries to recognize
what's happening:

229
00:11:33,160 --> 00:11:35,863
that we're returning
an autoreleased value.

230
00:11:35,896 --> 00:11:38,332
To help it out, the compiler emits
a special marker

231
00:11:38,365 --> 00:11:40,434
that we never use otherwise.

232
00:11:40,467 --> 00:11:45,405
It's there to tell the runtime that this
is eligible for autorelease elision.

233
00:11:45,439 --> 00:11:48,809
And it's followed by the retain,
that we will execute later.

234
00:11:48,842 --> 00:11:50,644
But right now,
we're still in the autorelease,

235
00:11:50,677 --> 00:11:54,781
and when we do it, the runtime loads
the special marker instruction, as data,

236
00:11:54,815 --> 00:11:59,253
and compares it to see if it is
the special marker value it expects.

237
00:11:59,286 --> 00:12:02,055
If it is,
that means the compiler told the runtime

238
00:12:02,089 --> 00:12:05,192
that we're returning a temporary
that will immediately be retained.

239
00:12:05,225 --> 00:12:09,530
And this lets us elide, or remove,
the matching autorelease and retain calls.

240
00:12:09,563 --> 00:12:11,498
And that's autorelease elision.

241
00:12:12,833 --> 00:12:15,335
However, this is not free either:

242
00:12:15,369 --> 00:12:18,138
loading code as data isn't something
that's super common otherwise,

243
00:12:18,172 --> 00:12:20,174
so it's not optimal on the CPUs.

244
00:12:20,207 --> 00:12:21,909
We can do better.

245
00:12:21,942 --> 00:12:23,977
So let's retrace
the return sequence again,

246
00:12:24,011 --> 00:12:26,747
this time using the new way.

247
00:12:26,780 --> 00:12:28,282
We started at the autorelease.

248
00:12:28,315 --> 00:12:30,817
That still goes
into the Objective-C runtime.

249
00:12:30,851 --> 00:12:35,889
At this point, we actually already have
valuable information: the return address.

250
00:12:35,923 --> 00:12:40,994
It tells us where we need to return to
after this function completes execution.

251
00:12:41,028 --> 00:12:42,963
So we can keep track of that.

252
00:12:42,996 --> 00:12:45,165
Thankfully, getting the return address
is very cheap.

253
00:12:45,199 --> 00:12:48,535
It's just a pointer,
and we can store it on the side.

254
00:12:48,569 --> 00:12:51,371
We then leave
the runtime autorelease call.

255
00:12:51,405 --> 00:12:52,973
We return to the caller,

256
00:12:53,006 --> 00:12:56,376
and we re-enter the runtime
when doing the retain.

257
00:12:56,410 --> 00:12:59,947
And this is where
the new bit of magic happens.

258
00:12:59,980 --> 00:13:01,982
At that point, we can look at where we are

259
00:13:02,015 --> 00:13:04,885
and get a pointer
to our current return address.

260
00:13:04,918 --> 00:13:07,588
In the runtime,
we can compare this pointer we just got

261
00:13:07,621 --> 00:13:09,990
while doing the retain
with the one we saved earlier

262
00:13:10,023 --> 00:13:12,226
when we were doing the autorelease.

263
00:13:12,259 --> 00:13:13,660
And since we're
just comparing two pointers,

264
00:13:13,694 --> 00:13:14,795
this is super cheap.

265
00:13:14,828 --> 00:13:17,764
We don't need to do
expensive memory accesses.

266
00:13:17,798 --> 00:13:20,133
If the comparison succeeds,
we know we can elide

267
00:13:20,167 --> 00:13:21,535
the autorelease/retain pair,

268
00:13:21,568 --> 00:13:24,004
and we get to improve some performance.

269
00:13:25,372 --> 00:13:27,241
And on top of that,
now that we don't need to compare

270
00:13:27,274 --> 00:13:29,510
this special marker instruction
as data anymore,

271
00:13:29,543 --> 00:13:32,212
we don't need it, so we can remove it.

272
00:13:32,246 --> 00:13:34,948
And that lets us
save some code size as well.

273
00:13:34,982 --> 00:13:38,051
That's how we made autorelease elision
faster and smaller.

274
00:13:38,685 --> 00:13:41,989
We went through several Swift
and Objective-C runtime improvements.

275
00:13:42,022 --> 00:13:43,690
Let's wrap up.

276
00:13:43,724 --> 00:13:45,692
When your app is run on the new OS,

277
00:13:45,726 --> 00:13:47,728
thanks to the improvements
in the runtimes,

278
00:13:47,761 --> 00:13:50,597
Swift protocol checks are more efficient.

279
00:13:50,631 --> 00:13:54,968
Every time we try to do
autorelease elision, that's faster too.

280
00:13:55,002 --> 00:13:58,805
Thanks to the new compilers and linker
in Xcode 14 and message send stubs,

281
00:13:58,839 --> 00:14:02,843
you can save up to 2% of code size
by rebuilding your app.

282
00:14:02,876 --> 00:14:06,880
And finally, when you update
your deployment target to iOS 16, tvOS 16,

283
00:14:06,914 --> 00:14:10,384
or watchOS 9,
you can further save another 2%

284
00:14:10,417 --> 00:14:12,286
by making retain/release calls smaller.

285
00:14:12,319 --> 00:14:16,356
Even more, thanks to the smaller
autorelease elision sequence.

286
00:14:16,390 --> 00:14:19,893
I hope you enjoyed this deep dive
into the Swift and Objective-C runtimes,

287
00:14:19,927 --> 00:14:21,361
and thanks for watching.

