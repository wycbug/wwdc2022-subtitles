1
00:00:00,000 --> 00:00:03,070
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,070 --> 00:00:09,843
♪

3
00:00:09,843 --> 00:00:11,411
Hi, my name is Mindy

4
00:00:11,411 --> 00:00:14,248
and I'm an engineer
on the Photos team.

5
00:00:14,248 --> 00:00:16,850
Today, I'll be going over
how to access

6
00:00:16,850 --> 00:00:20,754
Photos change history
in your apps.

7
00:00:20,754 --> 00:00:23,457
PhotoKit provides
a rich set of APIs

8
00:00:23,457 --> 00:00:27,828
for accessing and updating
photos, videos, and albums

9
00:00:27,828 --> 00:00:29,930
stored in the photo library.

10
00:00:29,930 --> 00:00:33,133
PhotoKit is designed for apps
that require a deep level

11
00:00:33,133 --> 00:00:36,570
of Photos access
and integration

12
00:00:36,570 --> 00:00:39,907
for managing or editing photos,
custom cameras,

13
00:00:39,907 --> 00:00:42,976
or apps that give people a way
to browse their photo library

14
00:00:42,976 --> 00:00:45,445
in a unique way.

15
00:00:45,445 --> 00:00:48,315
These types of applications
may want to monitor

16
00:00:48,315 --> 00:00:50,717
how the photo library
changes over time

17
00:00:50,717 --> 00:00:54,354
to closely mirror
the Photos experience.

18
00:00:54,354 --> 00:00:57,524
Let's say I've created
a social hiking app

19
00:00:57,524 --> 00:01:00,260
that allows people
to share and edit photos

20
00:01:00,260 --> 00:01:02,796
of hiking trips with friends.

21
00:01:02,796 --> 00:01:04,431
When someone launches the app,

22
00:01:04,431 --> 00:01:07,868
the app gathers photos
from the start and end timestamp

23
00:01:07,868 --> 00:01:11,004
of their latest hiking workout
to generate a collage

24
00:01:11,004 --> 00:01:13,340
of their experience
on the mountain.

25
00:01:13,340 --> 00:01:16,209
The collages stay in sync
with the selected photos

26
00:01:16,209 --> 00:01:18,111
from the photo library.

27
00:01:18,111 --> 00:01:19,813
If someone receives
hiking photos

28
00:01:19,813 --> 00:01:21,581
from a friend,
for instance,

29
00:01:21,581 --> 00:01:25,886
the app will generate new
collages using these updates.

30
00:01:25,886 --> 00:01:28,255
Up until now,
in order for the app

31
00:01:28,255 --> 00:01:30,857
to discover
newly inserted assets

32
00:01:30,857 --> 00:01:33,360
and changes to previous
hiking collages,

33
00:01:33,360 --> 00:01:37,097
the app would need to perform
a series of fetches.

34
00:01:37,097 --> 00:01:40,100
To determine which assets
were inserted,

35
00:01:40,100 --> 00:01:41,635
the app can fetch assets

36
00:01:41,635 --> 00:01:46,573
with a date created later than
the last app launch date.

37
00:01:46,573 --> 00:01:50,510
Determining asset updates
and deletions is trickier.

38
00:01:50,510 --> 00:01:54,281
The app would need to refetch
every asset in every collage

39
00:01:54,281 --> 00:01:56,350
and check
the modification date

40
00:01:56,350 --> 00:01:58,385
to determine asset updates,

41
00:01:58,385 --> 00:02:00,320
but this could bring up
false positives,

42
00:02:00,320 --> 00:02:02,255
as the asset modification date

43
00:02:02,255 --> 00:02:06,426
can be set by internal
Photos processing activities.

44
00:02:06,426 --> 00:02:09,696
Deletions in the photo library
are more difficult to track,

45
00:02:09,696 --> 00:02:13,100
as all tracked assets
need to be fetched and diffed

46
00:02:13,100 --> 00:02:16,169
for assets that were not
returned with the fetch.

47
00:02:16,169 --> 00:02:19,306
In total, this means that
there are three separate checks

48
00:02:19,306 --> 00:02:22,576
that need to be done
each time the app is launched,

49
00:02:22,576 --> 00:02:24,578
which can be especially costly

50
00:02:24,578 --> 00:02:28,515
if the app is displaying
large quantities of assets.

51
00:02:28,515 --> 00:02:31,118
Instead of performing different
fetches and checks

52
00:02:31,118 --> 00:02:32,986
for uncertain results,

53
00:02:32,986 --> 00:02:35,856
what if there was a way
to know exactly what changed

54
00:02:35,856 --> 00:02:38,525
in one unified API call?

55
00:02:38,525 --> 00:02:42,529
Well, I'm excited to say
that we've done just that!

56
00:02:42,529 --> 00:02:46,099
The new change history API
allows for an easier way

57
00:02:46,099 --> 00:02:50,437
to track offline updates
to the photo library.

58
00:02:50,437 --> 00:02:53,573
Change history consists
of a timeline of changes

59
00:02:53,573 --> 00:02:55,976
such as insertions, updates,

60
00:02:55,976 --> 00:02:58,678
and deletions
to the photo library.

61
00:02:58,678 --> 00:03:00,380
In this example timeline,

62
00:03:00,380 --> 00:03:04,184
there are a variety of asset,
album, and folder changes

63
00:03:04,184 --> 00:03:07,921
in the change history
from the past three days.

64
00:03:07,921 --> 00:03:10,657
Using this timeline,
how can you determine

65
00:03:10,657 --> 00:03:14,027
which changes have happened
in the last two days,

66
00:03:14,027 --> 00:03:17,497
or the last time
you launched your app?

67
00:03:17,497 --> 00:03:20,534
You can now use
a persistent change token

68
00:03:20,534 --> 00:03:23,103
that represents
the state of the photo library

69
00:03:23,103 --> 00:03:25,672
at a given point in time.

70
00:03:25,672 --> 00:03:29,476
This token can be persisted
across app launches,

71
00:03:29,476 --> 00:03:32,712
and it can be used to fetch
changes to the photo library

72
00:03:32,712 --> 00:03:34,815
that have occurred
since that token,

73
00:03:34,815 --> 00:03:37,551
including third-party app
changes.

74
00:03:37,551 --> 00:03:40,487
Note that if your app
is in limited library mode,

75
00:03:40,487 --> 00:03:43,457
only changes for user-selected
PhotoKit objects

76
00:03:43,457 --> 00:03:45,459
will be returned.

77
00:03:45,459 --> 00:03:48,695
This change token
is local to the device

78
00:03:48,695 --> 00:03:51,164
and is cheap to access
from a persistent change

79
00:03:51,164 --> 00:03:55,435
or photo library instance
at any time.

80
00:03:55,435 --> 00:03:58,238
This new API is available
on every platform

81
00:03:58,238 --> 00:04:06,313
that supports PhotoKit:
macOS, iOS, iPadOS, and tvOS.

82
00:04:06,313 --> 00:04:10,250
As your app is running and
working with the photo library,

83
00:04:10,250 --> 00:04:14,855
you can store a persistent
change token within the app.

84
00:04:14,855 --> 00:04:19,192
Later, you can use the token to
fetch the photo library changes

85
00:04:19,192 --> 00:04:21,328
that have occurred since.

86
00:04:21,328 --> 00:04:23,263
For each persistent change,

87
00:04:23,263 --> 00:04:25,298
you can grab
the change details

88
00:04:25,298 --> 00:04:28,368
for three types
of Photos objects:

89
00:04:28,368 --> 00:04:33,273
asset, asset collection,
and collection list.

90
00:04:33,273 --> 00:04:36,543
So what does this look like
in code?

91
00:04:36,543 --> 00:04:39,446
You first use the last stored
change token

92
00:04:39,446 --> 00:04:42,249
to fetch the persistent changes.

93
00:04:42,249 --> 00:04:45,585
Next, you enumerate
through the persistent changes

94
00:04:45,585 --> 00:04:50,157
and grab the change details --
in this case, of type "asset" --

95
00:04:50,157 --> 00:04:53,160
for each persistent change
object.

96
00:04:53,160 --> 00:04:55,529
These change details
provide information

97
00:04:55,529 --> 00:04:59,633
on which local identifiers
were updated, deleted,

98
00:04:59,633 --> 00:05:01,701
and inserted
into the photo library

99
00:05:01,701 --> 00:05:04,404
since the change token.

100
00:05:04,404 --> 00:05:06,473
After processing these changes,

101
00:05:06,473 --> 00:05:10,777
you can store the last
change token for future use.

102
00:05:10,777 --> 00:05:14,681
Let's compare and contrast
the new persistent history API

103
00:05:14,681 --> 00:05:18,418
with the existing
change observer APIs.

104
00:05:18,418 --> 00:05:22,255
PHChanges deal with active,
in-memory fetch results

105
00:05:22,255 --> 00:05:25,692
and are used to record live
changes to the photo library

106
00:05:25,692 --> 00:05:28,328
while your app is running.

107
00:05:28,328 --> 00:05:30,430
Persistent history,
on the other hand,

108
00:05:30,430 --> 00:05:33,567
records long-running changes
to the photo library,

109
00:05:33,567 --> 00:05:35,468
and can be used
to report changes

110
00:05:35,468 --> 00:05:38,572
from when your app
is not active.

111
00:05:38,572 --> 00:05:41,575
You can use both
or either of these APIs

112
00:05:41,575 --> 00:05:45,212
depending on the requirements
of your app.

113
00:05:45,212 --> 00:05:47,380
Going back to the hiking app
example,

114
00:05:47,380 --> 00:05:50,383
I'd like to now use
the persistent history API

115
00:05:50,383 --> 00:05:53,119
to track asset changes
in order to create

116
00:05:53,119 --> 00:05:55,722
and update hiking collages.

117
00:05:55,722 --> 00:05:59,459
First, I'll use the last
stored change token

118
00:05:59,459 --> 00:06:02,062
and fetch
the persistent changes.

119
00:06:02,062 --> 00:06:05,565
Next, I'll iterate through
the persistent changes,

120
00:06:05,565 --> 00:06:08,368
grab the relevant
asset change details,

121
00:06:08,368 --> 00:06:11,137
and process the inserted,
updated,

122
00:06:11,137 --> 00:06:13,807
and deleted identifiers.

123
00:06:13,807 --> 00:06:16,910
Now I need to identify
library changes

124
00:06:16,910 --> 00:06:19,713
that affect the app
from the change history,

125
00:06:19,713 --> 00:06:22,182
as the app doesn't need
all of the information

126
00:06:22,182 --> 00:06:25,518
returned from fetching changes.

127
00:06:25,518 --> 00:06:28,188
It's important for the app
to know which assets

128
00:06:28,188 --> 00:06:32,826
were added to the photo library
for new hiking workouts,

129
00:06:32,826 --> 00:06:34,995
and updated and deleted assets

130
00:06:34,995 --> 00:06:38,598
referenced in previous
hiking collages.

131
00:06:38,598 --> 00:06:40,734
I've already identified
the three sets

132
00:06:40,734 --> 00:06:44,871
of inserted, updated, and
deleted asset local identifiers

133
00:06:44,871 --> 00:06:47,707
from enumerating through
the persistent changes.

134
00:06:47,707 --> 00:06:51,344
How do I now update the app
to reflect this?

135
00:06:51,344 --> 00:06:53,980
Using the insertedIdentifiers
set,

136
00:06:53,980 --> 00:06:56,416
I can determine which assets
were added

137
00:06:56,416 --> 00:07:00,620
between hiking timestamps
by fetching the inserted assets

138
00:07:00,620 --> 00:07:02,656
and checking
their creation dates

139
00:07:02,656 --> 00:07:08,128
against each hike
start and end date.

140
00:07:08,128 --> 00:07:11,631
The updated assets may now
have adjustments applied,

141
00:07:11,631 --> 00:07:15,001
so I can use the new
hasAdjustments API

142
00:07:15,001 --> 00:07:20,907
to check if I need to redraw
the asset in the UI.

143
00:07:20,907 --> 00:07:23,843
I can use the deleted asset
local identifiers

144
00:07:23,843 --> 00:07:27,747
to determine which collages
need to be regenerated.

145
00:07:27,747 --> 00:07:31,785
Now I've handled all of the
offline photo library changes

146
00:07:31,785 --> 00:07:36,056
and my app is up to date.

147
00:07:36,056 --> 00:07:38,525
Here are a few things
you should keep in mind

148
00:07:38,525 --> 00:07:42,495
when using the new
change history API.

149
00:07:42,495 --> 00:07:45,498
First, determine what changes
are important to you

150
00:07:45,498 --> 00:07:49,269
and your app, and only check
for those changes.

151
00:07:49,269 --> 00:07:51,905
Consider performing
one large fetch request

152
00:07:51,905 --> 00:07:54,474
of updated and inserted assets

153
00:07:54,474 --> 00:07:59,579
instead of multiple smaller
requests to improve performance.

154
00:07:59,579 --> 00:08:02,549
Photo libraries can change a lot
due to processing

155
00:08:02,549 --> 00:08:05,218
and sync activity
under the hood,

156
00:08:05,218 --> 00:08:07,020
so you may end up
enumerating through

157
00:08:07,020 --> 00:08:08,788
a large amount of changes,

158
00:08:08,788 --> 00:08:12,158
especially if your app
is not frequently launched.

159
00:08:12,158 --> 00:08:14,394
Because of this,
we recommend

160
00:08:14,394 --> 00:08:17,731
that you ask for change history
on a background thread

161
00:08:17,731 --> 00:08:20,734
to not block the UI.

162
00:08:20,734 --> 00:08:22,802
There are two types of errors
that can occur

163
00:08:22,802 --> 00:08:25,572
when fetching
persistent history.

164
00:08:25,572 --> 00:08:26,606
If the change token

165
00:08:26,606 --> 00:08:29,542
is older than the available
history of changes,

166
00:08:29,542 --> 00:08:33,513
the expired change token error
will be returned.

167
00:08:33,513 --> 00:08:35,715
In some cases,
the persistent change

168
00:08:35,715 --> 00:08:38,685
cannot be relied upon
to completely reconstruct

169
00:08:38,685 --> 00:08:40,420
the changes that occurred,

170
00:08:40,420 --> 00:08:44,958
and will return an error that
change details are unavailable.

171
00:08:44,958 --> 00:08:47,761
In these instances,
we recommend

172
00:08:47,761 --> 00:08:51,030
refetching tracked objects
in the photo library

173
00:08:51,030 --> 00:08:54,234
to ensure your app
is up to date.

174
00:08:54,234 --> 00:08:56,669
Before we wrap up,
there are a few more

175
00:08:56,669 --> 00:09:01,040
new PhotoKit APIs
I'd like to share with you.

176
00:09:01,040 --> 00:09:04,411
PhotoKit now supports
accessing cinematic videos

177
00:09:04,411 --> 00:09:08,181
by media subtype
and smart album.

178
00:09:08,181 --> 00:09:11,584
There are also
two new error codes.

179
00:09:11,584 --> 00:09:13,019
If the photo library bundle

180
00:09:13,019 --> 00:09:17,123
is in a File Provider
sync root directory on macOS,

181
00:09:17,123 --> 00:09:19,092
the library can become
corrupted,

182
00:09:19,092 --> 00:09:23,563
and an error will be returned
when trying to perform changes.

183
00:09:23,563 --> 00:09:25,732
If an asset resource
cannot be found

184
00:09:25,732 --> 00:09:27,434
due to network issues,

185
00:09:27,434 --> 00:09:31,171
the resource request
will now return a network error.

186
00:09:31,171 --> 00:09:33,106
Please check
the developer documentation

187
00:09:33,106 --> 00:09:35,408
for all of the latest updates.

188
00:09:35,408 --> 00:09:38,545
Lastly, be sure to check out
this year's session

189
00:09:38,545 --> 00:09:39,813
on the Photos picker,

190
00:09:39,813 --> 00:09:44,584
as it is the easiest way
to work with and access Photos.

191
00:09:44,584 --> 00:09:48,321
We're so excited for you to use
the new change history API

192
00:09:48,321 --> 00:09:51,291
and all of the great new
features in PhotoKit.

193
00:09:51,291 --> 00:09:52,992
Thank you!

194
00:09:52,992 --> 00:09:57,397
♪

