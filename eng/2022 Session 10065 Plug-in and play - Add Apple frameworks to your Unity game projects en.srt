1
00:00:00,033 --> 00:00:03,036
♪ Mellow instrumental
hip-hop music ♪

2
00:00:03,036 --> 00:00:09,443
♪

3
00:00:09,443 --> 00:00:13,981
Hi, I'm Jared Marsau and I work
on Game Technologies at Apple.

4
00:00:13,981 --> 00:00:16,416
Today, I'll be talking to you
about how you can use

5
00:00:16,416 --> 00:00:19,186
select Apple frameworks
to add new features

6
00:00:19,186 --> 00:00:21,655
to your Unity-based games.

7
00:00:21,655 --> 00:00:25,525
We know that many of you
are using tools, such as Unity,

8
00:00:25,525 --> 00:00:27,427
to build your games.

9
00:00:27,427 --> 00:00:29,696
Our goal is to bring you
the latest features,

10
00:00:29,696 --> 00:00:32,165
no matter what tool
you're using.

11
00:00:32,165 --> 00:00:34,334
Starting today,
enhance your games

12
00:00:34,334 --> 00:00:37,237
with a new set
of Unity plug-ins.

13
00:00:37,237 --> 00:00:39,940
Use the Game Center plug-in
to add GameKit features like

14
00:00:39,940 --> 00:00:43,710
player authentication,
leaderboards, and matchmaking.

15
00:00:43,710 --> 00:00:46,613
Use the Game Controller plug-in
for input customizations and

16
00:00:46,613 --> 00:00:51,385
glyphs, along with support for
MFi and third-party controllers.

17
00:00:51,385 --> 00:00:54,321
Use the Accessibility plug-in
to improve accessibility

18
00:00:54,321 --> 00:00:58,659
through system features,
like VoiceOver and Dynamic Type.

19
00:00:58,659 --> 00:01:02,429
Integrate Apple's data-driven
rich haptic feedback system

20
00:01:02,429 --> 00:01:04,965
with the Core Haptics plug-in.

21
00:01:04,965 --> 00:01:07,634
Add advanced geometry-aware
spatial audio

22
00:01:07,634 --> 00:01:09,202
with the PHASE plug-in.

23
00:01:09,202 --> 00:01:12,873
Finally, use the Apple.Core
plug-in to manage build settings

24
00:01:12,873 --> 00:01:16,576
and simplify the build process.

25
00:01:16,576 --> 00:01:18,745
This initial set of plug-ins
will let you add

26
00:01:18,745 --> 00:01:22,282
new gameplay mechanics,
make your games more accessible,

27
00:01:22,282 --> 00:01:24,151
and help you more rapidly tap

28
00:01:24,151 --> 00:01:27,054
into the latest features
and services.

29
00:01:27,054 --> 00:01:29,423
I am extremely excited
to see the amazing games

30
00:01:29,423 --> 00:01:32,592
you create with this new set
of Unity plug-ins.

31
00:01:32,592 --> 00:01:35,662
Now, I'll get into the details
of the project.

32
00:01:35,662 --> 00:01:38,966
First, I'll discuss the design
principles of the project.

33
00:01:38,966 --> 00:01:42,169
Then, I'll cover project
concepts and organization.

34
00:01:42,169 --> 00:01:44,504
Next, I'll offer
some key pointers

35
00:01:44,504 --> 00:01:47,140
on interacting
with the project repository.

36
00:01:47,140 --> 00:01:50,544
And finally, I'll go into detail
for each plug-in.

37
00:01:50,544 --> 00:01:52,279
As you may know,

38
00:01:52,279 --> 00:01:56,450
Apple frameworks encapsulate
functionality in a modular way.

39
00:01:56,450 --> 00:01:58,819
This lets you pick and choose
the right technologies

40
00:01:58,819 --> 00:02:03,290
for your apps while maintaining
compact, efficient code.

41
00:02:03,290 --> 00:02:06,893
With the Unity plug-ins,
a similar pattern is followed;

42
00:02:06,893 --> 00:02:10,163
each plug-in maps to a single
underlying framework.

43
00:02:10,163 --> 00:02:12,332
This lets you pick and choose
the set of plug-ins

44
00:02:12,332 --> 00:02:15,669
you want to use based upon
your game's needs.

45
00:02:15,669 --> 00:02:19,373
Each plug-in exposes
C#-based Unity script,

46
00:02:19,373 --> 00:02:21,274
which maps as directly
as possible

47
00:02:21,274 --> 00:02:23,443
to the underlying framework.

48
00:02:23,443 --> 00:02:26,580
Doing this means that any
familiarity that you might have

49
00:02:26,580 --> 00:02:29,950
with the underlying framework
carries over to the plug-in.

50
00:02:29,950 --> 00:02:33,186
Concepts, and in many cases
the framework API,

51
00:02:33,186 --> 00:02:35,022
carry directly over.

52
00:02:35,022 --> 00:02:38,525
Conversely, this also means
that by learning the plug-in,

53
00:02:38,525 --> 00:02:42,162
you'll be implicitly learning
the underlying framework.

54
00:02:42,162 --> 00:02:44,598
Another important detail
is that these plug-ins

55
00:02:44,598 --> 00:02:48,201
are built as Apple platform
native libraries.

56
00:02:48,201 --> 00:02:51,638
These libraries act as
the glue between the C# script

57
00:02:51,638 --> 00:02:55,242
and the underlying
framework API.

58
00:02:55,242 --> 00:02:59,346
Apple Unity plug-ins are
organized as Unity packages,

59
00:02:59,346 --> 00:03:02,082
so managing their integration
to your project can be done

60
00:03:02,082 --> 00:03:05,952
with the Unity Editor's
built-in Package Manager.

61
00:03:05,952 --> 00:03:09,356
In some cases, plug-ins also
include additional Editor

62
00:03:09,356 --> 00:03:12,793
functionality that makes working
with the plug-in even easier

63
00:03:12,793 --> 00:03:15,629
and aligns with the Unity
inspector-driven workflows

64
00:03:15,629 --> 00:03:18,265
that you're already
familiar with.

65
00:03:18,265 --> 00:03:21,701
Of course, each plug-in
is paired with detailed readmes,

66
00:03:21,701 --> 00:03:25,038
samples, and links
to additional resources,

67
00:03:25,038 --> 00:03:28,842
such as associated Apple
Developer documentation.

68
00:03:28,842 --> 00:03:32,412
Next, I'll briefly examine
some key workflow concepts

69
00:03:32,412 --> 00:03:35,315
to help you get started.

70
00:03:35,315 --> 00:03:38,652
The first step is to clone
the source from GitHub.

71
00:03:38,652 --> 00:03:42,456
You can find all of the project
source and documentation there.

72
00:03:42,456 --> 00:03:44,758
This is the starting point
for everyone who will be using

73
00:03:44,758 --> 00:03:47,260
the Apple Unity plug-ins.

74
00:03:47,260 --> 00:03:48,962
Once you've cloned
the repository,

75
00:03:48,962 --> 00:03:52,299
building the plug-ins will be
one of your first tasks.

76
00:03:52,299 --> 00:03:55,135
To simplify this process,
the repository includes

77
00:03:55,135 --> 00:03:59,806
a Python script at
the repository root: build.py.

78
00:03:59,806 --> 00:04:02,175
This script handles
building native libraries,

79
00:04:02,175 --> 00:04:04,511
copying them
to the correct locations,

80
00:04:04,511 --> 00:04:08,081
updating Unity meta files,
packing the plug-ins,

81
00:04:08,081 --> 00:04:10,250
and building plug-in tests.

82
00:04:10,250 --> 00:04:13,353
The script is organized such
that the simplest invocation

83
00:04:13,353 --> 00:04:17,090
builds all of the plug-ins,
packages them into tarballs,

84
00:04:17,090 --> 00:04:18,959
and saves them
to a build folder

85
00:04:18,959 --> 00:04:22,729
ready for integration
into your Unity projects.

86
00:04:22,729 --> 00:04:25,665
It's important to note
that fully building and packing

87
00:04:25,665 --> 00:04:32,239
the plug-ins will require Xcode,
Python3, npm, and Unity.

88
00:04:32,239 --> 00:04:34,241
Finally,
we have detailed documentation

89
00:04:34,241 --> 00:04:38,879
for using build.py
in the project repository.

90
00:04:38,879 --> 00:04:40,614
Now it's time
to dive into details

91
00:04:40,614 --> 00:04:42,549
with each of the plug-ins.

92
00:04:42,549 --> 00:04:44,718
For each plug-in,
I'll cover how to add them

93
00:04:44,718 --> 00:04:49,055
to your Unity projects, a brief
overview of included features,

94
00:04:49,055 --> 00:04:51,825
key scripting concepts,
and some code snippets

95
00:04:51,825 --> 00:04:54,060
or examples
in the Unity Editor

96
00:04:54,060 --> 00:04:57,797
highlighting how to integrate
them into your projects.

97
00:04:57,797 --> 00:04:59,999
Let's start
with the foundational plug-in,

98
00:04:59,999 --> 00:05:01,768
Apple.Core.

99
00:05:01,768 --> 00:05:04,838
Apple.Core unifies build
settings for each plug-in into

100
00:05:04,838 --> 00:05:09,276
a single preference pane within
Unity's Project Settings window.

101
00:05:09,276 --> 00:05:12,412
Because you compile each
plug-in's native libraries,

102
00:05:12,412 --> 00:05:15,215
Apple.Core also includes
an asset processor,

103
00:05:15,215 --> 00:05:17,884
which ensures that each
plug-in library is configured

104
00:05:17,884 --> 00:05:21,021
for the appropriate platform
on import.

105
00:05:21,021 --> 00:05:24,024
When building your projects,
Apple.Core also contains

106
00:05:24,024 --> 00:05:26,660
scripts that run as
a post-process to your build

107
00:05:26,660 --> 00:05:29,696
to ensure that native libraries
are referenced correctly

108
00:05:29,696 --> 00:05:32,399
in your intermediate
Xcode projects.

109
00:05:32,399 --> 00:05:35,669
Because each plug-in interacts
with an underlying framework,

110
00:05:35,669 --> 00:05:37,103
Apple.Core also defines

111
00:05:37,103 --> 00:05:40,707
a handful of runtime inter-op
types, which ease data passing

112
00:05:40,707 --> 00:05:44,311
between the C# script
and native code layers.

113
00:05:44,311 --> 00:05:46,646
Finally,
Apple.Core is a dependency

114
00:05:46,646 --> 00:05:49,516
for all other
Apple Unity plug-ins.

115
00:05:49,516 --> 00:05:51,585
This means that Apple.Core
should be imported

116
00:05:51,585 --> 00:05:55,889
into your projects before
any of the other plug-ins.

117
00:05:55,889 --> 00:05:57,924
In this demo,
I'll show you how to import

118
00:05:57,924 --> 00:06:00,460
the Apple.Core plug-in
into a new project

119
00:06:00,460 --> 00:06:04,965
and briefly explore the Apple
Build Settings preferences.

120
00:06:04,965 --> 00:06:07,467
Once the plug-ins
are built and packed,

121
00:06:07,467 --> 00:06:11,738
Apple.Core can be imported
with the Unity Package Manager.

122
00:06:11,738 --> 00:06:14,708
Just choose the option
to add package from tarball

123
00:06:14,708 --> 00:06:17,978
and browse
to the packaged plug-in.

124
00:06:23,183 --> 00:06:26,920
The Editor will then load the
package and compile the scripts.

125
00:06:26,920 --> 00:06:31,391
Once complete,
Apple.Core is ready to use.

126
00:06:34,761 --> 00:06:37,264
Apple.Core's primary
user-facing feature

127
00:06:37,264 --> 00:06:39,633
is the addition
of the Apple Build Settings tab

128
00:06:39,633 --> 00:06:43,536
in the Editor's
Project Settings window.

129
00:06:46,539 --> 00:06:49,009
When you import
an Apple Unity plug-in,

130
00:06:49,009 --> 00:06:52,612
all of it's available build
options will be visible here.

131
00:06:52,612 --> 00:06:53,780
Out of the box,

132
00:06:53,780 --> 00:06:56,783
Apple.Core comes with some
default configuration options,

133
00:06:56,783 --> 00:07:00,754
such as minimum
supported OS version.

134
00:07:00,754 --> 00:07:03,156
It's also useful to note
that you can disable

135
00:07:03,156 --> 00:07:07,127
the post-process
build steps for any plug-in.

136
00:07:10,530 --> 00:07:13,466
Finally, you can configure
common security settings,

137
00:07:13,466 --> 00:07:18,438
which will propagate to your
intermediate Xcode projects.

138
00:07:18,438 --> 00:07:21,107
Use the Game Center plug-in
to bring even more fun

139
00:07:21,107 --> 00:07:23,843
and connection to your games
with Game Center,

140
00:07:23,843 --> 00:07:26,413
Apple's social gaming network.

141
00:07:26,413 --> 00:07:29,015
Game Center lets players
build an identity across

142
00:07:29,015 --> 00:07:32,085
Apple platforms and enables
features like safe,

143
00:07:32,085 --> 00:07:35,822
secure player authentication,
in-game achievements,

144
00:07:35,822 --> 00:07:39,559
shared leaderboards,
challenges sent between players,

145
00:07:39,559 --> 00:07:41,995
and multiplayer matchmaking.

146
00:07:41,995 --> 00:07:44,331
You can pick and choose
which Game Center features

147
00:07:44,331 --> 00:07:45,999
to integrate into your games,

148
00:07:45,999 --> 00:07:49,202
but everything starts
with player authentication.

149
00:07:49,202 --> 00:07:51,671
Add Game Center player
authentication to your game

150
00:07:51,671 --> 00:07:53,840
and the Game Center widget
can feature your game

151
00:07:53,840 --> 00:07:57,977
on the player's Home Screen
or within the App Store.

152
00:07:57,977 --> 00:07:59,813
It also requires
very little code

153
00:07:59,813 --> 00:08:02,182
to add player authentication.

154
00:08:02,182 --> 00:08:04,617
The first step
is to add the Apple.Core

155
00:08:04,617 --> 00:08:06,786
and GameKit plug-ins
to your project.

156
00:08:06,786 --> 00:08:10,457
The GameKit plug-in connects
the Game Center service.

157
00:08:10,457 --> 00:08:13,593
When authenticating, connect
with the Game Center service

158
00:08:13,593 --> 00:08:16,963
and initialize
a GKLocalPlayer object.

159
00:08:16,963 --> 00:08:19,733
Once initialized,
query for player restrictions

160
00:08:19,733 --> 00:08:22,335
based upon
the local player's profile.

161
00:08:22,335 --> 00:08:26,139
These restrictions include
limiting access to adult

162
00:08:26,139 --> 00:08:29,342
or explicit content
for underage players,

163
00:08:29,342 --> 00:08:32,078
limiting access
to multiplayer features,

164
00:08:32,078 --> 00:08:34,814
or disabling
in-game communication.

165
00:08:34,814 --> 00:08:37,684
A simple way to manage
a GKLocalPlayer

166
00:08:37,684 --> 00:08:40,153
and it's interactions
with the Game Center service

167
00:08:40,153 --> 00:08:43,189
is to define a component
within Unity.

168
00:08:43,189 --> 00:08:44,391
Here, for example,

169
00:08:44,391 --> 00:08:47,660
is a simple Game Manager
component definition.

170
00:08:47,660 --> 00:08:50,864
This component holds
a reference to a GKLocalPlayer.

171
00:08:50,864 --> 00:08:53,566
It also handles both
authentication and query

172
00:08:53,566 --> 00:08:56,002
for player restrictions
in its start method;

173
00:08:56,002 --> 00:08:58,605
player authentication
only needs to happen once

174
00:08:58,605 --> 00:09:01,074
during the lifetime of the game.

175
00:09:01,074 --> 00:09:04,210
This is the GameManager
component's script.

176
00:09:04,210 --> 00:09:07,213
Here's the field for caching
a GKLocalPlayer.

177
00:09:07,213 --> 00:09:09,315
Within the component's
start method

178
00:09:09,315 --> 00:09:12,986
is the one-time call to
GKLocalPlayer.Authenticate,

179
00:09:12,986 --> 00:09:17,123
a static method that returns
the GKLocalPlayer instance.

180
00:09:17,123 --> 00:09:19,926
Once the local player
is successfully authenticated,

181
00:09:19,926 --> 00:09:22,962
it's time to check
their player restrictions.

182
00:09:22,962 --> 00:09:24,798
Checking player restrictions
in code

183
00:09:24,798 --> 00:09:27,734
resolves to a series of
Boolean checks and can be added

184
00:09:27,734 --> 00:09:31,571
to the try block in the
GameManager component's script.

185
00:09:31,571 --> 00:09:33,773
True here means
your local player should have

186
00:09:33,773 --> 00:09:36,276
limited access
to explicit content.

187
00:09:36,276 --> 00:09:38,044
True here means
that your local player

188
00:09:38,044 --> 00:09:40,847
should have a restricted
multiplayer experience.

189
00:09:40,847 --> 00:09:43,950
And finally, true here means
that in-game communication

190
00:09:43,950 --> 00:09:46,319
should be disabled.

191
00:09:46,319 --> 00:09:48,455
And that's all
the code changes necessary

192
00:09:48,455 --> 00:09:51,324
to add player authentication
to your game.

193
00:09:51,324 --> 00:09:54,327
From here, there are two
additional steps necessary

194
00:09:54,327 --> 00:09:58,631
to fully prepare your game to
take advantage of Game Center.

195
00:09:58,631 --> 00:10:01,534
First, you'll need to add
the Game Center capability

196
00:10:01,534 --> 00:10:04,304
to your intermediate
Xcode projects.

197
00:10:04,304 --> 00:10:07,440
This is done from within
the Xcode project UI.

198
00:10:07,440 --> 00:10:09,175
More information can be found

199
00:10:09,175 --> 00:10:11,644
in the Apple Developer
documentation article

200
00:10:11,644 --> 00:10:14,881
"Enabling and Configuring
Game Center."

201
00:10:14,881 --> 00:10:17,817
Next, you'll need to add
Game Center features to your app

202
00:10:17,817 --> 00:10:20,019
using App Store Connect.

203
00:10:20,019 --> 00:10:23,923
Check out the App Store Connect
portal for more information.

204
00:10:23,923 --> 00:10:26,626
With these steps complete,
you're ready to authenticate

205
00:10:26,626 --> 00:10:30,196
players and ensure
a safe gaming environment.

206
00:10:30,196 --> 00:10:33,299
Player authentication
only scratches the surface

207
00:10:33,299 --> 00:10:34,901
of the features made available

208
00:10:34,901 --> 00:10:37,537
by the Game Center Unity
plug-in.

209
00:10:37,537 --> 00:10:40,640
To learn more about improving
discoverability of your game,

210
00:10:40,640 --> 00:10:42,141
check out the session

211
00:10:42,141 --> 00:10:45,345
"Reach new players
with Game Center dashboard."

212
00:10:45,345 --> 00:10:47,981
To learn more about multiplayer
and matchmaking,

213
00:10:47,981 --> 00:10:52,485
watch the "What's new in Game
Center" session from last year.

214
00:10:52,485 --> 00:10:56,122
Controllers are the primary way
for players to interact

215
00:10:56,122 --> 00:10:58,424
with the worlds
that you'll create.

216
00:10:58,424 --> 00:11:02,061
Easily bring reliable and
flexible game controller support

217
00:11:02,061 --> 00:11:04,998
to your games with
the Game Controller plug-in.

218
00:11:04,998 --> 00:11:08,067
The Game Controller plug-in
brings a handful of features,

219
00:11:08,067 --> 00:11:11,137
like support for game controller
customizations,

220
00:11:11,137 --> 00:11:13,106
which allow players
to remap buttons

221
00:11:13,106 --> 00:11:15,842
in one place for all games.

222
00:11:15,842 --> 00:11:19,712
Button glyphs, to ensure
consistent user experience.

223
00:11:19,712 --> 00:11:22,115
And support for all
MFi controllers,

224
00:11:22,115 --> 00:11:23,783
as well as
third-party controllers

225
00:11:23,783 --> 00:11:27,353
like select Sony
and Microsoft controllers.

226
00:11:27,353 --> 00:11:29,022
Just as with the other plug-ins,

227
00:11:29,022 --> 00:11:31,324
use the Package Manager
to add the Apple.Core

228
00:11:31,324 --> 00:11:34,227
and Game Controller plug-ins
to your project.

229
00:11:34,227 --> 00:11:36,195
With the Game Controller
plug-in loaded,

230
00:11:36,195 --> 00:11:40,500
the first step is to initialize
the GCControllerService.

231
00:11:40,500 --> 00:11:43,403
As we'll see shortly,
this service is how controllers

232
00:11:43,403 --> 00:11:46,472
and their connection events
are accessed.

233
00:11:46,472 --> 00:11:49,208
Once initialized,
query GCControllerService

234
00:11:49,208 --> 00:11:52,545
for all controllers currently
connected to the system.

235
00:11:52,545 --> 00:11:54,581
Connected controllers
are represented

236
00:11:54,581 --> 00:11:58,918
by GCController objects
in the Game Controller plug-in.

237
00:11:58,918 --> 00:12:01,387
For each GCController
that's connected,

238
00:12:01,387 --> 00:12:03,756
poll for updated
controller state.

239
00:12:03,756 --> 00:12:06,659
Polling can happen as little
or as often as is needed

240
00:12:06,659 --> 00:12:08,861
by your game,
but a good place to start

241
00:12:08,861 --> 00:12:11,631
is in Unity's
regular update loop.

242
00:12:11,631 --> 00:12:13,666
Once controller state
is updated,

243
00:12:13,666 --> 00:12:15,969
test for input
on each of the controller's

244
00:12:15,969 --> 00:12:19,405
individual elements,
such as buttons, thumb sticks,

245
00:12:19,405 --> 00:12:20,907
and so on.

246
00:12:20,907 --> 00:12:23,409
Not to be forgotten,
controllers may come and go

247
00:12:23,409 --> 00:12:26,512
during your game's lifecycle --
register callbacks

248
00:12:26,512 --> 00:12:30,049
to handle controller connect
and disconnect events.

249
00:12:30,049 --> 00:12:32,619
A quick way to get
the Game Controller plug-in

250
00:12:32,619 --> 00:12:36,556
integrated is to create a simple
input manager component.

251
00:12:36,556 --> 00:12:39,292
This component
has three key elements:

252
00:12:39,292 --> 00:12:40,793
a container which holds

253
00:12:40,793 --> 00:12:43,696
all of the currently
connected controllers,

254
00:12:43,696 --> 00:12:46,065
a start method
for initialization,

255
00:12:46,065 --> 00:12:48,267
and an update method
for handling polling

256
00:12:48,267 --> 00:12:50,637
and testing for input.

257
00:12:50,637 --> 00:12:53,940
First, let's take a closer look
at the start method.

258
00:12:53,940 --> 00:12:56,476
This is a great place
to do all of the necessary

259
00:12:56,476 --> 00:12:58,911
one-time setup tasks.

260
00:12:58,911 --> 00:13:01,314
Initialization of
the game controller service

261
00:13:01,314 --> 00:13:02,749
should happen here,

262
00:13:02,749 --> 00:13:05,985
along with the initial check
for connected controllers

263
00:13:05,985 --> 00:13:07,887
and registration of callbacks

264
00:13:07,887 --> 00:13:11,124
for connection
and disconnection events.

265
00:13:11,124 --> 00:13:14,494
Here's the input manager
component's script.

266
00:13:14,494 --> 00:13:16,062
All of the one-time setup code

267
00:13:16,062 --> 00:13:19,699
goes in the component's
start method, including a call

268
00:13:19,699 --> 00:13:23,369
to GCControllerService.
Initialize().

269
00:13:23,369 --> 00:13:26,639
Calling GetConnectedControllers
gets an enumerable container

270
00:13:26,639 --> 00:13:30,176
of all the currently connected
controllers.

271
00:13:30,176 --> 00:13:33,446
The final initialization step
is to register callbacks

272
00:13:33,446 --> 00:13:37,550
for controller connect
and disconnect events.

273
00:13:37,550 --> 00:13:39,886
Now that initialization
is complete,

274
00:13:39,886 --> 00:13:42,722
the input manager also needs
an update method

275
00:13:42,722 --> 00:13:45,158
in order to poll
each connected controller

276
00:13:45,158 --> 00:13:48,094
to update input state,
and to handle input state

277
00:13:48,094 --> 00:13:50,830
for each of the controller's
inputs.

278
00:13:50,830 --> 00:13:53,066
To poll for input,
start by iterating

279
00:13:53,066 --> 00:13:55,601
through the set
of connected controllers.

280
00:13:55,601 --> 00:13:57,770
Call the
GCController's Poll method

281
00:13:57,770 --> 00:13:59,739
to gather the latest state.

282
00:13:59,739 --> 00:14:05,011
Then check each button state
and respond accordingly.

283
00:14:05,011 --> 00:14:08,347
And that's a quick look at how to
use the Game Controller plug-in

284
00:14:08,347 --> 00:14:12,785
to access connected controllers
and get controller input.

285
00:14:12,785 --> 00:14:15,988
To get into more detail about
the Game Controller framework

286
00:14:15,988 --> 00:14:18,725
and learn about topics
like third-party controllers

287
00:14:18,725 --> 00:14:22,795
and nonstandard inputs,
check out prior years' sessions:

288
00:14:22,795 --> 00:14:24,530
"Supporting New
Game Controllers"

289
00:14:24,530 --> 00:14:27,333
and "Advancements
in Game Controllers."

290
00:14:27,333 --> 00:14:30,837
Accessibility is about
making technologies available

291
00:14:30,837 --> 00:14:32,638
for everyone.

292
00:14:32,638 --> 00:14:36,175
Use the Accessibility plug-in
to integrate a wide range

293
00:14:36,175 --> 00:14:38,478
of Apple's assistive
technologies

294
00:14:38,478 --> 00:14:41,247
into your Unity-based games.

295
00:14:41,247 --> 00:14:43,750
The Accessibility plug-in
gives you the ability

296
00:14:43,750 --> 00:14:46,519
to add key features,
such as VoiceOver,

297
00:14:46,519 --> 00:14:50,189
which can read programmatically
tagged content to your users;

298
00:14:50,189 --> 00:14:51,357
Switch Control,

299
00:14:51,357 --> 00:14:54,794
allowing for a wide range
of assistive input devices;

300
00:14:54,794 --> 00:14:57,797
Dynamic Type,
to easily scale in-game text

301
00:14:57,797 --> 00:15:00,867
and UI based upon
user preferences;

302
00:15:00,867 --> 00:15:03,736
and UI accommodation
settings in order to adhere

303
00:15:03,736 --> 00:15:07,273
to system-wide
accessibility preferences.

304
00:15:07,273 --> 00:15:09,876
There's a lot to cover
with the Accessibility plug-in,

305
00:15:09,876 --> 00:15:11,878
so I encourage you to check out
the session

306
00:15:11,878 --> 00:15:14,781
"Add accessibility
to Unity games"

307
00:15:14,781 --> 00:15:18,684
for a deep dive into the
Accessibility Unity plug-in.

308
00:15:18,684 --> 00:15:21,921
In that session you'll not only
get examples and use cases,

309
00:15:21,921 --> 00:15:23,756
but you'll also build
an understanding

310
00:15:23,756 --> 00:15:26,159
of what's possible
with accessibility

311
00:15:26,159 --> 00:15:28,261
on Apple platforms.

312
00:15:28,261 --> 00:15:32,331
Be sure to check it out as soon
as you have the opportunity.

313
00:15:32,331 --> 00:15:34,801
Adding haptic feedback
to your games is a great way

314
00:15:34,801 --> 00:15:38,671
to increase immersion and
enhance the gameplay experience.

315
00:15:38,671 --> 00:15:41,407
Integrate Apple's advanced
haptic capabilities

316
00:15:41,407 --> 00:15:43,810
with the Core Haptics plug-in.

317
00:15:43,810 --> 00:15:47,079
Use the Core Haptics plug-in
to build custom haptic patterns

318
00:15:47,079 --> 00:15:49,916
from a set of haptic
and audio events.

319
00:15:49,916 --> 00:15:52,885
Play back synchronized
custom audio and haptics.

320
00:15:52,885 --> 00:15:55,955
Programmatically define
or update haptic feedback

321
00:15:55,955 --> 00:15:58,624
by adjusting parameters
in real time.

322
00:15:58,624 --> 00:16:02,495
Use the Apple Haptic and Audio
Pattern file format, or AHAP,

323
00:16:02,495 --> 00:16:04,764
for a file-based approach
to designing and storing

324
00:16:04,764 --> 00:16:07,133
your patterns as assets.

325
00:16:07,133 --> 00:16:09,702
Tune your Core Haptics patterns
in the Unity Editor

326
00:16:09,702 --> 00:16:12,471
with inspector support.

327
00:16:12,471 --> 00:16:14,841
To get the most out of
the Core Haptics plug-in,

328
00:16:14,841 --> 00:16:17,210
you'll need to understand
four fundamental elements

329
00:16:17,210 --> 00:16:20,680
of Core Haptics and their
relationship to one another.

330
00:16:20,680 --> 00:16:24,517
The highest-level element
is the CHHapticEngine.

331
00:16:24,517 --> 00:16:27,320
The haptic engine represents
the link to the haptic server

332
00:16:27,320 --> 00:16:31,858
on the device and is required
to play any haptic patterns.

333
00:16:31,858 --> 00:16:35,895
The CHHapticEngine creates
CHHapticPatternPlayers.

334
00:16:35,895 --> 00:16:39,065
Pattern players are used
for playback of CHHapticPatterns

335
00:16:39,065 --> 00:16:44,136
with controls like start,
stop, pause, and resume.

336
00:16:44,136 --> 00:16:47,273
A CHHapticPattern
is a logical grouping

337
00:16:47,273 --> 00:16:50,509
of one or more haptic
and audio events.

338
00:16:50,509 --> 00:16:54,881
The CHHapticEngine uses patterns
to create players.

339
00:16:54,881 --> 00:16:57,250
CHHapticEvents
are the building blocks

340
00:16:57,250 --> 00:17:00,553
used to define
a haptic experience.

341
00:17:00,553 --> 00:17:02,989
Core Haptics
is a data-driven API,

342
00:17:02,989 --> 00:17:06,626
which allows for haptic patterns
to be defined programmatically,

343
00:17:06,626 --> 00:17:11,330
directly in your scripts,
or by leveraging AHAP files.

344
00:17:11,330 --> 00:17:13,833
One easy way
to add Core Haptics support

345
00:17:13,833 --> 00:17:16,636
to your projects is to create
a Haptics component

346
00:17:16,636 --> 00:17:20,706
that manages each of the
necessary Core Haptics objects.

347
00:17:20,706 --> 00:17:22,909
Here is an example
Haptics component

348
00:17:22,909 --> 00:17:25,011
that contains a CHHapticEngine,

349
00:17:25,011 --> 00:17:29,282
a CHHapticPatternPlayer,
and an AHAP Asset.

350
00:17:29,282 --> 00:17:31,851
The AHAP asset
is a custom Unity asset

351
00:17:31,851 --> 00:17:34,654
defined by
the Core Haptics plug-in.

352
00:17:34,654 --> 00:17:38,024
This allows for easy import
and export to AHAP files,

353
00:17:38,024 --> 00:17:40,059
as well as
a custom editor extension

354
00:17:40,059 --> 00:17:43,229
to manage pattern creation
and customization.

355
00:17:43,229 --> 00:17:46,365
Let's take a closer look.

356
00:17:46,365 --> 00:17:48,801
I'll begin by ensuring
that both Apple.Core

357
00:17:48,801 --> 00:17:52,605
and the Core Haptics plug-ins
are installed in my project.

358
00:17:52,605 --> 00:17:53,739
With those added,

359
00:17:53,739 --> 00:17:59,345
I can start enhancing my game
with haptics.

360
00:17:59,345 --> 00:18:01,547
Here's the haptics component
that I've created

361
00:18:01,547 --> 00:18:03,783
based upon the previous diagram.

362
00:18:03,783 --> 00:18:06,152
We'll check out the
implementation in just a moment,

363
00:18:06,152 --> 00:18:09,655
but for now,
I'll attach it to my airplane.

364
00:18:12,358 --> 00:18:13,559
Once attached,

365
00:18:13,559 --> 00:18:16,762
I now see that the component
requires an AHAP asset,

366
00:18:16,762 --> 00:18:20,166
but my AHAP Assets folder
is empty.

367
00:18:20,166 --> 00:18:21,701
I'll create a new one by going

368
00:18:21,701 --> 00:18:29,709
to Assets  Create  Apple 
CoreHaptics  AHAP.

369
00:18:29,709 --> 00:18:31,677
Once created,
I'll give it a fantastic

370
00:18:31,677 --> 00:18:39,218
and original name:
MyHapticPattern.

371
00:18:39,218 --> 00:18:41,954
The Core Haptics plug-in
comes with editor extensions

372
00:18:41,954 --> 00:18:46,726
that let me tune my new pattern
right in the inspector window.

373
00:18:46,726 --> 00:18:49,095
This is where I define
the CHHapticEvents

374
00:18:49,095 --> 00:18:50,930
that are part of
the CHHapticPattern

375
00:18:50,930 --> 00:18:53,099
that can be played.

376
00:18:53,099 --> 00:18:55,701
By default,
there's a transient event,

377
00:18:55,701 --> 00:19:01,774
but I can easily add
a continuous event as well.

378
00:19:01,774 --> 00:19:06,779
There are also Import, Export,
and Reset buttons in the UI.

379
00:19:06,779 --> 00:19:08,881
Reset clears any events
that I've added

380
00:19:08,881 --> 00:19:13,452
and returns the pattern
to its default state.

381
00:19:13,452 --> 00:19:16,088
Import and Export
are great features.

382
00:19:16,088 --> 00:19:23,095
These allow your project to load
and save AHAP files.

383
00:19:23,095 --> 00:19:25,998
Here I've imported a predefined
AHAP called Rumble,

384
00:19:25,998 --> 00:19:28,567
which triggers
a nice vibration effect,

385
00:19:28,567 --> 00:19:34,874
but I think it needs
to be tweaked just a little.

386
00:19:34,874 --> 00:19:36,475
Now that I've updated
the pattern,

387
00:19:36,475 --> 00:19:38,644
I can export it
to a new AHAP file

388
00:19:38,644 --> 00:19:40,813
in order to share
this improved haptic pattern

389
00:19:40,813 --> 00:19:45,151
with the rest of my team.

390
00:19:51,157 --> 00:19:53,225
Now that my asset
is created and tuned,

391
00:19:53,225 --> 00:19:59,231
I'll go back to my airplane
and point it to MyHapticPattern.

392
00:19:59,231 --> 00:20:03,335
Great! Everything is wired up.

393
00:20:03,335 --> 00:20:06,205
With the haptic pattern defined
and properly referenced,

394
00:20:06,205 --> 00:20:08,240
all that remains
is to add some logic

395
00:20:08,240 --> 00:20:11,811
to the Haptics component
so it can play a haptic pattern.

396
00:20:11,811 --> 00:20:14,413
This can be divided
into two methods:

397
00:20:14,413 --> 00:20:17,616
PrepareHaptics and Play.

398
00:20:17,616 --> 00:20:21,253
PrepareHaptics is where the
haptic engine is initialized,

399
00:20:21,253 --> 00:20:24,390
and the haptic pattern
player is created.

400
00:20:24,390 --> 00:20:25,925
Play will simply call

401
00:20:25,925 --> 00:20:30,830
the CHHapticPatternPlayer's
start method to begin playback.

402
00:20:30,830 --> 00:20:34,100
And here's
the Haptics component script.

403
00:20:34,100 --> 00:20:36,869
Fields are defined
for a haptic engine

404
00:20:36,869 --> 00:20:39,105
and a haptic player.

405
00:20:39,105 --> 00:20:41,941
Importantly,
add a serializeField attribute

406
00:20:41,941 --> 00:20:46,145
to allow the AHAP asset
to be set in the editor UI.

407
00:20:46,145 --> 00:20:50,883
Next, add the code to create
a CHHapticEngine, start it,

408
00:20:50,883 --> 00:20:52,852
and create
a haptic pattern player

409
00:20:52,852 --> 00:20:56,922
by accessing the AHAP directly
from the referenced asset.

410
00:20:56,922 --> 00:20:59,225
Of course,
calling Start on the player

411
00:20:59,225 --> 00:21:02,294
will play the haptic pattern.

412
00:21:02,294 --> 00:21:05,097
The Core Haptics Unity plug-in
gives you the tools you need

413
00:21:05,097 --> 00:21:08,934
to add an entirely new level
of immersion into your games.

414
00:21:08,934 --> 00:21:11,670
Use the Core Haptics plug-in
to create magical game moments

415
00:21:11,670 --> 00:21:15,741
that look, sound, and feel real.

416
00:21:15,741 --> 00:21:17,643
For a deep dive
into Core Haptics,

417
00:21:17,643 --> 00:21:21,547
check out the session
"Introducing Core Haptics."

418
00:21:21,547 --> 00:21:25,151
For details on designing
engaging haptics experiences

419
00:21:25,151 --> 00:21:28,621
be sure to watch "Designing
Audio-Haptic Experiences"

420
00:21:28,621 --> 00:21:32,057
and "Practice audio
haptic design."

421
00:21:32,057 --> 00:21:34,994
Immersive audio is an incredibly
important aspect

422
00:21:34,994 --> 00:21:37,196
of great game experiences.

423
00:21:37,196 --> 00:21:41,167
Use the PHASE Unity plug-in to
unlock your creative potential

424
00:21:41,167 --> 00:21:45,571
and build lush soundscapes
into your game worlds.

425
00:21:45,571 --> 00:21:47,907
With PHASE,
you can provide complex

426
00:21:47,907 --> 00:21:51,277
and dynamic audio experiences
to your games.

427
00:21:51,277 --> 00:21:54,480
Geometry-aware audio means
that sounds emanate from

428
00:21:54,480 --> 00:21:57,249
and interact with
meshes in the scene.

429
00:21:57,249 --> 00:21:59,685
Environments in your game
will sound more realistic

430
00:21:59,685 --> 00:22:02,788
through reverberation
and reflection.

431
00:22:02,788 --> 00:22:05,291
You can build hierarchical
audio graphs

432
00:22:05,291 --> 00:22:09,762
that allow for dynamic audio
control during gameplay

433
00:22:09,762 --> 00:22:13,132
The PHASE plug-in includes
a set of predefined components

434
00:22:13,132 --> 00:22:14,934
that are game-ready.

435
00:22:14,934 --> 00:22:17,102
Simply attach them
to your game objects

436
00:22:17,102 --> 00:22:18,370
and you can start using PHASE

437
00:22:18,370 --> 00:22:21,207
without writing
a single line of code.

438
00:22:21,207 --> 00:22:24,677
The first component is the
PHASEListener component.

439
00:22:24,677 --> 00:22:27,246
It acts as the "ears"
of your game scene

440
00:22:27,246 --> 00:22:31,483
and processes audio based
upon its position, orientation,

441
00:22:31,483 --> 00:22:33,786
and reverb preset.

442
00:22:33,786 --> 00:22:36,789
Next is the
PHASEOccluder component.

443
00:22:36,789 --> 00:22:38,958
PHASEOccluders
attach to game objects

444
00:22:38,958 --> 00:22:41,594
with geometry data
and dampen audio

445
00:22:41,594 --> 00:22:46,098
when they come between sources
and the listener in the scene.

446
00:22:46,098 --> 00:22:48,834
Next is the
PHASESource component.

447
00:22:48,834 --> 00:22:50,369
These are attached
to game objects

448
00:22:50,369 --> 00:22:53,005
and use the object's transform
to position sounds

449
00:22:53,005 --> 00:22:55,040
in your game world.

450
00:22:55,040 --> 00:22:57,376
In addition to
the built-in components,

451
00:22:57,376 --> 00:23:00,579
the PHASE plug-in also defines
a custom asset,

452
00:23:00,579 --> 00:23:02,748
the SoundEvent asset.

453
00:23:02,748 --> 00:23:06,151
Sound events are objects which
describe audio playback events

454
00:23:06,151 --> 00:23:09,955
and define the audio played
by sources in the scene.

455
00:23:09,955 --> 00:23:11,824
To start using
the PHASE plug-in,

456
00:23:11,824 --> 00:23:14,260
the first step is to make sure
that both the Apple.Core

457
00:23:14,260 --> 00:23:17,896
and PHASE plug-ins
are added to the project.

458
00:23:17,896 --> 00:23:21,133
Once installed, I can start
adding the included components

459
00:23:21,133 --> 00:23:22,635
to the scene.

460
00:23:22,635 --> 00:23:23,936
In this example project,

461
00:23:23,936 --> 00:23:26,739
I have three game objects
of interest:

462
00:23:26,739 --> 00:23:31,744
an airplane, a building,
and then the camera.

463
00:23:31,744 --> 00:23:34,146
First, I'll attach
the PHASEListener component

464
00:23:34,146 --> 00:23:36,282
to the camera.

465
00:23:36,282 --> 00:23:40,085
By doing that, I've added
the "ears" to the scene.

466
00:23:40,085 --> 00:23:42,121
Next, I'll make
the building an occluder

467
00:23:42,121 --> 00:23:45,824
by attaching
the PHASEOccluder component.

468
00:23:48,827 --> 00:23:51,630
Finally, I'll add a source
to the scene by adding

469
00:23:51,630 --> 00:23:55,834
the PHASESource component
to the airplane.

470
00:23:55,834 --> 00:23:59,104
Now that I've added a source
it needs some audio to play,

471
00:23:59,104 --> 00:24:01,440
so I need to attach
a sound event,

472
00:24:01,440 --> 00:24:04,743
but the Sound Events folder
is empty.

473
00:24:04,743 --> 00:24:06,545
I can create one by going to

474
00:24:06,545 --> 00:24:14,286
Assets  Create  Apple 
PHASE  SoundEvent.

475
00:24:14,286 --> 00:24:15,921
After creating a sound event,

476
00:24:15,921 --> 00:24:17,790
the PHASE plug-in
will immediately open

477
00:24:17,790 --> 00:24:20,859
the PHASE sound event
composer window.

478
00:24:20,859 --> 00:24:24,596
This is the canvas
used to build sound events.

479
00:24:24,596 --> 00:24:27,533
I start by right-clicking
anywhere in the window.

480
00:24:27,533 --> 00:24:31,370
This shows a pop-up that allows
me to add a node to the event.

481
00:24:31,370 --> 00:24:36,108
Because I want to play back
a clip I’ll create a sampler node.

482
00:24:36,108 --> 00:24:39,144
I've already added an audio clip
of an idling airplane

483
00:24:39,144 --> 00:24:45,617
to the project,
so I can reference that here.

484
00:24:45,617 --> 00:24:47,086
I'll keep looping enabled

485
00:24:47,086 --> 00:24:50,155
so that the airplane
keeps humming along.

486
00:24:50,155 --> 00:24:53,792
To hear the airplane,
I need to route it to a mixer.

487
00:24:53,792 --> 00:24:55,060
I can create a mixer

488
00:24:55,060 --> 00:24:58,964
by dragging the output line onto
the event composer's canvas,

489
00:24:58,964 --> 00:25:02,468
where it will show me
the option to create a mixer.

490
00:25:05,471 --> 00:25:10,943
My sound event is now
complete and ready to use.

491
00:25:10,943 --> 00:25:13,212
By clicking on the sound event,

492
00:25:13,212 --> 00:25:16,582
I can see its settings
directly in the inspector.

493
00:25:16,582 --> 00:25:19,785
This allows me to adjust values
without having to go back

494
00:25:19,785 --> 00:25:22,287
into the sound event composer.

495
00:25:22,287 --> 00:25:23,789
With the sound event created,

496
00:25:23,789 --> 00:25:26,291
I can now reference it
in the PHASESource component

497
00:25:26,291 --> 00:25:30,963
I attached
to the airplane earlier.

498
00:25:30,963 --> 00:25:33,365
And with that,
audio in the scene is routed

499
00:25:33,365 --> 00:25:35,968
and configured for playback.

500
00:25:35,968 --> 00:25:39,104
The PHASE Unity plug-in
opens totally new possibilities

501
00:25:39,104 --> 00:25:41,440
for in-game audio design.

502
00:25:41,440 --> 00:25:43,742
To learn more about PHASE
and to dive deeper

503
00:25:43,742 --> 00:25:45,944
into the concepts
I've introduced today,

504
00:25:45,944 --> 00:25:49,281
be sure to check out the Apple
Developer documentation site

505
00:25:49,281 --> 00:25:54,887
and last year's introductory
WWDC session video.

506
00:25:54,887 --> 00:25:59,558
And that concludes our overview
of the new Apple Unity plug-ins.

507
00:25:59,558 --> 00:26:02,161
I've covered a lot today,
but if you would like

508
00:26:02,161 --> 00:26:05,397
to know more about any
of the Apple Unity plug-ins,

509
00:26:05,397 --> 00:26:09,635
the repository on GitHub
is the best place to start.

510
00:26:09,635 --> 00:26:12,237
That's where you'll find
the source,

511
00:26:12,237 --> 00:26:17,309
detailed documentation,
and samples for each of the plug-ins.

512
00:26:17,309 --> 00:26:19,978
Find out more
about integrating accessibility

513
00:26:19,978 --> 00:26:21,847
into your Unity games with the

514
00:26:21,847 --> 00:26:24,950
"Add accessibility
to Unity games" session

515
00:26:24,950 --> 00:26:26,351
and be sure to check out

516
00:26:26,351 --> 00:26:29,254
"Reach new players
with Game Center dashboard"

517
00:26:29,254 --> 00:26:32,324
to learn how to boost
your game's visibility.

518
00:26:32,324 --> 00:26:34,026
Thank you for watching.

519
00:26:34,026 --> 00:26:38,597
♪

