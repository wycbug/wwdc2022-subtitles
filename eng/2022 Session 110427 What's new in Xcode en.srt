1
00:00:00,000 --> 00:00:02,870
♪ instrumental hip hop music ♪

2
00:00:02,870 --> 00:00:09,977
♪

3
00:00:09,977 --> 00:00:12,379
Hello, everyone.
I'm Jonathon Mah.

4
00:00:12,379 --> 00:00:13,714
And I'm Lisa Xiao.

5
00:00:13,714 --> 00:00:14,681
And we'd love
to introduce you

6
00:00:14,681 --> 00:00:17,517
to what's new in Xcode 14.

7
00:00:17,517 --> 00:00:18,852
Today, we'll look
at new features

8
00:00:18,852 --> 00:00:20,787
and enhancements
throughout Xcode,

9
00:00:20,787 --> 00:00:24,091
including source editing
and SwiftUI previews,

10
00:00:24,091 --> 00:00:27,060
multiplatform applications,
TestFlight feedback,

11
00:00:27,060 --> 00:00:28,962
and performance improvements.

12
00:00:28,962 --> 00:00:31,565
There's a lot to cover,
so let's get to it.

13
00:00:31,565 --> 00:00:33,367
The first thing you'll notice
is how much faster it is

14
00:00:33,367 --> 00:00:34,768
just getting started.

15
00:00:34,768 --> 00:00:37,404
Xcode 14 is 30 percent smaller.

16
00:00:37,404 --> 00:00:40,107
It downloads and installs
significantly faster.

17
00:00:40,107 --> 00:00:42,809
You can download additional
platforms and simulators

18
00:00:42,809 --> 00:00:44,211
on demand.

19
00:00:44,211 --> 00:00:46,713
If you need them immediately,
you can get them here --

20
00:00:46,713 --> 00:00:49,483
or later, when you first
try to use them.

21
00:00:51,752 --> 00:00:55,555
We're building Food Truck,
a food-delivery application.

22
00:00:58,325 --> 00:01:01,261
SwiftUI with live previews
is a great workflow,

23
00:01:01,261 --> 00:01:03,397
and it's getting even better.

24
00:01:03,397 --> 00:01:06,099
Now the preview canvas
is interactive by default,

25
00:01:06,099 --> 00:01:08,035
so your changes
are immediately live

26
00:01:08,035 --> 00:01:10,637
as you make them.

27
00:01:10,637 --> 00:01:12,272
The canvas has a new control

28
00:01:12,272 --> 00:01:15,042
to create additional variants
of each preview

29
00:01:15,042 --> 00:01:16,910
without writing any code.

30
00:01:16,910 --> 00:01:19,012
You can vary the color scheme,
text size,

31
00:01:19,012 --> 00:01:21,048
or device orientation,
and then immediately

32
00:01:21,048 --> 00:01:24,785
see your interface
rendered in each scenario.

33
00:01:24,785 --> 00:01:26,553
Let's see how our view looks

34
00:01:26,553 --> 00:01:29,556
with different
Dynamic Type sizes.

35
00:01:37,798 --> 00:01:39,700
With these previews
side by side,

36
00:01:39,700 --> 00:01:41,368
it's easy to validate
your interface

37
00:01:41,368 --> 00:01:43,704
and make sure
things look just right.

38
00:01:43,704 --> 00:01:46,239
Let's check the larger sizes.

39
00:01:51,244 --> 00:01:52,879
The first icon is very wide

40
00:01:52,879 --> 00:01:56,316
and causes the text
to wrap awkwardly.

41
00:01:56,316 --> 00:01:58,752
Luckily, my designer has
just asked me to change it,

42
00:01:58,752 --> 00:02:00,387
but only in the header.

43
00:02:00,387 --> 00:02:02,289
Our CardView doesn't support

44
00:02:02,289 --> 00:02:04,291
a different icon
for the header yet,

45
00:02:04,291 --> 00:02:07,394
so let's start by adding
that functionality.

46
00:02:07,394 --> 00:02:10,230
I'll switch over
to the implementation.

47
00:02:15,902 --> 00:02:22,242
The header and content elements
are both using the same image.

48
00:02:22,242 --> 00:02:26,580
Let's add another image property
specifically for the header.

49
00:02:36,923 --> 00:02:38,325
In most of the cards,

50
00:02:38,325 --> 00:02:41,194
using the same image
in both places looks great.

51
00:02:41,194 --> 00:02:44,097
We can save ourselves the time
of updating each existing call

52
00:02:44,097 --> 00:02:48,335
by adding a custom initializer
with a default value.

53
00:02:53,006 --> 00:02:55,075
When I start to type
the initializer,

54
00:02:55,075 --> 00:02:59,012
Xcode 14 now offers to complete
the whole thing!

55
00:02:59,012 --> 00:03:01,281
I can accept the default value
as a starting point

56
00:03:01,281 --> 00:03:07,621
for my customizations,
saving a ton of time.

57
00:03:07,621 --> 00:03:10,991
This also works
for the codable methods.

58
00:03:10,991 --> 00:03:14,694
Let's give the headerIcon
parameter a default value.

59
00:03:24,538 --> 00:03:27,107
Now, we'll return
to the CardStack view

60
00:03:27,107 --> 00:03:30,477
and use this new functionality.

61
00:03:36,483 --> 00:03:39,920
My designer asked me to use
the calendar symbol here.

62
00:03:39,920 --> 00:03:42,756
The library now includes
all of the SF Symbols,

63
00:03:42,756 --> 00:03:46,793
so it's easy to make sure
I'm using the right one.

64
00:03:54,134 --> 00:03:56,169
I can press Return
to insert the right code

65
00:03:56,169 --> 00:03:58,171
to use the symbol.

66
00:04:06,079 --> 00:04:08,482
This symbol looks great.

67
00:04:08,482 --> 00:04:11,885
The new side-by-side comparisons
we get from preview variants

68
00:04:11,885 --> 00:04:14,121
make it easy to ensure
your app looks good

69
00:04:14,121 --> 00:04:17,190
with all the settings
your users have chosen.

70
00:04:17,190 --> 00:04:20,227
In addition to initializer
and codable definitions,

71
00:04:20,227 --> 00:04:23,130
Xcode 14 provides more
intelligent recommendations

72
00:04:23,130 --> 00:04:26,533
so you can write your ideas
more quickly and easily.

73
00:04:26,533 --> 00:04:28,535
Let me show you some more.

74
00:04:33,240 --> 00:04:37,477
When I start to add
another CardView,

75
00:04:37,477 --> 00:04:43,316
the initializers now appear
directly in the completion list.

76
00:04:43,316 --> 00:04:45,919
The headerIcon parameter
is in italic.

77
00:04:45,919 --> 00:04:48,421
That's because
it has a default value.

78
00:04:48,421 --> 00:04:50,123
If I accept the completion now,

79
00:04:50,123 --> 00:04:52,359
it won't include
the headerIcon label,

80
00:04:52,359 --> 00:04:55,795
it will use the default value
we just added.

81
00:04:55,795 --> 00:04:57,531
Here, I want to specialize
the icon again,

82
00:04:57,531 --> 00:05:00,467
so I can type part of the name
to opt in.

83
00:05:03,136 --> 00:05:10,277
I'll give my new card
some values.

84
00:05:14,447 --> 00:05:17,184
I'd like a divider
before my new card.

85
00:05:17,184 --> 00:05:19,085
Adding a Divider to the VStack

86
00:05:19,085 --> 00:05:22,055
gives a line across
the entire width.

87
00:05:29,062 --> 00:05:30,397
To make it more subtle,

88
00:05:30,397 --> 00:05:34,668
I'll use frame
to set a maximum width.

89
00:05:36,670 --> 00:05:40,240
The frame modifier has
a lot of optional arguments.

90
00:05:40,240 --> 00:05:42,175
The new completion features
make it a snap

91
00:05:42,175 --> 00:05:46,079
to get just the arguments
I need.

92
00:05:51,084 --> 00:05:54,387
That's code completion
in Xcode 14.

93
00:05:54,387 --> 00:05:57,090
This first card's title
comes from a method.

94
00:05:57,090 --> 00:05:59,292
I've heard it isn't handling
all numbers correctly,

95
00:05:59,292 --> 00:06:01,461
so let's see
how it's implemented.

96
00:06:01,461 --> 00:06:05,899
I'll Command-click and choose
Jump to Definition.

97
00:06:11,104 --> 00:06:13,707
The redesigned definition list
highlights what's different

98
00:06:13,707 --> 00:06:15,208
about each of the results

99
00:06:15,208 --> 00:06:17,777
so that you can quickly
choose the one you want.

100
00:06:17,777 --> 00:06:20,647
Since our text(for:) method
is from a protocol,

101
00:06:20,647 --> 00:06:22,782
there are multiple options.

102
00:06:22,782 --> 00:06:25,518
The list shows the specific
types that define the method:

103
00:06:25,518 --> 00:06:27,187
we have the declaration
from the protocol

104
00:06:27,187 --> 00:06:29,489
and two implementations.

105
00:06:29,489 --> 00:06:33,927
I'll navigate to the
server-backed implementation.

106
00:06:36,429 --> 00:06:37,797
This class implements parsing

107
00:06:37,797 --> 00:06:39,833
using a regular expression
literal,

108
00:06:39,833 --> 00:06:42,168
which is new in Swift 5.7.

109
00:06:44,571 --> 00:06:45,939
My coworker told me

110
00:06:45,939 --> 00:06:48,441
the problem is being caught
by our unit tests.

111
00:06:48,441 --> 00:06:50,443
Let's run them now.

112
00:07:02,389 --> 00:07:03,690
Yep, we have some failures.

113
00:07:03,690 --> 00:07:05,692
Let's take a look.

114
00:07:09,729 --> 00:07:12,932
Something seems wrong
with extracting the event count.

115
00:07:12,932 --> 00:07:15,435
Let's check how this function
is called.

116
00:07:15,435 --> 00:07:16,936
I can see that directly

117
00:07:16,936 --> 00:07:18,805
by opening the callers
of this method

118
00:07:18,805 --> 00:07:20,540
by Command-clicking.

119
00:07:20,540 --> 00:07:23,410
Just like the definition list,
the callers list

120
00:07:23,410 --> 00:07:25,145
shows the different files
and functions

121
00:07:25,145 --> 00:07:27,280
that contain calls
to this method,

122
00:07:27,280 --> 00:07:30,450
along with a preview
of each call site.

123
00:07:38,458 --> 00:07:40,927
Here's a call
from the failing test method.

124
00:07:40,927 --> 00:07:41,928
The preview shows me

125
00:07:41,928 --> 00:07:45,098
the test is passing
the string "0 records",

126
00:07:45,098 --> 00:07:47,167
which gives me a hint
about the problem.

127
00:07:47,167 --> 00:07:49,502
And now I can spot the bug:

128
00:07:49,502 --> 00:07:52,906
the regular expression is
matching against the digits 1-9,

129
00:07:52,906 --> 00:07:55,241
but I forgot to include zero!

130
00:07:55,241 --> 00:07:59,279
I could fix this by updating
the character range to use 0-9,

131
00:07:59,279 --> 00:08:01,247
or switch
to the more descriptive

132
00:08:01,247 --> 00:08:03,917
digit character class.

133
00:08:11,391 --> 00:08:13,059
Something's still not right,

134
00:08:13,059 --> 00:08:16,062
but now the compiler
is telling me why.

135
00:08:16,062 --> 00:08:18,031
Regular expressions
are a first-class feature

136
00:08:18,031 --> 00:08:20,100
in Swift 5.7.

137
00:08:20,100 --> 00:08:22,268
The compiler checks
my regular expression

138
00:08:22,268 --> 00:08:24,003
like it does with other code,

139
00:08:24,003 --> 00:08:26,973
and Xcode highlights my typo
immediately.

140
00:08:26,973 --> 00:08:28,908
Notice that when I correct
the expression,

141
00:08:28,908 --> 00:08:30,543
two things happen:

142
00:08:30,543 --> 00:08:32,445
syntax highlighting
in the regular expression

143
00:08:32,445 --> 00:08:36,349
confirms my edit,
and the errors dim gray.

144
00:08:41,020 --> 00:08:42,622
This new dimming
shows that Xcode

145
00:08:42,622 --> 00:08:45,191
is reevaluating
the diagnostics.

146
00:08:45,191 --> 00:08:49,729
When I pause for a moment,
the file is reprocessed

147
00:08:49,729 --> 00:08:52,899
and Xcode confirms
the errors are resolved.

148
00:08:52,899 --> 00:08:55,402
This dimming happens
during long builds as well,

149
00:08:55,402 --> 00:08:56,469
so you can easily tell

150
00:08:56,469 --> 00:08:58,405
which problems
are from the latest build

151
00:08:58,405 --> 00:09:02,642
and which are from
a previous build.

152
00:09:02,642 --> 00:09:04,978
Let's go over to the test.

153
00:09:15,255 --> 00:09:17,190
This jumped me
straight to the call,

154
00:09:17,190 --> 00:09:19,426
which is in the middle
of a test method.

155
00:09:19,426 --> 00:09:21,060
Take a look
at the top of the editor.

156
00:09:21,060 --> 00:09:24,631
Xcode 14 shows the definitions
containing the visible code,

157
00:09:24,631 --> 00:09:27,767
even when they're
scrolled out of view.

158
00:09:32,772 --> 00:09:37,310
I can use the test diamonds
at the top to rerun the tests.

159
00:09:44,184 --> 00:09:49,222
Fantastic,
the fix passes all the tests.

160
00:09:49,222 --> 00:09:50,423
With Xcode 14,

161
00:09:50,423 --> 00:09:53,126
you can write code faster
with new code completions,

162
00:09:53,126 --> 00:09:56,162
design fluidly with
SwiftUI preview variants,

163
00:09:56,162 --> 00:09:59,165
be more informed with improved
error presentation,

164
00:09:59,165 --> 00:10:02,035
and navigate confidently
with jump to definition.

165
00:10:02,035 --> 00:10:04,237
And there's even more.
Here's Lisa.

166
00:10:04,237 --> 00:10:05,572
Thank you, Jonathon.

167
00:10:05,572 --> 00:10:10,510
Let's take a look at the build
performance improvements.

168
00:10:10,510 --> 00:10:12,912
When Xcode
builds multiple targets,

169
00:10:12,912 --> 00:10:16,449
like a framework
and application,

170
00:10:16,449 --> 00:10:20,153
first it compiles
the framework sources.

171
00:10:20,153 --> 00:10:23,156
Then it generates a module.

172
00:10:23,156 --> 00:10:24,424
That enables linking

173
00:10:24,424 --> 00:10:27,427
and compiling
the application sources.

174
00:10:27,427 --> 00:10:29,395
And then it links
the application,

175
00:10:29,395 --> 00:10:31,631
completing the build.

176
00:10:31,631 --> 00:10:36,402
Xcode 14 rearranges your build
for improved parallelism.

177
00:10:36,402 --> 00:10:38,738
By eagerly producing
Swift modules,

178
00:10:38,738 --> 00:10:44,110
Xcode unblocks build tasks
and increases parallelism.

179
00:10:44,110 --> 00:10:46,946
It shortens all the critical
paths of your builds,

180
00:10:46,946 --> 00:10:49,215
all while being more respectful

181
00:10:49,215 --> 00:10:53,119
of your simultaneous
use of the machine.

182
00:10:53,119 --> 00:10:55,121
But we didn't stop there.

183
00:10:55,121 --> 00:10:57,924
We also made the linker
up to two times faster

184
00:10:57,924 --> 00:11:00,660
through increased parallelism.

185
00:11:00,660 --> 00:11:04,264
All together,
Xcode 14 builds projects

186
00:11:04,264 --> 00:11:07,267
up to 25 percent faster,

187
00:11:07,267 --> 00:11:09,068
with machines
with the most cores

188
00:11:09,068 --> 00:11:12,672
seeing the biggest
improvements.

189
00:11:12,672 --> 00:11:15,742
Even with the improvements
to build scheduling,

190
00:11:15,742 --> 00:11:17,477
sometimes your project can have

191
00:11:17,477 --> 00:11:21,381
internal dependencies
on long synchronous tasks.

192
00:11:21,381 --> 00:11:23,816
It can be hard to tell
this is happening

193
00:11:23,816 --> 00:11:27,086
without a visualization.

194
00:11:27,086 --> 00:11:31,424
Good news, we've included that
in Xcode 14!

195
00:11:31,424 --> 00:11:33,259
You can open
the new build timeline

196
00:11:33,259 --> 00:11:36,429
on any build log
or result bundle.

197
00:11:36,429 --> 00:11:40,033
It will help you identify
unexpectedly long tasks

198
00:11:40,033 --> 00:11:42,101
and bottlenecks.

199
00:11:42,101 --> 00:11:44,971
Here's the build timeline
for Food Truck.

200
00:11:44,971 --> 00:11:46,472
I can see a script phase

201
00:11:46,472 --> 00:11:49,842
constraining the build
to a single core.

202
00:11:49,842 --> 00:11:51,444
You can get critical insights

203
00:11:51,444 --> 00:11:54,380
and identify performance
opportunities in your build

204
00:11:54,380 --> 00:11:57,817
with the new build timeline.

205
00:11:57,817 --> 00:12:01,087
You can learn all about
parallelizing builds,

206
00:12:01,087 --> 00:12:03,156
the new build timeline.
and linking

207
00:12:03,156 --> 00:12:06,593
in "Demystify parallelization
in Xcode builds"

208
00:12:06,593 --> 00:12:10,930
and "Link Fast:
Improve build and launch."

209
00:12:10,930 --> 00:12:12,565
Parallel testing in Xcode

210
00:12:12,565 --> 00:12:16,235
has been a great way
to run your tests faster.

211
00:12:16,235 --> 00:12:19,572
In Xcode 14,
it's even better.

212
00:12:19,572 --> 00:12:22,542
We used the same techniques
to improve build performance

213
00:12:22,542 --> 00:12:25,011
that I just showed you.

214
00:12:25,011 --> 00:12:27,981
Xcode 14 eliminates
scheduling dependencies

215
00:12:27,981 --> 00:12:30,183
between targets
and test classes

216
00:12:30,183 --> 00:12:34,754
to increase parallelism
during testing even more.

217
00:12:34,754 --> 00:12:36,356
If you have long-running tests

218
00:12:36,356 --> 00:12:38,858
in different test classes
and targets,

219
00:12:38,858 --> 00:12:41,728
this feature could improve
your test execution time

220
00:12:41,728 --> 00:12:45,231
by up to 30 percent.

221
00:12:45,231 --> 00:12:48,968
To learn about how to improve
test speed and reliability,

222
00:12:48,968 --> 00:12:50,203
please check out

223
00:12:50,203 --> 00:12:55,675
"Author fast and reliable tests
for Xcode Cloud."

224
00:12:55,675 --> 00:12:58,978
Building is faster,
testing is faster,

225
00:12:58,978 --> 00:13:03,483
and preparing your macOS app
for distribution is faster too.

226
00:13:03,483 --> 00:13:09,555
We have sped up notarization
by four times in Xcode 14.

227
00:13:09,555 --> 00:13:11,724
For projects using
Interface Builder,

228
00:13:11,724 --> 00:13:14,027
I have more good news!

229
00:13:14,027 --> 00:13:17,230
Document loading
is up to 50 percent faster,

230
00:13:17,230 --> 00:13:19,532
and switching between
iPhones and iPads

231
00:13:19,532 --> 00:13:23,302
in the device bar
is up to 30 percent faster.

232
00:13:23,302 --> 00:13:26,105
Canvas editing operations
are incremental

233
00:13:26,105 --> 00:13:28,574
and prioritize the scenes
you're looking at

234
00:13:28,574 --> 00:13:30,710
so that it gives you
immediate feedback,

235
00:13:30,710 --> 00:13:34,180
even in large storyboards.

236
00:13:34,180 --> 00:13:38,851
Xcode 14 is faster,
and it's easier to use, too.

237
00:13:38,851 --> 00:13:41,354
Let me show you how.

238
00:13:41,354 --> 00:13:43,222
Xcode 14 makes it easy

239
00:13:43,222 --> 00:13:45,992
to bring your app
to different platforms.

240
00:13:45,992 --> 00:13:49,562
You can use a single target
to define your app,

241
00:13:49,562 --> 00:13:52,298
and list what platforms
you support.

242
00:13:52,298 --> 00:13:56,269
This eliminates the need to keep
settings and files in sync,

243
00:13:56,269 --> 00:14:01,441
so you only have to describe
what's unique on each platform.

244
00:14:01,441 --> 00:14:05,078
Check out "Use Xcode
to build a multiplatform app"

245
00:14:05,078 --> 00:14:09,816
to take advantage of this
feature in your project.

246
00:14:09,816 --> 00:14:13,920
Xcode also has great tools
for making your app smaller.

247
00:14:13,920 --> 00:14:16,222
The memory debugger
has always been great

248
00:14:16,222 --> 00:14:19,192
for exploring leaks
in your application.

249
00:14:19,192 --> 00:14:21,427
It zeros in
on the shortest paths

250
00:14:21,427 --> 00:14:25,164
from root objects
to unexpectedly live objects

251
00:14:25,164 --> 00:14:29,068
so that you can investigate
why they've leaked.

252
00:14:29,068 --> 00:14:31,738
Xcode 14 expands
these capabilities

253
00:14:31,738 --> 00:14:34,173
so that you can see
all reference paths

254
00:14:34,173 --> 00:14:37,510
in and out of an object.

255
00:14:37,510 --> 00:14:40,613
In addition to a more
thorough explanation of leaks,

256
00:14:40,613 --> 00:14:47,253
now you can gauge the total
weight of your objects.

257
00:14:47,253 --> 00:14:51,224
In Xcode 14, you can also
extend Xcode itself

258
00:14:51,224 --> 00:14:53,793
with Swift Package plugins.

259
00:14:53,793 --> 00:14:56,229
Now packages
can integrate plugins

260
00:14:56,229 --> 00:14:58,664
that process your code
in place,

261
00:14:58,664 --> 00:15:02,034
like linters and formatters,
and you can invoke them

262
00:15:02,034 --> 00:15:05,538
directly from
the project navigator.

263
00:15:05,538 --> 00:15:08,908
You can also integrate
build tools that generate code

264
00:15:08,908 --> 00:15:12,211
or process resources
while building.

265
00:15:12,211 --> 00:15:15,615
For example, you could translate
a high-level description

266
00:15:15,615 --> 00:15:18,017
of a remote procedure call
interface

267
00:15:18,017 --> 00:15:21,487
into low-level glue code
during the build.

268
00:15:21,487 --> 00:15:24,190
You could also compress
or optimize resources

269
00:15:24,190 --> 00:15:26,259
while building.

270
00:15:26,259 --> 00:15:28,961
For an in-depth look
at package plugins,

271
00:15:28,961 --> 00:15:31,831
check out
"Meet Swift Package plugins"

272
00:15:31,831 --> 00:15:36,002
and
"Create Swift Package plugins."

273
00:15:36,002 --> 00:15:38,437
You can also localize
package resources

274
00:15:38,437 --> 00:15:40,973
just like applications.

275
00:15:40,973 --> 00:15:44,177
Now you can set your package's
default localization,

276
00:15:44,177 --> 00:15:50,049
export the localization catalog,
translate it, and reimport it.

277
00:15:50,049 --> 00:15:52,418
To learn more
about localization,

278
00:15:52,418 --> 00:15:58,558
check out "Building global apps:
Localization by example."

279
00:15:58,558 --> 00:16:03,129
Next, let's move on
to the run destination chooser.

280
00:16:03,129 --> 00:16:06,966
Switching between devices
is something I do all the time,

281
00:16:06,966 --> 00:16:10,670
and now it's even easier
to get the device you need

282
00:16:10,670 --> 00:16:13,739
with the updated
run destination chooser.

283
00:16:13,739 --> 00:16:15,741
Let's take a look.

284
00:16:18,744 --> 00:16:20,880
When you open
the run destination chooser,

285
00:16:20,880 --> 00:16:23,549
it shows all the available
run destinations

286
00:16:23,549 --> 00:16:26,819
for the selected scheme.

287
00:16:26,819 --> 00:16:30,590
I often switch between
an iPhone and an iPad.

288
00:16:30,590 --> 00:16:34,627
The new run destination chooser
prioritizes recent choices,

289
00:16:34,627 --> 00:16:39,565
which makes this
really convenient.

290
00:16:39,565 --> 00:16:42,034
It's also easy
to select other devices

291
00:16:42,034 --> 00:16:44,537
that I haven't used lately.

292
00:16:44,537 --> 00:16:46,205
I can filter the list here,

293
00:16:46,205 --> 00:16:51,143
and type "max" to bring
all the Max devices together

294
00:16:51,143 --> 00:16:56,115
and easily pick the one I want.

295
00:16:56,115 --> 00:16:58,351
These same features
are all available

296
00:16:58,351 --> 00:17:00,920
in the Scheme chooser, too.

297
00:17:00,920 --> 00:17:04,957
Next, let's take a look
at the Organizer window.

298
00:17:04,957 --> 00:17:08,060
We've made some great
improvements to the Organizer

299
00:17:08,060 --> 00:17:12,131
to help you identify new issues
and improve your apps.

300
00:17:12,131 --> 00:17:14,767
There are two new reports
in the Organizer

301
00:17:14,767 --> 00:17:17,169
to help you understand
how your app is doing

302
00:17:17,169 --> 00:17:21,407
on your users' devices:
Feedback and Hangs.

303
00:17:21,407 --> 00:17:23,409
Let's dive in.

304
00:17:26,279 --> 00:17:29,382
The Feedback organizer shows
all of your TestFlight feedback

305
00:17:29,382 --> 00:17:31,884
directly in Xcode.

306
00:17:31,884 --> 00:17:35,354
Our TestFlight users sent
great comments and screenshots

307
00:17:35,354 --> 00:17:39,125
for our recent builds.

308
00:17:39,125 --> 00:17:41,794
The inspector shows
additional details --

309
00:17:41,794 --> 00:17:45,698
like tester information
and the device configuration --

310
00:17:45,698 --> 00:17:49,702
that can help to identify
the underlying problems.

311
00:17:49,702 --> 00:17:51,604
If I need a bit more context,

312
00:17:51,604 --> 00:17:57,143
I can email my tester
directly with this button.

313
00:17:57,143 --> 00:18:00,179
TestFlight feedback
is from beta users,

314
00:18:00,179 --> 00:18:03,349
but there are some issues
that can slip past testing

315
00:18:03,349 --> 00:18:05,952
and make it into
the App Store.

316
00:18:05,952 --> 00:18:11,257
One of the most common types
of bugs like this are hangs.

317
00:18:11,257 --> 00:18:14,260
Your app hangs
when it uses the main thread

318
00:18:14,260 --> 00:18:17,663
without taking a break
to process user input.

319
00:18:17,663 --> 00:18:20,333
Your code might be doing
important work,

320
00:18:20,333 --> 00:18:26,872
but the user experiences
an unresponsive app.

321
00:18:26,872 --> 00:18:28,874
This new Hangs report shows

322
00:18:28,874 --> 00:18:32,144
the highest-impact hangs
from App Store users

323
00:18:32,144 --> 00:18:34,680
so that you know
which code to restructure

324
00:18:34,680 --> 00:18:38,517
to have the biggest impact.

325
00:18:38,517 --> 00:18:41,487
On the left,
there's a list of hangs

326
00:18:41,487 --> 00:18:43,956
ordered by severity.

327
00:18:43,956 --> 00:18:46,492
Each one has
a weighted backtrace

328
00:18:46,492 --> 00:18:49,328
showing the problematic code.

329
00:18:49,328 --> 00:18:53,299
Our app supports
many devices and OS versions.

330
00:18:53,299 --> 00:18:57,837
Some hangs impact certain
configurations more than others.

331
00:18:57,837 --> 00:18:59,805
In the inspector,
it is helpful

332
00:18:59,805 --> 00:19:05,711
to find that this hang
happens mainly on iOS 15.3.

333
00:19:05,711 --> 00:19:07,313
When I'm ready to work on this,

334
00:19:07,313 --> 00:19:09,382
I can jump
straight into the code

335
00:19:09,382 --> 00:19:13,219
with this Open in Project
button.

336
00:19:13,219 --> 00:19:15,454
The new Hangs
and Feedback reports

337
00:19:15,454 --> 00:19:16,956
help you triage issues

338
00:19:16,956 --> 00:19:20,793
and get the right fixes
to users quickly.

339
00:19:20,793 --> 00:19:22,862
To learn more about
fixing hangs,

340
00:19:22,862 --> 00:19:28,367
check out "Track down hangs with
Xcode and on-device detection."

341
00:19:28,367 --> 00:19:33,039
Next, let's take a look
at icons.

342
00:19:33,039 --> 00:19:36,642
Our app icon
looks great at every size,

343
00:19:36,642 --> 00:19:39,011
because we've taken the time
to pixel hint

344
00:19:39,011 --> 00:19:43,149
and to choose the right number
of stripes for every resolution

345
00:19:43,149 --> 00:19:46,619
so that it always looks crisp.

346
00:19:46,619 --> 00:19:49,455
All of this pixel hinting
can be totally essential

347
00:19:49,455 --> 00:19:54,193
for some icons
and unnecessary for others.

348
00:19:54,193 --> 00:19:56,529
Now we have a new icon.

349
00:19:56,529 --> 00:19:59,932
Let's take a look at it.

350
00:19:59,932 --> 00:20:03,235
These simpler textures
don't need any hinting,

351
00:20:03,235 --> 00:20:07,540
and will look great
drawn at any size.

352
00:20:07,540 --> 00:20:14,280
With a double click,
I can select the new image.

353
00:20:14,280 --> 00:20:16,382
In Xcode 14,
you can choose

354
00:20:16,382 --> 00:20:19,418
the level of detail
that's right for you.

355
00:20:19,418 --> 00:20:22,955
For this icon,
our single image looks great.

356
00:20:22,955 --> 00:20:24,890
I'll use the new
Single Size feature

357
00:20:24,890 --> 00:20:27,693
to tell Xcode
to automatically create

358
00:20:27,693 --> 00:20:32,565
all of our different sizes
from this one.

359
00:20:32,565 --> 00:20:39,572
To do that, I can select
Single Size in the inspector.

360
00:20:39,572 --> 00:20:42,074
And that's it!

361
00:20:42,074 --> 00:20:46,112
That was a brief overview
of what's new in Xcode 14.

362
00:20:46,112 --> 00:20:49,582
It is faster and easier
to help you develop.

363
00:20:49,582 --> 00:20:51,183
Thank you for watching!

364
00:20:51,183 --> 00:20:53,819
Jonathan: Go download it
and get started today!

365
00:20:53,819 --> 00:20:58,257
♪

