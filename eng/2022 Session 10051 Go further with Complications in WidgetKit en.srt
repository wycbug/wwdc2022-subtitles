1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:11,211
August Joki: Hello, I'm August Joki,

3
00:00:11,245 --> 00:00:13,113
a software engineer on watchOS,

4
00:00:13,146 --> 00:00:18,519
and I'm here to show you how to go further
with WidgetKit complications.

5
00:00:18,552 --> 00:00:22,189
I hope you've seen the wonderful
Complications and Widgets: Reloaded talk

6
00:00:22,222 --> 00:00:26,260
first, covering the basics
of complications in WidgetKit.

7
00:00:26,293 --> 00:00:29,029
This talk expands
on the concepts covered there

8
00:00:29,062 --> 00:00:33,066
as they relate to complications
on the watch faces.

9
00:00:33,100 --> 00:00:38,238
And my WWDC 2020 talk:
Build complications in SwiftUI

10
00:00:38,272 --> 00:00:43,477
covers more specifics about tinting
and SwiftUI drawing in complications.

11
00:00:44,211 --> 00:00:46,713
In this talk,
I'll be discussing the WidgetKit features

12
00:00:46,747 --> 00:00:48,782
unique to watchOS,

13
00:00:48,815 --> 00:00:51,351
as well as how to migrate your,
and your users',

14
00:00:51,385 --> 00:00:54,421
existing ClockKit complications
to WidgetKit.

15
00:00:54,454 --> 00:00:57,424
I've taken inspiration from
the Coffee Tracker sample app

16
00:00:57,457 --> 00:00:59,793
to use as an example
throughout this talk.

17
00:00:59,826 --> 00:01:02,896
The app records the number of coffees,
teas, and sodas

18
00:01:02,930 --> 00:01:04,598
you drink throughout the day

19
00:01:04,631 --> 00:01:08,669
and tracks the amount of caffeine
in your body over time.

20
00:01:08,702 --> 00:01:12,072
Let's start with what's unique to watchOS.

21
00:01:12,105 --> 00:01:14,975
In iOS 16
we brought complication style widgets

22
00:01:15,008 --> 00:01:16,810
to the phone's lock screen

23
00:01:16,844 --> 00:01:21,682
and in watchOS 9 we brought WidgetKit
to the watch's complications.

24
00:01:21,715 --> 00:01:25,352
On the watch faces we have
a unique complication presentation

25
00:01:25,385 --> 00:01:27,087
for the corners of the watch screen.

26
00:01:27,120 --> 00:01:29,623
And it requires a unique WidgetKit family

27
00:01:29,656 --> 00:01:33,060
called accessoryCorner, to describe it.

28
00:01:33,093 --> 00:01:36,230
Part of that unique presentation
is auxiliary content

29
00:01:36,263 --> 00:01:38,298
specified by your SwiftUI view,

30
00:01:38,332 --> 00:01:40,400
but not rendered as part of your content.

31
00:01:40,434 --> 00:01:42,836
Instead, it is rendered by the watch face.

32
00:01:44,271 --> 00:01:47,407
The circular part of the corner
is standard SwiftUI rendering

33
00:01:47,441 --> 00:01:50,878
and the auxiliary content
is the curved part in the corners.

34
00:01:53,080 --> 00:01:55,682
Or in the dial on the Infograph face.

35
00:01:58,318 --> 00:02:02,856
The accessoryInline family
has a unique behavior on watch faces.

36
00:02:02,890 --> 00:02:07,361
It has multiple ways of being rendered
depending on the face.

37
00:02:07,394 --> 00:02:10,697
Sometimes flat,

38
00:02:10,731 --> 00:02:12,766
sometimes curved to match the dial.

39
00:02:14,234 --> 00:02:17,237
Let's talk about how to support
these unique features

40
00:02:17,271 --> 00:02:21,475
by looking at how the coffee tracker app
might be updated to use WidgetKit.

41
00:02:23,510 --> 00:02:26,580
In addition to the three new
complication-styled widget families

42
00:02:26,613 --> 00:02:30,017
on iOS 16:
AccessoryRectangular,

43
00:02:30,050 --> 00:02:34,021
accessoryCircular,
and accessoryInline,

44
00:02:34,054 --> 00:02:37,958
we have a fourth family on watchOS 9
called accessoryCorner.

45
00:02:39,426 --> 00:02:43,330
accessoryCorner can either be shown
as a large circular content,

46
00:02:43,363 --> 00:02:47,768
like the maps and heart rate
complications shown in the lower corners,

47
00:02:47,801 --> 00:02:51,939
or as smaller circular content
with a curved label or gauge

48
00:02:51,972 --> 00:02:56,009
like the coffee tracker and moonphase
complications shown in the upper corners.

49
00:02:57,911 --> 00:03:01,081
To control whether
the inner auxiliary content is shown,

50
00:03:01,114 --> 00:03:06,153
watchOS 9 has added a new view modifier
you can use, which I'll show you now.

51
00:03:08,055 --> 00:03:11,625
Let's look at building a corner
complication for my coffee tracker app.

52
00:03:13,060 --> 00:03:16,163
Starting with the larger
circular content style,

53
00:03:16,196 --> 00:03:19,933
I have a ZStack
with an SF Symbol and a background.

54
00:03:19,967 --> 00:03:22,936
The SwiftUI content is
automatically clipped to a circle

55
00:03:22,970 --> 00:03:26,807
to keep in line with the design
of the other corner complications.

56
00:03:28,408 --> 00:03:32,212
To add the inner curved content,
we use the new to watchOS 9

57
00:03:32,246 --> 00:03:34,581
widgetLabel view modifier.

58
00:03:34,615 --> 00:03:38,886
The watch face extracts the contents
of the modifier to draw the control

59
00:03:38,919 --> 00:03:42,890
appropriate for the family
and the style of the watch face.

60
00:03:42,923 --> 00:03:47,261
And the circular content
automatically scales down to make room.

61
00:03:47,294 --> 00:03:51,231
For accessoryCorner
you can specify a SwiftUI text, gauge,

62
00:03:51,265 --> 00:03:54,201
or progressView in your widget's label.

63
00:03:55,736 --> 00:03:59,373
AccessoryCorner isn't the only family
that supports widgetLabel.

64
00:03:59,406 --> 00:04:03,510
Let's look at how it is used
on the accessoryCircular family.

65
00:04:04,378 --> 00:04:08,482
On the Infograph watch face,
in addition to the corner complications,

66
00:04:08,515 --> 00:04:12,586
there are four circular complications
inside the dial.

67
00:04:12,619 --> 00:04:16,256
My coffee tracker circular complication,
in the middle top,

68
00:04:16,290 --> 00:04:19,560
looks very similar to the corner
complication we just saw,

69
00:04:19,593 --> 00:04:21,295
but with text in the dial.

70
00:04:21,328 --> 00:04:23,430
I'll show you how to add that text now.

71
00:04:24,665 --> 00:04:28,168
For my circular complication design,
I thought it more appropriate

72
00:04:28,202 --> 00:04:30,370
to move the gauge
that was in the widgetLabel

73
00:04:30,404 --> 00:04:34,107
in my corner complication,
to be front and center.

74
00:04:34,141 --> 00:04:37,311
To take advantage of the top
middle position on Infograph,

75
00:04:37,344 --> 00:04:41,481
I add a widgetLabel to the gauge
in order to display additional text

76
00:04:41,515 --> 00:04:46,453
in the longer bezel area that wouldn't
otherwise fit in the circular content.

77
00:04:46,486 --> 00:04:49,156
But now I have redundant information
between the main view

78
00:04:49,189 --> 00:04:51,892
and the text above it.

79
00:04:51,925 --> 00:04:54,695
I can clean that up
by switching the circular content

80
00:04:54,728 --> 00:04:59,733
to that good looking coffee cup SF Symbol
from my corner complication

81
00:04:59,766 --> 00:05:02,903
But when I switch to a face
showing my circular complication

82
00:05:02,936 --> 00:05:04,438
that does not have the bezel,

83
00:05:04,471 --> 00:05:06,540
then I've lost all of my caffeine info.

84
00:05:06,573 --> 00:05:10,110
Luckily, there's a piece of API I can add
to make my complication work

85
00:05:10,143 --> 00:05:11,311
in both cases.

86
00:05:13,247 --> 00:05:16,350
I update my complication
to add the Environment property

87
00:05:16,383 --> 00:05:19,052
called showsWidgetLabel to my view.

88
00:05:19,086 --> 00:05:22,422
This will be true whenever
the complication is in a position

89
00:05:22,456 --> 00:05:26,226
on the watch face that shows
the content in the widget's label.

90
00:05:28,095 --> 00:05:33,500
And then I can change the content
to depend on the value of showsWidgetLabel

91
00:05:33,534 --> 00:05:38,972
so I am able to have the appropriate level
of information in each complication spot.

92
00:05:39,006 --> 00:05:42,776
I just demonstrated two different ways
that the accessoryCircular family

93
00:05:42,809 --> 00:05:44,378
can show up on watch faces,

94
00:05:44,411 --> 00:05:47,014
and there is one more way
you need to be aware of.

95
00:05:47,047 --> 00:05:51,552
The Extra Large watch face has long been
a great way for people to see the time

96
00:05:51,585 --> 00:05:54,688
in an extra large format.

97
00:05:54,721 --> 00:05:58,091
And it supports a single,
large circular complication.

98
00:05:58,125 --> 00:06:01,295
The Extra Large face uses
the accessoryCircular family

99
00:06:01,328 --> 00:06:06,533
and automatically scales up the content
to match the style of the face.

100
00:06:06,567 --> 00:06:08,769
Please note:
as this face is designed

101
00:06:08,802 --> 00:06:10,737
to have a single, large complication,

102
00:06:10,771 --> 00:06:13,340
do not use the increased canvas size

103
00:06:13,373 --> 00:06:16,710
as an opportunity
to densely pack your complication.

104
00:06:16,743 --> 00:06:22,216
The content should be identical to
the normal circular family, only larger.

105
00:06:22,249 --> 00:06:25,285
As I mentioned earlier,
there are two more widget families used

106
00:06:25,319 --> 00:06:29,857
on watch faces:
accessoryRectangular and accessoryInline.

107
00:06:29,890 --> 00:06:33,560
There are no faces with rectangular
complications that show the widgetLabel.

108
00:06:33,594 --> 00:06:37,931
And the accessoryInline family acts,
already, as a widgetLabel.

109
00:06:37,965 --> 00:06:42,002
The watch face extracts Images
and Texts from your inline content

110
00:06:42,035 --> 00:06:45,506
and renders them itself
to match the look of the face.

111
00:06:45,539 --> 00:06:48,075
Next up is Migration.

112
00:06:48,108 --> 00:06:49,676
There are two parts to migration:

113
00:06:49,710 --> 00:06:53,247
rewriting your existing ClockKit
complication code in WidgetKit;

114
00:06:53,280 --> 00:06:56,617
and providing a mapping
to let the system know how to upgrade

115
00:06:56,650 --> 00:07:00,554
your complications people have set
on their watch faces.

116
00:07:00,587 --> 00:07:04,925
When you adopt WidgetKit the system
will stop asking your ClockKit data source

117
00:07:04,958 --> 00:07:10,264
for new content and show only your new
complications in the face editing picker.

118
00:07:11,732 --> 00:07:13,867
As well as bringing
WidgetKit to the watch,

119
00:07:13,901 --> 00:07:18,572
watchOS 9 has updated every face
to support rich complications,

120
00:07:18,605 --> 00:07:21,909
which allowed us to dramatically reduce
the number of complication families

121
00:07:21,942 --> 00:07:25,445
from 12 to only 4.

122
00:07:25,479 --> 00:07:28,916
Rectangular and Corner
map directly across

123
00:07:28,949 --> 00:07:32,486
to accessoryRectangular
and accessoryCorner.

124
00:07:32,519 --> 00:07:35,622
All three graphic Circular
styled ClockKit families

125
00:07:35,656 --> 00:07:39,860
are now a single
accessoryCircular WidgetKit family.

126
00:07:39,893 --> 00:07:44,398
And the accessoryInline family
is used where the old utilitarianSmallFlat

127
00:07:44,431 --> 00:07:47,334
or utilitarianLarge used to be.

128
00:07:48,836 --> 00:07:52,139
And many places that used to be
utilitarianSmall

129
00:07:52,172 --> 00:07:56,443
have been updated
to use the accessoryCorner family.

130
00:07:57,611 --> 00:08:00,914
With WidgetKit, SwiftUI views
and their state driven layout

131
00:08:00,948 --> 00:08:03,317
have replaced ClockKit's templates.

132
00:08:03,350 --> 00:08:06,019
WidgetKit still has
familiar timelines and entries.

133
00:08:06,053 --> 00:08:09,590
In fact, they were originally inspired
by ClockKit itself,

134
00:08:09,623 --> 00:08:12,826
which means that your complication
data source will nicely migrate

135
00:08:12,860 --> 00:08:16,730
to one of either a static or intent based
WidgetKit configuration.

136
00:08:17,998 --> 00:08:20,968
Please see the original WidgetKit talk
for more details

137
00:08:21,001 --> 00:08:23,837
about the types of configurations
WidgetKit supports

138
00:08:23,871 --> 00:08:25,906
as well as general family support.

139
00:08:25,939 --> 00:08:30,143
We've added one last API to ClockKit
to allow a person's complications

140
00:08:30,177 --> 00:08:33,313
to be migrated by
the system automatically.

141
00:08:33,347 --> 00:08:36,450
This allows for your existing
complications that are already

142
00:08:36,483 --> 00:08:40,754
on watch faces to automatically be
upgraded to your new WidgetKit based

143
00:08:40,787 --> 00:08:44,625
complications
without any user interaction.

144
00:08:44,658 --> 00:08:46,793
When your app gets updated on a watch,

145
00:08:46,827 --> 00:08:49,496
the Watch Faces will check
for the presence of widgets

146
00:08:49,530 --> 00:08:51,365
in your app's bundle.

147
00:08:51,398 --> 00:08:55,936
If it finds any, it will then launch
your ClockKit complication data source

148
00:08:55,969 --> 00:09:00,140
to generate the migrations
for the existing complications.

149
00:09:00,174 --> 00:09:03,410
From this point forward,
your CLKComplicationDataSource

150
00:09:03,443 --> 00:09:07,881
will only be run to ask for migrations
when a person receives a shared face

151
00:09:07,915 --> 00:09:10,551
with your ClockKit complications on it.

152
00:09:10,584 --> 00:09:14,855
The system will ask for your migrations
every time a new face is shared,

153
00:09:14,888 --> 00:09:18,592
so for a consistent experience you should
keep your migrations consistent.

154
00:09:18,625 --> 00:09:22,062
Once you've finished creating
your beautiful WidgetKit complications,

155
00:09:22,095 --> 00:09:25,065
you can add the new property,
widgetMigrator,

156
00:09:25,098 --> 00:09:29,136
to provide the object that conforms
to the new Migrator protocol.

157
00:09:29,169 --> 00:09:33,473
Be that your complication data source
itself or some other type you provide.

158
00:09:35,008 --> 00:09:39,213
The CLKComplication WidgetMigrator
protocol has a single function

159
00:09:39,246 --> 00:09:43,150
to provide to the watch faces
widget migration configurations

160
00:09:43,183 --> 00:09:47,321
from existing CLKComplicationDescriptors.

161
00:09:47,354 --> 00:09:50,123
The most straightforward way
to adopt the new API

162
00:09:50,157 --> 00:09:53,660
is to have your data source conform
to the new Migrator protocol.

163
00:09:55,028 --> 00:09:58,632
If your WidgetKit complication
uses the static configuration,

164
00:09:58,665 --> 00:10:02,569
you provide a static migration
configuration.

165
00:10:02,603 --> 00:10:04,838
And there's an equivalent
migration configuration

166
00:10:04,872 --> 00:10:08,275
if you use intents
in your widget complication.

167
00:10:08,308 --> 00:10:12,045
Note that if you provide intent based
migration configurations,

168
00:10:12,079 --> 00:10:15,716
you will need to also include your intent
definitions in your watch app

169
00:10:15,749 --> 00:10:17,651
as well as your widget extensions,

170
00:10:17,684 --> 00:10:20,554
so you can create your intent objects
in both places.

171
00:10:21,488 --> 00:10:25,292
WidgetKit enables new and creative ways
to make complications for the watch,

172
00:10:25,325 --> 00:10:28,161
while dramatically simplifying
the experience.

173
00:10:28,195 --> 00:10:30,430
Thanks for watching.

