1
00:00:01,268 --> 00:00:07,274
[音乐]

2
00:00:09,977 --> 00:00:12,079
Anne: 大家好 欢迎你们

3
00:00:12,112 --> 00:00:13,247
我是 Anne Hitchcock

4
00:00:13,280 --> 00:00:15,616
是 watchOS 软件工程师

5
00:00:15,649 --> 00:00:17,017
今天 我想向您展示

6
00:00:17,050 --> 00:00:18,585
如何在 watchOS 上创建

7
00:00:18,619 --> 00:00:20,521
效率 App

8
00:00:20,554 --> 00:00:22,422
自从 watchOS 6 中
引入了 SwiftUI

9
00:00:22,456 --> 00:00:25,292
和独立的 Watch App 以来

10
00:00:25,325 --> 00:00:27,961
您已经能够在 Watch App 中
做得比以往更多

11
00:00:28,529 --> 00:00:33,166
每年 watchOS 上的 SwiftUI
都会有更多功能

12
00:00:33,200 --> 00:00:34,501
同时

13
00:00:34,535 --> 00:00:37,771
watchOS 也有了一些新功能
比如键盘

14
00:00:37,804 --> 00:00:41,208
让您为 Watch 开发全新的 App

15
00:00:41,875 --> 00:00:45,045
我想向您展示
如何将其中的一些功能组合起来

16
00:00:45,078 --> 00:00:48,182
构建一个 App
来跟踪代办清单

17
00:00:49,016 --> 00:00:52,319
我们将创建一个新的 Watch App

18
00:00:52,352 --> 00:00:55,889
添加要显示的简单项目列表

19
00:00:55,923 --> 00:00:58,225
让用户将项目添加至列表

20
00:00:58,258 --> 00:00:59,927
然后进行编辑

21
00:01:00,894 --> 00:01:02,596
当添加这些功能时

22
00:01:02,629 --> 00:01:06,700
我们将讨论 Watch App 中
常见的导航策略

23
00:01:06,733 --> 00:01:08,735
以及如何正确选择

24
00:01:10,103 --> 00:01:13,106
我们将与朋友分享条目 以分担负载

25
00:01:14,241 --> 00:01:16,243
然后会在我们的 App 中添加一个图表

26
00:01:16,276 --> 00:01:20,080
以帮助我们发现效率趋势
并保持动力

27
00:01:21,281 --> 00:01:23,150
我们将使用数码表冠来制作

28
00:01:23,183 --> 00:01:24,751
可滚动图表

29
00:01:24,785 --> 00:01:27,054
以显示更大的数据范围

30
00:01:28,188 --> 00:01:31,158
我们从创建一个新的 App 开始

31
00:01:32,492 --> 00:01:34,361
在 Xcode 中创建一个新项目

32
00:01:35,262 --> 00:01:39,032
在 watchOS 选项卡中
选择 App 并单击下一步

33
00:01:40,400 --> 00:01:44,605
选择 Product Name 后 您有几个选择

34
00:01:44,638 --> 00:01:46,073
最重要的是

35
00:01:46,106 --> 00:01:48,775
是创建 Watch 专用 App

36
00:01:48,809 --> 00:01:52,246
还是带有配套 iOS App 的 Watch App

37
00:01:52,846 --> 00:01:55,849
我们来谈谈一个优秀的
Watch App 的要素

38
00:01:55,883 --> 00:01:58,919
以及何时需要配套的 iOS App

39
00:01:59,953 --> 00:02:03,156
出色的 Watch App 可实现快速交互

40
00:02:03,190 --> 00:02:04,992
比如体能训练中的界面

41
00:02:05,025 --> 00:02:08,595
让您快速开始最喜欢的体能训练

42
00:02:08,629 --> 00:02:11,532
没人愿意定定站着 举起他们的手臂

43
00:02:11,565 --> 00:02:13,267
然后才能点进去
尝试找到一些东西

44
00:02:14,101 --> 00:02:18,038
出色的 Watch App 应该很容易
获得重要的信息

45
00:02:18,071 --> 00:02:19,206
和功能

46
00:02:20,707 --> 00:02:24,011
出色的 Watch App 专注于其核心的目的

47
00:02:24,912 --> 00:02:29,283
例如 天气 App 显示今天的天气预报

48
00:02:29,316 --> 00:02:33,353
相关的当前情况
以及简单的 10 天天气预测

49
00:02:34,488 --> 00:02:36,690
专注于 App 中的关键内容

50
00:02:36,723 --> 00:02:39,159
这样人们就可以轻松找到他们需要的

51
00:02:39,193 --> 00:02:40,694
信息和行动

52
00:02:42,229 --> 00:02:44,698
一款优秀的 Watch App

53
00:02:44,731 --> 00:02:47,034
会设计成可以独立于
配套的 iPhone 使用

54
00:02:47,901 --> 00:02:52,172
例如 联系人 App
可以与手机同步

55
00:02:52,206 --> 00:02:54,608
但不需要您的 iPhone 在附近

56
00:02:54,641 --> 00:02:56,376
就可以访问您的 Apple Watch 上的

57
00:02:56,410 --> 00:02:57,878
联系人信息

58
00:02:59,479 --> 00:03:02,049
您可能还想为您的 Watch App

59
00:03:02,082 --> 00:03:05,118
安装配套的 iOS App 的原因有很多

60
00:03:05,152 --> 00:03:10,090
包括提供 Apple Watch
捕获数据的历史记录

61
00:03:10,123 --> 00:03:13,794
或者像健身 App 那样
提供详细的趋势分析

62
00:03:15,729 --> 00:03:18,432
由于我们的 App 具有集中的功能集

63
00:03:18,465 --> 00:03:20,901
快速的交互和有限的数据

64
00:03:20,934 --> 00:03:23,003
我们将创建一个 Watch 专用 App

65
00:03:24,705 --> 00:03:27,508
在这一点上 我想花几分钟

66
00:03:27,541 --> 00:03:29,810
谈谈创建的目标

67
00:03:31,612 --> 00:03:33,714
如果您过去曾开发过 Watch App

68
00:03:33,747 --> 00:03:36,550
那么您的 Watch 项目会有两个目标

69
00:03:36,583 --> 00:03:39,086
WatchKit App 目标带有情节提要

70
00:03:39,119 --> 00:03:42,990
材料 也许还有一些
与本地化相关的文件

71
00:03:43,023 --> 00:03:47,160
以及包含所有 App 代码的
WatchKit 扩展目标

72
00:03:47,194 --> 00:03:49,897
这些双重目标是

73
00:03:49,930 --> 00:03:52,199
早期 watchOS 遗留下来的

74
00:03:52,232 --> 00:03:56,737
并且确实没有充分的理由
再使用多个 Watch 目标了

75
00:03:57,671 --> 00:04:03,510
从 Xcode 14 开始 新的
Watch App 有单一的 Watch App 目标

76
00:04:03,544 --> 00:04:06,547
所有与 Watch App 相关的

77
00:04:06,580 --> 00:04:08,916
代码 材料 本地化

78
00:04:08,949 --> 00:04:10,551
Siri 意图以及 Widget 扩展

79
00:04:10,584 --> 00:04:12,085
都包含在这个目标内

80
00:04:13,353 --> 00:04:16,623
好消息是 单一目标的 Watch App

81
00:04:16,657 --> 00:04:19,526
可支持的最旧版本是 watchOS 7

82
00:04:19,560 --> 00:04:24,097
您可以简化项目结构
并减少混乱和重复

83
00:04:24,131 --> 00:04:26,800
同时也支持那些没有使用

84
00:04:26,834 --> 00:04:28,168
最新的 watchOS 的用户

85
00:04:29,636 --> 00:04:31,338
如果您有现有的 App

86
00:04:31,371 --> 00:04:33,307
带有 WatchKit 扩展目标

87
00:04:33,340 --> 00:04:34,942
它将继续工作

88
00:04:34,975 --> 00:04:38,245
您可以继续使用 Xcode
更新您的 App

89
00:04:38,278 --> 00:04:40,848
并通过 App Store 发布您的 App

90
00:04:42,282 --> 00:04:44,284
如果您已经有一个
使用 SwiftUI lifecycle 的

91
00:04:44,318 --> 00:04:46,286
Watch App

92
00:04:46,320 --> 00:04:52,626
那么使用 Xcode 14 中的迁移工具
就可以很容易地过渡到单个目标

93
00:04:52,659 --> 00:04:55,562
选择您的目标并从编辑器菜单中

94
00:04:55,596 --> 00:04:57,598
选择 Validate Setting

95
00:04:57,631 --> 00:04:59,967
如果您的部署目标
是 watchOS 7 或更高版本

96
00:05:00,000 --> 00:05:02,936
将提供目标折叠选项

97
00:05:04,705 --> 00:05:06,673
如果您尚未实现飞跃

98
00:05:06,707 --> 00:05:08,876
现在是时候开始

99
00:05:08,909 --> 00:05:12,179
将您的 App 转换为使用

100
00:05:12,212 --> 00:05:15,749
以享受单目标 Watch App 的简单性

101
00:05:15,782 --> 00:05:18,585
以及 SwiftUI 的所有功能

102
00:05:20,087 --> 00:05:24,391
目标不是我们在 Xcode 14 中
进行的唯一简化功能

103
00:05:24,424 --> 00:05:26,426
我们同时也让您能更轻松地

104
00:05:26,460 --> 00:05:28,295
为 App 添加图标

105
00:05:28,328 --> 00:05:33,000
现在 您仅需要一张
1024x1024 像素的图像就行了

106
00:05:34,067 --> 00:05:35,903
App 图标图像将按比例缩放

107
00:05:35,936 --> 00:05:38,172
以便在所有 Watch 设备上显示

108
00:05:39,473 --> 00:05:41,074
请务必在设备的主屏幕

109
00:05:41,108 --> 00:05:43,310
通知以及 iPhone 上

110
00:05:43,343 --> 00:05:45,479
Watch App 的

111
00:05:45,512 --> 00:05:47,381
设置中

112
00:05:47,414 --> 00:05:49,216
使用您的 App 图标进行测试

113
00:05:50,584 --> 00:05:52,286
如有必要 您可以为

114
00:05:52,319 --> 00:05:55,756
特定的较小尺寸添加自定义图像

115
00:05:55,789 --> 00:05:56,823
例如

116
00:05:56,857 --> 00:05:59,359
如果您的 App 图标在图像中

117
00:05:59,393 --> 00:06:01,795
有一些细节在较小的尺寸中丢失了

118
00:06:01,828 --> 00:06:04,932
您可以为这些尺寸
添加特定的图标图像

119
00:06:04,965 --> 00:06:07,234
并删除图像细节

120
00:06:07,267 --> 00:06:09,803
现在让我们通过添加任务项列表

121
00:06:09,837 --> 00:06:12,072
来为 App 添加一些功能

122
00:06:12,806 --> 00:06:14,775
我们将首先为任务列表

123
00:06:14,808 --> 00:06:16,944
创建一个数据模型

124
00:06:16,977 --> 00:06:20,647
ListItem 结构
将是可识别和可散列的

125
00:06:20,681 --> 00:06:22,816
我们将给它一个要显示的描述

126
00:06:24,284 --> 00:06:27,387
然后创建一个简单的模型来存储数据

127
00:06:27,421 --> 00:06:29,489
并发布列表项数组

128
00:06:30,624 --> 00:06:33,927
最后 添加模型作为环境对象

129
00:06:33,961 --> 00:06:35,929
所以我们的视图
可以访问我们的模型

130
00:06:37,397 --> 00:06:41,502
现在使用数据模型
在 SwiftUI 中创建一个 List

131
00:06:41,535 --> 00:06:44,037
由于目前还没有任务

132
00:06:44,071 --> 00:06:46,607
当我们预览这个时
得到的是一个空列表

133
00:06:47,641 --> 00:06:50,010
我们得做点什么了

134
00:06:50,043 --> 00:06:53,447
我们应该给人们一种将任务
添加到他们列表中的方法

135
00:06:54,448 --> 00:06:57,017
我们想添加一个按钮
用户可以点击该按钮

136
00:06:57,050 --> 00:06:59,052
将新项目添加到列表中

137
00:06:59,887 --> 00:07:03,023
文本字段链接是
watchOS 9 中的新功能

138
00:07:03,056 --> 00:07:06,159
让您从按钮调用文本输入选项

139
00:07:06,193 --> 00:07:08,028
并提供多种样式选择

140
00:07:08,061 --> 00:07:10,697
使其在 App 中感觉自然且友好

141
00:07:12,266 --> 00:07:16,436
您可以用简单的字符串
创建一个基本的文本字段链接

142
00:07:16,470 --> 00:07:19,039
或者使用 Label 来创建一个
更自定义的按钮

143
00:07:20,374 --> 00:07:23,477
使用视图修改器修改按钮外观

144
00:07:23,510 --> 00:07:25,746
包括 foregroundColor

145
00:07:25,779 --> 00:07:27,814
foregroundStyle

146
00:07:27,848 --> 00:07:29,249
和 buttonStyle

147
00:07:30,784 --> 00:07:33,086
我们将创建一个 AddItemLink 视图

148
00:07:33,120 --> 00:07:35,689
以封装我们在 App 中使用的

149
00:07:35,722 --> 00:07:38,525
文本字段链接的样式和行为

150
00:07:39,593 --> 00:07:42,462
我们将为按钮使用自定义标签

151
00:07:42,496 --> 00:07:44,231
当有人输入文字时

152
00:07:44,264 --> 00:07:46,366
我们会将新项目添加到列表中

153
00:07:47,734 --> 00:07:49,870
既然我们已经决定
使用文本字段链接

154
00:07:49,903 --> 00:07:52,806
添加按钮来添加新的列表项

155
00:07:52,840 --> 00:07:55,876
我们需要考虑
把文本字段链接放在哪里

156
00:07:57,644 --> 00:08:00,280
在 Watch App 中向列表添加操作时

157
00:08:00,314 --> 00:08:02,783
有几个选择

158
00:08:02,816 --> 00:08:06,320
对于短列表中的主要操作

159
00:08:06,353 --> 00:08:11,859
在列表末尾使用按钮
导航链接或文本字段链接

160
00:08:11,892 --> 00:08:15,262
将动作添加为列表末尾的项目

161
00:08:15,295 --> 00:08:17,531
是短列表

162
00:08:17,564 --> 00:08:18,966
如世界时钟中的

163
00:08:18,999 --> 00:08:21,068
城市列表中的主要动作的不错选择

164
00:08:21,802 --> 00:08:23,036
然而

165
00:08:23,070 --> 00:08:25,439
如果您预计会有很长的项目清单

166
00:08:25,472 --> 00:08:27,975
用户每次想要执行操作时

167
00:08:28,008 --> 00:08:31,578
都必须继续滚动到列表的末尾

168
00:08:31,612 --> 00:08:33,046
对于具有较长列表的常用操作

169
00:08:33,080 --> 00:08:36,083
请使用工具栏项

170
00:08:37,451 --> 00:08:41,755
要添加工具栏项
请将工具栏修改器添加到列表中

171
00:08:41,788 --> 00:08:44,791
并将操作视图用作内容

172
00:08:44,825 --> 00:08:47,594
这将向列表中添加一个工具栏项

173
00:08:47,628 --> 00:08:50,097
并自动放置工具栏项

174
00:08:50,130 --> 00:08:52,466
虽然我想一直保持很短的

175
00:08:52,499 --> 00:08:53,800
待办清单

176
00:08:53,834 --> 00:08:55,836
但我很确定并不会

177
00:08:55,869 --> 00:08:58,705
所以我要把文本字段链接
放在工具栏项中

178
00:08:58,739 --> 00:09:00,707
使其易于访问

179
00:09:02,242 --> 00:09:05,479
让我们花点时间回顾一下
我们已经完成了什么

180
00:09:05,512 --> 00:09:08,315
我们为列表项创建了一个模型

181
00:09:08,348 --> 00:09:11,485
将其存储为环境对象

182
00:09:11,518 --> 00:09:13,554
创建了一个显示项目的列表

183
00:09:13,587 --> 00:09:16,723
并添加了一个文本字段链接
以添加新项目

184
00:09:23,330 --> 00:09:25,432
创建只有描述的项目

185
00:09:25,465 --> 00:09:28,535
很简单 但不是很有用

186
00:09:28,569 --> 00:09:31,638
我们需要将项目标记为完成

187
00:09:31,672 --> 00:09:34,041
我们可能想要一种为任务

188
00:09:34,074 --> 00:09:36,143
设置优先级的方法或添加

189
00:09:36,176 --> 00:09:37,778
对工作量的估计

190
00:09:37,811 --> 00:09:40,781
为此 我们将添加一个详细视图

191
00:09:40,814 --> 00:09:42,783
这样做之前 我想回顾一下

192
00:09:42,816 --> 00:09:45,052
Watch 上的 SwiftUI 中的

193
00:09:45,085 --> 00:09:47,387
App 导航结构的选项

194
00:09:48,222 --> 00:09:50,657
分层导航用于具有

195
00:09:50,691 --> 00:09:53,594
列表-详细关系的视图

196
00:09:53,627 --> 00:09:57,397
从 watchOS 9 开始
使用 SwiftUI NavigationStack

197
00:09:57,431 --> 00:10:00,834
来创建使用这种类型的
导航结构的接口

198
00:10:02,135 --> 00:10:04,571
基于页面的导航用于

199
00:10:04,605 --> 00:10:06,173
平面结构的视图

200
00:10:06,206 --> 00:10:08,242
所有视图都是对等的

201
00:10:09,510 --> 00:10:12,212
基于页面的导航的一个很好的例子

202
00:10:12,246 --> 00:10:15,015
是健身 App 的锻炼中视图

203
00:10:15,048 --> 00:10:16,650
在锻炼过程中

204
00:10:16,683 --> 00:10:20,587
人们可以轻松地在锻炼控制 指标

205
00:10:20,621 --> 00:10:21,788
和回放控制之间滑动

206
00:10:23,223 --> 00:10:25,459
全屏 App 只有一个使用

207
00:10:25,492 --> 00:10:27,861
整个显示的单一视图

208
00:10:27,895 --> 00:10:30,464
这通常用于游戏等 App

209
00:10:30,497 --> 00:10:32,966
和其他有一个主视图的 App

210
00:10:34,234 --> 00:10:38,205
对于全屏视图
请使用 ignoresSafeArea 修改器

211
00:10:38,238 --> 00:10:41,642
将您的内容扩展到显示器的边缘

212
00:10:41,675 --> 00:10:45,245
并且工具栏修改器的
可见性值为 hidden

213
00:10:45,279 --> 00:10:46,914
以隐藏导航栏

214
00:10:48,415 --> 00:10:50,450
模态表是在当前视图上

215
00:10:50,484 --> 00:10:52,653
滑动的全屏视图

216
00:10:52,686 --> 00:10:54,755
它应作为

217
00:10:54,788 --> 00:10:57,491
当前工作流的一部分完成的重要任务

218
00:10:58,892 --> 00:11:00,727
区分何时使用

219
00:11:00,761 --> 00:11:03,197
分层流与何时使用模态图

220
00:11:03,230 --> 00:11:05,532
非常重要

221
00:11:07,000 --> 00:11:11,839
邮件 App 使用分层样式显示消息列表

222
00:11:11,872 --> 00:11:15,976
并显示每条消息或线程
作为详细视图

223
00:11:16,009 --> 00:11:18,979
您可以从消息的详细信息中
执行一些操作

224
00:11:19,012 --> 00:11:21,014
但在返回列表之前

225
00:11:21,048 --> 00:11:22,816
不必做任何事

226
00:11:23,917 --> 00:11:27,387
如果您返回列表
然后点击“新信息”

227
00:11:27,421 --> 00:11:31,225
邮件使用模态表显示
新信息视图

228
00:11:32,125 --> 00:11:34,294
模态表是正确的选择

229
00:11:34,328 --> 00:11:37,598
因为您需要填写新消息的详细信息
或在继续之前

230
00:11:37,631 --> 00:11:39,233
选择取消

231
00:11:40,267 --> 00:11:41,935
要显示模态表

232
00:11:41,969 --> 00:11:46,173
创建一个属性来控制工作表呈现状态

233
00:11:46,206 --> 00:11:50,344
根据用户界面中的操作设置属性

234
00:11:50,377 --> 00:11:52,145
并在表示状态属性为 true 时

235
00:11:52,179 --> 00:11:54,681
使用工作表修改器

236
00:11:54,715 --> 00:11:57,317
显示自定义模式工作表内容

237
00:11:58,986 --> 00:12:01,889
添加自定义工具栏项目到模态表

238
00:12:01,922 --> 00:12:04,558
为您的项目添加一个工具栏

239
00:12:04,591 --> 00:12:07,661
请注意 您的工具栏项目应使用
模态展示位置

240
00:12:07,694 --> 00:12:09,530
像 confirmationAction

241
00:12:09,563 --> 00:12:11,031
cancellationAction

242
00:12:11,064 --> 00:12:12,432
和 destructiveAction

243
00:12:14,201 --> 00:12:17,070
我们将使用模式表
作为详细信息视图

244
00:12:17,104 --> 00:12:18,972
因为我们正在编辑一个项目

245
00:12:19,006 --> 00:12:21,241
而且想专注于这个单一的任务

246
00:12:21,275 --> 00:12:23,544
直到我们完成并点击完成

247
00:12:24,745 --> 00:12:27,514
要了解有关 SwiftUI 中导航的更多信息

248
00:12:27,548 --> 00:12:30,083
包括关于 NavigationStack 的更多细节

249
00:12:30,117 --> 00:12:31,885
和程序化导航

250
00:12:31,919 --> 00:12:35,189
请观看“SwiftUI 导航开发指南”视频

251
00:12:36,757 --> 00:12:40,060
现在我们已经决定了
如何导航到详细视图

252
00:12:40,093 --> 00:12:42,396
我们将更新列表项结构

253
00:12:42,429 --> 00:12:45,132
我们有新的属性来存储估计工作

254
00:12:45,165 --> 00:12:47,568
创建日期和完成日期

255
00:12:49,102 --> 00:12:52,206
让我们为用户提供一种
查看和编辑这些细节的方法

256
00:12:53,240 --> 00:12:57,444
我们将创建一个详细视图
其中包含用于编辑说明的文本字段

257
00:12:57,477 --> 00:13:01,648
和一个用于将任务标记为
未完成或不完成的切换开关

258
00:13:01,682 --> 00:13:05,285
但是我们应该怎么做估计的工作呢

259
00:13:05,319 --> 00:13:07,721
我们知道值都将是数字

260
00:13:07,754 --> 00:13:10,657
可以指定一个有效值的范围

261
00:13:11,758 --> 00:13:14,228
从 watchOS 9 开始

262
00:13:14,261 --> 00:13:16,697
我们可以使用 Stepper

263
00:13:16,730 --> 00:13:18,699
当您想要提供精细控制

264
00:13:18,732 --> 00:13:22,469
来编辑顺序值时
Stepper 是个不错的选择

265
00:13:23,470 --> 00:13:27,774
您可以指定一个值的范围
并可选地提供步骤

266
00:13:29,543 --> 00:13:33,113
您还可以使用 Stepper 来编辑
逻辑顺序

267
00:13:33,146 --> 00:13:35,749
但不一定是数值

268
00:13:36,683 --> 00:13:39,286
例如 也许我们要注意

269
00:13:39,319 --> 00:13:41,588
项目的估计压力水平

270
00:13:42,623 --> 00:13:44,791
我们可以创建一个表情符号数组

271
00:13:44,825 --> 00:13:47,294
来表示压力水平

272
00:13:47,327 --> 00:13:49,730
然后创建一个 Stepper

273
00:13:49,763 --> 00:13:54,601
将值绑定到选定
在压力水平表情符号数组的索引中

274
00:13:54,635 --> 00:13:58,672
并将范围设置为表情符号索引的范围

275
00:13:58,705 --> 00:14:00,073
逐步执行这些值

276
00:14:00,107 --> 00:14:01,675
会增加或减少

277
00:14:01,708 --> 00:14:04,178
我们为项目估计的压力水平

278
00:14:05,312 --> 00:14:08,582
准备 WWDC 讲座很有趣

279
00:14:08,615 --> 00:14:12,019
但与大家分享精彩的
Watch App 开发更是一个欢庆的派对

280
00:14:12,853 --> 00:14:15,589
当我的清单上有压力项目时

281
00:14:15,622 --> 00:14:19,459
或者只是我清单上的很多项目
我感到压力

282
00:14:19,493 --> 00:14:21,962
我想与朋友分享我列表中的一个项目

283
00:14:21,995 --> 00:14:23,230
来寻求帮助

284
00:14:24,498 --> 00:14:27,301
我们将把一个按钮
添加到我们的详细视图

285
00:14:27,334 --> 00:14:29,036
允许用户使用共享表

286
00:14:29,069 --> 00:14:31,171
来共享项目

287
00:14:31,205 --> 00:14:33,674
我希望能够在我的详细视图中
点击一个按钮

288
00:14:33,707 --> 00:14:35,375
来分享项目

289
00:14:35,409 --> 00:14:38,178
从朋友列表中进行挑选
以寻求帮助

290
00:14:38,212 --> 00:14:40,080
编辑我的消息 然后发送

291
00:14:41,348 --> 00:14:43,817
为此 我们将使用一个新工具

292
00:14:43,851 --> 00:14:47,588
watchOS 9 上的 SwiftUI 可供我们使用

293
00:14:47,621 --> 00:14:49,723
分享链接

294
00:14:49,756 --> 00:14:53,827
我们可以通过创建包含项目
共享链接来共享列表项

295
00:14:53,861 --> 00:14:55,495
我们可以有选择地

296
00:14:55,529 --> 00:14:57,130
自定义带有主题和消息的

297
00:14:57,164 --> 00:15:00,033
消息初始文本

298
00:15:00,067 --> 00:15:02,936
当有人分享该项目时

299
00:15:02,970 --> 00:15:05,539
提供预览显示在共享表

300
00:15:05,572 --> 00:15:08,876
您可以使用 ShareLink
从 SwiftUI App 进行分享

301
00:15:08,909 --> 00:15:12,513
在 iOS macOS 和 watchOS 中

302
00:15:13,847 --> 00:15:15,983
请务必查看“Transferable 简介”视频

303
00:15:16,016 --> 00:15:18,051
了解更多 ShareLink 的详细信息

304
00:15:18,085 --> 00:15:19,786
和选项

305
00:15:19,820 --> 00:15:22,890
现在我可以跟踪完成的项目

306
00:15:22,923 --> 00:15:25,492
并寻求帮助以完成工作

307
00:15:25,526 --> 00:15:27,294
我还想添加图表

308
00:15:27,327 --> 00:15:29,096
看看我的效率

309
00:15:29,863 --> 00:15:32,199
我选择使用条形图

310
00:15:32,232 --> 00:15:34,468
因为我只有一个数据序列

311
00:15:34,501 --> 00:15:36,136
和不同的数据值

312
00:15:37,037 --> 00:15:38,705
只要我限制一次显示的数据量

313
00:15:38,739 --> 00:15:40,774
条形图将清楚地显示

314
00:15:40,807 --> 00:15:45,779
Watch 显示屏上的这些数据

315
00:15:45,812 --> 00:15:48,015
我们将首先添加 图表视图

316
00:15:48,048 --> 00:15:50,717
到我们 App 的导航结构

317
00:15:50,751 --> 00:15:53,654
我选择了基于页面的导航策略

318
00:15:53,687 --> 00:15:55,989
因为在项目列表和图表之间

319
00:15:56,023 --> 00:15:57,991
没有列表细节关系

320
00:15:58,759 --> 00:16:00,427
有人可以在列表

321
00:16:00,460 --> 00:16:02,029
和图表之间随时滑动

322
00:16:03,664 --> 00:16:05,432
为我们的列表和图表

323
00:16:05,465 --> 00:16:07,234
添加基于页面的导航

324
00:16:07,267 --> 00:16:11,405
让我们从创建一个 ItemList 结构开始
封装列表视图

325
00:16:12,940 --> 00:16:15,642
我把内容视图里的整个内容

326
00:16:15,676 --> 00:16:18,045
移动到这个新项目列表

327
00:16:18,078 --> 00:16:20,948
在这里封装项目列表 会让我们

328
00:16:20,981 --> 00:16:23,584
在内容视图中拥有简单易读的

329
00:16:23,617 --> 00:16:24,852
标签视图代码

330
00:16:26,553 --> 00:16:29,623
我们还需要为我们的图表视图
创建一个结构

331
00:16:31,225 --> 00:16:33,527
我会暂时放一个占位符

332
00:16:33,560 --> 00:16:36,096
所以在我们构建图表之前

333
00:16:36,129 --> 00:16:37,898
我们可以专注在导航结构上

334
00:16:39,466 --> 00:16:42,069
现在我们将用一个带有
两个标签的页面样式标签视图

335
00:16:42,102 --> 00:16:44,972
来设置我们的内容视图

336
00:16:45,005 --> 00:16:47,274
项目列表和图表

337
00:16:49,309 --> 00:16:51,845
既然我们已经设置了导航结构

338
00:16:51,879 --> 00:16:53,914
让我们谈谈如何构建这个图表

339
00:16:54,615 --> 00:16:57,117
我知道可以使用 SwiftUI Canvas

340
00:16:57,150 --> 00:16:58,952
并绘制图表

341
00:16:58,986 --> 00:17:00,687
但从 watchOS 9 开始

342
00:17:00,721 --> 00:17:04,091
我们有一个更简单的答案

343
00:17:04,825 --> 00:17:09,563
Swift Charts 也可以在 iOS 上使用
macOS 和 tvOS

344
00:17:09,596 --> 00:17:13,267
因此您可以在任何使用
SwiftUI 的地方重复使用图表

345
00:17:14,401 --> 00:17:16,803
我们将汇总我们想要绘制图表的数据

346
00:17:16,837 --> 00:17:19,406
然后让 Swift Charts 为我们显示

347
00:17:21,041 --> 00:17:25,712
对于图表
我们希望显示按日期完成的项目数

348
00:17:25,746 --> 00:17:28,815
我们将创建一个结构
以存储图表的聚合数据

349
00:17:30,050 --> 00:17:31,685
然后我们会写一个小方法

350
00:17:31,718 --> 00:17:33,453
来将列表项数据

351
00:17:33,487 --> 00:17:35,155
聚合为图表数据元素

352
00:17:36,690 --> 00:17:41,128
通过指定要显示的数据
来显示一个简单的图表

353
00:17:41,161 --> 00:17:43,997
并从数据中定义系列

354
00:17:44,031 --> 00:17:46,633
我们使用日期作为 x 值

355
00:17:46,667 --> 00:17:49,603
完成的项目数 作为 y 值

356
00:17:51,338 --> 00:17:54,541
在我的 Watch 显示屏上
实现我想要的样子

357
00:17:54,575 --> 00:17:56,844
我正在使用图表的 chartXAxis 修改器

358
00:17:56,877 --> 00:18:00,013
自定义 x 轴

359
00:18:00,614 --> 00:18:04,818
我正在为轴值标签指定格式样式

360
00:18:04,852 --> 00:18:07,254
我也不想要垂直网格线

361
00:18:07,287 --> 00:18:10,791
所以我省略了一个
AxisGridLine 标记

362
00:18:10,824 --> 00:18:16,029
我还使用chartYAxis 修改器
来自定义 y 轴

363
00:18:16,063 --> 00:18:20,767
我指定了一个网格线样式看起来
很适合我在 Watch 上的图表

364
00:18:20,801 --> 00:18:23,937
我正在格式化轴值标签 作为整数

365
00:18:23,971 --> 00:18:25,873
并省略顶部标签

366
00:18:25,906 --> 00:18:29,142
以防止它在图表的顶部被剪裁

367
00:18:29,176 --> 00:18:33,747
想要了解更多 Swift Chart
可以实现的神奇功能

368
00:18:33,780 --> 00:18:36,283
请观看“认识 Swift Charts”

369
00:18:36,316 --> 00:18:39,319
和“Swift Charts：提高标准”视频

370
00:18:40,854 --> 00:18:42,689
我们的图表看起来不错

371
00:18:42,723 --> 00:18:44,925
但我想在展示更多数据的同时

372
00:18:44,958 --> 00:18:47,828
仍保持出色的观看体验

373
00:18:47,861 --> 00:18:50,297
所以我要让它可滚动

374
00:18:50,330 --> 00:18:52,900
为此 我们将使用

375
00:18:52,933 --> 00:18:55,636
新的 digitalCrownRotation 修改器

376
00:18:55,669 --> 00:18:57,838
它允许我们为数码表冠活动

377
00:18:57,871 --> 00:18:59,773
设置回调

378
00:18:59,806 --> 00:19:01,041
我们将实施

379
00:19:01,074 --> 00:19:03,610
图表的自定义滚动行为

380
00:19:05,412 --> 00:19:08,549
让我们通过添加一些属性

381
00:19:08,582 --> 00:19:10,984
来添加
digitalCrownRotation 修改器

382
00:19:11,018 --> 00:19:12,920
以便当某人在图表上滚动时存储状态

383
00:19:13,854 --> 00:19:17,824
highlightedDateIndex是当前滚动位置

384
00:19:17,858 --> 00:19:20,027
数据点的日期索引

385
00:19:21,061 --> 00:19:22,729
我们将存储 crown offset

386
00:19:22,763 --> 00:19:25,232
所以可以显示当前表冠位置

387
00:19:25,265 --> 00:19:27,634
当这个人在滚动图表时

388
00:19:28,368 --> 00:19:32,239
表冠随之移动
这是一个数据点上

389
00:19:32,272 --> 00:19:34,208
或数据点之间的中间值

390
00:19:35,409 --> 00:19:38,478
要追踪是否有人正在进行滚动操作

391
00:19:38,512 --> 00:19:40,848
我们将存储空闲状态

392
00:19:40,881 --> 00:19:42,316
我们将使用这些信息

393
00:19:42,349 --> 00:19:44,017
添加一点动画

394
00:19:44,051 --> 00:19:46,854
随着表冠滚动停止和开始

395
00:19:48,856 --> 00:19:52,059
现在有了属性存储值

396
00:19:52,092 --> 00:19:54,828
我们可以添加
数码表冠旋转修改器

397
00:19:56,129 --> 00:20:00,033
我们将把 detent 值
绑定到 highlightedDateIndex 属性

398
00:20:01,134 --> 00:20:04,771
在机械术语中 止动器是一种

399
00:20:04,805 --> 00:20:06,507
保持某物在某个位置的系统

400
00:20:06,540 --> 00:20:09,309
直到施加足够的力来移动它

401
00:20:09,343 --> 00:20:12,446
例如 当我打开车门时

402
00:20:12,479 --> 00:20:15,516
有一个停顿点
就是门将暂定的地方

403
00:20:15,549 --> 00:20:17,017
我可以用力一点

404
00:20:17,050 --> 00:20:19,953
把门打开到另一个停顿点

405
00:20:19,987 --> 00:20:22,656
要关闭它 需要用力拉

406
00:20:22,689 --> 00:20:26,527
克服阻力 把它拉离停顿点

407
00:20:26,560 --> 00:20:30,631
否则 车门将弹回停顿点的位置

408
00:20:30,664 --> 00:20:32,599
这就是止动器

409
00:20:33,367 --> 00:20:34,735
车门的停顿点

410
00:20:34,768 --> 00:20:37,504
帮助我们了解这个 API 中的 detent

411
00:20:38,338 --> 00:20:40,741
Detent 是您的视图中

412
00:20:40,774 --> 00:20:42,376
表冠的静止槽口位置

413
00:20:44,211 --> 00:20:46,980
在 onChange 回调的处理程序中

414
00:20:47,014 --> 00:20:49,983
我们将 isCrownIdle 的值
设置为错误

415
00:20:50,017 --> 00:20:52,686
因为我们知道表冠在滚动

416
00:20:52,719 --> 00:20:55,789
我们将表冠偏移值设置为当前值

417
00:20:55,822 --> 00:20:59,560
让我们在滚动期间
显示图表上的当前位置

418
00:21:00,827 --> 00:21:03,564
在 onIdle 回调的处理程序中

419
00:21:03,597 --> 00:21:06,466
我们将 isCrownIdle 的值设置为真

420
00:21:08,068 --> 00:21:10,270
现在我们可以在图表滚动时

421
00:21:10,304 --> 00:21:11,872
显示表冠的位置

422
00:21:12,773 --> 00:21:16,777
为此 我们可以使用
Swift Charts 中的 RuleMark 类型

423
00:21:17,644 --> 00:21:20,881
RuleMark 是图表上的一条直线

424
00:21:20,914 --> 00:21:24,351
您可以用它来显示水平线或垂直线

425
00:21:24,384 --> 00:21:26,787
以显示阈值 例如

426
00:21:26,820 --> 00:21:28,555
显示斜线

427
00:21:29,656 --> 00:21:31,592
我们将创建一个 RuleMark

428
00:21:31,625 --> 00:21:33,393
具有表冠偏移日期值

429
00:21:33,427 --> 00:21:36,363
以显示表冠滚动的当前位置

430
00:21:38,031 --> 00:21:40,033
为了让它看起来更美观

431
00:21:40,067 --> 00:21:42,703
我想让表冠位置线褪色

432
00:21:42,736 --> 00:21:44,238
当表冠停止移动时

433
00:21:45,072 --> 00:21:46,840
对此进行动画处理非常简单

434
00:21:46,874 --> 00:21:49,643
使用我们添加的 isCrownIdle 属性

435
00:21:50,777 --> 00:21:54,147
我们将添加一个属性来存储
我们在 foregroundStyle 中

436
00:21:54,181 --> 00:21:56,650
为 RuleMark 使用颜色的不透明度

437
00:21:57,985 --> 00:22:01,054
在图表中添加一个 onChange 修改器

438
00:22:01,088 --> 00:22:04,391
当 isCrownIdle 值发生变化时

439
00:22:04,424 --> 00:22:07,160
可以使 crownPositionOpacity
值发生变化

440
00:22:08,262 --> 00:22:12,766
然后更新  RuleMark 的前景样式
以使用不透明度

441
00:22:14,568 --> 00:22:18,705
要在滚动时在图表条形图旁边显示值

442
00:22:18,739 --> 00:22:21,208
我们可以向 BarMark 添加注释

443
00:22:21,975 --> 00:22:26,246
我们将注释放置在栏的顶部前导侧

444
00:22:26,280 --> 00:22:28,348
当它是最后一栏时

445
00:22:28,382 --> 00:22:29,917
否则 我们将它定位在

446
00:22:29,950 --> 00:22:31,785
顶部尾随侧

447
00:22:33,387 --> 00:22:35,722
让我们一起来看看
我们的成果

448
00:22:35,756 --> 00:22:38,559
只需使用 digitalCrownRotation 修改器

449
00:22:38,592 --> 00:22:40,494
Swift Charts 中的 RuleMark

450
00:22:40,527 --> 00:22:42,829
和一个简单的 SwiftUI 动画

451
00:22:44,731 --> 00:22:48,202
创建自定义可滚动图表的最后一步

452
00:22:48,235 --> 00:22:52,606
在有人进行滚动操作时
调整图表的数据范围

453
00:22:52,639 --> 00:22:54,975
创建一个属性来存储可见范围

454
00:22:56,009 --> 00:23:00,414
创建 chartData 变量
以向图表提供区域内的数据

455
00:23:01,281 --> 00:23:04,284
当 highlightedDateIndex 更改时

456
00:23:04,318 --> 00:23:07,020
调用一个方法来检查图表数据范围

457
00:23:07,054 --> 00:23:09,056
并在必要时进行更新

458
00:23:10,157 --> 00:23:14,161
当有人使用数码表冠
滚动图表时

459
00:23:14,194 --> 00:23:16,897
图表将滚动以显示可用数据

460
00:23:17,865 --> 00:23:21,602
现在 我们已经完成了
我们计划的所有功能的实现

461
00:23:23,303 --> 00:23:26,139
想了解有关在 watchOS 9 中可用的

462
00:23:26,173 --> 00:23:28,008
新的 SwiftUI 功能的更多信息

463
00:23:28,041 --> 00:23:30,911
请查看“SwiftUI 的新功能”

464
00:23:31,712 --> 00:23:33,614
在规划 Watch App

465
00:23:33,647 --> 00:23:35,716
或您的新 Watch App 功能时

466
00:23:35,749 --> 00:23:36,783
请想想什么能帮助打造

467
00:23:36,817 --> 00:23:38,785
出色的 Watch App 体验

468
00:23:39,686 --> 00:23:41,421
在设计您的 App 时

469
00:23:41,455 --> 00:23:43,891
考虑一下您的 App 导航策略

470
00:23:43,924 --> 00:23:46,960
以确保您的 App 简单 直观

471
00:23:47,828 --> 00:23:52,165
使用 SwiftUI 获得更简单
更丰富的开发选项

472
00:23:52,199 --> 00:23:54,868
继续构建出色的 Watch App

473
00:23:54,902 --> 00:23:56,203
请记住 因为有您

474
00:23:56,236 --> 00:23:58,438
我们确定世上有 App
可以做到这一点

475
00:23:59,006 --> 00:24:01,074
[音乐]

