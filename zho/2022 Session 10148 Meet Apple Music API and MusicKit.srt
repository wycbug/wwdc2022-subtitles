1
00:00:00,334 --> 00:00:06,340
[欢快的音乐]

2
00:00:09,810 --> 00:00:12,346
Justin Rennell: 大家好 欢迎来到 WWDC

3
00:00:12,379 --> 00:00:16,350
我是 Justin
是 Apple Music 开发团队的工程师

4
00:00:16,383 --> 00:00:19,553
今天我将介绍 MusicKit

5
00:00:19,586 --> 00:00:22,322
重点介绍使用
Apple Music API 的基础知识

6
00:00:22,356 --> 00:00:25,759
在本期讲座中
我将概述 MusicKit 客户端框架

7
00:00:25,792 --> 00:00:29,096
以及它们如何与
Apple Music API web 服务集成

8
00:00:29,129 --> 00:00:32,566
我将解释如何作为开发人员
获得访问权限

9
00:00:32,599 --> 00:00:34,768
以及使用 Apple Music API 的
具体细节 包括

10
00:00:34,801 --> 00:00:36,904
请求内容和资源

11
00:00:36,937 --> 00:00:40,174
使用限制和分页来处理大型资源集合

12
00:00:40,207 --> 00:00:43,777
以及如何使用搜索端点
在目录中查找内容

13
00:00:43,810 --> 00:00:46,847
最后 我将介绍一些可供 Apple Music
订阅者使用的个性化功能

14
00:00:46,880 --> 00:00:50,851
以及如何在您的 App 中
提供对它们的访问权限

15
00:00:51,885 --> 00:00:55,689
我先简单介绍一下 MusicKit
和 Apple Music API

16
00:00:55,722 --> 00:01:00,160
MusicKit 于 2017 年
在 WWDC 首次发布

17
00:01:00,194 --> 00:01:02,796
从那以后 我们进行了改进

18
00:01:02,829 --> 00:01:04,865
使得与 Apple Music 的集成
更加容易

19
00:01:04,898 --> 00:01:07,868
并继续添加对附加功能的支持

20
00:01:07,901 --> 00:01:10,437
MusicKit 是客户端框架

21
00:01:10,470 --> 00:01:12,439
和 Apple Music API 的组合

22
00:01:12,472 --> 00:01:14,541
两者一起使用
可以将 Apple Music 功能

23
00:01:14,575 --> 00:01:17,444
添加到您的 App 中

24
00:01:17,477 --> 00:01:20,147
您可以从 Apple Music 中
发现和获取内容

25
00:01:20,180 --> 00:01:23,917
包括艺术家 专辑 播放列表等

26
00:01:23,951 --> 00:01:28,021
并具有搜索目录
和浏览流行排行榜的功能

27
00:01:28,055 --> 00:01:31,692
在用户同意的情况下
MusicKit 和 Apple Music API

28
00:01:31,725 --> 00:01:34,328
允许您验证订阅者播放可用内容

29
00:01:34,361 --> 00:01:36,263
并提供对个性化功能的访问

30
00:01:36,296 --> 00:01:38,799
包括他们的音乐库 推荐

31
00:01:38,832 --> 00:01:41,435
和最近播放的历史记录

32
00:01:41,468 --> 00:01:44,238
MusicKit 客户端框架提供了

33
00:01:44,271 --> 00:01:45,772
对订阅者进行身份验证

34
00:01:45,806 --> 00:01:48,775
以及在设备上
开始和控制播放所需的 API

35
00:01:48,809 --> 00:01:52,145
客户端框架可用于
Apple 平台上的 App

36
00:01:52,179 --> 00:01:54,748
使用 Javascript 的 网页 App

37
00:01:54,781 --> 00:01:57,918
和使用可用 SDK 的 Android App

38
00:01:59,253 --> 00:02:01,889
Apple 平台上的 MusicKit
拥有将 Apple Music

39
00:02:01,922 --> 00:02:04,291
集成到 App 中所需的一切

40
00:02:04,324 --> 00:02:07,227
订阅者可以在您的 App 中
进行身份验证或注册

41
00:02:07,261 --> 00:02:11,265
以开始和控制播放
并访问其他个性化功能

42
00:02:11,298 --> 00:02:15,235
可用的 API 通过
对资源和分页的原生支持

43
00:02:15,269 --> 00:02:19,806
加速了从 Apple Music 中
发现和访问内容的调用

44
00:02:19,840 --> 00:02:23,277
后面涉及的许多关于
直接访问 Apple Music API

45
00:02:23,310 --> 00:02:26,213
和向 Apple Music API
发出请求的主题

46
00:02:26,246 --> 00:02:28,949
都由 Apple 平台上的
MusicKit 自动处理

47
00:02:28,982 --> 00:02:31,919
我们鼓励为 Apple 平台
编写 App 的开发人员

48
00:02:31,952 --> 00:02:34,721
观看讲座
“Meet MusicKit for Swift”

49
00:02:34,755 --> 00:02:36,790
以了解这些 API

50
00:02:36,823 --> 00:02:39,459
并观看讲座
“Explore more content with MusicKit”

51
00:02:39,493 --> 00:02:41,495
以了解更多功能

52
00:02:42,629 --> 00:02:45,232
Web 上的 MusicKit 使您可以

53
00:02:45,265 --> 00:02:47,568
使用 Javascript 轻松地
将 Apple Music 引入您的App

54
00:02:47,601 --> 00:02:49,670
您可以发现 Apple Music 内容

55
00:02:49,703 --> 00:02:52,973
让订阅者登录以访问个性化功能

56
00:02:53,006 --> 00:02:55,742
并直接在您的网站上播放内容

57
00:02:55,776 --> 00:02:58,378
完全访问 Apple Music API
让您能够

58
00:02:58,412 --> 00:03:01,215
创造独特的音乐体验

59
00:03:01,248 --> 00:03:03,851
MusicKit 提供了一组
内置的 web 组件

60
00:03:03,884 --> 00:03:06,186
包括一个全功能的媒体播放器

61
00:03:06,220 --> 00:03:08,455
这些组件使入门变得容易

62
00:03:08,488 --> 00:03:11,291
并且可以根据您的体验
进行灵活定制

63
00:03:12,960 --> 00:03:15,262
Android 版的 MusicKit 可以让您

64
00:03:15,295 --> 00:03:17,130
将 Apple Music 集成到
您的 Android App中

65
00:03:17,164 --> 00:03:19,833
支持对 Apple Music 订阅者
进行身份验证

66
00:03:19,867 --> 00:03:21,401
控制内容播放

67
00:03:21,435 --> 00:03:25,572
对 Apple Music API 的完全访问
让您能够构建丰富的音乐体验

68
00:03:27,541 --> 00:03:31,345
Apple Music API 是常见的
JSON web 服务

69
00:03:31,378 --> 00:03:34,715
提供对发现功能
和 Apple Music 目录内容的访问

70
00:03:34,748 --> 00:03:37,518
经过认证的用户
可以访问个性化功能

71
00:03:37,551 --> 00:03:40,020
包括他们的音乐库 推荐

72
00:03:40,053 --> 00:03:41,922
和最近播放的历史记录

73
00:03:42,656 --> 00:03:46,126
接下来 我将解释如何获得访问权限

74
00:03:46,159 --> 00:03:50,264
要向 Apple Music API 发出请求
您需要一个开发者令牌

75
00:03:50,297 --> 00:03:52,332
对于 Apple 平台上的 App

76
00:03:52,366 --> 00:03:54,801
您可以通过为您的 App

77
00:03:54,835 --> 00:03:58,038
启用 MusicKit 服务
来利用自动令牌管理的优势

78
00:03:58,071 --> 00:04:00,474
这项服务可以
在 Apple Developer Portal 的

79
00:04:00,507 --> 00:04:03,377
App ID 部分找到

80
00:04:04,711 --> 00:04:06,713
对于其他平台上的 App

81
00:04:06,747 --> 00:04:10,150
您可以通过在
Apple Developer Portal 上注册

82
00:04:10,184 --> 00:04:12,119
成为 MusicKit 开发者
来获取开发者令牌

83
00:04:12,152 --> 00:04:15,556
从那里 您可以请求和下载私钥

84
00:04:15,589 --> 00:04:18,425
您将需要生成一个 JSON Web 令牌

85
00:04:18,458 --> 00:04:20,727
并使用您下载的私钥对其进行签名

86
00:04:20,761 --> 00:04:23,864
JSON Web 令牌分为两部分

87
00:04:23,897 --> 00:04:25,432
第一部分是必需的标头

88
00:04:25,465 --> 00:04:30,137
包括签名算法 alg 它必须是 ES256

89
00:04:30,170 --> 00:04:32,272
以及密钥标识符 kid

90
00:04:32,306 --> 00:04:35,509
它包含在您的私钥下载中

91
00:04:35,542 --> 00:04:38,078
令牌的第二部分是声明

92
00:04:38,111 --> 00:04:40,981
Apple Music API
有三个必需的声明

93
00:04:41,014 --> 00:04:43,116
发布者 ID “iss”

94
00:04:43,150 --> 00:04:45,986
这是您的团队 ID
可以在 Apple Developer portal 的

95
00:04:46,019 --> 00:04:47,955
会员部分找到

96
00:04:47,988 --> 00:04:50,090
发布时间为 iat

97
00:04:50,123 --> 00:04:53,160
由自 Epoch 以来的秒数表示

98
00:04:53,193 --> 00:04:55,529
以及到期时间 exp

99
00:04:55,562 --> 00:04:58,599
这与发布时间的时间格式相同

100
00:04:58,632 --> 00:05:01,702
生成的令牌最长

101
00:05:01,735 --> 00:05:04,037
可在发行后六个月内到期

102
00:05:04,071 --> 00:05:07,107
对于 网页 App
我们鼓励提供来源声明

103
00:05:07,140 --> 00:05:10,010
这将颁发一个
仅对您的网站有效的令牌

104
00:05:11,879 --> 00:05:14,314
必须在授权标头中

105
00:05:14,348 --> 00:05:18,352
为 Apple Music API 的所有请求
提供有效的签名令牌

106
00:05:18,385 --> 00:05:21,955
在 Apple 平台上为您的App
启用 MusicKit 服务后

107
00:05:21,989 --> 00:05:23,924
这将自动完成

108
00:05:23,957 --> 00:05:26,860
必须使用您生成的令牌
配置 Web 上的 MusicKit

109
00:05:26,894 --> 00:05:29,563
来向 Apple Music API 发出请求

110
00:05:29,596 --> 00:05:32,833
有关生成 JSON Web 令牌的
更多信息

111
00:05:32,866 --> 00:05:36,036
请参阅 Apple Music API 文档

112
00:05:36,069 --> 00:05:40,974
现在我将向您展示如何
使用 Apple Music API 请求资源

113
00:05:41,008 --> 00:05:43,010
资源对 Apple Music 内容进行建模

114
00:05:43,043 --> 00:05:46,747
例如艺术家 专辑 歌曲 播放列表等

115
00:05:46,780 --> 00:05:49,416
每个都有自己对应的类型

116
00:05:49,449 --> 00:05:52,219
可以通过搜索等发现功能
或使用它们的标识符

117
00:05:52,252 --> 00:05:56,657
从 Apple Music API 端点获取资源

118
00:05:56,690 --> 00:05:59,960
下面是一个使用其标识符

119
00:05:59,993 --> 00:06:02,763
从 API 获取播放列表资源的
示例请求 URL

120
00:06:02,796 --> 00:06:07,701
Apple Music API
在 api.music.apple.com 上托管

121
00:06:07,734 --> 00:06:10,404
URL 的路径使用 RESTful 模式

122
00:06:10,437 --> 00:06:13,874
代表资源或功能的位置

123
00:06:13,907 --> 00:06:16,977
位置中的第一个元素是 API 的版本

124
00:06:17,010 --> 00:06:18,779
当前是版本 1

125
00:06:18,812 --> 00:06:22,816
当引入重大更改时
可能会出现新版本

126
00:06:22,850 --> 00:06:25,953
版本与现有调用保持向后兼容性

127
00:06:25,986 --> 00:06:30,490
即使对资源和新功能进行了增强

128
00:06:30,524 --> 00:06:33,026
对于 Apple Music 目录中的请求

129
00:06:33,060 --> 00:06:34,661
该位置的下一部分表示

130
00:06:34,695 --> 00:06:37,798
要从中获取的特定目录

131
00:06:37,831 --> 00:06:40,200
Apple Music 是一项全球流媒体服务

132
00:06:40,234 --> 00:06:44,438
内容可能因地区而异
我们将其称为店面

133
00:06:45,772 --> 00:06:48,709
有关店面和内容可用性的信息

134
00:06:48,742 --> 00:06:53,614
请观看题为“Cross reference content
with the Apple Music API”的讲座

135
00:06:53,647 --> 00:06:56,550
在这个例子中
我将从美国店面的目录中

136
00:06:56,583 --> 00:06:58,318
获取一个播放列表

137
00:06:58,352 --> 00:07:01,855
用两个字母的国家代码 us 表示

138
00:07:01,889 --> 00:07:05,125
该位置的最后一部分是资源的标识

139
00:07:05,158 --> 00:07:08,996
由后面跟有标识符的
类型播放列表表示

140
00:07:10,163 --> 00:07:12,466
由于 Apple Music
在许多地区都可用

141
00:07:12,499 --> 00:07:14,434
因此可以使用可选的

142
00:07:14,468 --> 00:07:18,005
语言标签查询参数 L 来支持本地化

143
00:07:18,038 --> 00:07:22,409
在这里 我为英语指定了
语言标签 en-US

144
00:07:22,442 --> 00:07:28,081
要获取以西班牙语本地化的内容
我可以指定标签 es-MX

145
00:07:28,115 --> 00:07:29,249
为了简单起见

146
00:07:29,283 --> 00:07:31,718
我不会在这些示例中指定语言标签

147
00:07:31,752 --> 00:07:34,821
这会导致店面的默认本地化

148
00:07:34,855 --> 00:07:36,957
可以通过访问店面引用端点

149
00:07:36,990 --> 00:07:38,592
找到 Apple Music

150
00:07:38,625 --> 00:07:41,862
所在的店面及其支持的本地化

151
00:07:41,895 --> 00:07:45,399
更多细节可以在
Apple Music API 文档中找到

152
00:07:46,500 --> 00:07:49,269
下面看一下
对播放列表发出 GET 请求

153
00:07:49,303 --> 00:07:51,271
这将返回一个包含播放列表资源的

154
00:07:51,305 --> 00:07:54,441
“数据”数组的资源收集响应

155
00:07:54,474 --> 00:07:59,146
资源对象用 ID 值和类型
指示内容的身份

156
00:07:59,179 --> 00:08:03,851
ID 和类型的组合代表了
资源的唯一身份

157
00:08:03,884 --> 00:08:08,388
href 值指示 API 中
可以获取资源的位置

158
00:08:08,422 --> 00:08:12,960
在这种情况下 请注意该位置
与我们请求的路径相同

159
00:08:12,993 --> 00:08:17,331
内容的元数据值
可在资源的属性映射中找到

160
00:08:17,364 --> 00:08:21,702
在关系图中可以找到
与其他资源的直接连接

161
00:08:21,735 --> 00:08:23,804
例如此播放列表 curator 和曲目

162
00:08:24,905 --> 00:08:26,940
下面是属性映射的详细介绍

163
00:08:26,974 --> 00:08:29,676
其中包含播放列表的元数据值

164
00:08:29,710 --> 00:08:32,312
我将介绍一个在右侧小部件中

165
00:08:32,346 --> 00:08:34,314
使用其中一些属性的示例

166
00:08:34,348 --> 00:08:39,887
该小部件使用播放列表的名称
curator 名称和描述属性

167
00:08:39,920 --> 00:08:42,823
playParams 是许多资源类型的
通用属性

168
00:08:42,856 --> 00:08:46,426
它指示内容何时可以
流式传输给订阅者

169
00:08:46,460 --> 00:08:49,296
这可用于确定是否应启用播放控制

170
00:08:49,329 --> 00:08:53,634
因为没有 playParams 的内容
不可用于播放

171
00:08:53,667 --> 00:08:56,537
Artwork 是许多资源类型的
另一个常见属性

172
00:08:56,570 --> 00:08:59,806
它包含图像的最大宽度和高度值

173
00:08:59,840 --> 00:09:02,776
以及可以从中加载图像的 url

174
00:09:05,078 --> 00:09:07,581
在 Apple 开发者的反馈非常重要

175
00:09:07,614 --> 00:09:10,651
它可以帮助我们为每个人
改进我们的 API 和服务

176
00:09:10,684 --> 00:09:12,786
今年 我们很高兴地宣布

177
00:09:12,819 --> 00:09:15,389
添加了我们最受欢迎的一个功能

178
00:09:15,422 --> 00:09:18,258
艺术家作品现在可在
Apple Music API 中使用

179
00:09:18,292 --> 00:09:20,994
让简单的剪影成为过去

180
00:09:21,028 --> 00:09:23,864
所有新的和现有的 App 都可以

181
00:09:23,897 --> 00:09:27,634
通过查找添加到艺术家资源的

182
00:09:27,668 --> 00:09:31,905
艺术品属性来添加对这些图像的支持

183
00:09:31,939 --> 00:09:35,209
这是我们之前查看的播放列表的

184
00:09:35,242 --> 00:09:37,010
艺术作品 url 的缩写示例

185
00:09:37,044 --> 00:09:42,482
艺术品 url 包含以蓝色突出显示的
宽度 w 和 高度 h 来标记

186
00:09:42,516 --> 00:09:45,586
要使用此 URL 加载插图

187
00:09:45,619 --> 00:09:48,388
请将这些标记替换为
您的显示器所需的分辨率

188
00:09:48,422 --> 00:09:51,825
由于播放列表图片是方形的

189
00:09:51,859 --> 00:09:53,994
我将使用相同的宽度和高度分辨率

190
00:09:54,027 --> 00:09:57,998
下面是请求分辨率为 400x400

191
00:09:58,031 --> 00:10:02,469
300x300 和 200x200 的示例

192
00:10:02,503 --> 00:10:05,072
图像会以每种分辨率缩放显示

193
00:10:05,105 --> 00:10:07,941
对于较小的图像 文件大小会减小

194
00:10:09,109 --> 00:10:11,745
所有资源类型都有一组默认属性

195
00:10:11,778 --> 00:10:15,415
代表该资源的通用或基本元数据

196
00:10:15,449 --> 00:10:18,118
某些资源具有可以获取的附加属性

197
00:10:18,151 --> 00:10:20,454
称为扩展属性

198
00:10:20,487 --> 00:10:24,658
可以使用扩展查询参数
来请求这些扩展属性

199
00:10:24,691 --> 00:10:27,227
例如 Apple Music 播放列表中的曲目

200
00:10:27,261 --> 00:10:29,329
要么是歌曲 要么是音乐视频

201
00:10:29,363 --> 00:10:32,232
如果您想知道播放列表
包含的曲目类型

202
00:10:32,266 --> 00:10:35,702
可以请求 trackTypes 扩展属性

203
00:10:35,736 --> 00:10:38,438
扩展属性与它们的默认属性

204
00:10:38,472 --> 00:10:41,175
一起出现在资源的属性图中

205
00:10:41,208 --> 00:10:44,611
如果播放列表的曲目
是音乐视频而不是歌曲

206
00:10:44,645 --> 00:10:48,215
也许您可以自定义播放按钮
以通知查看者

207
00:10:49,683 --> 00:10:52,319
现在看一下关系图
可以看到从这个播放列表

208
00:10:52,352 --> 00:10:55,489
到其他资源的几个直接连接

209
00:10:55,522 --> 00:10:57,658
许多资源具有自动关系

210
00:10:57,691 --> 00:11:00,761
在直接请求某些内容时
会返回这些关系

211
00:11:00,794 --> 00:11:06,033
播放列表的自动关系
是其 curator 和曲目

212
00:11:06,066 --> 00:11:09,102
命名关系是为了表明连接是什么

213
00:11:09,136 --> 00:11:11,538
例如此播放列表的 curator

214
00:11:11,572 --> 00:11:15,209
它们有一个可以
直接获取关系的 href 位置

215
00:11:15,242 --> 00:11:18,579
和一个用于相关资源集合的数据数组

216
00:11:18,612 --> 00:11:22,216
对于播放列表
策展人关系是自动关联的

217
00:11:22,249 --> 00:11:25,953
这意味着只会出现相关资源的身份

218
00:11:25,986 --> 00:11:30,824
这允许使用其标识或 href
轻松链接到此资源

219
00:11:30,858 --> 00:11:34,094
由于播放列表已经包含
curator 的姓名作为属性

220
00:11:34,127 --> 00:11:36,263
因此可能不需要包含

221
00:11:36,296 --> 00:11:38,198
相关 curator 资源的其他元数据

222
00:11:38,232 --> 00:11:41,768
资源的身份可以用来
将 curator 命名为一个链接

223
00:11:41,802 --> 00:11:45,772
让人们可以根据自己的意愿
导航到 curator 以发现其他内容

224
00:11:45,806 --> 00:11:49,009
如果您想通过播放列表
显示 curator 的其他信息

225
00:11:49,042 --> 00:11:52,713
例如其艺术作品
您将需要获取 curator 的元数据

226
00:11:52,746 --> 00:11:55,415
使用 include 参数指定

227
00:11:55,449 --> 00:11:58,218
您想要相关资源元数据的关系

228
00:11:58,252 --> 00:12:00,888
某些资源类型具有默认情况下
未包含的其他关系

229
00:12:00,921 --> 00:12:04,057
也可以使用此参数请求这些关系

230
00:12:04,091 --> 00:12:07,294
请注意 包含关系会增加响应的大小

231
00:12:07,327 --> 00:12:09,830
并对 App 的速度产生负面影响

232
00:12:09,863 --> 00:12:12,900
许多可能需要从相关资源中
获得的有用值

233
00:12:12,933 --> 00:12:16,403
可以直接作为原始资源的属性找到

234
00:12:16,436 --> 00:12:18,739
为了获得最佳性能 我们建议

235
00:12:18,772 --> 00:12:22,910
仅包含响应中所需的关系和元数据

236
00:12:22,943 --> 00:12:26,079
资源类型及其可用属性和关系的

237
00:12:26,113 --> 00:12:30,150
详细信息可以在
Apple Music API 文档中找到

238
00:12:30,184 --> 00:12:32,819
有关扩展属性 关系

239
00:12:32,853 --> 00:12:35,189
和称为视图的特殊关系的更多信息

240
00:12:35,222 --> 00:12:39,626
请观看讲座 “Explore the catalog
with the Apple Music API”

241
00:12:39,660 --> 00:12:42,529
重新访问示例播放列表的关系

242
00:12:42,563 --> 00:12:45,566
播放列表的曲目被自动包含在内

243
00:12:45,599 --> 00:12:48,602
这意味着相关曲目资源的属性元数据

244
00:12:48,635 --> 00:12:50,904
出现在响应中

245
00:12:50,938 --> 00:12:54,274
相关曲目的属性可用于
显示播放列表的曲目列表

246
00:12:54,308 --> 00:12:57,010
使用它们的插图和右侧小部件中

247
00:12:57,044 --> 00:12:58,946
显示的其他元数据

248
00:12:58,979 --> 00:13:01,215
在之前的部分 我展示了

249
00:13:01,248 --> 00:13:04,518
一个从包含曲目的目录中
获取播放列表资源的示例

250
00:13:04,551 --> 00:13:07,621
在这个部分 我将解释如何处理

251
00:13:07,654 --> 00:13:09,590
与大量资源的关系

252
00:13:09,623 --> 00:13:13,594
关系的相关资源出现在其数据数组中

253
00:13:13,627 --> 00:13:16,129
当相关资源数量较少时

254
00:13:16,163 --> 00:13:19,233
所有资源将出现在单个响应中

255
00:13:19,266 --> 00:13:22,436
必须在称为页面的多个部分中

256
00:13:22,469 --> 00:13:25,305
获取具有比单个响应中更多的
相关资源的关系

257
00:13:26,907 --> 00:13:30,511
我将以大型播放列表的轨道关系为例

258
00:13:30,544 --> 00:13:34,915
默认情况下
仅包含播放列表的前 100 首曲目

259
00:13:34,948 --> 00:13:37,117
如果播放列表的曲目超过 100 个

260
00:13:37,150 --> 00:13:41,355
则必须在后续页面中获取额外的曲目

261
00:13:41,388 --> 00:13:45,192
以下是包含 100 多首曲目的
播放列表的示例响应

262
00:13:45,225 --> 00:13:48,262
如前所述 跟踪关系的 href

263
00:13:48,295 --> 00:13:51,532
和资源收集数据出现在响应中

264
00:13:51,565 --> 00:13:54,735
由于此播放列表的曲目
多于响应中包含的曲目

265
00:13:54,768 --> 00:13:57,871
因此下一个位置显示为数据的同级

266
00:13:57,905 --> 00:14:00,307
下一个位置表示可以获取集合中

267
00:14:00,340 --> 00:14:03,043
剩余资源的位置

268
00:14:03,076 --> 00:14:05,879
获取下一个位置会直接获取关系

269
00:14:05,913 --> 00:14:08,448
并从提供的偏移量

270
00:14:08,482 --> 00:14:10,551
开始返回关系的资源集合数据

271
00:14:10,584 --> 00:14:14,121
关系的默认限制将应用于每个页面

272
00:14:14,154 --> 00:14:17,891
您可以通过提供限制参数
来选择自己的页面大小

273
00:14:17,925 --> 00:14:19,893
页面大小限制可以介于 1

274
00:14:19,927 --> 00:14:22,329
和特定关系的最大页面大小之间

275
00:14:22,362 --> 00:14:25,132
这可以在文档中找到

276
00:14:25,165 --> 00:14:27,067
如果关系的资源集合

277
00:14:27,100 --> 00:14:30,137
包含页面中
返回的资源之外的其他资源

278
00:14:30,170 --> 00:14:33,974
则下一个位置
将继续显示为数据的同级

279
00:14:34,007 --> 00:14:38,512
当资源集合用尽时
下一个位置将不会显示

280
00:14:38,545 --> 00:14:42,683
请注意 下一个位置不反映
请求选定的页面大小

281
00:14:42,716 --> 00:14:45,853
如果您希望使用
与默认不同的页面大小

282
00:14:45,886 --> 00:14:48,655
则需要为每个请求
提供一个限制参数

283
00:14:48,689 --> 00:14:50,824
始终使用响应中的下一个位置

284
00:14:50,858 --> 00:14:52,659
来给资源集合分页

285
00:14:52,693 --> 00:14:55,262
尝试计算您自己的偏移量
可能会导致

286
00:14:55,295 --> 00:14:58,098
位置无效或结果重复的问题

287
00:14:58,131 --> 00:15:00,701
在下一个部分 我将展示
如何使用 Apple Music API

288
00:15:00,734 --> 00:15:03,937
在 Apple Music 目录中
搜索 fof 内容

289
00:15:03,971 --> 00:15:07,674
Apple Music API 提供了
使用搜索词

290
00:15:07,708 --> 00:15:09,243
在目录中查找内容的功能

291
00:15:09,276 --> 00:15:11,845
搜索请求类似于目录资源请求

292
00:15:11,879 --> 00:15:15,916
以 /search 作为位置
以搜索词作为参数

293
00:15:15,949 --> 00:15:19,920
您可以使用 type 参数
指定您感兴趣的内容类型

294
00:15:19,953 --> 00:15:23,991
并使用限制指定每种类型
要包含的最大结果数

295
00:15:24,024 --> 00:15:26,493
当找到了更多的结果
超过请求的限制时

296
00:15:26,527 --> 00:15:29,463
可以使用分页来继续搜索

297
00:15:29,496 --> 00:15:33,667
这是搜索带有“流行音乐”一词的
专辑和歌曲的响应

298
00:15:33,700 --> 00:15:37,538
搜索端点返回带有结果对象的响应

299
00:15:37,571 --> 00:15:40,240
其中包含每个请求类型的组
和匹配的内容

300
00:15:40,274 --> 00:15:43,911
对于此请求
找到了匹配的专辑和歌曲

301
00:15:45,345 --> 00:15:48,849
该响应还包括一个元对象
其中包含基于相关性

302
00:15:48,882 --> 00:15:51,285
为结果组推荐的顺序

303
00:15:51,318 --> 00:15:53,487
如果您正在构建
一次处理多种内容类型的

304
00:15:53,520 --> 00:15:56,957
搜索体验 这可能会有所帮助

305
00:15:56,990 --> 00:16:00,294
每个结果组都有一个 href

306
00:16:00,327 --> 00:16:03,263
和一个资源集合数据数组

307
00:16:03,297 --> 00:16:05,866
其中包含与搜索项
相关类型的匹配资源

308
00:16:05,899 --> 00:16:08,435
如果结果组有更多匹配可用

309
00:16:08,468 --> 00:16:12,873
则该组将包含下一个位置
可以在该位置获取更多匹配

310
00:16:12,906 --> 00:16:16,276
请求下一个位置会返回
从偏移量开始的

311
00:16:16,310 --> 00:16:18,378
所选类型的更多结果

312
00:16:18,412 --> 00:16:20,614
在最后一个部分 我将讨论

313
00:16:20,647 --> 00:16:23,150
访问 Apple Music API 中的
个性化功能

314
00:16:24,351 --> 00:16:26,954
Apple Music API 和 MusicKit 提供

315
00:16:26,987 --> 00:16:29,523
对特定用户的个性化功能的访问

316
00:16:29,556 --> 00:16:32,192
这些功能让您可以支持订阅者

317
00:16:32,226 --> 00:16:34,862
查看和搜索
其 Apple Music 资料库中的内容

318
00:16:34,895 --> 00:16:39,499
包括添加他们喜欢的内容
和创建新播放列表的功能

319
00:16:39,533 --> 00:16:41,602
个性化推荐可以基于

320
00:16:41,635 --> 00:16:43,937
个人的音乐品味来呈现

321
00:16:43,971 --> 00:16:47,107
您还可以让人们重新发现
他们最近一直在听的音乐

322
00:16:47,140 --> 00:16:50,511
以便从上次中断的地方
重新开始或提供全新的体验

323
00:16:52,212 --> 00:16:54,114
个性化功能可供

324
00:16:54,147 --> 00:16:56,650
积极订阅 Apple Music 的人使用

325
00:16:56,683 --> 00:16:59,586
要支持这些功能 您必须首先

326
00:16:59,620 --> 00:17:02,155
使用 MusicKit
对您的 App 用户进行身份验证

327
00:17:02,189 --> 00:17:04,658
并请求访问他们音乐数据的权限

328
00:17:04,691 --> 00:17:09,162
授予权限后
Music User Token 将是可用的

329
00:17:09,196 --> 00:17:13,867
这个令牌被添加到
Apple Music API 请求的

330
00:17:13,901 --> 00:17:17,271
music-user-token 标头中
并用于验证对个性化数据的访问

331
00:17:18,338 --> 00:17:23,110
Music User Token 是特定于
您的 App 和用户进行身份验证的

332
00:17:23,143 --> 00:17:25,245
此令牌不得跨设备共享

333
00:17:25,279 --> 00:17:28,782
因为一次只能为一台设备授予权限

334
00:17:28,815 --> 00:17:31,985
令牌可能会因
个人订阅或密码的更改而失效

335
00:17:32,019 --> 00:17:34,888
或者如果他们撤销了
对您的 App 的访问权限

336
00:17:34,922 --> 00:17:37,191
它也可能会随着时间的推移而过期

337
00:17:37,224 --> 00:17:40,427
可以通过提示他们重新登录

338
00:17:40,460 --> 00:17:42,796
并为您的 App 授予权限
来刷新身份验证

339
00:17:42,829 --> 00:17:45,299
请注意 此令牌
由 Apple 平台上的 MusicKit

340
00:17:45,332 --> 00:17:47,968
和 Web 上的 MusicKit 自动管理

341
00:17:48,001 --> 00:17:50,304
更多相关的详细信息
请参阅您正在使用的

342
00:17:50,337 --> 00:17:51,872
框架的文档

343
00:17:51,905 --> 00:17:55,008
在今天的讲座中 我展示了如何使用

344
00:17:55,042 --> 00:17:58,078
MusicKit 和 Apple Music API
将 Apple Music 集成到您的 App 中

345
00:17:58,111 --> 00:18:01,315
快速了解支持
MusicKit 客户端框架的平台

346
00:18:01,348 --> 00:18:05,152
以及如何使用 Apple Music API
访问和查找目录中的内容

347
00:18:05,185 --> 00:18:08,555
以及一些可供订阅者使用的
个性化功能

348
00:18:08,589 --> 00:18:11,558
有关今年 Apple 平台上
MusicKit 更新的更多信息

349
00:18:11,592 --> 00:18:14,761
请查看讲座
使用 MusicKit 探索更多内容

350
00:18:14,795 --> 00:18:15,829
感谢收看

351
00:18:15,863 --> 00:18:18,398
我们希望您享受
今年余下的 WWDC 之旅

352
00:18:18,432 --> 00:18:23,103
[欢快的音乐]

