1
00:00:01,468 --> 00:00:07,474
[古怪的音乐]

2
00:00:09,977 --> 00:00:11,578
Yann Ly-Gagnon: 大家好
我是 Yann

3
00:00:11,612 --> 00:00:13,146
我是一名核心蓝牙工程师

4
00:00:13,180 --> 00:00:15,349
今天 我想和大家谈一谈

5
00:00:15,382 --> 00:00:17,484
Apple Watch 上的
蓝牙设备的适时提醒

6
00:00:18,752 --> 00:00:22,022
首先 我们回顾一下
当 watchOS App 在后台运行时

7
00:00:22,055 --> 00:00:24,124
如何更新复杂功能

8
00:00:26,026 --> 00:00:30,664
然后我们将深入研究如何收听
您的 watchOS App 发出的适时提醒

9
00:00:32,833 --> 00:00:36,203
我们还会看一看有什么新的方法能
帮助我们在 watchOS 9 上

10
00:00:36,236 --> 00:00:37,504
发现新的外围设备

11
00:00:39,606 --> 00:00:43,076
最后 我们会提供最佳实践和建议

12
00:00:43,110 --> 00:00:45,312
来帮助您设计您的蓝牙配件

13
00:00:47,748 --> 00:00:49,950
让我们进入我们的第一个主题

14
00:00:49,983 --> 00:00:53,520
如何在 watchOS App 的后台
更新复杂功能

15
00:00:54,288 --> 00:00:57,758
去年 在 watchOS 8 中
我们介绍了一种

16
00:00:57,791 --> 00:01:00,060
在后台 App 刷新期间
使用您的蓝牙配件

17
00:01:00,093 --> 00:01:01,595
更新复杂功能的方法

18
00:01:03,163 --> 00:01:06,266
这对数据非常有用 可以定期更新

19
00:01:06,300 --> 00:01:09,036
就像在这个例子中向我展示
当前气温

20
00:01:12,506 --> 00:01:17,411
我们快速回顾一下 去年的 watchOS
允许您更新您的复杂功能

21
00:01:17,444 --> 00:01:21,548
并在在后台定期运行期间
使用后台 App 刷新

22
00:01:21,582 --> 00:01:24,985
每当后台 App 刷新时
它都会允许您的 App

23
00:01:25,018 --> 00:01:26,320
重新连接到您的蓝牙外围设备

24
00:01:26,353 --> 00:01:29,156
检索数据
然后断开与外围设备的连接

25
00:01:30,090 --> 00:01:32,993
有关此内容的更多详细信息
请查看视频

26
00:01:33,026 --> 00:01:35,429
“Connect Bluetooth devices
to Apple Watch”

27
00:01:37,564 --> 00:01:40,834
但是如果用户想对
恰巧发生在您的蓝牙外围设备上的

28
00:01:40,868 --> 00:01:42,336
限时事件有所了解该怎么办呢

29
00:01:43,637 --> 00:01:47,407
在 watchOS 9 中 我们将介绍一种

30
00:01:47,441 --> 00:01:50,177
从后台的蓝牙附件中收听警报的方法

31
00:01:52,312 --> 00:01:54,147
这是它的工作原理

32
00:01:54,181 --> 00:01:56,884
当您的 App 运行时 连接您的设备

33
00:01:56,917 --> 00:01:58,652
开始监控一个特性

34
00:02:00,621 --> 00:02:03,624
当您的 App 停止运行时
核心蓝牙会

35
00:02:03,657 --> 00:02:06,126
继续保持与您的设备相连接

36
00:02:06,159 --> 00:02:08,161
收听您的特性的改变

37
00:02:09,630 --> 00:02:12,666
当您的设备改变了该特性的值时

38
00:02:12,699 --> 00:02:15,769
您的 App 会运行起来
处理该事件

39
00:02:15,802 --> 00:02:20,340
例如 您可以发布本地通知
或发送网络请求

40
00:02:20,374 --> 00:02:23,544
这旨在为用户提供他们所关心的

41
00:02:23,577 --> 00:02:24,811
限时事件的信息

42
00:02:26,613 --> 00:02:29,216
假设我有一个食物温度计

43
00:02:29,249 --> 00:02:32,486
我可以设置所需的烹饪温度

44
00:02:32,519 --> 00:02:34,588
当我从烤箱拿走我的食物的时候
它就会发出警报

45
00:02:35,656 --> 00:02:38,559
随着温度接近所需的温度

46
00:02:38,592 --> 00:02:41,361
温度计会改变特性的值

47
00:02:41,395 --> 00:02:44,698
该 App 会发出
食物快好了的本地通知

48
00:02:46,200 --> 00:02:49,269
食物完成烹饪后
我就会收到所需的通知

49
00:02:51,205 --> 00:02:55,275
如果温度还在不断上升
我会收到一个最后的通知

50
00:02:58,445 --> 00:03:02,049
首先 让我们回顾一下如何
配置后台模式

51
00:03:03,350 --> 00:03:08,689
将 Bluetooth-central 添加到您的
Watch App Info.plist 中的 UIBackgroundModes 中

52
00:03:10,324 --> 00:03:14,528
在 Xcode 中
它被称为 Required background modes

53
00:03:14,561 --> 00:03:17,931
您应该使用 CoreBluetooth
添加 App communicates using CoreBluetooth

54
00:03:19,099 --> 00:03:25,472
如果您想以后台执行为中心
请注意 那些

55
00:03:25,506 --> 00:03:27,841
Info.plist 条目与您的 iOS App 相同

56
00:03:29,910 --> 00:03:33,480
您需要手动编辑
您的 watchApp info.plist

57
00:03:33,514 --> 00:03:37,150
而不是依赖 iOS 的 Signing capabilities

58
00:03:38,619 --> 00:03:40,320
让我们看一下代码

59
00:03:40,354 --> 00:03:43,590
假设您已经连接
您找到了 GATT 服务

60
00:03:43,624 --> 00:03:46,593
并且刚刚发现了一个 GATT 特性

61
00:03:46,627 --> 00:03:50,664
您会得到
didDiscoverCharacteristicFor 回调

62
00:03:53,200 --> 00:03:54,535
在回调内部

63
00:03:54,568 --> 00:03:57,871
您可以在每次值变化时
决定接收通知

64
00:03:58,972 --> 00:04:02,009
这与 watchOS 8 中的 API 相同

65
00:04:02,042 --> 00:04:05,979
不同的是 当您的 App 在后台时
它也可以工作

66
00:04:08,282 --> 00:04:11,485
然后用授权的方法
处理 didUpdateValueFor

67
00:04:11,518 --> 00:04:15,322
特性值的变化

68
00:04:17,691 --> 00:04:22,563
一旦特性发生变化
您可以在此处发布本地通知

69
00:04:22,596 --> 00:04:26,433
发送网络请求
或任何对您的 App 有意义的东西

70
00:04:27,267 --> 00:04:31,438
此方法将同时在前台和背景中调用

71
00:04:31,471 --> 00:04:35,309
所以要确保您在两种情况下
执行正确的行动

72
00:04:37,044 --> 00:04:40,848
现在让我们谈一谈
一些您需要考虑的情况

73
00:04:42,216 --> 00:04:45,285
首先是蓝牙重新连接

74
00:04:45,319 --> 00:04:48,689
如果您的设备超出范围
蓝牙连接将在

75
00:04:48,722 --> 00:04:50,557
超时后断开

76
00:04:51,725 --> 00:04:55,696
如果发生这种情况
您的 App 将短暂进入后台运行

77
00:04:55,729 --> 00:05:00,367
这种情况叫做 connectPeripheral
为的是尝试重新连接

78
00:05:00,400 --> 00:05:03,871
这与 iOS 上发生的情况相同

79
00:05:03,904 --> 00:05:08,075
一旦设备再次进入范围内
核心蓝牙将重新连接

80
00:05:09,710 --> 00:05:12,246
现在 让我们谈谈一些限制

81
00:05:12,279 --> 00:05:15,449
这些限制对于 Apple Watch 用户
保持最佳电池寿命来说

82
00:05:15,482 --> 00:05:17,017
十分重要

83
00:05:19,987 --> 00:05:23,423
如果您的设备位于蓝牙范围的边缘

84
00:05:23,457 --> 00:05:27,461
并在后台 BLE 连接中反复断开

85
00:05:27,494 --> 00:05:30,097
重新连接范围将被缩小

86
00:05:30,130 --> 00:05:34,201
这意味着只有在设备靠近
Apple Watch 时才会重新连接

87
00:05:35,869 --> 00:05:39,373
这些限制在
24 小时的滚动窗口中有效

88
00:05:39,406 --> 00:05:42,476
当用户与您的 App 互动时
就会重置

89
00:05:43,544 --> 00:05:47,381
另一个限制是后台运行时

90
00:05:47,414 --> 00:05:48,682
发出警报的次数

91
00:05:50,250 --> 00:05:53,053
当某些对客户来说
非常重要的事情发生时

92
00:05:53,086 --> 00:05:56,123
监控特性才会改变

93
00:05:56,156 --> 00:05:59,526
如果您需要定期从您的设备中
获取数据

94
00:05:59,560 --> 00:06:01,295
就必须进行后台 App 刷新

95
00:06:03,564 --> 00:06:07,501
当您的 App 即将超过限制时

96
00:06:07,534 --> 00:06:12,806
通知 LeGattNearBackgroundNotificationLimit
就会被发布

97
00:06:12,840 --> 00:06:16,109
监视该错误并认识到用户
未与 watchOS  App 交互

98
00:06:16,143 --> 00:06:18,912
对您的 App 来说
是一个很好的做法

99
00:06:20,147 --> 00:06:23,650
如果这个警报很重要
那么现在就是

100
00:06:23,684 --> 00:06:25,986
寻找另一种与您的用户
相互沟通的最佳时间

101
00:06:26,019 --> 00:06:28,856
比如通过网络请求

102
00:06:28,889 --> 00:06:31,425
或 UI 在您的蓝牙外围设备上
作出更改

103
00:06:34,728 --> 00:06:38,966
超出限制后 通知

104
00:06:38,999 --> 00:06:43,837
LeGattExceededBackgroundNotificationLimit
将被发布

105
00:06:45,005 --> 00:06:49,510
此时 您的 App
将不再接收后台运行

106
00:06:49,543 --> 00:06:52,546
并将恢复到没有后台连接的

107
00:06:52,579 --> 00:06:54,815
watchOS 8 行为

108
00:06:54,848 --> 00:06:56,617
并且只有后台 App 刷新

109
00:06:57,951 --> 00:07:00,053
您可以在 GATT Notification Updat 的

110
00:07:00,087 --> 00:07:03,757
错误字段检索这两个通知

111
00:07:03,790 --> 00:07:06,026
对于后台 BLE 连接

112
00:07:06,059 --> 00:07:07,761
我们建议利用这个错误

113
00:07:07,794 --> 00:07:09,229
来代替用倒计时的方法

114
00:07:09,263 --> 00:07:10,597
了解何时到达限制

115
00:07:11,632 --> 00:07:16,737
对于 watchOS 9
后台运行时限制设置为 5

116
00:07:16,770 --> 00:07:21,175
每当用户与您的 App 交互时
这两个限制就会被重置

117
00:07:21,208 --> 00:07:24,778
它们也会在达到限制的 24 小时后重置

118
00:07:24,811 --> 00:07:28,715
以防没有用户与您的 App 交互

119
00:07:28,749 --> 00:07:33,820
注意 这些限制仅适用于
蓝牙后台 LE 连接

120
00:07:33,854 --> 00:07:37,090
如果复杂功能位于活跃的表盘上
后台的 App

121
00:07:37,124 --> 00:07:40,327
将忽略这些限制 继续刷新

122
00:07:41,595 --> 00:07:45,699
您得到的处理每个事件的时间非常短

123
00:07:45,732 --> 00:07:49,269
时间可能不够做极其复杂的处理

124
00:07:49,303 --> 00:07:51,939
但足以提醒用户
一些重要的事情正在发生

125
00:07:52,873 --> 00:07:55,843
最后 收听后台的适时提醒

126
00:07:55,876 --> 00:07:59,079
需要 Apple Watch Series 6 或更高版本

127
00:07:59,112 --> 00:08:03,250
收取提醒并不是您可以在后台做的
唯一的事情

128
00:08:03,283 --> 00:08:07,487
在 watchOS 9 中 当您的 App
在后台运行时 您可以发现外围设备

129
00:08:09,823 --> 00:08:13,660
比方说 我有蓝牙医疗设备

130
00:08:13,694 --> 00:08:16,930
和一个可以检测任何适时提醒的
watchOS  App

131
00:08:17,698 --> 00:08:21,268
为了省电
外围设备在检测到严重情况之前

132
00:08:21,301 --> 00:08:23,103
不会显示

133
00:08:24,705 --> 00:08:29,243
因此 这个设备和 Apple Watch 之间
没有任何联系

134
00:08:30,077 --> 00:08:34,948
在这里 watchOS App 将从医疗设备

135
00:08:34,982 --> 00:08:36,183
扫描唯一的 Service UUID

136
00:08:37,451 --> 00:08:41,388
现在 当医疗设备检测到
情况严重时

137
00:08:41,421 --> 00:08:43,457
它就开始公布

138
00:08:43,490 --> 00:08:47,828
Apple Watch 发现了这个外围设备
并在后台启动 App

139
00:08:49,363 --> 00:08:52,065
然后 App 就会提示用户检测的条件

140
00:08:54,701 --> 00:08:56,003
这就是它的工作原理

141
00:08:56,937 --> 00:09:00,374
Watch App 会启动对外围设备的扫描

142
00:09:00,407 --> 00:09:03,043
核心蓝牙将继续在后台扫描

143
00:09:05,579 --> 00:09:08,515
一旦外围设备被检测到

144
00:09:08,549 --> 00:09:12,319
App 就会在后台运行 并发起连接

145
00:09:15,088 --> 00:09:18,692
我们深入研究一下
实现这一目标的代码

146
00:09:18,725 --> 00:09:21,662
API 没有从 watchOS 8 开始改变

147
00:09:21,695 --> 00:09:25,299
但是这种扫描方法将得到推崇
甚至 App 在后台也是如此

148
00:09:26,533 --> 00:09:28,969
使用您想关注的 UUID 服务

149
00:09:29,002 --> 00:09:32,306
调用 scanForPeripherals

150
00:09:32,339 --> 00:09:36,009
当您的 App 位于前台时
您可以在您的 App 中执行此操作

151
00:09:36,043 --> 00:09:38,779
并且当 App 转到后台运行时
还将继续

152
00:09:38,812 --> 00:09:42,649
请注意 如果您要求选择
allowDuplicatesKey

153
00:09:42,683 --> 00:09:45,419
它只适用于App 在前台的时候

154
00:09:46,253 --> 00:09:47,621
现在 我们来谈谈一些限制

155
00:09:48,622 --> 00:09:51,358
您的 App 在 App 启动之间

156
00:09:51,391 --> 00:09:54,261
获得的后台运行次数是有限制的

157
00:09:54,294 --> 00:09:55,495
这种限制在

158
00:09:55,529 --> 00:09:57,598
GATT 特性发生变化时
与我们之前看到的后台运行

159
00:09:57,631 --> 00:10:00,367
结合在了一起

160
00:10:00,400 --> 00:10:02,970
此外 在后台扫描外围设备

161
00:10:03,003 --> 00:10:05,372
需要 Apple Watch Series 6 或更高版本

162
00:10:06,974 --> 00:10:10,177
总之 Watch 在后台扫描的时候

163
00:10:10,210 --> 00:10:14,715
我们只能扫描到有限数量的
Bluetooth service UUID

164
00:10:15,716 --> 00:10:19,052
现在我们谈谈如何
充分利用这些新功能

165
00:10:19,086 --> 00:10:20,821
来设计您的配件

166
00:10:23,557 --> 00:10:25,259
在设置您的蓝牙遥控配件时

167
00:10:25,292 --> 00:10:27,060
您需要考虑电量平衡的问题

168
00:10:30,230 --> 00:10:33,700
如果电量损耗受到了影响
您应该选择拓扑

169
00:10:33,734 --> 00:10:35,969
让您的设备进入深度睡眠

170
00:10:36,003 --> 00:10:38,138
并且只有在收到相关信息时

171
00:10:38,172 --> 00:10:39,873
才会发出提醒信号

172
00:10:39,907 --> 00:10:44,611
平衡就是在每次发出适时提醒时

173
00:10:44,645 --> 00:10:48,215
您的蓝牙发现时间会延长
但您能节省更多的电量

174
00:10:49,316 --> 00:10:53,020
这个是在医疗设备中提供拓扑的案例

175
00:10:54,855 --> 00:10:56,256
另一方面

176
00:10:56,290 --> 00:10:58,025
如果您需要减少

177
00:10:58,058 --> 00:10:59,259
适时提醒的延迟时间

178
00:10:59,293 --> 00:11:01,295
而电量尚且充足的话

179
00:11:01,328 --> 00:11:03,096
您可以考虑使用

180
00:11:03,130 --> 00:11:04,965
后台 LE 连接

181
00:11:04,998 --> 00:11:05,999
根据 GATT 的指示

182
00:11:06,033 --> 00:11:07,301
发送您的提醒

183
00:11:07,868 --> 00:11:11,305
注意 每个 App 的两个蓝牙连接
是有限制的

184
00:11:12,806 --> 00:11:16,243
这是我们在示例中看到的
用于温度传感器的拓扑

185
00:11:17,611 --> 00:11:22,816
为了让您的用户拥有
适时提醒的最佳体验

186
00:11:22,850 --> 00:11:27,287
考虑在您的外围设备上
尽可能多的添加配置和智能

187
00:11:27,321 --> 00:11:30,791
通过对时间不是很敏感的通讯系统
过滤掉对时间敏感的数据

188
00:11:32,159 --> 00:11:36,930
回到我们的温度示例
您只可以发送相关的事件

189
00:11:36,964 --> 00:11:40,667
或什么时候温度会产生变化的消息
而不是传送输每一个温度数据

190
00:11:41,568 --> 00:11:44,204
这种方法的好处是 如果您合理地

191
00:11:44,238 --> 00:11:47,140
将对时间敏感的数据
从周期性数据分离出来

192
00:11:47,174 --> 00:11:49,943
您的外围设备和 Apple Watch 用户

193
00:11:49,977 --> 00:11:53,847
将节省电量
从而获得整体更好的体验

194
00:11:56,016 --> 00:11:59,152
当您的设备断开连接时
我们推荐发布

195
00:11:59,186 --> 00:12:00,954
重新建立连接的通知

196
00:12:01,822 --> 00:12:04,057
通知间隔取决于

197
00:12:04,091 --> 00:12:06,693
您的外围蓝牙设备的请求

198
00:12:06,727 --> 00:12:12,332
例如重新连接需要多快
电池寿命等

199
00:12:12,366 --> 00:12:16,837
在附件指南中 我们提供了几个
您可以使用的不同的值

200
00:12:17,738 --> 00:12:20,974
例如 如果您的设备电池受限

201
00:12:21,008 --> 00:12:25,846
您可以使用一个 1022.5 毫秒的值

202
00:12:27,114 --> 00:12:30,717
另一个例子
如果您以 20 毫秒的速率发送通知

203
00:12:30,751 --> 00:12:34,788
它就允许在理想的条件下
在 1 秒内完成检测

204
00:12:36,156 --> 00:12:40,127
您只有在关键事件发生时

205
00:12:40,160 --> 00:12:42,996
才能使用这么快的通知速率

206
00:12:44,965 --> 00:12:48,235
现在让我们谈谈连接间隔

207
00:12:48,268 --> 00:12:52,973
如果您选择
您的设备在后台保持连接的拓

208
00:12:53,006 --> 00:12:55,409
我们强烈建议使用较长的连接间隔

209
00:12:55,442 --> 00:12:58,645
例如 至少 150 毫秒

210
00:12:58,679 --> 00:13:00,981
这会让您的外围设备节省电量

211
00:13:01,014 --> 00:13:03,717
在 Apple Watch 上
提供最佳的用户体验

212
00:13:04,751 --> 00:13:09,656
蓝牙 5.3 即将根据连接等级
登陆 Apple Watch

213
00:13:09,690 --> 00:13:12,259
这在蓝牙外围设备空闲时

214
00:13:12,292 --> 00:13:14,428
允许增加连接间隔

215
00:13:14,461 --> 00:13:17,064
并在您需要较短的延迟时

216
00:13:17,097 --> 00:13:18,532
迅速转换到更小的连接间隔

217
00:13:19,900 --> 00:13:24,071
这是一个显示平台之间差异的表格

218
00:13:24,104 --> 00:13:28,876
这些是目前支持低功耗蓝牙的配置

219
00:13:28,909 --> 00:13:32,946
去年我们把watchOS 后台 App 刷新
作为一种新的

220
00:13:32,980 --> 00:13:35,449
后台执行模式进行了介绍

221
00:13:35,482 --> 00:13:38,685
今年 如果您拥有 Series 6
及更高版本

222
00:13:38,719 --> 00:13:42,422
我们就会如我们今天描述的那样
利用即时警报改进后台的执行

223
00:13:44,057 --> 00:13:45,359
感谢收看

224
00:13:46,693 --> 00:13:48,662
[古怪的音乐]

