1
00:00:00,334 --> 00:00:07,341
♪ ♪

2
00:00:09,843 --> 00:00:12,946
Felix Acero: 大家好 我叫 Felix Acero
是一名软件工程师

3
00:00:12,980 --> 00:00:15,916
供职于安全工程与架构团队

4
00:00:15,949 --> 00:00:17,684
在本视频中 我将向您展示如何使用

5
00:00:17,718 --> 00:00:19,786
LocalAuthentication 框架

6
00:00:19,820 --> 00:00:23,423
来改进 App 身份验证和授权流

7
00:00:23,457 --> 00:00:25,659
我们将首先了解身份验证（Authentication）

8
00:00:25,692 --> 00:00:28,262
和授权（Authorization）的一般概念

9
00:00:28,295 --> 00:00:31,164
以及它们如何应用于您的 App

10
00:00:31,198 --> 00:00:34,902
然后我们将回顾
现有的 LocalAuthentication API

11
00:00:34,935 --> 00:00:37,004
尤其是 LAContext

12
00:00:37,037 --> 00:00:41,108
如何帮助您实现广泛的授权方案

13
00:00:41,141 --> 00:00:43,110
最后我们将看到 今年添加到

14
00:00:43,143 --> 00:00:45,312
LocalAuthentication 的新 API

15
00:00:45,345 --> 00:00:48,348
如何帮助您进一步简化授权代码

16
00:00:50,017 --> 00:00:53,954
那么我们先来说说身份验证和授权

17
00:00:53,987 --> 00:00:56,857
身份验证和授权是不同

18
00:00:56,890 --> 00:00:59,326
但密切相关的安全概念

19
00:00:59,359 --> 00:01:04,264
一方面 身份验证
是验证用户身份的行为

20
00:01:04,298 --> 00:01:08,535
另一方面
授权是验证是否允许给定用户

21
00:01:08,569 --> 00:01:13,040
对具体资源执行特定操作的行为

22
00:01:13,073 --> 00:01:16,410
综上所述 我们可以看到
由于我们首先需要验证

23
00:01:16,443 --> 00:01:19,413
用户是否就是
他们所说的那个人 然后才能

24
00:01:19,446 --> 00:01:22,149
评估他们可以使用哪些资源和操作

25
00:01:22,182 --> 00:01:26,587
因此我们可以说
身份验证实际上启用了授权

26
00:01:26,620 --> 00:01:28,322
为了帮助说明这些概念

27
00:01:28,355 --> 00:01:31,124
我们来看一个具体示例
其中涉及由您的 App

28
00:01:31,158 --> 00:01:34,361
管理的公共安全资源
例如 Secure Enclave 密钥

29
00:01:35,562 --> 00:01:38,498
Secure Enclave 密钥
是一种特殊类型的非对称密钥

30
00:01:38,532 --> 00:01:41,268
它绑定到特定设备 并受到

31
00:01:41,301 --> 00:01:46,173
与主处理器隔离的
基于硬件的密钥管理器的保护

32
00:01:46,206 --> 00:01:49,042
这些密钥的特别之处在于 当您在
Secure Enclave 中存储密钥时

33
00:01:49,076 --> 00:01:51,578
您实际上从未处理过该密钥

34
00:01:51,612 --> 00:01:56,350
而是指示 Secure Enclave
使用它执行操作

35
00:01:56,383 --> 00:01:59,486
Secure Enclave 密钥
可以与访问控制列表

36
00:01:59,520 --> 00:02:02,322
或 ACL 相关联

37
00:02:02,356 --> 00:02:05,859
访问控制列表指定了
执行特定操作所需满足的要求

38
00:02:05,893 --> 00:02:10,130
如对 blob 进行签名或解密

39
00:02:11,532 --> 00:02:14,535
它们可以指定给定项何时可用

40
00:02:14,568 --> 00:02:18,539
例如在设备解锁后 以及允许执行

41
00:02:18,572 --> 00:02:21,842
某些操作所需的身份验证要求

42
00:02:21,875 --> 00:02:24,444
在本例中 假设您的 App

43
00:02:24,478 --> 00:02:28,282
希望通过生物认证
来保护其密钥的签名

44
00:02:28,315 --> 00:02:31,185
和解密操作 同时确保密钥

45
00:02:31,218 --> 00:02:33,620
仅在设备解锁后可用

46
00:02:34,454 --> 00:02:37,224
现在让我们看看涉及此密钥的

47
00:02:37,257 --> 00:02:39,560
签名操作的授权流是什么样子的

48
00:02:40,661 --> 00:02:44,731
首先 App 发出
使用密钥对 blob 进行签名的请求

49
00:02:45,899 --> 00:02:49,503
然后在验证 App
是否可以访问密钥后

50
00:02:49,536 --> 00:02:52,773
系统继续识别签名操作的

51
00:02:52,806 --> 00:02:54,408
授权要求

52
00:02:54,441 --> 00:02:58,312
在这种情况下
签名操作需要当前注册用户

53
00:02:58,345 --> 00:03:01,815
进行成功的生物认证

54
00:03:01,849 --> 00:03:03,584
然后系统将通过标准 UI

55
00:03:03,617 --> 00:03:07,855
引导用户完成生物认证

56
00:03:07,888 --> 00:03:09,690
身份验证成功后

57
00:03:09,723 --> 00:03:10,858
系统将验证

58
00:03:10,891 --> 00:03:15,195
是否已满足所有剩余的授权要求

59
00:03:15,229 --> 00:03:18,265
然后最终执行签名操作

60
00:03:18,298 --> 00:03:20,834
并将签名的 blob 返回给您的 App

61
00:03:21,969 --> 00:03:24,171
我们来分解一下
这个流程中涉及的主要组件

62
00:03:24,204 --> 00:03:26,840
看看它们如何适应我们最初的定义

63
00:03:26,874 --> 00:03:30,811
首先 我们有一个资源
Secure Enclave 密钥

64
00:03:30,844 --> 00:03:35,382
其次 我们有一个
可以用密钥执行的操作

65
00:03:35,415 --> 00:03:38,685
第三 我们有一组要求 其中包括

66
00:03:38,719 --> 00:03:41,388
指定允许执行操作的人员

67
00:03:41,421 --> 00:03:43,690
以及应用于验证其身份的

68
00:03:43,724 --> 00:03:46,426
身份验证方法

69
00:03:46,460 --> 00:03:50,764
将此示例的参数插入到我们的定义中
我们可以看到

70
00:03:50,797 --> 00:03:54,168
对于身份验证来说
是否是正确用户的问题

71
00:03:54,201 --> 00:03:57,571
是通过生物认证来回答的

72
00:03:57,604 --> 00:04:01,241
而对于授权 是否允许用户

73
00:04:01,275 --> 00:04:04,611
使用私钥进行签名操作的问题

74
00:04:04,645 --> 00:04:09,750
是通过验证访问控制列表中
指定的要求来回答的

75
00:04:09,783 --> 00:04:12,653
现在我们已经在较高的层级上
了解了它是如何工作的

76
00:04:12,686 --> 00:04:15,722
我们可以看看如何使用当前的

77
00:04:15,756 --> 00:04:18,725
LocalAuthentication API
来实现这样的流程

78
00:04:18,759 --> 00:04:22,429
让我们首先快速回顾一下
LAContext 提供的功能

79
00:04:22,462 --> 00:04:25,699
它是框架的核心组件之一

80
00:04:25,732 --> 00:04:29,303
LAContext 可用于评估用户的身份

81
00:04:29,336 --> 00:04:33,907
它在需要生物特征或密码验证时
处理用户交互

82
00:04:33,941 --> 00:04:36,143
它还与 Secure Enclave 连接

83
00:04:36,176 --> 00:04:39,346
以实现对生物特征数据的安全管理

84
00:04:39,379 --> 00:04:41,648
从这个角度来看 LAContext 可用于

85
00:04:41,682 --> 00:04:44,785
支持您的身份验证用例

86
00:04:44,818 --> 00:04:48,355
LAContext 也可以与其他框架

87
00:04:48,388 --> 00:04:50,924
结合使用以支持授权流

88
00:04:50,958 --> 00:04:54,094
例如 您可以用它
来评估 AccessControl 列表

89
00:04:54,127 --> 00:04:56,630
就像我们在前面的例子中看到的那样

90
00:04:56,663 --> 00:04:58,732
我们来仔细看看

91
00:04:58,765 --> 00:05:02,035
我们需要做的第一件事是
访问与我们的私钥

92
00:05:02,069 --> 00:05:05,038
相关联的 ACL

93
00:05:05,072 --> 00:05:08,542
我们可以在 Security 框架提供的
SecItemCopyMatching API 的

94
00:05:08,575 --> 00:05:10,644
帮助下做到这一点

95
00:05:10,677 --> 00:05:14,748
确保在查询中
提供 ReturnAttributes 密钥

96
00:05:15,782 --> 00:05:18,619
一旦我们获得
对访问控制列表的访问权

97
00:05:18,652 --> 00:05:21,455
我们就可以直接使用 LAContext

98
00:05:21,488 --> 00:05:24,958
和 evaluateAccessControl API
对其进行评估

99
00:05:24,992 --> 00:05:28,128
这种方法给您带来的最大好处是
它可以让您在 App 中

100
00:05:28,161 --> 00:05:30,664
决定提示用户进行此授权的

101
00:05:30,697 --> 00:05:33,700
正确时机和正确位置

102
00:05:33,734 --> 00:05:36,370
在这种情况下
由于访问 AccessControl 列表

103
00:05:36,403 --> 00:05:39,306
要求对签名操作进行生物认证

104
00:05:39,339 --> 00:05:43,143
LAContext 将显示
熟悉的 FaceID 或 TouchID UI

105
00:05:44,845 --> 00:05:48,582
一旦 ACL 在我们的
LAContext 中得到授权

106
00:05:48,615 --> 00:05:50,918
我们就可以将其作为查询的一部分

107
00:05:50,951 --> 00:05:53,754
来获取对密钥的引用

108
00:05:53,787 --> 00:05:57,024
我们通过将 LAContext 附加到
UseAuthenticationContext 密钥下的

109
00:05:57,057 --> 00:05:59,293
SecItem 查询来实现这一点

110
00:06:01,261 --> 00:06:04,131
通过将 LAContext 绑定到私钥引用

111
00:06:04,164 --> 00:06:06,600
我们可以确保执行签名操作

112
00:06:06,633 --> 00:06:08,902
不会触发另一个身份验证

113
00:06:08,936 --> 00:06:13,473
同时允许操作在没有
不必要提示的情况下继续进行

114
00:06:13,507 --> 00:06:16,443
这些绑定还意味着
在 LAContext 失效之前

115
00:06:16,476 --> 00:06:20,480
之后的签名不需要额外的用户交互

116
00:06:22,649 --> 00:06:25,252
LAContext 提供了很大的灵活性

117
00:06:25,285 --> 00:06:27,621
它允许您控制授权流中

118
00:06:27,654 --> 00:06:30,157
涉及的每个步骤和参数

119
00:06:30,190 --> 00:06:33,827
它可以与其他框架
如 Security 框架 结合使用

120
00:06:33,861 --> 00:06:37,831
这反过来又解锁了广泛的用例

121
00:06:37,865 --> 00:06:42,169
然而这种多功能性
是以更高的代码复杂性为代价的

122
00:06:42,202 --> 00:06:47,040
需要您仔细编排几个框架提供的 API

123
00:06:47,074 --> 00:06:48,242
根据您的使用情况

124
00:06:48,275 --> 00:06:50,410
LAContext 可能是适合您的工具

125
00:06:50,444 --> 00:06:53,046
尤其是当您的 App 的主要价值

126
00:06:53,080 --> 00:06:56,250
主张要求对密钥 秘密

127
00:06:56,283 --> 00:06:58,652
上下文和访问控制列表
进行底层访问时

128
00:06:58,685 --> 00:07:03,824
然而 如果您的 App 需要的
只是授权访问内容或敏感资源的方式

129
00:07:03,857 --> 00:07:07,461
那么您可能想用一个更简单的 API

130
00:07:07,494 --> 00:07:09,363
来权衡这种灵活性

131
00:07:09,396 --> 00:07:13,634
这就把我们带到了最后一个话题
简化您的 App

132
00:07:13,667 --> 00:07:18,839
作为 iOS 16 和 macOS 13 的新功能
LocalAuthentication 引入了

133
00:07:18,872 --> 00:07:22,643
更高层级的 以授权为中心的 API

134
00:07:22,676 --> 00:07:26,747
新的 API 建立在
LocalAuthentication 中的现有概念

135
00:07:26,780 --> 00:07:31,118
例如 LAContext 之上
旨在简化常见

136
00:07:31,151 --> 00:07:35,289
授权流的实施
让您可以将所有精力集中在

137
00:07:35,322 --> 00:07:38,725
您的 App 的核心价值主张上

138
00:07:38,759 --> 00:07:42,896
新 API 引入的最重要的
抽象类是 LARight

139
00:07:44,431 --> 00:07:46,333
您可以给 LARight 提供的
最简单用例

140
00:07:46,366 --> 00:07:51,405
是帮助您对 App 定义的
资源授权操作

141
00:07:51,438 --> 00:07:54,408
例如 您可以使用权限来帮助您

142
00:07:54,441 --> 00:07:57,010
访问 App 的用户配置文件部分

143
00:07:57,044 --> 00:08:01,114
首先 需要您的用户
进行成功的生物认证

144
00:08:02,950 --> 00:08:06,854
默认情况下 权限受到
一组身份验证要求的保护

145
00:08:06,887 --> 00:08:10,257
允许用户使用 Touch ID

146
00:08:10,290 --> 00:08:13,427
FaceID Apple Watch
或它们的设备密码进行身份验证

147
00:08:13,460 --> 00:08:15,295
这取决于它们使用的设备

148
00:08:16,997 --> 00:08:19,099
您还可以选择将您的权限

149
00:08:19,132 --> 00:08:20,868
与更细粒度的需求相关联

150
00:08:20,901 --> 00:08:24,571
这允许您进一步限制身份验证的方法

151
00:08:24,605 --> 00:08:27,608
让我们看看如何
在代码中使用 LARights

152
00:08:29,109 --> 00:08:32,546
我们需要做的第一件事是
实例化我们的权利

153
00:08:32,579 --> 00:08:35,782
我们通过指定它的需求来做到这一点

154
00:08:35,816 --> 00:08:39,253
在这种情况下 我们的登录权限
将要求用户

155
00:08:39,286 --> 00:08:43,457
使用生物特征
或提供设备密码进行身份验证

156
00:08:43,490 --> 00:08:48,328
然后我们继续验证当前用户
是否可以获得登录权限

157
00:08:48,362 --> 00:08:50,430
我们使用这些信息来确定

158
00:08:50,464 --> 00:08:52,866
我们是否可以继续登录操作

159
00:08:52,900 --> 00:08:57,971
或者我们是否需要将用户
重定向到我们 App 的公共部分

160
00:08:58,005 --> 00:09:01,408
最后 我们可以继续实际的授权操作

161
00:09:01,441 --> 00:09:04,745
提供一个本地化的
用户可以在授权 UI 中

162
00:09:04,778 --> 00:09:06,380
看到的原因

163
00:09:08,081 --> 00:09:09,850
当以这种方式授权权利时

164
00:09:09,883 --> 00:09:12,986
将显示一个全新的 系统驱动的 UI

165
00:09:13,020 --> 00:09:15,722
UI 在 App 窗口中呈现

166
00:09:15,756 --> 00:09:17,991
并为用户提供相关信息

167
00:09:18,025 --> 00:09:21,461
帮助他们了解操作的来源和目的

168
00:09:21,495 --> 00:09:25,165
我们相信
新的外观将允许您精心设计

169
00:09:25,199 --> 00:09:27,768
与 App 无缝集成的授权流

170
00:09:27,801 --> 00:09:31,471
并为用户提供更多上下文和信息

171
00:09:32,573 --> 00:09:35,242
现在我们已经了解了
如何创建和授权一个权利

172
00:09:35,275 --> 00:09:38,445
让我们进一步研究它的生命周期

173
00:09:38,478 --> 00:09:42,249
权利以未知状态开始其生命周期

174
00:09:42,282 --> 00:09:45,018
一旦您的 App
发出 authorize() 请求

175
00:09:45,052 --> 00:09:48,255
权限的状态就会更改为授权

176
00:09:48,288 --> 00:09:51,658
此时用户将看到我们
在上一张幻灯片中

177
00:09:51,692 --> 00:09:53,393
看到的授权 UI

178
00:09:54,595 --> 00:09:57,364
根据操作的成功或失败

179
00:09:57,397 --> 00:10:01,468
权限可以转换为授权或未授权状态

180
00:10:01,502 --> 00:10:05,305
这是您的 App 最重要的状态转换

181
00:10:05,339 --> 00:10:07,841
最后 权限也可以从授权状态

182
00:10:07,875 --> 00:10:09,910
转移到未授权状态

183
00:10:09,943 --> 00:10:12,279
当您的 App 在右边显式
发出取消授权请求时

184
00:10:12,312 --> 00:10:16,583
或者当右边的实例被释放时
就会发生这种情况

185
00:10:17,751 --> 00:10:20,187
请务必保留对您的权利的强引用

186
00:10:20,220 --> 00:10:22,723
以维护其授权状态

187
00:10:23,924 --> 00:10:27,194
取消权限授权后
您的 App 可以继续

188
00:10:27,227 --> 00:10:31,098
发出授权请求以重新开始该周期

189
00:10:31,131 --> 00:10:34,968
可以查询和观察之前的所有状态转换

190
00:10:35,002 --> 00:10:37,104
如果您有权访问 LARight 实例

191
00:10:37,137 --> 00:10:40,274
则可以直接查询其状态属性

192
00:10:40,307 --> 00:10:44,611
您还可以使用 KVO 或 Combine
来观察所有状态转换

193
00:10:44,645 --> 00:10:47,514
此外 如果您的 App
处理多个权限

194
00:10:47,548 --> 00:10:49,983
那么您可以通过侦听
didBecomeAuthorized

195
00:10:50,017 --> 00:10:52,119
和 didBecomeUnauthorized 通知

196
00:10:52,152 --> 00:10:54,755
从一个位置观察所有权限的状态

197
00:10:54,788 --> 00:10:57,357
这些通知会在检测到授权状态更改后

198
00:10:57,391 --> 00:11:00,294
发布到默认 NotificationCenter

199
00:11:01,728 --> 00:11:04,598
在继续之前 让我们回到我们的示例

200
00:11:04,631 --> 00:11:08,535
添加一个注销操作来取消登录权限

201
00:11:08,569 --> 00:11:11,705
通过这种操作
我们可以保证用户下次登录时

202
00:11:11,738 --> 00:11:13,974
需要新的授权

203
00:11:15,909 --> 00:11:19,346
到目前为止 我们已经了解了
如何使用正确的实例

204
00:11:19,379 --> 00:11:23,517
来授权对 App 定义的资源的操作

205
00:11:23,550 --> 00:11:26,687
我们还了解了这些权限的
生命周期和状态

206
00:11:26,720 --> 00:11:28,789
最终是如何与运行时联系在一起的

207
00:11:28,822 --> 00:11:31,725
这意味着在 App 的每个会话上

208
00:11:31,758 --> 00:11:35,963
您都需要正确地
实例化和配置这些权限

209
00:11:35,996 --> 00:11:38,265
那么让我们看看如何保持权限

210
00:11:38,298 --> 00:11:41,034
以及这为您的 App
带来了什么样的可能性

211
00:11:42,703 --> 00:11:46,073
LARights 可以在
权利存储的帮助下持久化

212
00:11:47,608 --> 00:11:51,245
持久化后 权限由唯一的
Secure Enclave 密钥支持

213
00:11:51,278 --> 00:11:54,014
该密钥受访问控制列表或 ACL 保护

214
00:11:54,047 --> 00:11:57,584
该列表或 ACL
与权限的授权要求相匹配

215
00:11:57,618 --> 00:12:00,687
这种方法帮助我们确保授权需求

216
00:12:00,721 --> 00:12:03,757
在权利被持久化之后仍然是不可变的

217
00:12:05,125 --> 00:12:07,961
您还可以访问支持您权限的私钥

218
00:12:07,995 --> 00:12:11,331
并使用它执行受保护的加密操作

219
00:12:11,365 --> 00:12:15,602
如解密 签名和密钥交换

220
00:12:17,337 --> 00:12:19,773
相应的公钥也是可访问的

221
00:12:19,806 --> 00:12:21,642
可以用于执行

222
00:12:21,675 --> 00:12:25,779
加密和签名验证等操作

223
00:12:25,812 --> 00:12:30,350
因为这是一个公钥
所以您还可以导出与其关联的字节

224
00:12:31,885 --> 00:12:33,987
只有在成功授权权限后

225
00:12:34,021 --> 00:12:36,790
才允许私钥操作

226
00:12:36,823 --> 00:12:40,194
相比之下 总是允许公钥操作

227
00:12:42,129 --> 00:12:44,965
当坚持您的权利时
您也有机会存储一个

228
00:12:44,998 --> 00:12:48,368
单一的 不变的秘密

229
00:12:48,402 --> 00:12:51,605
该秘密还与符合您权限授权要求的

230
00:12:51,638 --> 00:12:54,408
访问控制列表相关联

231
00:12:54,441 --> 00:12:57,978
并且只有在权限授权后
才能访问该秘密

232
00:12:59,146 --> 00:13:01,982
总之 LAPersistedRights 是在

233
00:13:02,015 --> 00:13:03,917
权利存储的帮助下创建的

234
00:13:03,951 --> 00:13:05,619
它们只配置一次

235
00:13:05,652 --> 00:13:08,856
其授权要求是不变的

236
00:13:08,889 --> 00:13:10,791
因为它们是存储的 所以可以在

237
00:13:10,824 --> 00:13:13,260
App 的不同会话中使用

238
00:13:13,293 --> 00:13:15,963
在内部 它们绑定到特定设备

239
00:13:15,996 --> 00:13:18,665
并由唯一的
Secure Enclave 密钥支持

240
00:13:18,699 --> 00:13:21,668
该密钥可用于执行不同的加密操作

241
00:13:21,702 --> 00:13:25,305
具体取决于权限的授权状态

242
00:13:25,339 --> 00:13:28,775
最后 它们可以用来保护一个单一的
不可更改的秘密

243
00:13:28,809 --> 00:13:32,446
该秘密只有在授权后才可用

244
00:13:33,313 --> 00:13:36,817
现在我们已经了解了
PersistedRights 提供的一些功能

245
00:13:36,850 --> 00:13:38,519
让我们看看它们如何帮助我们实现

246
00:13:38,552 --> 00:13:41,255
我们在演示开始时讨论的场景

247
00:13:41,288 --> 00:13:43,891
我们希望在该场景中授权签名操作

248
00:13:44,691 --> 00:13:49,730
我们首先实例化一个常规权限
指定其授权要求

249
00:13:49,763 --> 00:13:52,900
在这种情况下 我们希望确保该权利

250
00:13:52,933 --> 00:13:56,003
仅授予在创建我们的权利时

251
00:13:56,036 --> 00:13:58,939
在设备中具有生物特征注册的用户

252
00:13:58,972 --> 00:14:01,742
因此我们使用
biometryCurrentSet 要求

253
00:14:03,177 --> 00:14:06,013
然后我们可以
在权利存储的帮助下持久化权限

254
00:14:06,046 --> 00:14:08,615
提供唯一标识符

255
00:14:08,649 --> 00:14:12,119
下次我们需要在 App 的
未来会话中获取权限时

256
00:14:12,152 --> 00:14:14,254
这个标识符将非常有用

257
00:14:15,622 --> 00:14:19,126
一旦权限被持久化
我们就可以立即访问它的公钥

258
00:14:19,159 --> 00:14:22,095
并开始用它执行不受保护的操作

259
00:14:22,129 --> 00:14:25,199
而不需要显式授权

260
00:14:25,232 --> 00:14:28,535
在这个例子中
我们只是导出它的公共字节

261
00:14:30,437 --> 00:14:33,540
稍后 当需要执行签名操作时

262
00:14:33,574 --> 00:14:35,642
我们可以使用在创建过程中

263
00:14:35,676 --> 00:14:39,813
提供的唯一标识符
从存储中检索我们的权利

264
00:14:39,847 --> 00:14:42,149
然后我们可以通过

265
00:14:42,182 --> 00:14:45,085
我们右边的授权操作
对当前用户进行授权

266
00:14:45,118 --> 00:14:48,388
此时 系统将引导用户
完成身份验证过程

267
00:14:48,422 --> 00:14:52,226
并验证是否满足所有授权要求

268
00:14:53,227 --> 00:14:55,996
在权限被授权后
我们可以使用它的私钥

269
00:14:56,029 --> 00:14:59,299
来执行受保护的加密操作

270
00:14:59,333 --> 00:15:02,236
在这种情况下 我们使用私钥

271
00:15:02,269 --> 00:15:05,172
对 App 后端服务器
发出的质询进行签名

272
00:15:06,106 --> 00:15:09,376
总结一下 我们讨论了身份验证

273
00:15:09,409 --> 00:15:13,013
和授权的通用概念之间存在的关系

274
00:15:13,046 --> 00:15:17,885
特别是身份验证如何启用授权

275
00:15:17,918 --> 00:15:20,988
我们讨论了
LAContext 提供的一些特性

276
00:15:21,021 --> 00:15:23,657
以及它如何与 Security 等框架结合

277
00:15:23,690 --> 00:15:27,561
以解锁非常强大和可扩展的授权流程

278
00:15:27,594 --> 00:15:30,697
最后 我们研究了新添加的 LARight

279
00:15:30,731 --> 00:15:32,332
如何帮助您简化代码

280
00:15:32,366 --> 00:15:35,302
以实现某些授权用例

281
00:15:35,335 --> 00:15:39,306
我们邀请您查看 App 中
LocalAuthentication 的现有用法

282
00:15:39,339 --> 00:15:42,843
并考虑我们今天讨论的某些功能

283
00:15:42,876 --> 00:15:44,578
是否可以帮助您简化代码

284
00:15:44,611 --> 00:15:48,215
同时仍然保护用户的隐私和安全

285
00:15:48,248 --> 00:15:49,249
谢谢

