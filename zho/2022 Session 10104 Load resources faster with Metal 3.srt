1
00:00:00,267 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:10,077
♪

3
00:00:10,077 --> 00:00:11,912
嗨 我是 Jaideep Joshi

4
00:00:11,912 --> 00:00:14,781
我是 Apple 的
一名 GPU 软件工程师

5
00:00:14,781 --> 00:00:16,517
在今天的讲座中 我将介绍

6
00:00:16,517 --> 00:00:19,253
Metal 3 中的一项新功能

7
00:00:19,253 --> 00:00:23,223
它将为您的游戏和 App
简化和优化资源加载

8
00:00:23,223 --> 00:00:24,458
我将首先向您展示

9
00:00:24,458 --> 00:00:26,426
快速资源加载功能可以如何

10
00:00:26,426 --> 00:00:30,230
适配于您 App 的资产加载管线

11
00:00:30,230 --> 00:00:33,700
它的几项核心功能
可以在 Apple 产品上

12
00:00:33,700 --> 00:00:36,236
充分利用新存储技术

13
00:00:36,236 --> 00:00:39,039
快速资源加载的一些高阶功能

14
00:00:39,039 --> 00:00:43,343
可以解决您的 App
可能遇到的有趣场景

15
00:00:43,343 --> 00:00:45,646
还有一些您应当了解的

16
00:00:45,646 --> 00:00:47,414
最佳实践的建议 它们会帮助您

17
00:00:47,414 --> 00:00:52,319
在 App 中有效地使用这些功能

18
00:00:52,319 --> 00:00:55,022
当您向 App
添加快速资源加载时

19
00:00:55,022 --> 00:00:58,392
Metal System Trace
和 GPU 调试器等工具

20
00:00:58,392 --> 00:01:02,896
可以帮助分析性能和
解决您可能遇到的问题

21
00:01:02,896 --> 00:01:05,232
最后 我将介绍一个

22
00:01:05,232 --> 00:01:09,636
展示快速资源加载实际运用的案例

23
00:01:09,636 --> 00:01:13,173
以下这些都是 Metal 3 的快速资源
加载功能可以为您做到的

24
00:01:15,175 --> 00:01:17,277
借助 Metal 3 的
快速资源加载功能

25
00:01:17,277 --> 00:01:20,547
您的游戏和 App
将以低延迟和高通量

26
00:01:20,547 --> 00:01:23,050
加载资产 这些是借助

27
00:01:23,050 --> 00:01:25,652
Apple 芯片统一内存架构

28
00:01:25,652 --> 00:01:30,357
以及 Apple 平台配备的
快速 SSD 存储来实现的

29
00:01:30,357 --> 00:01:31,658
您将了解到 用于流式传输和

30
00:01:31,658 --> 00:01:34,094
和减少加载时间的 以确保您的

31
00:01:34,094 --> 00:01:38,599
游戏资产按时准备就绪的
最好的方法

32
00:01:38,599 --> 00:01:41,001
减少加载时间的一个关键在于

33
00:01:41,001 --> 00:01:42,903
以尽可能小的粒度

34
00:01:42,903 --> 00:01:45,973
只加载您所需要的资源

35
00:01:45,973 --> 00:01:49,142
Metal 3 中的高通量
和低延迟

36
00:01:49,142 --> 00:01:52,012
让您的 App 可以
流式传输更高质量的资产

37
00:01:52,012 --> 00:01:56,283
包括纹理 音频和几何数据

38
00:01:56,283 --> 00:01:59,219
现在我将向您介绍一个游戏中

39
00:01:59,219 --> 00:02:01,622
资产加载的案例

40
00:02:01,622 --> 00:02:03,624
在游戏第一次启动

41
00:02:03,624 --> 00:02:07,361
或在新关卡开始时
通常会显示加载画面

42
00:02:07,361 --> 00:02:10,931
这样就可以将游戏的
资产加载到内存当中

43
00:02:10,931 --> 00:02:12,866
当玩家在关卡中移动时

44
00:02:12,866 --> 00:02:16,436
游戏会为场景加载更多资产

45
00:02:16,436 --> 00:02:19,940
缺点是玩家需要花费很长时间

46
00:02:19,940 --> 00:02:21,842
等待游戏向存储系统发起

47
00:02:21,842 --> 00:02:25,846
多个请求 来进行资产的预先加载

48
00:02:25,846 --> 00:02:29,850
而且 这些资产
还可能会占用大量内存

49
00:02:29,850 --> 00:02:34,221
有几种方法可以改善这种体验

50
00:02:34,221 --> 00:02:35,822
游戏可以通过

51
00:02:35,822 --> 00:02:37,691
在玩家离对象越来越近时

52
00:02:37,691 --> 00:02:40,427
对其进行动态流式传输
来改善这种状况

53
00:02:40,427 --> 00:02:44,131
这样一来 游戏只需要
加载它一开始需要的内容

54
00:02:44,131 --> 00:02:46,366
并在玩家在关卡中移动时

55
00:02:46,366 --> 00:02:49,369
逐渐流式传输其他资源

56
00:02:49,369 --> 00:02:53,340
比如说 游戏最初加载这块黑板时

57
00:02:53,340 --> 00:02:56,710
使用了较低分辨率
但当玩家走向它时

58
00:02:56,710 --> 00:03:00,314
游戏就加载了更高分辨率的版本

59
00:03:00,314 --> 00:03:03,050
这种方法减少了玩家在加载画面中

60
00:03:03,050 --> 00:03:05,219
等待的时间

61
00:03:05,219 --> 00:03:08,922
但是 玩家仍然有可能
看到分辨率较低的物体

62
00:03:08,922 --> 00:03:11,758
即使是在近距离场景中

63
00:03:11,758 --> 00:03:13,760
因为加载高分辨率版本

64
00:03:13,760 --> 00:03:16,797
所需要的时间太长

65
00:03:16,797 --> 00:03:19,900
解决这个问题的一种方法是
将每项资产以较小份额

66
00:03:19,900 --> 00:03:23,270
进行流式传输

67
00:03:23,270 --> 00:03:26,206
比如说 您的游戏可以只加载
场景的可见区域

68
00:03:26,206 --> 00:03:29,877
用稀疏的纹理流式传输图块

69
00:03:29,877 --> 00:03:32,279
而不是所有 mip 等级

70
00:03:32,279 --> 00:03:34,781
这大大减少了您的 App

71
00:03:34,781 --> 00:03:37,317
需要进行流式传输的数据量

72
00:03:37,317 --> 00:03:40,053
使用这种方法 加载请求变得更小

73
00:03:40,053 --> 00:03:41,955
但数量更多

74
00:03:41,955 --> 00:03:44,892
但没关系 因为现代存储硬件

75
00:03:44,892 --> 00:03:48,529
可以同时运行多个加载请求

76
00:03:48,529 --> 00:03:50,731
这意味着您可以在

77
00:03:50,731 --> 00:03:55,202
不损失可玩性的前提下
提高场景的分辨率和规模

78
00:03:55,202 --> 00:03:58,405
在发出大量小载入请求的同时

79
00:03:58,405 --> 00:04:02,075
您还可以设定载入请求的优先级

80
00:04:02,075 --> 00:04:06,380
确保高优先级的请求及时完成

81
00:04:06,380 --> 00:04:07,948
刚才我已经向您介绍了

82
00:04:07,948 --> 00:04:11,952
提高游戏视觉保真度
同时减少加载时间的方法

83
00:04:11,952 --> 00:04:15,022
现在我将向您展示
Metal 3 的快速资源加载功能

84
00:04:15,022 --> 00:04:16,523
如何帮助您做到这一点

85
00:04:16,523 --> 00:04:19,660
快速资源加载是一种

86
00:04:19,660 --> 00:04:22,296
从存储中加载资源的异步 API

87
00:04:22,296 --> 00:04:26,166
与现有的加载 API 不同
发起加载的线程

88
00:04:26,166 --> 00:04:29,503
不需要等待加载完成

89
00:04:29,503 --> 00:04:32,239
加载操作通过并行执行

90
00:04:32,239 --> 00:04:36,310
来更有效地利用加速存储的通量

91
00:04:36,310 --> 00:04:38,278
您可以批量进行加载操作

92
00:04:38,278 --> 00:04:42,049
进一步将资源加载的
额外开销降到最低限度

93
00:04:42,049 --> 00:04:43,984
最后 使用 Metal 3

94
00:04:43,984 --> 00:04:48,622
您可以优先处理
用于降低延迟的加载操作

95
00:04:48,622 --> 00:04:50,524
现在我将向您展示

96
00:04:50,524 --> 00:04:53,160
可以帮助您构建
资产加载管道的核心功能

97
00:04:53,160 --> 00:04:56,430
首先从加载资源的步骤开始

98
00:04:56,430 --> 00:04:59,099
加载资源分为三个步骤

99
00:04:59,099 --> 00:05:00,501
打开一个文件

100
00:05:00,501 --> 00:05:02,936
发出必要的加载命令

101
00:05:02,936 --> 00:05:07,040
然后将加载命令与渲染工作同步

102
00:05:07,040 --> 00:05:10,911
下面是具体方法 首先打开一个文件

103
00:05:10,911 --> 00:05:14,414
可以通过使用 Metal 设备
实例创建文件句柄

104
00:05:14,414 --> 00:05:16,817
来打开现有文件

105
00:05:16,817 --> 00:05:20,420
例如 这段代码
使用 Metal 设备实例

106
00:05:20,420 --> 00:05:21,822
通过调用它的

107
00:05:21,822 --> 00:05:28,562
新 makeIOHandle 方法
传入文件路径 URL 来创建文件柄

108
00:05:28,562 --> 00:05:30,297
一旦有了文件句柄

109
00:05:30,297 --> 00:05:33,934
您就可以使用它来发出加载命令

110
00:05:33,934 --> 00:05:36,470
在这个 App 的典型场景中

111
00:05:36,470 --> 00:05:40,274
它在执行加载操作
和编码 GPU 的工作

112
00:05:40,274 --> 00:05:43,577
使用现有的加载 API
App 必须等待加载工作完成

113
00:05:43,577 --> 00:05:46,680
才能对渲染工作进行编码

114
00:05:46,680 --> 00:05:48,382
Metal 3 让您的 App

115
00:05:48,382 --> 00:05:51,852
可以异步执行加载命令

116
00:05:51,852 --> 00:05:55,255
首先创建一个
Metal IO 命令队列

117
00:05:55,255 --> 00:05:58,792
然后使用该队列
创建 IO 命令缓冲

118
00:05:58,792 --> 00:06:02,529
并将加载命令编码到缓冲

119
00:06:02,529 --> 00:06:05,799
不过 由于命令缓冲在命令队列上

120
00:06:05,799 --> 00:06:09,002
异步执行 您的 App 无需等待

121
00:06:09,002 --> 00:06:12,206
加载操作完成

122
00:06:12,206 --> 00:06:14,174
实际上 不仅 IO 命令缓冲内

123
00:06:14,174 --> 00:06:17,010
所有命令并发执行

124
00:06:17,010 --> 00:06:20,180
IO 命令缓冲本身也并发执行

125
00:06:20,180 --> 00:06:22,616
并乱序完成

126
00:06:22,616 --> 00:06:26,086
这种并列执行模型通过

127
00:06:26,086 --> 00:06:30,324
最大化通量来
更好地利用加速存储硬件

128
00:06:30,324 --> 00:06:35,195
您可以将三种类型的
IO 命令编码到命令缓冲

129
00:06:35,195 --> 00:06:37,831
loadTexture
加载到 Metal 纹理上

130
00:06:37,831 --> 00:06:39,433
用于纹理的流式传输

131
00:06:39,433 --> 00:06:41,835
loadBuffer
加载到 Metal 缓冲上

132
00:06:41,835 --> 00:06:44,371
用于流式传输场景和几何数据

133
00:06:44,371 --> 00:06:49,476
还有 loadBytes
加载到 CPU 可访问的内存

134
00:06:49,476 --> 00:06:53,514
您可以从 IO 命令队列上
创建 IO 命令缓冲

135
00:06:53,514 --> 00:06:56,517
要创建队列 首先制作和配置

136
00:06:56,517 --> 00:06:59,419
一个 IO 命令队列描述符

137
00:06:59,419 --> 00:07:02,389
默认情况下 队列是并行的

138
00:07:02,389 --> 00:07:04,791
但您也可以将它们设置为
按顺序 完全不打乱地

139
00:07:04,791 --> 00:07:08,161
运行命令缓冲

140
00:07:08,161 --> 00:07:10,163
然后 请传递队列描述符

141
00:07:10,163 --> 00:07:16,370
到 Metal 设备实例的
makeIOCommandQueue 方法

142
00:07:16,370 --> 00:07:18,172
请调用命令队列的

143
00:07:18,172 --> 00:07:22,843
makeCommandBuffer 方法
来创建 IO 命令缓冲

144
00:07:22,843 --> 00:07:26,446
然后使用该命令缓冲对
加载纹理和缓存的

145
00:07:26,446 --> 00:07:29,116
加载命令进行编码

146
00:07:29,116 --> 00:07:32,085
Metal 的验证层将在运行时

147
00:07:32,085 --> 00:07:33,554
捕获编码错误

148
00:07:33,554 --> 00:07:36,823
加载命令使用之前创建的

149
00:07:36,823 --> 00:07:39,393
fileHandle 实例

150
00:07:39,393 --> 00:07:42,362
在您将加载命令添加到命令缓冲后

151
00:07:42,362 --> 00:07:44,665
请通过调用命令
缓冲的 commit 方法

152
00:07:44,665 --> 00:07:49,203
将它提交到队列中进行执行

153
00:07:49,203 --> 00:07:52,139
介绍完如何创建 IO 命令队列

154
00:07:52,139 --> 00:07:54,341
命令缓冲 发出加载命令

155
00:07:54,341 --> 00:07:57,144
并将它们提交到队列中之后
我想向您展示

156
00:07:57,144 --> 00:08:01,915
如何将加载工作
与其他 GPU 工作同步

157
00:08:01,915 --> 00:08:04,518
App 通常会在完成渲染资源的

158
00:08:04,518 --> 00:08:08,488
加载之后 启动此渲染工作

159
00:08:08,488 --> 00:08:11,358
但是使用快速资源加载的 App

160
00:08:11,358 --> 00:08:14,294
需要一种方法来将 IO 命令队列

161
00:08:14,294 --> 00:08:17,197
与渲染命令队列同步

162
00:08:17,197 --> 00:08:21,301
您可以通过 Metal 共享事件
让这些队列同步

163
00:08:21,301 --> 00:08:24,571
Metal 共享事件让您可以同步

164
00:08:24,571 --> 00:08:27,140
IO 队列中的命令缓冲区

165
00:08:27,140 --> 00:08:30,110
与渲染队列中的命令缓冲区

166
00:08:30,110 --> 00:08:33,046
您可以通过编码
waitEvent 命令

167
00:08:33,046 --> 00:08:35,782
告知命令缓冲区需等待共享事件

168
00:08:35,782 --> 00:08:38,285
同样地 您也可以通过
编码 signalEvent 命令

169
00:08:38,285 --> 00:08:42,456
告知命令缓冲区
发出共享事件信号

170
00:08:42,456 --> 00:08:44,791
Metal 确保所有命令缓冲内的

171
00:08:44,791 --> 00:08:46,927
IO 命令
在它发出共享事件信号

172
00:08:46,927 --> 00:08:50,130
之前都已经完成

173
00:08:50,130 --> 00:08:52,099
要使各个命令缓冲同步

174
00:08:52,099 --> 00:08:55,002
您首先需要
一个 Metal 共享事件

175
00:08:55,002 --> 00:08:57,838
您可以调用
waitForEvent 方法

176
00:08:57,838 --> 00:09:01,175
告知命令缓冲区需等待共享事件

177
00:09:01,175 --> 00:09:03,310
同样 您也可以通过调用
signalEvent 方法

178
00:09:03,310 --> 00:09:04,611
告知命令缓冲需发出

179
00:09:04,611 --> 00:09:07,681
共享事件信号

180
00:09:07,681 --> 00:09:08,949
您可以将类似的逻辑添加到

181
00:09:08,949 --> 00:09:11,018
相应的 GPU 命令缓冲区

182
00:09:11,018 --> 00:09:13,220
使它等待 IO 命令缓冲区

183
00:09:13,220 --> 00:09:15,489
发出相同共享事件的信号

184
00:09:15,489 --> 00:09:18,292
来回顾一下
这些是在 Metal App

185
00:09:18,292 --> 00:09:21,762
加载资源的核心功能和 API

186
00:09:21,762 --> 00:09:25,365
创建 Metal 文件句柄
来打开文件

187
00:09:25,365 --> 00:09:28,669
通过创建 IO 命令队列
和 IO 命令缓冲

188
00:09:28,669 --> 00:09:30,871
来发出加载命令

189
00:09:30,871 --> 00:09:33,607
接下来 将加载命令
编码到命令缓冲区

190
00:09:33,607 --> 00:09:36,109
在队列中执行

191
00:09:36,109 --> 00:09:38,912
最后
使用 Metal 共享事件的

192
00:09:38,912 --> 00:09:41,648
wait
和 signalEvent 命令

193
00:09:41,648 --> 00:09:43,984
来同步加载与渲染

194
00:09:43,984 --> 00:09:46,220
现在 我将介绍一些您可能会

195
00:09:46,220 --> 00:09:48,689
觉得有帮助的高阶功能

196
00:09:48,689 --> 00:09:50,090
一个典型的例子就是

197
00:09:50,090 --> 00:09:53,393
游戏无法将整个地图放进内存

198
00:09:53,393 --> 00:09:56,296
因此它将地图细分为区域

199
00:09:56,296 --> 00:09:58,432
随着玩家在地图上前进

200
00:09:58,432 --> 00:10:02,536
游戏开始预加载地图的部分区域

201
00:10:02,536 --> 00:10:05,172
根据玩家的方向 游戏判定

202
00:10:05,172 --> 00:10:07,975
最适合预加载的区域是西北区

203
00:10:07,975 --> 00:10:10,277
西区和西南区

204
00:10:10,277 --> 00:10:13,113
但是 一旦玩家移动到西区

205
00:10:13,113 --> 00:10:14,815
并开始转向南方

206
00:10:14,815 --> 00:10:18,752
那么预加载西北区就不再有用

207
00:10:18,752 --> 00:10:21,121
为了减少未来加载的延迟

208
00:10:21,121 --> 00:10:25,859
Metal 3 允许您
尝试取消加载操作

209
00:10:25,859 --> 00:10:29,696
让我们来看看如何在实践中进行操作

210
00:10:29,696 --> 00:10:31,765
当玩家处在中心区域时

211
00:10:31,765 --> 00:10:36,036
为三个区域编码
并提交 IO 命令缓冲

212
00:10:36,036 --> 00:10:38,105
之后 当玩家到达西区

213
00:10:38,105 --> 00:10:41,208
并开始往南移动时
使用 tryCancel 方法

214
00:10:41,208 --> 00:10:44,811
取消西北区的加载

215
00:10:44,811 --> 00:10:48,215
取消的粒度是命令缓冲区

216
00:10:48,215 --> 00:10:51,852
因此您可以在
执行过程中取消命令缓冲区

217
00:10:51,852 --> 00:10:53,987
如果之后您想知道

218
00:10:53,987 --> 00:10:56,390
该区域是否已完全加载

219
00:10:56,390 --> 00:11:00,928
您可以检查命令缓冲区的状态

220
00:11:00,928 --> 00:11:05,666
Metal 3 还可以让您
将 IO 工作优先处理

221
00:11:05,666 --> 00:11:08,502
设想一下 当玩家被传送到

222
00:11:08,502 --> 00:11:12,139
新的场景区域时
您的游戏开始流式传输

223
00:11:12,139 --> 00:11:14,641
大量的图形资产

224
00:11:14,641 --> 00:11:16,009
同时

225
00:11:16,009 --> 00:11:19,546
游戏需要播放传送音效

226
00:11:19,546 --> 00:11:23,183
快速资源加载功能
允许您加载 App 的所有资产

227
00:11:23,183 --> 00:11:25,519
包括音频数据

228
00:11:25,519 --> 00:11:28,222
要加载音频 您可以使用
前面谈到的 loadBytes 命令

229
00:11:28,222 --> 00:11:32,492
来加载到 App 分配的内存

230
00:11:32,492 --> 00:11:36,129
在这个例子中
纹理和音频 IO 命令缓冲

231
00:11:36,129 --> 00:11:40,667
在单个 IO 命令队列上并列执行

232
00:11:40,667 --> 00:11:43,103
这张简化图标展示了

233
00:11:43,103 --> 00:11:45,005
存储层的请求

234
00:11:45,005 --> 00:11:46,974
存储系统能够同时执行

235
00:11:46,974 --> 00:11:50,577
音频和纹理加载请求

236
00:11:50,577 --> 00:11:53,080
为了避免音频延迟
至关重要的一点是

237
00:11:53,080 --> 00:11:55,516
流式传输系统能够将

238
00:11:55,516 --> 00:11:58,685
音频请求优先于 纹理请求进行处理

239
00:11:58,685 --> 00:12:01,421
要将音频请求优先 您可以创建

240
00:12:01,421 --> 00:12:06,326
一个单独的 IO 命令队列
并将其优先级设置为高

241
00:12:06,326 --> 00:12:10,430
存储系统将
确保高优先级的 IO 请求

242
00:12:10,430 --> 00:12:15,269
具有较低的延迟并优先于其他请求

243
00:12:15,269 --> 00:12:17,871
在为音频资产创建单独的

244
00:12:17,871 --> 00:12:20,374
高优先级队列后 音频加载请求的

245
00:12:20,374 --> 00:12:22,976
执行时间变短了

246
00:12:22,976 --> 00:12:25,212
而并行的纹理加载请求的

247
00:12:25,212 --> 00:12:28,148
执行时间变长了

248
00:12:28,148 --> 00:12:31,084
创建高优先级队列的方法是这样的

249
00:12:31,084 --> 00:12:34,555
您只需要将命令队列
描述符的优先级属性

250
00:12:34,555 --> 00:12:36,089
设置为高

251
00:12:36,089 --> 00:12:39,393
您还可以将优先级设置为正常或低

252
00:12:39,393 --> 00:12:41,428
然后像往常一样从描述符中

253
00:12:41,428 --> 00:12:44,331
创建一个新的 IO 命令队列

254
00:12:44,331 --> 00:12:47,267
但需要记住 在创建队列之后
您就不能再更改

255
00:12:47,267 --> 00:12:49,670
它的优先级了

256
00:12:49,670 --> 00:12:52,573
当您向 App 添加
快速资源加载功能时

257
00:12:52,573 --> 00:12:56,443
有一些最佳实践需要牢记

258
00:12:56,443 --> 00:12:59,213
首先 请考虑对资产进行压缩

259
00:12:59,213 --> 00:13:01,882
您可以通过内置或自定义压缩

260
00:13:01,882 --> 00:13:05,018
来降低 App 的磁盘占用

261
00:13:05,018 --> 00:13:07,588
压缩让您可以用运行时性能

262
00:13:07,588 --> 00:13:10,457
换取更小的磁盘占用空间

263
00:13:10,457 --> 00:13:12,960
此外 在使用稀疏纹理时

264
00:13:12,960 --> 00:13:17,397
您可以通过调整
稀疏页大小来提高存储通量

265
00:13:17,397 --> 00:13:20,100
接下来我将更详细地介绍它们

266
00:13:20,100 --> 00:13:22,302
首先是压缩

267
00:13:22,302 --> 00:13:24,805
您可以使用
Metals 3 的 API

268
00:13:24,805 --> 00:13:28,475
离线压缩您的资产文件

269
00:13:28,475 --> 00:13:31,645
首先 创建一个压缩上下文并使用

270
00:13:31,645 --> 00:13:35,215
chunk size 和
compression 方法对它进行配置

271
00:13:35,215 --> 00:13:38,285
然后将部分资产文件传递给上下文

272
00:13:38,285 --> 00:13:42,556
生成所有文件的单一压缩版本

273
00:13:42,556 --> 00:13:46,059
压缩上下文将所有数据分块

274
00:13:46,059 --> 00:13:48,795
使用您选择的
编解码器对其进行压缩

275
00:13:48,795 --> 00:13:51,732
并将其存储到包文件中

276
00:13:51,732 --> 00:13:53,467
在这个例子中

277
00:13:53,467 --> 00:13:57,337
上下文将数据
压缩为 64KB 大小的分块

278
00:13:57,337 --> 00:13:59,673
但您也可以根据需要压缩的数据

279
00:13:59,673 --> 00:14:03,844
自身的大小和类型
来选择合适的分块大小

280
00:14:03,844 --> 00:14:08,115
下面为您介绍
如何在 Metal 3 中使用压缩 API

281
00:14:08,115 --> 00:14:10,384
首先 提供创建压缩文件的路径

282
00:14:10,384 --> 00:14:13,520
压缩方法和分块大小

283
00:14:13,520 --> 00:14:16,857
来创建压缩上下文

284
00:14:16,857 --> 00:14:20,861
接下来 获取文件数据
并将其附加到上下文上

285
00:14:20,861 --> 00:14:24,765
在这里 文件数据
处于一个 NSData 对象中

286
00:14:24,765 --> 00:14:27,134
您可以通过多次调用附加数据

287
00:14:27,134 --> 00:14:31,138
附加来自不同文件的数据

288
00:14:31,138 --> 00:14:32,840
添加完数据后

289
00:14:32,840 --> 00:14:34,908
您就可以调用刷新
和销毁压缩上下文函数

290
00:14:34,908 --> 00:14:40,480
来完成并保存压缩文件

291
00:14:40,480 --> 00:14:43,350
您可以通过创建文件句柄

292
00:14:43,350 --> 00:14:45,686
打开并访问压缩文件

293
00:14:45,686 --> 00:14:49,656
文件句柄在发出加载命令时使用

294
00:14:49,656 --> 00:14:53,594
对于压缩文件
Metal 3 执行内联解压

295
00:14:53,594 --> 00:14:56,096
通过将偏移量转换为需要解压的

296
00:14:56,096 --> 00:15:00,634
分块列表 并将它们
加载到您的资源中

297
00:15:00,634 --> 00:15:05,639
您可以使用 Metal 设备实例
创建文件句柄

298
00:15:05,639 --> 00:15:08,742
比如说 这段代码
使用 Metal 设备实例

299
00:15:08,742 --> 00:15:10,244
创建文件句柄的方式是

300
00:15:10,244 --> 00:15:12,579
通过提供压缩文件路径

301
00:15:12,579 --> 00:15:16,350
到我之前介绍过的
makeIOHandle 方法中

302
00:15:16,350 --> 00:15:18,886
压缩文件的一个附加参数

303
00:15:18,886 --> 00:15:21,221
是压缩方法

304
00:15:21,221 --> 00:15:22,856
它与您在创建压缩文件时使用的

305
00:15:22,856 --> 00:15:26,960
压缩方法一致

306
00:15:26,960 --> 00:15:28,028
现在 我将介绍

307
00:15:28,028 --> 00:15:30,464
支持的各种压缩方法

308
00:15:30,464 --> 00:15:32,666
以及每一种的特点

309
00:15:32,666 --> 00:15:36,136
来帮助您了解
如何在它们之间进行选择

310
00:15:36,136 --> 00:15:39,439
当解压速度非常关键
并且您的 App

311
00:15:39,439 --> 00:15:42,776
可以承受较大的磁盘
占用空间时 您可以使用 LZ4

312
00:15:42,776 --> 00:15:45,646
如果平衡编解码器速度和压缩比

313
00:15:45,646 --> 00:15:51,251
对您来说很重要 那就请选择
ZLib、LZBitmap 或 LZFSE

314
00:15:51,251 --> 00:15:53,086
在注重平衡的编解码器中

315
00:15:53,086 --> 00:15:56,757
ZLib 更适用于
非 Apple 设备

316
00:15:56,757 --> 00:16:00,761
LZBitmap 编码
和解码速度很快

317
00:16:00,761 --> 00:16:04,264
而 LZFSE 具有很高的压缩比

318
00:16:04,264 --> 00:16:06,667
如果您需要最佳压缩比

319
00:16:06,667 --> 00:16:09,102
请考虑选用 LZMA 编解码器

320
00:16:09,102 --> 00:16:14,408
前提是您的 App
能承受解码资产所需的额外时间

321
00:16:14,408 --> 00:16:18,412
您也可以使用您自己的压缩方案

322
00:16:18,412 --> 00:16:20,948
在一些情况中 您的数据可能会从

323
00:16:20,948 --> 00:16:23,283
自定义压缩编解码器中受益

324
00:16:23,283 --> 00:16:26,253
如果是这样
您可以使用自己的压缩器

325
00:16:26,253 --> 00:16:29,056
和平移偏移量替换压缩上下文

326
00:16:29,056 --> 00:16:33,393
并在运行时自行解压

327
00:16:33,393 --> 00:16:35,462
现在您已经知道该如何使用压缩

328
00:16:35,462 --> 00:16:37,297
来减少磁盘占用了

329
00:16:37,297 --> 00:16:40,634
让我们来看看如何调整稀疏页大小

330
00:16:40,634 --> 00:16:43,337
先前版本的 Metal 支持加载

331
00:16:43,337 --> 00:16:47,374
稀疏纹理粒度
在 16KB 大小的图块

332
00:16:47,374 --> 00:16:51,778
使用 Metal 3 您可以
指定两种新的稀疏图块大小：

333
00:16:51,778 --> 00:16:54,748
64KB 和 256KB

334
00:16:54,748 --> 00:16:57,451
这些新尺寸可以让您

335
00:16:57,451 --> 00:17:00,220
以更大的粒度进行纹理的流式传输

336
00:17:00,220 --> 00:17:02,990
更充分地利用存储硬件并使它饱和

337
00:17:02,990 --> 00:17:04,691
请注意 您需要权衡

338
00:17:04,691 --> 00:17:06,960
流式传输更大尺寸的图块

339
00:17:06,960 --> 00:17:09,329
和流式传输的数据量

340
00:17:09,329 --> 00:17:12,666
所以您必须使用 App
及其稀疏纹理进行测试

341
00:17:12,666 --> 00:17:16,103
找到最合适的尺寸

342
00:17:16,103 --> 00:17:18,272
接下来 让我们来看看如何借助

343
00:17:18,272 --> 00:17:21,575
一组 Metal 开发者工具

344
00:17:21,575 --> 00:17:24,111
为您 App 的快速加载
资源功能进行性能分析和调试

345
00:17:24,111 --> 00:17:28,949
Xcode 14 包含了对
快速资源加载功能的全面支持

346
00:17:28,949 --> 00:17:32,019
从使用 Metal System Trace
的运行时性能分析

347
00:17:32,019 --> 00:17:35,322
到使用
Metal 调试器的 API 检查

348
00:17:35,322 --> 00:17:37,257
和高级依赖分析

349
00:17:39,393 --> 00:17:42,129
首先是运行时性能分析

350
00:17:42,129 --> 00:17:45,933
在 Xcode 14 中 Instruments 可以
使用 Metal System Trace 模板

351
00:17:45,933 --> 00:17:48,435
对快速资源加载功能进行性能分析

352
00:17:48,435 --> 00:17:51,538
Instruments 是一个强大的
性能分析工具

353
00:17:51,538 --> 00:17:53,507
可以帮助您
在 Metal App 中

354
00:17:53,507 --> 00:17:56,043
达成最佳性能

355
00:17:56,043 --> 00:17:58,679
Metal System Trace 模板
允许您在

356
00:17:58,679 --> 00:18:02,182
加载操作被编码和执行时进行检查

357
00:18:02,182 --> 00:18:04,484
您将理解它们是如何与

358
00:18:04,484 --> 00:18:06,787
您的 App 在 CPU
和 GPU 上运行的操作

359
00:18:06,787 --> 00:18:10,257
相互关联的

360
00:18:10,257 --> 00:18:13,660
如需了解如何使用 Instruments
对您的 Metal App 进行性能分析

361
00:18:13,660 --> 00:18:16,096
请查看之前的讲座

362
00:18:16,096 --> 00:18:19,366
“使用 GPU 计数器
优化 Metal App 和游戏”

363
00:18:19,366 --> 00:18:23,237
以及“针对
Apple GPU 优化高端游戏”

364
00:18:23,237 --> 00:18:26,373
现在 让我们来谈谈调试

365
00:18:26,373 --> 00:18:28,909
使用 Xcode 14 中的
Metal 调试器

366
00:18:28,909 --> 00:18:30,777
您现在可以分析游戏中新的

367
00:18:30,777 --> 00:18:33,981
快速资源加载 API 的使用情况

368
00:18:33,981 --> 00:18:36,717
进行帧捕获后 您就可以检查

369
00:18:36,717 --> 00:18:40,554
所有快速资源加载 API 的调用

370
00:18:40,554 --> 00:18:43,123
从创建的 IO 命令缓冲

371
00:18:43,123 --> 00:18:46,560
到已发出的加载操作

372
00:18:46,560 --> 00:18:48,228
您现在可以使用新的依赖关系查看器

373
00:18:48,228 --> 00:18:50,297
来对快速资源加载依赖关系

374
00:18:50,297 --> 00:18:53,367
进行可视化检查

375
00:18:53,367 --> 00:18:56,203
依赖关系查看器提供了

376
00:18:56,203 --> 00:18:59,306
IO 命令缓冲和 Metal
传递之间资源依赖关系的

377
00:18:59,306 --> 00:19:01,542
详细描述

378
00:19:01,542 --> 00:19:04,144
从这里出发 您可以使用新的

379
00:19:04,144 --> 00:19:05,913
依赖关系查看器中的各种功能

380
00:19:05,913 --> 00:19:09,483
比如新的同步边缘和图形筛选

381
00:19:09,483 --> 00:19:13,587
来深入研究并优化资源加载依赖关系

382
00:19:13,587 --> 00:19:17,357
如需了解 Xcode 14 中
新的依赖关系查看器的更多信息

383
00:19:17,357 --> 00:19:18,759
请查看今年的

384
00:19:18,759 --> 00:19:22,362
“利用 Metal 3 实现无绑定” 讲座

385
00:19:22,362 --> 00:19:26,333
现在让我们看看
快速资源加载的实际效果

386
00:19:26,333 --> 00:19:27,968
这个测试场景使用了

387
00:19:27,968 --> 00:19:31,338
新的快速资源加载 API
以 16KB 的图块大小

388
00:19:31,338 --> 00:19:35,309
进行纹理数据的流式传输

389
00:19:35,309 --> 00:19:38,779
该视频来自配备
M1 Pro 芯片的 MacBook Pro

390
00:19:38,779 --> 00:19:40,247
流式传输系统查询

391
00:19:40,247 --> 00:19:44,518
GPU 的稀疏纹理访问计数器
来确认两项内容

392
00:19:44,518 --> 00:19:46,687
已采样但未加载的图块

393
00:19:46,687 --> 00:19:49,423
以及 App 未使用的已加载图块

394
00:19:49,423 --> 00:19:52,659
App 使用此信息对所需图块的

395
00:19:52,659 --> 00:19:54,127
加载列表以及

396
00:19:54,127 --> 00:19:57,397
不需要图块的回收列表进行编码

397
00:19:57,397 --> 00:20:00,234
这样一来 工作集中只包含

398
00:20:00,234 --> 00:20:03,203
App 最有可能使用的图块

399
00:20:03,203 --> 00:20:06,340
如果玩家决定前往场景的另一部分

400
00:20:06,340 --> 00:20:08,909
App 就需要对一套全新的

401
00:20:08,909 --> 00:20:11,011
高分辨率纹理进行流式传输

402
00:20:11,011 --> 00:20:13,347
如果流式传输系统足够快

403
00:20:13,347 --> 00:20:17,117
玩家就不会注意到传输正在发生

404
00:20:17,117 --> 00:20:18,385
如果我暂停这个场景

405
00:20:18,385 --> 00:20:21,321
您就可以更清楚地观察画面差异

406
00:20:21,321 --> 00:20:23,624
左侧画面是在单个线程上

407
00:20:23,624 --> 00:20:26,527
使用 pread API
加载稀疏图块

408
00:20:26,527 --> 00:20:28,629
右侧画面是
使用快速资源加载 API

409
00:20:28,629 --> 00:20:31,732
加载稀疏图块

410
00:20:31,732 --> 00:20:33,667
当玩家进入场景时

411
00:20:33,667 --> 00:20:36,737
大部分纹理尚未完全加载

412
00:20:36,737 --> 00:20:39,907
加载完成后 就可以看到最终的

413
00:20:39,907 --> 00:20:42,910
高分辨率版本纹理

414
00:20:42,910 --> 00:20:46,113
如果我回到场景的开头并进行慢放

415
00:20:46,113 --> 00:20:48,482
您将更容易注意到

416
00:20:48,482 --> 00:20:51,418
快速资源加载功能带来的改善

417
00:20:51,418 --> 00:20:54,054
为了突出差异 渲染中将用

418
00:20:54,054 --> 00:20:59,426
红色标出 App 尚未加载的图块

419
00:20:59,426 --> 00:21:01,528
一开始 场景显示

420
00:21:01,528 --> 00:21:05,632
App 尚未加载大多数图块

421
00:21:05,632 --> 00:21:08,602
然而 在玩家进入场景时

422
00:21:08,602 --> 00:21:11,038
与单线程 pread 版本相比

423
00:21:11,038 --> 00:21:14,007
快速资源加载功能
改善了高分辨率图块的加载

424
00:21:14,007 --> 00:21:18,712
并最大限度减少了延迟

425
00:21:18,712 --> 00:21:21,782
Metal 3 的快速资源
加载功能可以

426
00:21:21,782 --> 00:21:24,685
帮助您构建强大而高效的资产
流式传输系统 让您的 App

427
00:21:24,685 --> 00:21:28,388
充分利用最新的存储技术

428
00:21:28,388 --> 00:21:32,793
您可以使用它来及时流式传输
包括更高质量的图像

429
00:21:32,793 --> 00:21:35,762
在内的资产以减少加载时间

430
00:21:35,762 --> 00:21:40,234
您也使用 Metal 的共享事件
在 GPU 渲染场景时

431
00:21:40,234 --> 00:21:43,103
异步加载资产

432
00:21:43,103 --> 00:21:46,006
对于您 App 急需的资产

433
00:21:46,006 --> 00:21:48,809
可以通过创建具有更高
优先级的命令队列

434
00:21:48,809 --> 00:21:51,011
将延迟降到最低

435
00:21:51,011 --> 00:21:54,014
请记住 一定要提前发送加载命令

436
00:21:54,014 --> 00:21:56,283
让存储系统保持繁忙

437
00:21:56,283 --> 00:22:00,954
您可以随时取消不需要的命令

438
00:22:00,954 --> 00:22:04,258
Metal 3 中的快速资源
加载功能引入了一些新方法

439
00:22:04,258 --> 00:22:06,860
来发挥现代存储硬件的力量

440
00:22:06,860 --> 00:22:09,830
实现高通量资产加载

441
00:22:09,830 --> 00:22:12,266
我迫不及待想看看
您是如何使用这些功能

442
00:22:12,266 --> 00:22:15,969
来提高您 App 的
视觉质量和响应能力的

443
00:22:15,969 --> 00:22:17,137
感谢您的观看

444
00:22:17,137 --> 00:22:20,874
♪

