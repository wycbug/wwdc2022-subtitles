1
00:00:01,134 --> 00:00:07,140
[古怪的音乐]

2
00:00:10,077 --> 00:00:13,614
David Duncan: 大家好, 我是David Duncan
在这个视频里

3
00:00:13,647 --> 00:00:17,384
我将为大家介绍
桌面级 iPad

4
00:00:18,151 --> 00:00:24,992
iOS 16 全新升级了
设计和构建强大 App 的工具

5
00:00:25,025 --> 00:00:28,829
为前端带来更多更好用工具的Apps

6
00:00:28,862 --> 00:00:34,368
充分利用了内置及附加的硬件

7
00:00:34,401 --> 00:00:39,506
UIKit 增加了许多工具
可以帮助您实现  App 的这些目标

8
00:00:39,540 --> 00:00:43,677
UINavigationBar 的更新
让您可以更好地利用

9
00:00:43,710 --> 00:00:48,348
屏幕可显示面积 并在 Apple 所有平台
都建立绝佳的体验感

10
00:00:49,583 --> 00:00:54,288
这个全新的 Find and Replace UI
是可以启用内置视图

11
00:00:54,321 --> 00:00:57,291
并可轻松添加自定义视图的快照

12
00:00:57,324 --> 00:01:01,828
编辑菜单已全面改造
为基于交互的 API

13
00:01:01,862 --> 00:01:03,897
与菜单系统整合

14
00:01:04,665 --> 00:01:08,268
Collection 视图的改进也让构建界面
前所未有的简便

15
00:01:08,302 --> 00:01:13,574
您的用户可根据内容
选择及操作

16
00:01:15,475 --> 00:01:19,546
您可查看“Adopt desktop
class editing interactions”

17
00:01:19,580 --> 00:01:24,451
获取更多关于 Find and Replace
以及编辑菜单的信息

18
00:01:24,484 --> 00:01:27,888
也可查看
“Build a desktop class iPad app”

19
00:01:27,921 --> 00:01:30,991
了解这些功能是如何整合协作的

20
00:01:32,059 --> 00:01:35,395
在这个视频中 我将与大家
共同探讨导航的变化

21
00:01:35,429 --> 00:01:38,899
这会影响您何如设计 iOS 16 的 App

22
00:01:40,901 --> 00:01:47,508
首先 我们有一些新功能 能让您
更简便地构建可发现的接口

23
00:01:47,541 --> 00:01:53,914
还有对基于文档的 App 来说
尤为强大的功能

24
00:01:53,947 --> 00:01:59,219
最后 Search 进行了更新
从而帮助加速和改进体验感

25
00:02:00,821 --> 00:02:05,759
UINavigationBar 在 iOS 中
有不同的使用目的

26
00:02:05,792 --> 00:02:08,362
iOS 16 同样也搭载这一功能

27
00:02:08,395 --> 00:02:13,033
提供了许多这些使用场景中
全新优化的 UI

28
00:02:13,066 --> 00:02:16,803
UINavigationItem 增加了一个
样式属性

29
00:02:16,837 --> 00:02:22,843
可用于选择以下样式
导航 浏览和编辑

30
00:02:22,876 --> 00:02:25,712
我将为大家逐一解释

31
00:02:26,580 --> 00:02:30,017
默认的样式是导航

32
00:02:30,050 --> 00:02:34,021
与传统 UINavigationBar
完全一样

33
00:02:35,389 --> 00:02:40,494
标题居中 有前端
和后端工具栏按钮项

34
00:02:40,527 --> 00:02:45,532
以及视图堆栈有超出 1 个项目时
显示的后退按钮

35
00:02:45,566 --> 00:02:50,938
浏览样式重新排列了内容
从而更好地优化接口

36
00:02:50,971 --> 00:02:56,076
历史记录与定位同样重要
如在 Files 或 Safari 中

37
00:02:57,144 --> 00:02:59,913
在这个样式中 标题移到了前方

38
00:03:00,948 --> 00:03:04,651
编辑样式的优化是针对
主要功能为

39
00:03:04,685 --> 00:03:06,486
文档编辑时所做的

40
00:03:06,520 --> 00:03:10,724
如浏览样式一样
标题在最前方排列对齐

41
00:03:10,757 --> 00:03:15,462
编辑 UI 通常是一个终点
如用文档选择器

42
00:03:15,495 --> 00:03:17,164
选择文档后

43
00:03:17,197 --> 00:03:21,201
因此显示一个后退按钮
从而便于访问该 UI

44
00:03:23,103 --> 00:03:27,908
浏览和编辑样式在工具栏中间
都有许多自由空间

45
00:03:29,543 --> 00:03:33,547
iOS 16 正是
利用了这一自由空间

46
00:03:33,580 --> 00:03:37,050
允许您将额外的控制按钮
放入该区域

47
00:03:38,852 --> 00:03:41,655
中心项目是其中一项改变

48
00:03:41,688 --> 00:03:44,925
以利用屏幕可显示面积

49
00:03:44,958 --> 00:03:48,428
并涵盖
UIBarButtonItemGroup 支持

50
00:03:48,462 --> 00:03:51,265
自定义支持及溢出

51
00:03:52,666 --> 00:03:55,936
溢出支持在所有模式都可用

52
00:03:55,969 --> 00:03:58,605
也让导航样式

53
00:03:58,639 --> 00:04:01,175
可间接支持中心项目

54
00:04:02,676 --> 00:04:07,981
单独控制继续
指定为 UIBarButtonItems

55
00:04:08,015 --> 00:04:11,785
但现在如 UIBarButtonItemGroups
一样组织

56
00:04:12,519 --> 00:04:17,257
这样在空间有限时可紧密展示

57
00:04:17,291 --> 00:04:23,997
在这个例子中 工具栏有 5 个项目
组成了 4 个组

58
00:04:26,633 --> 00:04:30,904
第一组包含一个单栏按钮项目

59
00:04:30,938 --> 00:04:34,041
因此这一案例使用的是
UIBarButtonItem 的

60
00:04:34,074 --> 00:04:39,046
简易方式 creatingFixedGroup
来创建的

61
00:04:40,447 --> 00:04:43,350
如果您需要超过
1 个项目的固定组

62
00:04:43,383 --> 00:04:46,653
可使用 UIBarButtonItemGroup 方法

63
00:04:47,788 --> 00:04:50,958
固定组通常在工具栏首位

64
00:04:50,991 --> 00:04:54,795
不能移动或自定义

65
00:04:54,828 --> 00:04:58,866
绘制组包含一个单一项目

66
00:04:58,899 --> 00:05:02,169
因此也使用了简易 API

67
00:05:02,202 --> 00:05:06,840
即 creatingMovableGroup
(customizationIdentifier)

68
00:05:06,874 --> 00:05:11,912
如固定组一样 可移动组不能移除
但可移动

69
00:05:13,113 --> 00:05:16,583
因此 需要 customizationIdentifier

70
00:05:16,617 --> 00:05:20,220
来追踪和保存它们的位置

71
00:05:20,254 --> 00:05:22,756
如果您需要超过 1 个项目的组

72
00:05:22,789 --> 00:05:25,726
可使用 UIBarButtonItemGroup 方法

73
00:05:28,395 --> 00:05:32,499
这一图形组包含多个项目

74
00:05:32,533 --> 00:05:35,836
因此使用 UIBarButtonItemGroup API
来创建组

75
00:05:37,437 --> 00:05:39,706
该组在工具栏中应为可移动

76
00:05:39,740 --> 00:05:43,810
同时也是可移除的
因此创建为选项组

77
00:05:45,012 --> 00:05:48,582
该组同样指定了
一个 representativeItem

78
00:05:48,615 --> 00:05:52,486
让 UIKit 在必要时刻拆散组
从而获得更多空间

79
00:05:53,820 --> 00:05:58,592
representativeItem 并不指定操作
进一步允许 UIKit

80
00:05:58,625 --> 00:06:02,496
合成可选择组项目的菜单

81
00:06:05,499 --> 00:06:10,370
当调用自定义 UI 时
UIKit 自动应用

82
00:06:10,404 --> 00:06:15,342
您基于如何创建组
所指定的规则

83
00:06:15,375 --> 00:06:18,912
当固定和可移动组
必须保留在工具栏时

84
00:06:18,946 --> 00:06:22,282
可选组可用任意方式增加或移除

85
00:06:23,450 --> 00:06:25,719
UIKit 会尝试粉碎组

86
00:06:25,752 --> 00:06:29,189
从而保证工具栏的功能

87
00:06:29,223 --> 00:06:33,427
但如果空间不可用
额外的项目将被移到工作或溢出

88
00:06:34,328 --> 00:06:40,067
溢出菜单包含自定义部分的

89
00:06:40,100 --> 00:06:42,302
所有不适用于工具栏的项目

90
00:06:42,336 --> 00:06:44,671
以及自定义工具栏的选项

91
00:06:45,839 --> 00:06:50,978
UIKit 为每个工具栏按钮项
合成默认菜单元素时

92
00:06:51,011 --> 00:06:55,916
您可按需选择
自定义 menuRepresentation

93
00:06:55,949 --> 00:06:59,887
最后 这一例子可自定义

94
00:06:59,920 --> 00:07:01,688
以及添加 centerItemGroups

95
00:07:02,823 --> 00:07:08,295
您通过设置 UINavigationItem.
CustomizationIdentifier 启动自定义

96
00:07:09,363 --> 00:07:14,101
customizationIdentifier 定义
工具栏的独特自定义

97
00:07:14,134 --> 00:07:18,272
因此选择一个不会与 App 内
其它自定义冲突的字符串

98
00:07:19,840 --> 00:07:24,745
UIKit 基于该标识符
自动保存及存储自定义

99
00:07:25,779 --> 00:07:30,450
接下来 自提供 centerItemGroups

100
00:07:30,484 --> 00:07:33,253
我已经提到了刚开始的四个组

101
00:07:34,621 --> 00:07:40,494
格式组是可选组
不再默认自定义中

102
00:07:40,527 --> 00:07:44,198
因此该代码替换
isInDefaultCustomization 参数的

103
00:07:44,231 --> 00:07:48,569
默认值 从而将其排除在外

104
00:07:49,169 --> 00:07:52,573
即使没有设置 UINavigationItem.
customizationIdentifier

105
00:07:52,606 --> 00:07:59,546
您仍可以使用 centerItemGroups
但自定义不可用

106
00:07:59,580 --> 00:08:02,583
在 Mac Catalyst 中 UINavigationBar

107
00:08:02,616 --> 00:08:06,019
自动将其内容
转译到 NSToolbar

108
00:08:06,954 --> 00:08:10,123
前端 中间及后端组

109
00:08:10,157 --> 00:08:14,561
都按顺序添加 中间组合项的
自定义属性

110
00:08:14,595 --> 00:08:19,800
当使用 NSToolbar 自定义时
需谨慎处理

111
00:08:21,101 --> 00:08:25,272
所有预期的 NSToolbar 行为

112
00:08:25,305 --> 00:08:29,443
以及其它属性 如标题和窗口代理
均可用

113
00:08:30,544 --> 00:08:35,249
这些在优化 Mac 时
都是默认触发的

114
00:08:35,282 --> 00:08:40,120
接下来 我们主要来看
强大的交互功能

115
00:08:40,153 --> 00:08:43,056
尤其在处理文档时

116
00:08:43,090 --> 00:08:47,828
UINavigationBar 现在支持
向标题视图添加菜单

117
00:08:47,861 --> 00:08:54,134
提供中央单元以添加整体操作
内容的动作

118
00:08:54,168 --> 00:08:57,538
此外 您可以为共享表添加支持

119
00:08:57,571 --> 00:08:59,606
及从菜单中拖拽

120
00:09:00,374 --> 00:09:04,011
首先 我先着重介绍菜单项

121
00:09:04,044 --> 00:09:08,282
一旦启用后 默认标题菜单
提供 5 个指令

122
00:09:08,315 --> 00:09:13,854
复制 移动 重命名 导出及打印

123
00:09:13,887 --> 00:09:15,656
这些项目将根据

124
00:09:15,689 --> 00:09:20,027
响应者链中的特定方法进行筛选

125
00:09:20,060 --> 00:09:23,864
UINavigationBar 具有对重命名的
特定支持

126
00:09:23,897 --> 00:09:27,868
因此如果您执行了 renameDelegate
它也将包括在内

127
00:09:30,103 --> 00:09:34,708
若要启用标题菜单
请设置 titleMenuProvider

128
00:09:34,741 --> 00:09:38,078
该闭包会返回要显示的最终菜单

129
00:09:39,446 --> 00:09:43,383
闭包位于建议元素数组的后面

130
00:09:43,417 --> 00:09:48,422
您可以直接使用 过滤
或者添加自己的

131
00:09:48,455 --> 00:09:53,927
在我们的示例中 我们将向菜单
添加一个附加操作

132
00:09:53,961 --> 00:09:56,763
最后 返回合成的 UIMenu

133
00:09:58,398 --> 00:10:02,936
标题菜单还允许通过
活动 view controller

134
00:10:02,970 --> 00:10:04,671
进行共享 并支持拖拽

135
00:10:06,106 --> 00:10:10,711
要启用这些功能
请提供描述文档的

136
00:10:10,744 --> 00:10:12,546
UIDocumentProperties 实例

137
00:10:14,248 --> 00:10:18,585
UIDocumentProperties 代表
文档的元数据

138
00:10:18,619 --> 00:10:21,121
包括预览

139
00:10:21,154 --> 00:10:23,924
这个示例创建了一个 URL

140
00:10:23,957 --> 00:10:27,995
允许 UIKit 自动获取必要的元数据

141
00:10:29,329 --> 00:10:32,266
为启用其它功能 此示例创建一个

142
00:10:32,299 --> 00:10:34,968
NSItemProvider 来代表文档

143
00:10:36,570 --> 00:10:40,607
设置 dragItemsProvider
以启用拖拽功能

144
00:10:40,641 --> 00:10:47,181
此闭包经过 UIDragSession
并返回 UIDragItems 数组

145
00:10:47,214 --> 00:10:50,417
此示例返回代表文档的单个项

146
00:10:52,219 --> 00:10:56,123
设置 activityViewControllerProvider
可启用共享

147
00:10:56,156 --> 00:11:00,360
该闭包配置并
返回一个 UIActivityViewController

148
00:11:01,628 --> 00:11:04,164
最后 将填写好的对象分配给

149
00:11:04,198 --> 00:11:09,102
UINavigationItem.documentPropertiesc
当点击标题时

150
00:11:09,136 --> 00:11:13,006
UIKit 会将 header
与其他 titleMenu 项一起显示

151
00:11:15,843 --> 00:11:18,745
在 Mac Catalyst 上

152
00:11:18,779 --> 00:11:22,082
即将传递给 titleMenuProvider 的
建议项目

153
00:11:22,115 --> 00:11:25,252
已经存在于 File 菜单中

154
00:11:25,285 --> 00:11:28,789
您要添加到标题菜单的任何项目

155
00:11:28,822 --> 00:11:31,158
都需要通过其它方式提供

156
00:11:32,359 --> 00:11:36,630
您可以使用
UIMenuBuilder API 添加这些项目

157
00:11:36,663 --> 00:11:39,266
或根据需要过滤现有项目

158
00:11:40,267 --> 00:11:44,304
如果您指定了文档属性
UIKit 将自动使用

159
00:11:44,338 --> 00:11:48,041
提供的 URL
来管理 macOS 代理图标

160
00:11:49,142 --> 00:11:53,180
如果手动设置 windowScene 的
representedURL

161
00:11:53,213 --> 00:11:55,749
则将取代 UIKit 的管理

162
00:11:57,217 --> 00:12:01,588
UIKit 提供了两种机制来启用重命名

163
00:12:01,622 --> 00:12:07,261
内联重命名是通过设置
UINavigationItem.renameDelegate 来提供的

164
00:12:07,294 --> 00:12:11,732
它为在所有平台上编辑标题
提供了一个专门的 UI

165
00:12:12,966 --> 00:12:16,403
完成后 生成的名称将传递给代理

166
00:12:17,504 --> 00:12:22,342
或者 您可以通过
执行 UIResponder.rename (_:)

167
00:12:22,376 --> 00:12:28,649
并提供您喜欢的任何 UI
来完全控制重命名体验

168
00:12:30,150 --> 00:12:34,655
在iOS上 UINavigationBar 直接在

169
00:12:34,688 --> 00:12:37,257
标题视图中提供重命名 UI

170
00:12:37,291 --> 00:12:41,428
在 macOS 上
当导航栏位于 NSToolbar 中时

171
00:12:41,461 --> 00:12:44,464
窗口的标题将提供重命名 UI

172
00:12:45,432 --> 00:12:50,470
要实现内联重命名 请遵循
UINavigationItemRenameDelegate 协议

173
00:12:50,504 --> 00:12:56,076
并设置导航项的 renameDelegate

174
00:12:56,109 --> 00:13:01,815
只有一个必需的方法
即 NavigationItem(_：didEndRenamingWith：)

175
00:13:01,849 --> 00:13:04,985
用于接收用户接受的标题

176
00:13:06,253 --> 00:13:09,556
对于基于文件的 app
即 UIDocumentBrowserViewController

177
00:13:09,590 --> 00:13:11,258
现在提供了一个重命名的 API

178
00:13:12,459 --> 00:13:16,864
Search 是指有多少用户
找到他们最重要的数据

179
00:13:16,897 --> 00:13:23,170
iOS 16 的进步使其更容易
提供出色的搜索体验

180
00:13:23,203 --> 00:13:27,307
首先要注意的是 iPadOS 上的导航栏

181
00:13:27,341 --> 00:13:31,111
和 MacOS 上的工具栏
现在排成一排

182
00:13:31,144 --> 00:13:33,881
搜索占用的空间更少了

183
00:13:33,914 --> 00:13:36,984
在 iPadOS上 您可以用

184
00:13:37,017 --> 00:13:40,954
UINavigationItem.preferredSearchBarPlacement
恢复历史行为

185
00:13:40,988 --> 00:13:44,358
此外 搜索栏可以粉碎成一个按钮

186
00:13:44,391 --> 00:13:46,994
为其它控件提供更多空间

187
00:13:47,728 --> 00:13:51,298
当搜索被激活时 将显示搜索建议

188
00:13:51,331 --> 00:13:55,736
并且可以将其与
更新搜索查询一起更新

189
00:13:55,769 --> 00:14:00,007
从而使您有机会帮助用户进行搜索

190
00:14:00,807 --> 00:14:04,211
接下来 我将介绍设置搜索建议
所需的代码

191
00:14:06,013 --> 00:14:11,685
要管理搜索建议
请遵循 UISearchResultsUpdate

192
00:14:11,718 --> 00:14:16,056
并设置 searchController 的
SearchResultsUpdate

193
00:14:16,089 --> 00:14:19,927
这使您可以在查询更改时更新建议

194
00:14:19,960 --> 00:14:22,663
并对选定的搜索建议执行操作

195
00:14:24,097 --> 00:14:29,303
当查询更改时
将调用 updateSearchResults(for:)

196
00:14:29,336 --> 00:14:31,805
允许您更新搜索建议

197
00:14:33,040 --> 00:14:36,643
您可自行决定提供什么建议

198
00:14:36,677 --> 00:14:39,780
设置空数组将清除建议 UI

199
00:14:41,114 --> 00:14:46,486
UIKit 提供 UISearchSuggestionItem
来指定建议内容

200
00:14:48,021 --> 00:14:51,491
要响应建议的选择

201
00:14:51,525 --> 00:14:55,996
请执行
updateSearchResults(for:Choosing:)

202
00:14:56,029 --> 00:14:59,333
该方法传递所选择的搜索建议

203
00:14:59,366 --> 00:15:02,369
因此您可以对它作出适当的响应

204
00:15:02,402 --> 00:15:07,007
在本例中 我通过将当前查询

205
00:15:07,040 --> 00:15:10,444
替换为搜索建议指定的查询
来更新搜索

206
00:15:10,477 --> 00:15:13,947
UISearchTextField
也有 searchSuggestions

207
00:15:13,981 --> 00:15:16,850
所以如果您喜欢单独使用该类

208
00:15:16,884 --> 00:15:19,753
仍然可以执行搜索建议

209
00:15:19,786 --> 00:15:24,558
但如您使用的是 UISearchController
则应改用其属性

210
00:15:25,759 --> 00:15:29,463
在 iOS 16 中 UIKit 提供了
新的 API

211
00:15:29,496 --> 00:15:33,233
来帮助您提高用户的工作效率

212
00:15:33,267 --> 00:15:36,570
通过中间项目和标题菜单

213
00:15:36,603 --> 00:15:38,772
为高级功能带来更多可查找性

214
00:15:39,940 --> 00:15:43,177
通过直接从导航栏
提供拖拽和共享功能

215
00:15:43,210 --> 00:15:46,113
改进文档支持

216
00:15:46,980 --> 00:15:52,920
通过提供搜索建议
让搜索变得更容易 更快

217
00:15:52,953 --> 00:15:56,190
并立即获得良好的 Mac 体验

218
00:15:56,223 --> 00:15:58,192
且几乎不费吹灰之力

219
00:15:58,225 --> 00:15:59,927
感谢您的观看

220
00:15:59,960 --> 00:16:03,864
我迫不及待想看您是如何
将 app 提升到桌面级了

221
00:16:03,897 --> 00:16:05,966
[古怪的音乐]

