1
00:00:00,334 --> 00:00:06,340
[欢快的音乐]

2
00:00:09,810 --> 00:00:11,078
Qiaoyu Deng: 大家好

3
00:00:11,111 --> 00:00:17,384
欢迎收看讲座“提高 App 和
服务器的 DNS 安全性”

4
00:00:17,417 --> 00:00:20,687
我叫 Qiaoyu Deng

5
00:00:20,721 --> 00:00:27,694
在这段视频中 我们将讨论
为什么 DNS 通常会不安全

6
00:00:27,728 --> 00:00:32,332
以及如何使用 DNSSEC

7
00:00:32,366 --> 00:00:37,171
和带 DDR 的加密 DNS
对其进行保护

8
00:00:37,204 --> 00:00:43,210
首先 我们来谈一下为什么 DNS 不安全

9
00:00:44,912 --> 00:00:49,917
DNS 是互联网的电话簿

10
00:00:49,950 --> 00:00:53,120
它将人类可读且容易记忆的

11
00:00:53,153 --> 00:00:57,124
域名翻译成 IP 地址

12
00:00:57,157 --> 00:01:02,262
而 IP 地址是为机器设计的

13
00:01:02,296 --> 00:01:04,798
其他互联网协议

14
00:01:04,831 --> 00:01:09,469
如 TCP TLS 和 QUIC

15
00:01:09,503 --> 00:01:12,973
依赖于 IP 地址

16
00:01:13,006 --> 00:01:17,110
所以一切都从 DNS 开始

17
00:01:17,144 --> 00:01:20,948
目前 TLS 协议被广泛应用于

18
00:01:20,981 --> 00:01:24,551
网络通信的安全保障

19
00:01:24,585 --> 00:01:29,556
这很好 但是基础层 DNS

20
00:01:29,590 --> 00:01:31,592
存在一些安全问题

21
00:01:31,625 --> 00:01:35,696
历史上 DNS 是不安全的

22
00:01:35,729 --> 00:01:41,902
它是在 1983 年设计的
几乎没有考虑安全问题

23
00:01:41,935 --> 00:01:46,840
在那以后的几年里
已经发生了许多 DNS 攻击事件

24
00:01:46,874 --> 00:01:52,112
一个例子是 DNS 缓存中毒

25
00:01:52,145 --> 00:01:57,117
攻击者利用 DNS 解析器的缺陷

26
00:01:57,150 --> 00:02:01,488
让它们缓存不正确的 IP 地址

27
00:02:01,522 --> 00:02:05,526
导致客户端连接到恶意主机

28
00:02:05,559 --> 00:02:09,963
这暴露了 DNS 的一个漏洞

29
00:02:09,997 --> 00:02:12,866
没有经过身份验证

30
00:02:12,900 --> 00:02:17,971
如今传统的 DNS 客户端
无法验证答案

31
00:02:18,005 --> 00:02:21,375
因此很容易被欺骗

32
00:02:21,408 --> 00:02:25,479
另一种常见的攻击是 DNS 嗅探

33
00:02:25,512 --> 00:02:32,252
攻击者监视客户端和 DNS 服务器
之间的 DNS 流量

34
00:02:32,286 --> 00:02:35,455
收集客户端的历史记录

35
00:02:35,489 --> 00:02:39,860
这是一个严重的用户隐私问题

36
00:02:39,893 --> 00:02:43,230
这种攻击可能的原因是

37
00:02:43,263 --> 00:02:49,336
DNS 流量最初是未加密的

38
00:02:49,369 --> 00:02:55,909
为了成为构建在它顶部的协议的
安全起点

39
00:02:55,943 --> 00:03:01,882
DNS 需要经过身份验证和加密

40
00:03:01,915 --> 00:03:05,886
当我们使用 DNSSEC
签署 DNS 响应时

41
00:03:05,919 --> 00:03:09,289
它会提供身份验证

42
00:03:09,323 --> 00:03:15,395
当我们使用 TLS 和 HTTPS
来加密 DNS 解析时

43
00:03:15,429 --> 00:03:18,365
它保证了隐私

44
00:03:18,398 --> 00:03:23,203
接下来 让我们谈谈 DNSSEC

45
00:03:23,237 --> 00:03:27,608
DNSSEC 是由 IETF 创建的

46
00:03:27,641 --> 00:03:30,577
一套扩展规范

47
00:03:30,611 --> 00:03:35,082
许多 DNS 服务提供商
已经可以支持它的使用

48
00:03:35,115 --> 00:03:38,986
但另一方面
客户端支持仍在增加

49
00:03:39,019 --> 00:03:42,422
iOS 16 和 macOS Ventura

50
00:03:42,456 --> 00:03:47,828
现在支持客户端 DNSSEC 验证

51
00:03:47,861 --> 00:03:53,967
DNSSEC 通过添加数字签名
来保证数据的身份验证

52
00:03:54,001 --> 00:03:57,337
它能保护数据的完整性

53
00:03:57,371 --> 00:04:00,541
当答案不存在时

54
00:04:00,574 --> 00:04:03,977
它能验证其真实性

55
00:04:04,011 --> 00:04:09,316
它还提供加密身份验证

56
00:04:09,349 --> 00:04:12,920
DNSSEC 通过在响应中

57
00:04:12,953 --> 00:04:17,024
附加签名来保护数据完整性

58
00:04:17,057 --> 00:04:20,294
如果响应被攻击者更改

59
00:04:20,327 --> 00:04:26,567
更改数据的签名将与原始数据不匹配

60
00:04:26,600 --> 00:04:33,507
在这种情况下 客户端可以检测到
更改的响应并将其丢弃

61
00:04:33,540 --> 00:04:37,277
DNSSEC 还通过

62
00:04:37,311 --> 00:04:40,848
使用特殊类型的 DNS 记录

63
00:04:40,881 --> 00:04:44,051
如 NSEC 记录 来明确判断区域中

64
00:04:44,084 --> 00:04:47,921
记录的存在和不存在

65
00:04:47,955 --> 00:04:52,826
NSEC 记录会按字母顺序安全地告诉你

66
00:04:52,860 --> 00:04:56,663
下一个记录名称

67
00:04:56,697 --> 00:05:01,401
它列出的是存在的名称

68
00:05:01,435 --> 00:05:06,273
任何未列出的名称都不存在

69
00:05:06,306 --> 00:05:10,777
例如 我们这里有三条 NSEC 记录

70
00:05:10,811 --> 00:05:17,184
记录集显示
zone org 只有三个记录名称

71
00:05:17,217 --> 00:05:20,687
A.org C.org 和 E.org

72
00:05:20,721 --> 00:05:27,728
现在 如果有攻击者声称 A.org 不存在

73
00:05:27,761 --> 00:05:31,164
那客户端可以检测到这种攻击

74
00:05:31,198 --> 00:05:33,834
A.org 确实存在

75
00:05:33,867 --> 00:05:39,873
因为它被列在第一个 NSEC 记录中

76
00:05:39,907 --> 00:05:45,946
同样 如果攻击者说 D.org 存在

77
00:05:45,979 --> 00:05:49,449
客户端也可以检测到

78
00:05:49,483 --> 00:05:53,220
因为根据第二个 NSEC 记录

79
00:05:53,253 --> 00:05:57,824
D.org 在 C.org 和 E.org 之间

80
00:05:57,858 --> 00:06:03,030
这两个名字之间不应该有名字

81
00:06:03,063 --> 00:06:09,369
DNSSEC 通过建立信任链来认证记录

82
00:06:09,403 --> 00:06:12,339
这里有一个例子

83
00:06:12,372 --> 00:06:17,344
设备希望在
启用 DNSSEC 验证的情况下

84
00:06:17,377 --> 00:06:21,515
解析 www.example.org

85
00:06:21,548 --> 00:06:25,085
它发送查询请求 IP 地址

86
00:06:25,118 --> 00:06:28,288
签名和密钥

87
00:06:28,322 --> 00:06:32,893
通过响应 可以从 IP 地址

88
00:06:32,926 --> 00:06:37,197
到密钥 1 建立信任关系

89
00:06:37,231 --> 00:06:42,436
然后客户端向父区域 org 发送查询

90
00:06:42,469 --> 00:06:47,774
请求可以用来验证密钥 1 的记录

91
00:06:47,808 --> 00:06:53,680
这样它就可以建立
从密钥 1 到密钥 2 的信任关系

92
00:06:53,714 --> 00:06:58,418
因此设备递归地重复这个过程

93
00:06:58,452 --> 00:07:01,355
直到它到达根节点

94
00:07:01,388 --> 00:07:06,627
现在如果根密钥 (图中的密钥 3)
可以被信任

95
00:07:06,660 --> 00:07:12,466
那么从 IP 地址
到密钥 3 的信任关系

96
00:07:12,499 --> 00:07:16,370
就可以被验证

97
00:07:16,403 --> 00:07:21,875
根密钥的哈希值总是安全地
存储在设备中

98
00:07:21,909 --> 00:07:26,380
在 DNSSEC 中 它被称为根信任锚

99
00:07:26,413 --> 00:07:31,952
如果 密钥 3 的哈希值
与预安装的锚匹配

100
00:07:31,985 --> 00:07:35,822
则可以安全地建立信任链

101
00:07:35,856 --> 00:07:37,658
有了信任链

102
00:07:37,691 --> 00:07:44,698
www.example.org 的 IP 地址
现在得到了验证

103
00:07:45,432 --> 00:07:50,504
如果你想在 App 中
要求 DNSSEC 验证

104
00:07:50,537 --> 00:07:54,274
请执行以下操作

105
00:07:54,308 --> 00:07:58,245
支持 IPv6 为你的域名

106
00:07:58,278 --> 00:08:04,618
在纯 IPv6 环境中 纯 IPv4 地址

107
00:08:04,651 --> 00:08:08,455
被转换为合成 IPv6 地址

108
00:08:08,488 --> 00:08:12,326
如果域已签名

109
00:08:12,359 --> 00:08:16,330
则合成地址无法通过 DNSSEC 验证

110
00:08:16,363 --> 00:08:20,934
启用 DNSSEC 后 它们将无法访问

111
00:08:20,968 --> 00:08:26,373
因此 请确保你的域支持 IPv6

112
00:08:26,406 --> 00:08:33,180
确保你的 DNS 服务提供商
用 DNSSEC 为你的域签名

113
00:08:33,213 --> 00:08:38,385
如果你在 App 中启用了 DNSSEC
而没有对你的域进行签名

114
00:08:38,418 --> 00:08:40,587
你将不会获得任何好处

115
00:08:40,621 --> 00:08:46,627
但你将获得额外的 DNS 流量
和延长的解析时间

116
00:08:46,660 --> 00:08:51,632
来尝试对你未签名的域进行身份验证

117
00:08:51,665 --> 00:08:55,035
一旦你获得了相应的基础架构支持

118
00:08:55,068 --> 00:09:01,341
下面是为你的 App
采用 DNSSEC 所需的代码

119
00:09:01,375 --> 00:09:04,845
如果你是 NSURLSession 客户端

120
00:09:04,878 --> 00:09:10,551
则可以要求对 URL 请求
进行 DNSSEC 验证

121
00:09:10,584 --> 00:09:13,420
这里是一个例子

122
00:09:13,453 --> 00:09:17,858
你将首先创建默认会话配置

123
00:09:17,891 --> 00:09:23,263
然后需要 DNSSEC 验证

124
00:09:23,297 --> 00:09:28,969
接下来 你将使用修改后的配置
来创建会话

125
00:09:29,002 --> 00:09:33,841
为此会话创建的所有 URL

126
00:09:33,874 --> 00:09:37,544
请求启用 DNSSEC

127
00:09:37,578 --> 00:09:42,716
如果不想在整个会话中启用 DNSSEC

128
00:09:42,749 --> 00:09:46,653
也可以在请求级别执行此操作

129
00:09:46,687 --> 00:09:50,557
首先 使用禁用 DNSSEC 验证的

130
00:09:50,591 --> 00:09:54,728
默认配置创建会话

131
00:09:54,761 --> 00:09:57,297
然后在请求中启用它

132
00:09:57,331 --> 00:10:01,401
现在 只有在完成 DNSSEC 验证后

133
00:10:01,435 --> 00:10:06,640
才会启动此会话任务

134
00:10:06,673 --> 00:10:10,010
如果你是
Network.framework 客户端

135
00:10:10,043 --> 00:10:15,816
你还可以要求
对你的连接进行 DNSSEC 验证

136
00:10:15,849 --> 00:10:20,287
首先 当你创建一个参数对象时

137
00:10:20,320 --> 00:10:24,291
需要 DNSSEC 验证

138
00:10:24,324 --> 00:10:30,364
然后用参数对象创建 NWConnection

139
00:10:30,397 --> 00:10:36,003
现在 当你启动连接时
只有在 DNSSEC 验证已完成

140
00:10:36,036 --> 00:10:39,540
并且建立与已验证 IP 地址的

141
00:10:39,573 --> 00:10:46,113
连接时 它才会进入就绪状态

142
00:10:46,146 --> 00:10:48,916
启用 DNSSEC 后

143
00:10:48,949 --> 00:10:55,222
只有经过验证的地址
才会用于建立连接

144
00:10:55,255 --> 00:11:01,195
在 HTTPS 中 错误是通过 API 报告的

145
00:11:01,228 --> 00:11:06,700
在 DNSSEC 验证失败不会返回错误

146
00:11:06,733 --> 00:11:13,540
收到验证失败的响应
等于没有收到任何响应

147
00:11:13,574 --> 00:11:18,245
如果有 DNS 提供商篡改响应

148
00:11:18,278 --> 00:11:22,616
地址将无法通过身份验证检查

149
00:11:22,649 --> 00:11:25,652
因此它们将被直接丢弃

150
00:11:25,686 --> 00:11:30,324
当设备加入 DNS 提供商

151
00:11:30,357 --> 00:11:33,026
未篡改响应的新网络时

152
00:11:33,060 --> 00:11:36,230
验证将再次进行

153
00:11:36,263 --> 00:11:40,534
解析将自动恢复正常

154
00:11:41,602 --> 00:11:47,841
以下是一些可能导致
DNSSEC 故障的情况

155
00:11:47,875 --> 00:11:51,411
更改原始 DNS 响应时

156
00:11:51,445 --> 00:11:57,184
不匹配的签名
将无法通过 DNSSEC 检查

157
00:11:57,217 --> 00:12:00,254
从而导致验证失败

158
00:12:00,287 --> 00:12:05,626
当设备不能到达
任何预先安装的信任锚

159
00:12:05,659 --> 00:12:11,098
并且不能从中建立信任链时

160
00:12:11,131 --> 00:12:13,934
当网络不支持

161
00:12:13,967 --> 00:12:18,739
DNSSEC 要求的必要协议时

162
00:12:18,772 --> 00:12:24,811
如 TCP 上的 DNS 和 EDNS0 选项

163
00:12:24,845 --> 00:12:30,284
会携带 DNSSEC 启用位

164
00:12:30,317 --> 00:12:35,389
当签名域不支持 IPv6 时

165
00:12:35,422 --> 00:12:38,759
由互联网服务提供商提供的

166
00:12:38,792 --> 00:12:45,098
合成 IPv6 地址将无法通过验证

167
00:12:45,132 --> 00:12:52,139
这就是如何使用 DNSSEC
对 DNS 响应进行身份验证

168
00:12:52,172 --> 00:12:55,576
但如果它们仍然未加密

169
00:12:55,609 --> 00:12:59,413
那网络上的任何人都可以看到它们

170
00:12:59,446 --> 00:13:02,416
接下来 我们将谈一谈

171
00:13:02,449 --> 00:13:07,788
如何用 DDR 自动启用 DNS 加密

172
00:13:09,122 --> 00:13:12,926
在 iOS 14 和 macOS Big Sur 中

173
00:13:12,960 --> 00:13:19,533
我们引入了加密 DNS
来帮助保护隐私

174
00:13:19,566 --> 00:13:24,137
你可以使用 App 中的
NEDNSSettingsManager

175
00:13:24,171 --> 00:13:27,708
或配置文件中的 DNSSettings

176
00:13:27,741 --> 00:13:32,779
手动配置系统范围内的加密 DNS

177
00:13:32,813 --> 00:13:36,250
你还可以使用 NWParameters 上的

178
00:13:36,283 --> 00:13:41,455
PrivacyContext 为你的 App
选择加密 DNS

179
00:13:41,488 --> 00:13:47,661
更多有关信息 请观看
“启用加密的 DNS”

180
00:13:47,694 --> 00:13:51,932
iOS 16 和 macOS Ventura 中
新增了可以自动使用的

181
00:13:51,965 --> 00:13:56,103
加密 DNS

182
00:13:56,136 --> 00:14:03,143
如果你的网络支持指定解析器的发现
也称为 DDR

183
00:14:03,177 --> 00:14:09,983
DNS 查询将自动使用 TLS 或 HTTPS

184
00:14:10,017 --> 00:14:12,819
要使用加密 DNS

185
00:14:12,853 --> 00:14:15,289
你的设备就需要知道

186
00:14:15,322 --> 00:14:21,662
解析器支持 TLS 或 HTTPS

187
00:14:21,695 --> 00:14:28,669
并且可能还需要
了解端口或 URL 路径

188
00:14:28,702 --> 00:14:35,409
常见的机制
如 DHCP 或路由器广告

189
00:14:35,442 --> 00:14:40,180
只提供普通的 IP 地址

190
00:14:40,214 --> 00:14:46,053
DDR 是由 Apple
和其他行业合作伙伴

191
00:14:46,086 --> 00:14:49,556
在 IETF 中开发的新协议

192
00:14:49,590 --> 00:14:55,662
它为 DNS 客户端提供了一种

193
00:14:55,696 --> 00:14:59,399
通过使用特殊的 DNS 查询
来了解这些必要信息的方法

194
00:14:59,433 --> 00:15:02,970
当你的设备加入一个新的网络时

195
00:15:03,003 --> 00:15:05,839
它会发出一个 _dns.resolver.arpa 的

196
00:15:05,873 --> 00:15:10,777
服务绑定查询

197
00:15:10,811 --> 00:15:13,914
如果 DNS 服务器支持 DDR

198
00:15:13,947 --> 00:15:18,218
它将回复一个或多个配置

199
00:15:18,252 --> 00:15:22,122
然后 设备使用此信息

200
00:15:22,155 --> 00:15:28,028
建立到指定解析器的加密连接

201
00:15:28,061 --> 00:15:33,300
它验证未加密解析程序的 IP 地址

202
00:15:33,333 --> 00:15:38,639
是否包含在
指定解析程序的 TLS 证书中

203
00:15:38,672 --> 00:15:43,410
这样做是为了确保未加密的解析器

204
00:15:43,443 --> 00:15:47,581
和加密的解析器属于同一个实体

205
00:15:47,614 --> 00:15:54,087
如果一切正常
设备现在默认使用加密 DNS

206
00:15:55,088 --> 00:15:59,693
DDR 一次只适用于单个网络

207
00:15:59,726 --> 00:16:04,665
只有在当前网络支持的情况下

208
00:16:04,698 --> 00:16:09,369
你的设备才会自动使用加密 DNS

209
00:16:09,403 --> 00:16:14,441
同样重要的是要注意
如果你的 DNS 服务器的 IP 地址

210
00:16:14,474 --> 00:16:20,013
是私有 IP 地址 那么 DDR 将不起作用

211
00:16:20,047 --> 00:16:23,383
这是因为 TLS 证书中

212
00:16:23,417 --> 00:16:27,521
不允许此类 IP 地址

213
00:16:27,554 --> 00:16:32,125
因为无法验证它们的所有权

214
00:16:32,159 --> 00:16:36,330
在 iOS 16 和 macOS Ventura 中

215
00:16:36,363 --> 00:16:41,869
我们还支持在使用
加密 DNS 进行配置设置时

216
00:16:41,902 --> 00:16:45,939
使用 NEDNSSettingsManager
或 DNSSettings 配置文件

217
00:16:45,973 --> 00:16:52,179
来指定客户端验证的能力

218
00:16:53,180 --> 00:16:58,085
客户端身份验证允许在企业环境中
使用加密 DNS 服务器

219
00:16:58,118 --> 00:17:00,587
在这种环境中

220
00:17:00,621 --> 00:17:06,960
服务器需要在允许访问之前
验证客户端

221
00:17:06,994 --> 00:17:10,430
现在你可以使用 NEDNSSettings 的

222
00:17:10,464 --> 00:17:16,003
identityReference 属性
来配置客户端证书

223
00:17:16,036 --> 00:17:22,676
这就像 VPN 的客户端证书一样

224
00:17:22,709 --> 00:17:26,647
这些规定适用于 TLS 上的 DNS

225
00:17:26,680 --> 00:17:30,617
和 HTTPS 上的 DNS

226
00:17:30,651 --> 00:17:35,489
这是保护 DNS 的路径

227
00:17:35,522 --> 00:17:38,859
使用 DNSSEC 对你的域进行签名

228
00:17:38,892 --> 00:17:43,297
并要求在你的 App 中
进行 DNSSEC 验证

229
00:17:43,330 --> 00:17:47,234
以验证你的 IP 地址

230
00:17:47,267 --> 00:17:50,237
在网络上启用 DDR

231
00:17:50,270 --> 00:17:55,876
以便客户端可以自动切换到
加密 DNS

232
00:17:55,909 --> 00:17:58,879
以此更好地保护用户隐私

233
00:17:58,912 --> 00:18:02,749
在需要更好地访问控制的企业中

234
00:18:02,783 --> 00:18:06,687
采用客户端身份验证

235
00:18:06,720 --> 00:18:10,824
我期待将来能有一个
由你帮忙建立的

236
00:18:10,858 --> 00:18:14,828
更安全的 DNS 基础

237
00:18:14,862 --> 00:18:16,263
感谢收看

238
00:18:16,296 --> 00:18:20,300
[欢快的音乐]

