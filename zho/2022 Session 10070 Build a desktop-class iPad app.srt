1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,843 --> 00:00:12,112
Mohammed: 大家好
我是 UIKit 的 Mohammed

3
00:00:12,145 --> 00:00:14,114
感谢大家和我一起

4
00:00:14,147 --> 00:00:17,584
深入探索
桌面级 iPad App 的构建

5
00:00:17,618 --> 00:00:20,954
在这个视频中
我们使用 iPadOS 16 API

6
00:00:20,988 --> 00:00:25,092
来将当前 iPad App 更新为
桌面级体验

7
00:00:25,125 --> 00:00:28,362
我们首先使用全新的
导航工具栏 API

8
00:00:28,395 --> 00:00:30,664
展示其强大的功能

9
00:00:30,697 --> 00:00:34,334
增加 UI 密度 提供自定义

10
00:00:35,836 --> 00:00:39,573
然后 我们应用
新的 UICollectionView 和 Menu API

11
00:00:39,606 --> 00:00:45,212
以启用复杂工作流
及多重选择的快速活动栏

12
00:00:45,245 --> 00:00:49,316
最后以启用新的
查找和替换体验结束整个操作

13
00:00:49,349 --> 00:00:52,753
使用新的编辑菜单
增强文本编辑

14
00:00:52,786 --> 00:00:57,858
我们更新的 App 是为 iPadOS 15
构建的 Markdown 编辑器

15
00:00:57,891 --> 00:01:01,495
我们查看现代化过程的
每个步骤时

16
00:01:01,528 --> 00:01:05,299
我会与大家解释该选择背后的
最佳实践方法及动机

17
00:01:05,332 --> 00:01:08,435
以便您在将 App 应用到
类似的流程中时

18
00:01:08,468 --> 00:01:12,072
能知道需要考虑的因素有哪些

19
00:01:13,140 --> 00:01:15,809
如果开始前
您需要一些入门知识

20
00:01:15,843 --> 00:01:18,045
可查看“桌面级 iPad 简介”视频

21
00:01:18,078 --> 00:01:22,549
里面有所有 UIKit 全新
iPadOS API 分类

22
00:01:22,583 --> 00:01:25,152
以及”iPad App 设计的
最新更新”视频

23
00:01:25,185 --> 00:01:30,090
了解更多关于设计最佳的
桌面级 iPad App 的技巧

24
00:01:30,123 --> 00:01:31,925
好了 我们开始吧

25
00:01:32,659 --> 00:01:37,197
在开始前 我们先想一下
我们 App 控制的配置

26
00:01:37,231 --> 00:01:41,401
由于该 App 是为 iPadOS 15
设计的 在导航工具栏中

27
00:01:41,435 --> 00:01:44,571
已经展示了最重要的控制功能

28
00:01:44,605 --> 00:01:49,276
并在不同的菜单和 popover 弹出框中
置入了二级控制功能

29
00:01:50,878 --> 00:01:55,916
在 iPadOS 16 中 UIKit 使当前的
导航样式更正式

30
00:01:55,949 --> 00:02:01,188
并推出了两个全新的样式
布局更紧密 自定义程度更高

31
00:02:01,221 --> 00:02:05,826
这让 App 可以用最适配内容的
布局方式

32
00:02:05,859 --> 00:02:09,229
并为前端 UI 带来更多功能

33
00:02:11,265 --> 00:02:16,603
导航 App 有类似的推送
或弹出的导航模型

34
00:02:16,637 --> 00:02:20,340
这整体来说 对展示
层级数据的 App 是适用的

35
00:02:20,374 --> 00:02:22,142
如设置

36
00:02:23,443 --> 00:02:27,714
诸如 Safari 等浏览器或文件
适用于浏览

37
00:02:27,748 --> 00:02:32,386
及在多个文档或文件夹结构中
往返导航

38
00:02:34,655 --> 00:02:39,993
而编辑器 则对集中查看或编辑
独立文档非常适用

39
00:02:42,029 --> 00:02:46,200
对 Markdown 编辑器来说
这一样式最适配我们的 App

40
00:02:48,302 --> 00:02:52,506
编辑样式的标题在工具栏
前端对齐

41
00:02:52,539 --> 00:02:55,909
中间是项目组

42
00:02:55,943 --> 00:02:58,912
在其它视图或菜单中隐藏的

43
00:02:58,946 --> 00:03:02,916
额外功能 在这个样式中
就能看到

44
00:03:02,950 --> 00:03:07,454
我们尽可能利用这种设计
做更多的操作

45
00:03:07,487 --> 00:03:12,059
首先是自定义内置的返回动作
来响应我们的需求

46
00:03:12,092 --> 00:03:15,162
然后在标题菜单加上文档信息

47
00:03:15,195 --> 00:03:18,165
以及常用的文档操作

48
00:03:18,198 --> 00:03:23,237
我们还添加支持使用新内置
重命名 UI 来重命名文档

49
00:03:23,270 --> 00:03:28,242
最后 我们将之前隐藏的功能
放到工具栏中间

50
00:03:28,275 --> 00:03:30,177
让它们更易于访问

51
00:03:30,944 --> 00:03:34,047
首先 我们将 view controller 的
navigationItem 样式属性

52
00:03:34,081 --> 00:03:38,285
设置为 .editor 以选择编辑样式

53
00:03:39,987 --> 00:03:42,923
这一操作后 标题马上调整为
向前对齐

54
00:03:42,956 --> 00:03:44,892
并留空了中心区域

55
00:03:47,394 --> 00:03:51,098
随后 移除后面的完成按钮

56
00:03:51,131 --> 00:03:55,636
并用新的 backAction API
进行替换

57
00:03:55,669 --> 00:03:58,505
这样样式外观更标准

58
00:03:58,539 --> 00:04:01,975
摒弃了这一视图
并返回文档选择器

59
00:04:05,078 --> 00:04:09,750
接下来 我们看下这一标题菜单
对我们的 App 是否有用

60
00:04:09,783 --> 00:04:12,653
正如它的名字所述 标题菜单正是

61
00:04:12,686 --> 00:04:15,656
显示在导航工具栏的标题视图

62
00:04:15,689 --> 00:04:18,192
这里显示文档元数据

63
00:04:18,225 --> 00:04:22,062
及展示整个文档的操作
是非常合适的

64
00:04:22,095 --> 00:04:26,366
如果您的 App 不是基于文档的
这个地方最适合展示应用

65
00:04:26,400 --> 00:04:28,335
完整视图的操作

66
00:04:29,203 --> 00:04:33,240
对我们的 App 来说
可使用文档菜单的标头

67
00:04:33,273 --> 00:04:37,544
来展示关于该文档的
更多有用信息

68
00:04:37,578 --> 00:04:41,548
我们还可以提供
文档的可拖拽表示

69
00:04:41,582 --> 00:04:45,686
并让共享功能更易访问

70
00:04:45,719 --> 00:04:48,121
现在 该是时候写一些代码了

71
00:04:49,857 --> 00:04:51,892
我们的 App 是
UIDocument 支持的

72
00:04:51,925 --> 00:04:54,862
所以我们可以使用
UIDocument 的 fileURL

73
00:04:54,895 --> 00:04:58,966
来例举
UIDocumentProperties 对象

74
00:05:00,501 --> 00:05:05,105
接下来 我们使用同样的 URL
来创建一个 NSItemProvider

75
00:05:07,608 --> 00:05:11,879
然后我们使用项目提供程序
来创建一个从属性对象的

76
00:05:11,912 --> 00:05:16,416
dragItemsProvider
返回的 UIDragItem

77
00:05:18,252 --> 00:05:22,022
我们还可用其构建一个从属性对象的
activityViewControllerProvider 中

78
00:05:22,055 --> 00:05:26,994
返回的 UIActivityViewController

79
00:05:27,027 --> 00:05:31,198
最后 我们设置属性对象为
编辑 view controller 的

80
00:05:31,231 --> 00:05:34,134
navigationItem 的
documentProperties

81
00:05:34,168 --> 00:05:37,371
我们刚刚写的代码
显示的是这个文档标头

82
00:05:37,404 --> 00:05:39,973
可提供文档快速概览

83
00:05:40,007 --> 00:05:44,211
包括其名称 文件大小和
图标

84
00:05:44,244 --> 00:05:48,081
由于我们指定了拖动项目
和活动 view controller 提供程序

85
00:05:48,115 --> 00:05:51,485
我可以拖动图标
将文档复制到 App 之外

86
00:05:51,518 --> 00:05:55,355
或点击共享按钮
触发 activity view controller

87
00:05:57,057 --> 00:05:59,693
除了展示文档标头

88
00:05:59,726 --> 00:06:02,696
标题菜单这一位置也可用于

89
00:06:02,729 --> 00:06:05,799
提供应用于整个文档的功能

90
00:06:05,832 --> 00:06:09,536
这一菜单中可显示两种操作

91
00:06:09,570 --> 00:06:14,842
预设的本地化标题和字符图像的
系统提供操作

92
00:06:14,875 --> 00:06:17,945
以及 App 提供的自定义操作

93
00:06:19,546 --> 00:06:21,481
由于附带了一些额外功能

94
00:06:21,515 --> 00:06:24,284
我们首先看看重命名操作

95
00:06:24,318 --> 00:06:26,954
我们可以通过遵照重命名
代理协议

96
00:06:26,987 --> 00:06:30,057
将这一操作添加到我们的菜单中

97
00:06:30,090 --> 00:06:34,561
触发后 这一操作会出现在
工具栏的内置重命名 UI 中

98
00:06:35,963 --> 00:06:40,868
首先 我们将 view controller 指定为
其导航项的 renameDelegate

99
00:06:43,403 --> 00:06:48,041
然后 我们执行
navigationItemDidEndRenamingWithTitle

100
00:06:48,075 --> 00:06:51,345
来进行所展示文档
实际重命名操作

101
00:06:52,846 --> 00:06:56,717
这一功能在重命名操作
提交后调用

102
00:06:56,750 --> 00:07:02,322
App 负责重命名文档
处理此操作

103
00:07:02,356 --> 00:07:04,825
有意打开的 API 最后

104
00:07:04,858 --> 00:07:08,228
可支持您 App 可能有的
各种数据模型

105
00:07:08,262 --> 00:07:10,797
接着看另一个系统提供操作

106
00:07:10,831 --> 00:07:15,602
我们首先需要在我们的
编辑 view controller 中重写它们的功能

107
00:07:15,636 --> 00:07:20,474
这里我们应用了复制和移动功能

108
00:07:20,507 --> 00:07:23,877
UIKit自动在
navigationItem 的 titleMenuProvider 中

109
00:07:23,911 --> 00:07:25,612
作为建议 UIMenuElements 的数组

110
00:07:25,646 --> 00:07:28,482
展示系统提供操作

111
00:07:28,515 --> 00:07:32,319
包括重命名操作

112
00:07:32,352 --> 00:07:34,321
要将其置入我们的标题菜单中

113
00:07:34,354 --> 00:07:37,558
只需将它们添加到
返回菜单的 children 中

114
00:07:39,159 --> 00:07:41,094
除了系统指定操作

115
00:07:41,128 --> 00:07:43,797
我们可以添加完整的自定义操作

116
00:07:43,830 --> 00:07:47,067
甚至整个菜单层级

117
00:07:47,100 --> 00:07:53,006
这里我添加了 Export 子菜单
包括导出为 HTML 和 PDF 的子 Action

118
00:07:54,408 --> 00:07:57,444
因此 点击标题视图可调出

119
00:07:57,477 --> 00:08:01,481
包含文档标头
以及新添加的所有操作的菜单

120
00:08:01,515 --> 00:08:03,050
我选择重命名时

121
00:08:03,083 --> 00:08:05,219
可激活内置重命名 UI

122
00:08:05,252 --> 00:08:07,221
我可以重命名文档

123
00:08:08,755 --> 00:08:11,892
现在我们开始建立 App 的
基础结构

124
00:08:11,925 --> 00:08:14,161
我们用 Mac catalyst
搭建 App 时

125
00:08:14,194 --> 00:08:17,064
就可以查看其外观了

126
00:08:17,097 --> 00:08:20,167
当我们在 Mac 上运行 App 时
会发现编辑样式中的

127
00:08:20,200 --> 00:08:23,370
标题向前对齐已经被完美转译

128
00:08:24,872 --> 00:08:27,307
我们的返回动作也可继续

129
00:08:27,341 --> 00:08:30,444
单击后 会调出文件浏览器

130
00:08:31,745 --> 00:08:34,381
系统提供动作和重命名功能

131
00:08:34,414 --> 00:08:37,584
自动显示在 App 的文件菜单中

132
00:08:37,618 --> 00:08:41,655
Mac Catalyst 不会
调用 titleMenuProvider

133
00:08:41,688 --> 00:08:45,993
所以我们的自定义操作
并不包含在文件菜单中

134
00:08:46,026 --> 00:08:48,962
要显示此操作 我们需要使用
主 UIMenuSystem

135
00:08:48,996 --> 00:08:52,966
手动添加到 App 的主菜单中

136
00:08:55,202 --> 00:08:57,905
好了 我们继续现代化进程

137
00:08:57,938 --> 00:09:01,942
我们继续在 Mac 中查看
以逐步达成目标

138
00:09:01,975 --> 00:09:06,880
我们想想工具栏中间区域
提供的可用选项

139
00:09:06,914 --> 00:09:10,083
iOS 15 版本的 App
有一个菜单

140
00:09:10,117 --> 00:09:13,520
可显示许多二级控制功能
和工具

141
00:09:13,554 --> 00:09:17,524
使用中间项目 我们可以让
这些工具更容易被搜索和发现

142
00:09:19,092 --> 00:09:23,463
由于中间区域是可自定义的
我们可以加入一大组控制按钮

143
00:09:23,497 --> 00:09:28,068
而无需担心用不常用按钮
充填 UI

144
00:09:28,101 --> 00:09:32,973
每个人都可以自定义工具栏内容
使其适应自己的工作流

145
00:09:33,006 --> 00:09:37,878
启用自定义的第一步是
在 navigationItem 中

146
00:09:37,911 --> 00:09:39,880
指定一个 customizationIdentifier

147
00:09:41,181 --> 00:09:46,019
接下来 我们将中间项
定义为 UIBarButtonItemGroups

148
00:09:46,053 --> 00:09:50,424
Groups 是一个现有概念
扩展到 UINavigationBar

149
00:09:50,457 --> 00:09:54,962
并增强了对 iOS 16 自定义的支持

150
00:09:54,995 --> 00:09:59,499
这一屏幕快照展示了一组
我们想要默认显示的中间项

151
00:09:59,533 --> 00:10:01,835
左边的同步滚动按钮

152
00:10:01,869 --> 00:10:04,872
提供了其它任何方式

153
00:10:04,905 --> 00:10:07,374
都无法企及的重要功能

154
00:10:07,407 --> 00:10:09,977
因此可以用 UIBarButtonItem
新创建的 creatingFixedGroup() 功能

155
00:10:10,010 --> 00:10:15,682
来将其置于固定组中

156
00:10:15,716 --> 00:10:20,087
固定组不可自定义
也不能被用户移动

157
00:10:22,022 --> 00:10:25,993
另一方面 添加链接按钮
不提供关键功能

158
00:10:26,026 --> 00:10:30,531
同样的任务可以通过在编辑器中
输入链接标签来实现

159
00:10:30,564 --> 00:10:36,470
所以我们使用 creatingOptionalGroup
来创建一个完整的自定义项目

160
00:10:36,503 --> 00:10:39,773
我们为其指定一个
独特的 customizationIdentifier

161
00:10:39,806 --> 00:10:43,544
这样在 App 的登陆期间
自定义操作能保持一致

162
00:10:45,112 --> 00:10:47,848
我们用类似的流程在默认组中

163
00:10:47,881 --> 00:10:51,385
定义剩余的项目
然后继续操作无需默认的

164
00:10:51,418 --> 00:10:54,488
低优先级项目

165
00:10:54,521 --> 00:10:58,392
其中之一就是文本格式组
包括粗体

166
00:10:58,425 --> 00:11:00,761
斜体 下划线项目

167
00:11:01,995 --> 00:11:04,231
这些项目不是特别重要
无需在默认中显示

168
00:11:04,264 --> 00:11:08,836
但我们希望能在自定义的 popover 弹出框中
显示 这样能被拖入工具栏中

169
00:11:10,470 --> 00:11:13,540
要实现这一效果 我们可以
使用 UIBarButtonItemGroup 的

170
00:11:13,574 --> 00:11:18,812
optionalGroup 初始化器
isInDefaultCustomization 设置为 false

171
00:11:21,248 --> 00:11:24,218
我们也要为该组指定代表项目

172
00:11:24,251 --> 00:11:26,353
因此在 popover 弹出框中
能显示标题

173
00:11:26,386 --> 00:11:28,388
以及在工具栏空间有限时

174
00:11:28,422 --> 00:11:31,692
能显示缩略的信息

175
00:11:33,227 --> 00:11:35,662
回到 iPad 中 我们定义的中间项

176
00:11:35,696 --> 00:11:38,465
会显示在工具栏的中间区域

177
00:11:38,498 --> 00:11:40,734
如果我点击新增的“更多”按钮

178
00:11:40,767 --> 00:11:44,705
会显示一个带有
“自定义工具栏”的菜单

179
00:11:44,738 --> 00:11:48,108
单击后 自定义模式会被激活

180
00:11:49,376 --> 00:11:53,847
我们标记为固定的同步滚动按钮
不再强调且变为静态

181
00:11:53,881 --> 00:11:58,318
其它所有项目都弹起并抖动
表示它们都是可自定义的

182
00:12:00,220 --> 00:12:04,258
可选项如格式组在
popover 弹出框中显示

183
00:12:04,291 --> 00:12:06,393
可被拖入工具栏中

184
00:12:09,596 --> 00:12:12,499
我们在 Mac 中运行 App 时
会发现中间项

185
00:12:12,533 --> 00:12:16,837
已经被转换为完全自定义的
macOS 工具栏按钮

186
00:12:19,106 --> 00:12:24,378
我们继续下一步前 先暂时
回到 iPad 重新调整 App 的大小

187
00:12:24,411 --> 00:12:27,080
现在 我们工具栏上的
可用空间更少了

188
00:12:27,114 --> 00:12:30,684
中间项已不可见

189
00:12:30,717 --> 00:12:34,821
UIKit 会自动处理中间项
的显示和隐藏

190
00:12:34,855 --> 00:12:37,691
来适应不同的可用空间

191
00:12:37,724 --> 00:12:42,462
无法包含的额外项目都会
在溢出菜单中显示

192
00:12:42,496 --> 00:12:45,332
标准工具栏按钮项将自动转换为

193
00:12:45,365 --> 00:12:47,401
对应的菜单选项

194
00:12:47,434 --> 00:12:52,873
但如果需要的话
我们也可以提供自定义菜单选项

195
00:12:52,906 --> 00:12:56,877
由于 UIKit 对自定义视图项的目的
没有对应方案

196
00:12:56,910 --> 00:13:00,047
我们的滑块项并不会自动转译

197
00:13:00,080 --> 00:13:03,317
我们需要手动指定菜单项目

198
00:13:04,751 --> 00:13:06,086
这是我们的滑块项

199
00:13:06,119 --> 00:13:08,722
这是有自定义视图的
单一工具栏按钮项

200
00:13:08,755 --> 00:13:12,426
隐藏于可选工具栏按钮组之下

201
00:13:12,459 --> 00:13:15,162
为了提供滑块的核心功能

202
00:13:15,195 --> 00:13:19,867
我们将 menuRepresentation 定义为
带有减少 重置

203
00:13:19,900 --> 00:13:22,603
和增加动作的 UIMenu

204
00:13:25,038 --> 00:13:28,642
使用 UIMenu 的
新 preferredElementSize 属性

205
00:13:28,675 --> 00:13:33,313
我们可以为菜单提供
更紧凑的并行动作

206
00:13:35,516 --> 00:13:38,585
使用新的
keepsMenuPresented 属性

207
00:13:38,619 --> 00:13:42,489
我们可以保证每个动作后的
菜单展示都能正常运行

208
00:13:42,523 --> 00:13:45,092
在不取消
或重新显示菜单的情况下

209
00:13:45,125 --> 00:13:48,929
让字体大小
可以多次修改

210
00:13:48,962 --> 00:13:51,331
让我们再次在 iPad 中运行看看

211
00:13:51,365 --> 00:13:54,001
现在我们调出溢出菜单

212
00:13:54,034 --> 00:13:58,739
滑块显示为有三个并行行动的
内联菜单

213
00:13:58,772 --> 00:14:01,175
包含了滑块的全部功能

214
00:14:02,576 --> 00:14:05,445
由于 Mac 中不存在
小元素尺寸

215
00:14:05,479 --> 00:14:09,716
动作将显示为标准 mac OS
菜单项

216
00:14:09,750 --> 00:14:12,986
以上是 UI 配置和自定义

217
00:14:13,020 --> 00:14:16,023
接下来 我们看看如何在 App 中
使用新的集合视图和菜单 API

218
00:14:16,056 --> 00:14:19,259
加速一些工作流程

219
00:14:19,293 --> 00:14:22,396
我们的 App 有一个
侧边栏内容表格

220
00:14:22,429 --> 00:14:27,401
可用于快速导航文档
或操作顶层标签

221
00:14:27,434 --> 00:14:31,371
在 iOS 16 之前
增加编辑多重项目的能力

222
00:14:31,405 --> 00:14:34,775
不一定意味着执行
不同的编辑模式

223
00:14:34,808 --> 00:14:37,911
将批量操作
降低为工具栏中的按钮

224
00:14:40,914 --> 00:14:44,718
iOS 16 推出多项目菜单的
全新设计

225
00:14:44,751 --> 00:14:49,122
有一系列的项目明确指出了
菜单影响是哪个项目

226
00:14:49,156 --> 00:14:53,460
提供了多项目拖拽的直接转换

227
00:14:53,493 --> 00:14:57,464
在桌面级 iPad App 中
这个新的菜单设计与

228
00:14:57,497 --> 00:15:00,734
轻量型选择样式最为匹配

229
00:15:00,767 --> 00:15:03,637
这里的“轻量型”
是指选择多重项目时

230
00:15:03,670 --> 00:15:06,540
无需在编辑模式中开启
集合视图

231
00:15:06,573 --> 00:15:09,610
或对 App 的 UI 做出
重大改变

232
00:15:09,643 --> 00:15:15,082
我们使用当前 API 即可实现
并启动键盘聚焦

233
00:15:15,115 --> 00:15:18,285
首先 我们将 allowsMultipleSelection
设置为 true

234
00:15:21,121 --> 00:15:25,626
然后将 allowsFocus 设置 为 true
启动键盘聚焦

235
00:15:28,128 --> 00:15:33,600
我们可以设置 selectionFollowsFocus
为 true 将聚焦转变为驱动选择

236
00:15:36,270 --> 00:15:39,306
如果在 iPad 上运行
我们马上就能注意到

237
00:15:39,339 --> 00:15:41,775
每个项目都添加到了选择中

238
00:15:41,808 --> 00:15:44,211
但仍然触发了选择动作

239
00:15:44,244 --> 00:15:46,580
导致编辑器视图滚动

240
00:15:46,613 --> 00:15:49,650
我们回到代码 看下是什么原因

241
00:15:51,285 --> 00:15:52,286
找到了

242
00:15:52,319 --> 00:15:54,855
didSelectItemAtIndexPath 中的代码

243
00:15:54,888 --> 00:15:57,724
尝试在编辑模式中
通过检查collectionView 的

244
00:15:57,758 --> 00:16:01,695
isEditing 属性来禁止滚动

245
00:16:01,728 --> 00:16:05,098
现在我们已经允许了编辑模式外的
多重选择

246
00:16:05,132 --> 00:16:08,001
这一代码在每次选择时都会运行

247
00:16:08,035 --> 00:16:11,972
我们可以通过使用新的
UICollectionViewDelegate 方法来修正

248
00:16:12,005 --> 00:16:16,510
我们执行
performPrimaryActionForItemAtIndexPath

249
00:16:16,543 --> 00:16:21,215
将滚动代码移动到这个新功能中

250
00:16:21,248 --> 00:16:24,251
由于这个功能仅在点击
单个项目时才会调用

251
00:16:24,284 --> 00:16:26,420
集合视图并没有编辑

252
00:16:26,453 --> 00:16:29,089
我们不需要检查编辑模式

253
00:16:31,658 --> 00:16:34,795
由于我们没有与选择相关的行为

254
00:16:34,828 --> 00:16:39,333
就可以将 indexPath 中
所做的选择项操作移除

255
00:16:43,237 --> 00:16:46,874
回到 iPad 编辑器视图中

256
00:16:46,907 --> 00:16:50,177
选择多重项目不再滚动到
对应的文本中

257
00:16:50,210 --> 00:16:53,080
完成这一操作后
我们将其真正添加到菜单支持中

258
00:16:55,382 --> 00:17:00,554
在 iPadOS 16 中
UICollectionViewDelegate 当前单一项菜单方法

259
00:17:00,587 --> 00:17:02,256
已不适用

260
00:17:02,289 --> 00:17:08,328
其替代方法支持在任意位置从 0
到多重项目显示菜单

261
00:17:08,362 --> 00:17:11,298
指定 indexPaths 数组中的项目数量

262
00:17:11,331 --> 00:17:13,500
取决于项目是如何选取的

263
00:17:13,534 --> 00:17:15,636
以及菜单是在何处激活的

264
00:17:17,271 --> 00:17:22,042
如果数组为空 则菜单在单元格
之间的空白区激活

265
00:17:25,012 --> 00:17:26,914
如果有单一的 indexPath

266
00:17:26,947 --> 00:17:30,150
则在取消选择

267
00:17:30,184 --> 00:17:32,386
或单一选择项目上激活

268
00:17:35,088 --> 00:17:37,824
如果有超过一个项目 则菜单在

269
00:17:37,858 --> 00:17:41,461
多重选择部分激活

270
00:17:44,031 --> 00:17:47,668
如果我回到 iPad 中
再次选择上面的四个项目

271
00:17:47,701 --> 00:17:50,103
双指单击其中一个选择项目

272
00:17:50,137 --> 00:17:52,706
会出现新的多项菜单

273
00:17:56,343 --> 00:17:58,111
当我在 Mac 中做同样的操作时

274
00:17:58,145 --> 00:18:01,248
在选择单元格周围
会绘制一个圆环以突出强调

275
00:18:02,783 --> 00:18:04,685
多项菜单完成后

276
00:18:04,718 --> 00:18:07,321
我们看看使用新的
查找和替换和编辑菜单功能

277
00:18:07,354 --> 00:18:10,624
增强文本编辑体验

278
00:18:10,657 --> 00:18:13,660
我们的 App 使用
UITextView 作为编辑器

279
00:18:13,694 --> 00:18:17,931
无需任何自定义的
查找和替换行为

280
00:18:17,965 --> 00:18:21,602
因此 我们启用默认系统功能

281
00:18:21,635 --> 00:18:26,807
只需要将文本视图的
isFindInteractionEnabled 属性设置为 true

282
00:18:26,840 --> 00:18:29,743
这一设置完成后 编辑文本时
按 Command+F

283
00:18:29,776 --> 00:18:31,979
调出查找和替换 UI

284
00:18:33,180 --> 00:18:37,084
在文本视图的编辑菜单中增加
自定义行动并不需要多大成本

285
00:18:37,117 --> 00:18:40,988
但却能启动一些强大 快速的
编辑功能

286
00:18:41,021 --> 00:18:44,057
我们只用执行新的
UITextViewDelegate 方法

287
00:18:44,091 --> 00:18:48,495
在范围建议行动内编辑文本菜单

288
00:18:48,529 --> 00:18:52,699
在执行操作中 我们可以构建
和返回结合自定义行动的

289
00:18:52,733 --> 00:18:55,636
与系统菜单的 UIMenu

290
00:18:55,669 --> 00:18:57,204
如这个隐藏行动

291
00:18:59,907 --> 00:19:01,308
结果如下

292
00:19:01,341 --> 00:19:04,011
当我选择文本 调用编辑菜单时

293
00:19:04,044 --> 00:19:08,615
自定义操作和
系统提供操作都会显示

294
00:19:08,649 --> 00:19:11,952
您可观看“采用桌面级
编辑交互”视频

295
00:19:11,985 --> 00:19:16,223
以获取更多关于
查找和替换及编辑菜单的信息

296
00:19:16,256 --> 00:19:17,090
就是这样

297
00:19:17,124 --> 00:19:20,127
有了这些改变 我们就能通过
一些重大的基础步骤

298
00:19:20,160 --> 00:19:22,496
制作桌面级 App

299
00:19:22,529 --> 00:19:25,599
并将其无缝转译到 Mac 中

300
00:19:25,632 --> 00:19:28,435
使用 iPadOS 16 提供的 API

301
00:19:28,468 --> 00:19:31,338
用类似的流程操作您的 App

302
00:19:31,371 --> 00:19:35,642
首先选择适合您 App 的
导航样式

303
00:19:35,676 --> 00:19:39,947
用文档属性和标题菜单
增强文档工作流程

304
00:19:39,980 --> 00:19:45,452
用中间项显示重要功能
提供自定义功能

305
00:19:45,485 --> 00:19:49,289
在多项目菜单中启动
多重项目的快速活动栏

306
00:19:49,323 --> 00:19:53,093
用查找和替换
以及全新的编辑菜单

307
00:19:53,126 --> 00:19:54,795
增强 App 的文本编辑体验

308
00:19:54,828 --> 00:19:58,031
不管您是构建一个新的 App
还是更新现有 App

309
00:19:58,065 --> 00:20:01,668
我都迫不及待想使用
您应用了这些新工具的 App 了

310
00:20:01,702 --> 00:20:04,171
感谢大家的观看

