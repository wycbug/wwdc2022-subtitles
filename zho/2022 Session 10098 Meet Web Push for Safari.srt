1
00:00:00,334 --> 00:00:07,341
♪ ♪

2
00:00:09,877 --> 00:00:12,379
Brady Eidson:
大家好 我叫 Brady Eidson

3
00:00:12,412 --> 00:00:15,082
是 WebKit 架构团队的工程师

4
00:00:15,115 --> 00:00:19,019
我很高兴向您介绍
Safari 浏览器中的网页推送功能

5
00:00:19,052 --> 00:00:21,955
网页推送可以让您
给您的网络 App 用户

6
00:00:21,989 --> 00:00:24,358
发送远程通知

7
00:00:24,391 --> 00:00:28,161
这里 在屏幕的右上角

8
00:00:28,195 --> 00:00:30,364
是来自 webkit.org 的通知显示

9
00:00:30,397 --> 00:00:34,601
点击通知打开
新窗口中的 WebKit 博客文章

10
00:00:34,635 --> 00:00:37,971
在我讲述它的工作原理的
其它细节之前

11
00:00:38,005 --> 00:00:41,708
我想回答几个
很多开发者想问的问题

12
00:00:43,043 --> 00:00:47,848
从 macOS Ventura 开始
Mac Safari 浏览器开始支持网页推送

13
00:00:47,881 --> 00:00:52,052
明年 iOS 和 iPadOS
也会安装网页推送

14
00:00:53,320 --> 00:00:56,723
Apple 的 Safari 浏览器推送通知
很久以前就向

15
00:00:56,757 --> 00:00:59,660
接触 Mac Safari 浏览器用户提供了

16
00:00:59,693 --> 00:01:02,596
如今 它还在继续起作用
我很高兴地宣布

17
00:01:02,629 --> 00:01:04,631
我们增加了对网页推送的支持

18
00:01:04,665 --> 00:01:08,402
这是真正的网页推送

19
00:01:08,435 --> 00:01:11,238
各种网络标准的相同组合

20
00:01:11,271 --> 00:01:13,774
也在其它浏览器中使用

21
00:01:13,807 --> 00:01:16,343
我们稍后将讨论这些标准 但是

22
00:01:16,376 --> 00:01:18,412
最重要的是

23
00:01:18,445 --> 00:01:22,182
如果您对您的网络标准 App
进行过编码

24
00:01:22,216 --> 00:01:25,219
就无需在 Safari 浏览器中
对它做任何改变

25
00:01:25,252 --> 00:01:28,689
当然 如果您不用 Safari 浏览器
进行浏览器检测的话

26
00:01:28,722 --> 00:01:30,257
那么您还要做一些其它的工作

27
00:01:30,290 --> 00:01:35,062
现在是浏览器检测到
功能检测的最佳时间

28
00:01:35,095 --> 00:01:37,731
功能检测一直是最佳实践

29
00:01:37,764 --> 00:01:40,133
我们使用的是相同的
Apple 推送通知服务

30
00:01:40,167 --> 00:01:44,071
在所有 Mac 和 iOS 设备上
为本地推送提供动力

31
00:01:44,104 --> 00:01:48,609
但没有 Apple Developer 帐户
需要访问 Safari 浏览器用户

32
00:01:48,642 --> 00:01:52,145
我们正在使用新的
网页推送的端点 URL

33
00:01:52,179 --> 00:01:57,084
它带出另一件事
可能在无意中排除了 Safari 浏览器

34
00:01:57,117 --> 00:02:00,053
如果您在服务器上严密管理推送端点

35
00:02:00,087 --> 00:02:05,058
请确保您允许 URL
来自 push.apple.com 的任何子域

36
00:02:05,092 --> 00:02:08,161
对于那些重要的问题
让我们不但来解答

37
00:02:08,195 --> 00:02:10,130
更要详细地谈一下

38
00:02:10,163 --> 00:02:13,233
首先 我们从用户的角度来看一下

39
00:02:13,267 --> 00:02:15,869
Safari 浏览器中的网页推送体验

40
00:02:15,903 --> 00:02:19,873
然后我们将介绍整个网页推送流程
从请求许可

41
00:02:19,907 --> 00:02:23,710
到在通知中心处理进入许可的点击

42
00:02:23,744 --> 00:02:29,216
最后 我们来看一看 从网页推送
到现有的网络 App 需要添加什么

43
00:02:29,249 --> 00:02:32,586
但首先 我们来看一下
Mac Safari 浏览器用户体验

44
00:02:32,619 --> 00:02:36,757
现场演示一下将是最好的介绍方法

45
00:02:36,790 --> 00:02:39,793
这是 macOS Ventura 上的
Safari 浏览器

46
00:02:39,826 --> 00:02:43,363
在这个浏览器选项卡中
我打开了 webkit.org

47
00:02:43,397 --> 00:02:46,266
我需要用 WebKit 开源项目
保持更新

48
00:02:46,300 --> 00:02:49,069
网页推送是一个很好的方法

49
00:02:49,102 --> 00:02:53,040
如果没有用户请求手势

50
00:02:53,073 --> 00:02:56,109
是不允许使用 webkit.org
请求推送权限的

51
00:02:56,143 --> 00:03:01,181
所以我会在这里
点击这个钟形按钮订阅通知

52
00:03:01,215 --> 00:03:04,885
您在这里看到的是系统通知提示

53
00:03:04,918 --> 00:03:07,888
这与其它 App 是一样的

54
00:03:07,921 --> 00:03:11,525
在这种情况下 它代表 webkit.org

55
00:03:11,558 --> 00:03:15,162
我将单击 allow 一切就绪

56
00:03:15,195 --> 00:03:20,200
webkit.org 给了我选择
收到有关新博客文章的通知

57
00:03:20,234 --> 00:03:23,070
以及对源代码存储库的新的承诺

58
00:03:23,103 --> 00:03:27,508
我知道每次提交都会收到通知
会分散我对重要工作的注意力

59
00:03:27,541 --> 00:03:31,545
但我真的想收到
有关新的博客文章的消息

60
00:03:31,578 --> 00:03:33,614
所以我现在要检查那个框

61
00:03:33,647 --> 00:03:37,417
巧合的是 一定有人刚刚发布了
关于网络推送的

62
00:03:37,451 --> 00:03:39,152
WebKit 博客文章

63
00:03:39,186 --> 00:03:41,855
此通知看起来和任何其它的一样

64
00:03:41,889 --> 00:03:44,525
是由 webkit.org 推送的

65
00:03:44,558 --> 00:03:47,060
我可以点击它来激活

66
00:03:47,094 --> 00:03:50,163
还有博客文章
要在 Safari 浏览器中打开

67
00:03:50,197 --> 00:03:53,367
一旦用户授予网站权限

68
00:03:53,400 --> 00:03:56,270
他们就控制了该许可

69
00:03:56,303 --> 00:03:59,873
作为一个 macOS 用户
我习惯了在系统设置里面

70
00:03:59,907 --> 00:04:03,243
管理通知首选项 那里就是我可以

71
00:04:03,277 --> 00:04:07,281
配置 webkit.org 的通知的地方

72
00:04:07,314 --> 00:04:12,486
同样丰富的配置 正如我在
任何其他 App 或服务中所发现的那样

73
00:04:12,519 --> 00:04:16,089
作为 Safari 浏览器用户
我习惯于从 Safari 浏览器偏好设置中

74
00:04:16,123 --> 00:04:18,225
管理网站设置

75
00:04:18,258 --> 00:04:24,031
我也可以去那里打开或关闭
webkit.org 的权限

76
00:04:24,064 --> 00:04:28,035
这就是网页推送的工作原理
适用于 Mac Safari 浏览器中的用户

77
00:04:28,068 --> 00:04:32,606
在我们继续之前 我想重新回复一下
该演示中涵盖的一些内容

78
00:04:32,639 --> 00:04:36,243
首先 我们不希望用户
被没有订阅的垃圾邮件

79
00:04:36,276 --> 00:04:37,978
所打扰

80
00:04:38,011 --> 00:04:41,081
所以一个网站只有在请求的时候
通过点击鼠标或键盘

81
00:04:41,114 --> 00:04:44,651
才会推送订阅

82
00:04:44,685 --> 00:04:48,222
一旦网站获得许可 向用户显示通知

83
00:04:48,255 --> 00:04:50,224
用户就会控制该权限

84
00:04:50,257 --> 00:04:54,328
他们可以选择在 Safari 浏览器的首选项
或系统设置中对它进行管理

85
00:04:54,361 --> 00:04:57,998
如果他们恰巧在两者中
都对它进行管理 设置将保持同步

86
00:04:58,031 --> 00:05:01,935
最后 如果您针对不同类型的事件
提供通知

87
00:05:01,969 --> 00:05:05,372
最好的做法是针对通知类型
在您的网络 App 中

88
00:05:05,405 --> 00:05:07,808
提供精细化控制

89
00:05:07,841 --> 00:05:09,409
就像其他 App 一样

90
00:05:09,443 --> 00:05:11,912
现在您已经看到了
网页推送的实际应用

91
00:05:11,945 --> 00:05:14,815
让我们深入了解一下
每一步正在发生什么

92
00:05:14,848 --> 00:05:17,951
部分开发者已经对此非常熟悉

93
00:05:17,985 --> 00:05:21,722
但是对于那些刚接触网页推送的人来说
我必须一步一步来

94
00:05:21,755 --> 00:05:25,459
向您推荐相关标准和过程中的文档

95
00:05:25,492 --> 00:05:30,063
首先是用户
在浏览器选项卡中访问您的网站

96
00:05:30,097 --> 00:05:33,133
这是在 Safari 浏览器中
打开的 webkit.org

97
00:05:33,166 --> 00:05:37,638
由于它是在选项卡中打开的
它可以安装一个 Service Worker

98
00:05:37,671 --> 00:05:40,807
Service Worker 是一个在整个域中
运行的 JavaScript 单元

99
00:05:40,841 --> 00:05:45,913
是从当前打开的浏览器选项卡

100
00:05:45,946 --> 00:05:48,582
一旦 Service Worker 脚本已安装

101
00:05:48,615 --> 00:05:52,152
您的网络 App 就符合了
请求推送订阅的条件

102
00:05:52,186 --> 00:05:56,823
如前所述
此请求必须与用户手势相关联

103
00:05:56,857 --> 00:06:01,161
当点击这个钟形按钮时
webkit.org 请求就会得到许可

104
00:06:01,195 --> 00:06:04,097
这满足了用户手势要求

105
00:06:04,131 --> 00:06:07,000
当您的网站请求推送订阅时

106
00:06:07,034 --> 00:06:09,436
用户就会看到此系统提示

107
00:06:09,469 --> 00:06:11,338
这是他们可以进行
关于授予您的网站这种强大能力的

108
00:06:11,371 --> 00:06:13,941
最终通话的地方

109
00:06:15,142 --> 00:06:18,078
用户可能会拒绝该请求

110
00:06:18,111 --> 00:06:21,181
您的 JavaScript 应该
准备对它进行处理

111
00:06:21,215 --> 00:06:23,483
但假设用户授予了权限

112
00:06:23,517 --> 00:06:26,854
您的 JavaScript 就会回复一个
PushSubscription 对象

113
00:06:26,887 --> 00:06:30,324
里面有您的服务器
给这个浏览器的用户发送推送消息时

114
00:06:30,357 --> 00:06:32,459
所需的一切

115
00:06:32,492 --> 00:06:36,096
像这样的信息
要使用确切的 URL 端点

116
00:06:36,129 --> 00:06:39,833
您可以以任何
适合您的网络 App 的方式

117
00:06:39,867 --> 00:06:42,669
将 PushSubscription 的有效载荷
返回您的服务器

118
00:06:42,703 --> 00:06:47,541
许多流行的服务器包都有
网页推送支持管理订阅

119
00:06:47,574 --> 00:06:49,543
或者您可以自已翻阅

120
00:06:49,576 --> 00:06:53,714
在实际当中这同样适用于如何
以及何时发送推送消息

121
00:06:53,747 --> 00:06:56,416
到您的服务器知道的 URL 端点

122
00:06:56,450 --> 00:07:00,454
我不能告诉您什么时候这样做
这取决于您和您的网站

123
00:07:00,487 --> 00:07:03,023
但是一旦您决定发送该推送消息

124
00:07:03,056 --> 00:07:05,125
我可以在接下来发生的事情中
为您提供帮助

125
00:07:05,158 --> 00:07:09,329
还记得推送请求
是如何安装到 Service Worker 的吗

126
00:07:09,363 --> 00:07:13,300
一旦您的服务器发送了推送消息
Safari 浏览器便会接收到它

127
00:07:13,333 --> 00:07:18,238
就会唤醒您的 Service Worker
并向其发送一个 JavaScript 推送事件

128
00:07:18,272 --> 00:07:21,675
在通知中心 向用户显示通知

129
00:07:21,708 --> 00:07:25,379
是处理推送事件时的要求

130
00:07:25,412 --> 00:07:29,183
如果您的网站当时
在浏览器选项卡中处于打开状态

131
00:07:29,216 --> 00:07:32,319
网站就会接收推送事件
并显示通知发生

132
00:07:32,352 --> 00:07:36,557
如果您的网站当前未在浏览器
选项卡中打开 这种情况也会发生

133
00:07:36,590 --> 00:07:39,226
对于 macOS Ventura 上的
Safari 浏览器

134
00:07:39,259 --> 00:07:43,263
即使 Safari 浏览器当前未运行
也会发生这种情况

135
00:07:43,297 --> 00:07:47,234
最后一步
如果您的用户点击了那个通知

136
00:07:47,267 --> 00:07:50,838
一个通知点击事件就会被
发送到您的 Service Worker

137
00:07:50,871 --> 00:07:53,106
这样它就会适时响应

138
00:07:53,140 --> 00:07:55,809
例如 通过打开一个新窗口

139
00:07:55,843 --> 00:07:58,979
让 URL 与该通知相关联

140
00:07:59,012 --> 00:08:03,016
我们带您了解了网页推送流程

141
00:08:03,050 --> 00:08:05,252
现在要通过
向现有的网络 App

142
00:08:05,285 --> 00:08:09,089
实际添加网页推送支持
来了解更多细节

143
00:08:09,122 --> 00:08:13,126
除了 webkit.org
Browser Pet 对于

144
00:08:13,160 --> 00:08:17,097
Safari 浏览器和 WebKit 团队来说
是最关键任务的内部工具

145
00:08:17,130 --> 00:08:20,367
让部门每个人对他们最喜欢的
WebKitten 和 Pup

146
00:08:20,400 --> 00:08:24,404
在 Safari 浏览器保持更新
一直是 Browser Pet 的使命

147
00:08:24,438 --> 00:08:27,207
而网页推送让这比以往更加容易

148
00:08:27,241 --> 00:08:31,178
我们内部的 BrowserPet 域
已经有一个 ServiceWorker 脚本被注册

149
00:08:31,211 --> 00:08:35,983
以加快页面加载
并在多个选项卡之间同步

150
00:08:36,016 --> 00:08:40,287
概括地说 ServiceWorker 脚本
和这有很大的相似之处

151
00:08:40,320 --> 00:08:44,157
当工程师访问
选项卡中的 Browser Pet 页面时

152
00:08:44,191 --> 00:08:47,861
这个 JavaScript 摘录将确定
Service Worker 脚本

153
00:08:47,895 --> 00:08:51,932
是否已经注册 或在必要时注册

154
00:08:51,965 --> 00:08:55,302
注意 前面提到
我们在这里练习的功能检测

155
00:08:55,335 --> 00:08:57,871
是最佳实践

156
00:08:57,905 --> 00:09:01,341
使用 Service Worker 先决条件已搞定

157
00:09:01,375 --> 00:09:03,877
我们准备好订阅推送了

158
00:09:03,911 --> 00:09:07,314
请记住 没有明确的用户手势

159
00:09:07,347 --> 00:09:10,250
您不能要求推送订阅

160
00:09:10,284 --> 00:09:13,387
运行此脚本作为
按钮的 onclick 处理程序的响应

161
00:09:13,420 --> 00:09:16,490
是满足该要求的多种方式之一

162
00:09:16,523 --> 00:09:18,926
用户点击该按钮之后

163
00:09:18,959 --> 00:09:22,062
这里就有了推送订阅的请求代码

164
00:09:22,095 --> 00:09:24,831
我将对这几点进行更深层次的探讨

165
00:09:24,865 --> 00:09:29,236
首先 我们需要配置推送订阅请求

166
00:09:29,269 --> 00:09:32,673
重要的一点是在我们的服务器上
使用公钥

167
00:09:32,706 --> 00:09:36,510
到 Apple 推送服务器上识别自已

168
00:09:36,543 --> 00:09:41,815
这里 我们使用的标准技术叫做 VAPID
和其他浏览器一样

169
00:09:41,849 --> 00:09:45,485
有时候 我们不会再
在这里重复 VAPID 的细节

170
00:09:45,519 --> 00:09:47,654
但是网上有资源来帮助您

171
00:09:47,688 --> 00:09:51,391
在您的的服务器设置中
使用最好的解决方案

172
00:09:51,425 --> 00:09:56,163
有了 VAPID 密钥集
我们就准备好配置订阅请求了

173
00:09:56,196 --> 00:09:59,132
请注意 我们明确说明

174
00:09:59,166 --> 00:10:03,070
我们承诺永远使推送用户可见

175
00:10:03,103 --> 00:10:06,406
当 JavaScript Push API 标准

176
00:10:06,440 --> 00:10:09,676
选择在 JavaScript 运行时

177
00:10:09,710 --> 00:10:13,914
对推送不予回应
是大多数浏览器所不予支持的

178
00:10:13,947 --> 00:10:16,216
Safari 浏览器不支持这种情况

179
00:10:16,250 --> 00:10:20,821
和大多数网站一样
Browser Pet 不需要这种情况

180
00:10:20,854 --> 00:10:23,924
然后我们请求推送权限

181
00:10:23,957 --> 00:10:26,660
对于权限提示中的
这行 JavaScript 结果

182
00:10:26,693 --> 00:10:30,063
用户可以选择批准或拒绝

183
00:10:30,097 --> 00:10:32,032
假设用户授予权限

184
00:10:32,065 --> 00:10:34,568
为了 Browser Pet
所有 Safari 浏览器团队成员都会这样做

185
00:10:34,601 --> 00:10:37,237
这会给我们一个
PushSubscription 对象

186
00:10:37,271 --> 00:10:40,374
它详细说明了如何在用户们的
浏览器中接触到他们

187
00:10:40,407 --> 00:10:44,244
URL 端点以及密钥等

188
00:10:44,278 --> 00:10:47,114
可用于把中转的推送消息加密

189
00:10:47,147 --> 00:10:51,218
最后 我们需要把所有这些细节
发送到我们的服务器上

190
00:10:51,251 --> 00:10:54,955
正如先前所说 基于您的具体应用

191
00:10:54,988 --> 00:10:57,391
具体情况会有所不同

192
00:10:57,424 --> 00:11:00,961
我们的 BrowserPet 服务器
使用 WordPress

193
00:11:00,994 --> 00:11:04,097
已经有一些插件用于支持
标准网页推送

194
00:11:04,131 --> 00:11:07,334
很可能您在后端会发现同样的情况

195
00:11:07,367 --> 00:11:10,337
而且网上有资源
能帮助找到几乎任何设置的

196
00:11:10,370 --> 00:11:12,139
正确解决方案

197
00:11:12,172 --> 00:11:16,009
现在我们需要回到
我们的 Service Worker JavaScript 代码

198
00:11:16,043 --> 00:11:20,681
它需要处理一些
从推送事件开始的新事件

199
00:11:20,714 --> 00:11:25,118
当推送消息从 Browser Pet 服务器
换到这个浏览器时

200
00:11:25,152 --> 00:11:28,655
这个 Service Worker
就会收到一个推送事件

201
00:11:28,689 --> 00:11:32,092
这个引用名
包含 PushMessageData 对象

202
00:11:32,125 --> 00:11:35,929
获取您的服务器发送的数据
有多种方式

203
00:11:35,963 --> 00:11:39,066
我们在这里使用 JSON 访问器

204
00:11:39,099 --> 00:11:41,468
记住 当我们订阅推送时

205
00:11:41,502 --> 00:11:45,005
我们承诺的 JavaScript
始终是用户可见的吗

206
00:11:45,038 --> 00:11:48,408
这意味着我们在响应每次推送时

207
00:11:48,442 --> 00:11:50,744
必须始终显示为平台本机通知

208
00:11:50,777 --> 00:11:55,249
最好在您的推送事件处理中
尽早执行此操作

209
00:11:55,282 --> 00:11:57,818
我们正全力从那个 JSON blob 中

210
00:11:57,851 --> 00:12:02,656
配置通知 包括使用 URL 设置操作

211
00:12:02,689 --> 00:12:05,325
这很快就会派上用场

212
00:12:05,359 --> 00:12:09,897
显示通知后 我们需要让用户点击它

213
00:12:09,930 --> 00:12:13,333
我们的 Service Worker 脚本
还有一个事件要处理

214
00:12:13,367 --> 00:12:18,005
在这个 notificationclick 处理程序中
BrowserPet 将从被点击的通知中

215
00:12:18,038 --> 00:12:21,408
获取 URL 以打开一个新窗口

216
00:12:21,441 --> 00:12:24,178
注意 这是一种非常常见的模式

217
00:12:24,211 --> 00:12:28,782
这是所有我们需要写入的 JavaScript
我们需要用它来支持网页推送

218
00:12:28,815 --> 00:12:31,818
当然 最好是在开发过程中
获得一些帮助

219
00:12:31,852 --> 00:12:35,556
和往常一样
这是 Web Inspector 的用武之地

220
00:12:35,589 --> 00:12:39,059
除了帮助
您的网站在浏览器选项卡中打开

221
00:12:39,092 --> 00:12:42,629
Web Inspector 还可以检查
Service Worker 实例

222
00:12:42,663 --> 00:12:45,365
并在事件处理程序上设置断点

223
00:12:45,399 --> 00:12:48,836
这一切会让您检查和调试

224
00:12:48,869 --> 00:12:52,206
订阅推送的 JavaScript
以及处理推送事件

225
00:12:52,239 --> 00:12:55,776
和通知事件的服务人员代码

226
00:12:55,809 --> 00:12:59,012
此外 Apple 推送通知服务器

227
00:12:59,046 --> 00:13:01,682
在您试图发布推送消息的时候

228
00:13:01,715 --> 00:13:04,384
如果出现了问题
那么就会出现一些人类可读性错误

229
00:13:04,418 --> 00:13:08,789
查看与这次讲座相关的更多链接
以获取更多资料

230
00:13:08,822 --> 00:13:12,492
在编写该代码时 我想就用户隐私

231
00:13:12,526 --> 00:13:14,828
和电源使用提出的几点

232
00:13:14,862 --> 00:13:17,931
进行更详细的讲解

233
00:13:17,965 --> 00:13:20,868
重要的是 我不是第一次这么说了

234
00:13:20,901 --> 00:13:24,538
订阅推送需要用户手势

235
00:13:24,571 --> 00:13:28,041
与其他网络平台的特权功能一样

236
00:13:28,075 --> 00:13:30,410
对于用户来说 在实际当中

237
00:13:30,444 --> 00:13:34,481
要求用户在启用网页推送时
先回答问题是正确的选择

238
00:13:34,515 --> 00:13:38,986
正如我向您展示代码时所提到的
关于如何请求推送订阅一样

239
00:13:39,019 --> 00:13:42,856
您必须保证
推送的内容是用户可见的

240
00:13:42,890 --> 00:13:46,393
处理推送事件
对您的 JavaScript 来说

241
00:13:46,426 --> 00:13:48,662
并不是让您获得静默后台运行

242
00:13:48,695 --> 00:13:53,534
这样做会破坏用户的信任
和用户的电池寿命

243
00:13:53,567 --> 00:13:56,837
事实上 在处理推送事件时 您必须

244
00:13:56,870 --> 00:13:59,773
向通知中心发送通知

245
00:13:59,806 --> 00:14:03,744
其它浏览器都有
用以确保推送用户可见的

246
00:14:03,777 --> 00:14:07,181
反对违反承诺对策
Safari 浏览器也是如此

247
00:14:07,214 --> 00:14:10,984
在 macOS Ventura 的 Beta 版本中
在三个推送事件之后

248
00:14:11,018 --> 00:14:14,188
您未能及时发布通知

249
00:14:14,221 --> 00:14:16,857
您网站的推送订阅将被撤销

250
00:14:16,890 --> 00:14:19,893
您将需要通过
再次访问权限的工作流程

251
00:14:19,927 --> 00:14:21,695
就是这样

252
00:14:21,728 --> 00:14:26,466
我们为支持网页推送感到由衷的自豪
并且很高兴任何网站都可以使用它

253
00:14:26,500 --> 00:14:29,203
无需 Apple 开发者帐户

254
00:14:29,236 --> 00:14:33,073
只要您按照标准编码并使用功能检测

255
00:14:33,106 --> 00:14:37,010
您就不会在不知不觉中排除 Safari 浏览器
您的用户就会

256
00:14:37,044 --> 00:14:41,448
在 macOS Ventura 上的 Safari 16 中
获得网页推送的好处

257
00:14:41,481 --> 00:14:45,652
和往常一样 今年我们已经为 Safari 浏览器
和 WebKit 添加了很多其它的新功能

258
00:14:45,686 --> 00:14:48,455
我希望您能看一看那个讲座
并了解更多

259
00:14:48,488 --> 00:14:50,090
感谢收看

260
00:14:50,123 --> 00:14:53,727
祝您余下的
WWDC 2022 之旅一切顺利

