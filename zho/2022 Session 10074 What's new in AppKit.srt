1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:10,043 --> 00:00:13,447
Jeff Nadeau: 大家好 欢迎收看
“AppKit 的新功能”

3
00:00:13,480 --> 00:00:16,717
我是 Jeff Nadeau
是 AppKit 团队的一名工程师

4
00:00:16,750 --> 00:00:19,686
我在这里和大家分享一下
为 macOS Ventura 构建 App 的

5
00:00:19,720 --> 00:00:21,622
最新最棒的功能

6
00:00:21,655 --> 00:00:24,591
对于 Mac 来说 这是一个
前所未有的激动人心的时刻

7
00:00:24,625 --> 00:00:28,195
现在我们拥有
Apple 芯片的性能和效率

8
00:00:28,228 --> 00:00:29,897
macOS 的力量

9
00:00:29,930 --> 00:00:33,567
以及一个比以往任何时候
都更丰富的 App 生态系统

10
00:00:33,600 --> 00:00:36,236
而您的 App 是这个故事的
重要组成部分

11
00:00:36,270 --> 00:00:38,305
我们将继续推动 AppKit 发展

12
00:00:38,338 --> 00:00:41,742
这样您们就可以继续构建
最好的 App

13
00:00:42,342 --> 00:00:45,179
我将谈及各种各样的主题

14
00:00:45,212 --> 00:00:47,915
从台前调度开始

15
00:00:47,948 --> 00:00:50,417
接着是偏好设置

16
00:00:50,450 --> 00:00:52,753
其次是各种控件

17
00:00:52,786 --> 00:00:54,688
SF Symbols

18
00:00:54,721 --> 00:00:57,257
和共享

19
00:00:57,291 --> 00:00:59,259
我首先要聊一聊台前调度

20
00:01:00,460 --> 00:01:04,398
台前调度会清理
工作区中的非活动窗口

21
00:01:04,431 --> 00:01:07,701
而活动窗口会采取对象居中

22
00:01:07,734 --> 00:01:11,071
对于更高级的工作流程
您还可以将窗口合并到一个

23
00:01:11,104 --> 00:01:14,541
作为一组交换进出的集合中

24
00:01:15,709 --> 00:01:19,847
这将影响您的 App 窗口的呈现方式

25
00:01:19,880 --> 00:01:23,016
台前调度试图保持
工作区的整洁

26
00:01:23,050 --> 00:01:24,885
所以当出现一个新窗口时

27
00:01:24,918 --> 00:01:29,156
现有的窗口将退出 stage
以腾出空间

28
00:01:29,189 --> 00:01:33,293
这就是“主”窗口
比如您的文档所需要的

29
00:01:33,327 --> 00:01:38,599
辅助窗口 如面板
弹窗 设置和其他窗口

30
00:01:38,632 --> 00:01:42,970
应该继续出现在现有窗口的上方

31
00:01:43,003 --> 00:01:45,472
NSWindow 已经有了很多 API

32
00:01:45,506 --> 00:01:49,343
可以帮助您定义
您想要特定窗口完成的行为

33
00:01:51,545 --> 00:01:54,915
默认情况下
如果您显示一个浮动面板

34
00:01:54,948 --> 00:01:58,318
一个模态窗口
或一个带有首选项样式工具栏的窗口

35
00:01:58,352 --> 00:02:01,388
台前调度不会调出其他窗口

36
00:02:03,824 --> 00:02:07,628
台前调度也会遵守窗口的
collectionBehavior

37
00:02:07,661 --> 00:02:10,264
这个 OptionSet 定义了窗口在空间

38
00:02:10,297 --> 00:02:12,599
和全屏中的行为方式

39
00:02:12,633 --> 00:02:15,102
现在它还会帮助台前调度

40
00:02:15,135 --> 00:02:18,639
理解窗口是被视为辅助还是浮动的

41
00:02:19,540 --> 00:02:23,977
如果一个窗口的 collectionBehavior
包含辅助 moveToActiveSpace

42
00:02:24,011 --> 00:02:26,947
固定的或暂态选项

43
00:02:26,980 --> 00:02:30,784
那么它就不会将活动窗口
移到居中的位置

44
00:02:31,718 --> 00:02:34,454
通过使用正确的收集行为设置窗口

45
00:02:34,488 --> 00:02:37,257
您可以确保它们在每个情景中
都能很好地工作

46
00:02:37,291 --> 00:02:42,829
无论是在桌面空间 全屏
还是现在在台前调度中

47
00:02:42,863 --> 00:02:46,934
接下来 我将介绍偏好设置的
一些重要更改

48
00:02:46,967 --> 00:02:49,937
在 macOS Ventura 中
“系统偏好设置”App

49
00:02:49,970 --> 00:02:52,239
已采用了全新的外观

50
00:02:52,272 --> 00:02:57,277
具有全新的导航方案
和全新的视觉设计

51
00:02:57,311 --> 00:03:00,948
为了与其他操作系统的设置
保持一致

52
00:03:00,981 --> 00:03:04,451
我们还将 App 重命名为
“系统设置”

53
00:03:05,219 --> 00:03:08,222
这些更改也会扩展到您的 App

54
00:03:08,255 --> 00:03:11,091
例如 今天的
“系统偏好设置”App 中

55
00:03:11,124 --> 00:03:14,695
可能会出现一个首选项面板包

56
00:03:14,728 --> 00:03:18,532
您的 App 中可能也有一个设置区域

57
00:03:18,565 --> 00:03:21,935
它也有一个新的设计系统
用于控制丰富的表单

58
00:03:21,969 --> 00:03:26,640
它可能是设置界面
或检查器的完美选择

59
00:03:26,673 --> 00:03:29,209
如果您发布了一个自定义的预组件包

60
00:03:29,243 --> 00:03:32,145
它将继续与新的“设置”App
一起运作

61
00:03:32,179 --> 00:03:34,748
您的自定义面板将出现在侧边栏

62
00:03:34,781 --> 00:03:36,617
App 会加载您的组件包

63
00:03:36,650 --> 00:03:40,988
并显示您的设置 UI
如在 Monterey 中和早前一样

64
00:03:41,855 --> 00:03:44,691
为了匹配新命名“系统设置”App

65
00:03:44,725 --> 00:03:48,529
我们已将 App 内的首选项
重命名为“设置”

66
00:03:48,562 --> 00:03:52,399
为了帮助您上手
一旦您使用最新的 SDK 进行构建

67
00:03:52,432 --> 00:03:55,702
AppKit 将自动更新 App 菜单中的

68
00:03:55,736 --> 00:03:57,804
偏好设置菜单项的名称

69
00:03:57,838 --> 00:04:02,042
不过 您可能会在很多其他地方
使用 Preferences (偏好设置) 这个词

70
00:04:02,075 --> 00:04:04,645
比如在窗口标题 描述性标签

71
00:04:04,678 --> 00:04:07,414
或 App 周围的其他控件上

72
00:04:07,447 --> 00:04:11,552
搜索本地化文本
找到同样需要更新的地方

73
00:04:12,986 --> 00:04:18,058
例如 TextEdit 的设置窗口
过去被称为“偏好设置”

74
00:04:18,091 --> 00:04:23,030
我们选择将该窗口重命名为“设置”
以匹配系统的其余部分

75
00:04:23,063 --> 00:04:26,333
“系统设置”App 也使用了
一个新的界面样式

76
00:04:26,366 --> 00:04:29,269
来显示它的所有配置选项

77
00:04:29,303 --> 00:04:32,239
设置界面通常包含大量控件

78
00:04:32,272 --> 00:04:36,176
因此这种样式旨在以清晰有序的方式

79
00:04:36,210 --> 00:04:39,079
显示包含大量控件的表单

80
00:04:40,948 --> 00:04:44,184
由于表单本身提供了大量的视觉结构

81
00:04:44,218 --> 00:04:46,854
许多系统控件
通过使用较低的视觉权重

82
00:04:46,887 --> 00:04:49,389
来适应这种环境

83
00:04:49,423 --> 00:04:53,293
它们会同时在 rollover 上
展现出更突出的备份

84
00:04:54,828 --> 00:04:57,764
如果您想编写使用这种新设计的接口

85
00:04:57,798 --> 00:05:00,901
SwiftUI 会让它变得非常简单

86
00:05:00,934 --> 00:05:03,537
将您的控件放到 Form 视图中

87
00:05:03,570 --> 00:05:06,640
然后应用 insetGrouped 表单样式

88
00:05:06,673 --> 00:05:08,842
SwiftUI 会负责剩下的事情

89
00:05:08,876 --> 00:05:11,211
表单的视觉样式 滚动行为

90
00:05:11,245 --> 00:05:15,015
和布局都会自动应用

91
00:05:16,650 --> 00:05:18,952
如果您还没有开始使用 SwiftUI

92
00:05:18,986 --> 00:05:22,089
这是个尝试一下的好机会

93
00:05:22,122 --> 00:05:26,360
Settings 窗口通常是
App 界面的一个独立区域

94
00:05:26,393 --> 00:05:29,363
所以它是进行
incremental adoption 的完美场所

95
00:05:30,264 --> 00:05:34,434
我们甚至制作了一个关于同时使用
SwiftUI 和 AppKit 的视频

96
00:05:34,468 --> 00:05:37,538
它可以让您进行深入了解

97
00:05:37,571 --> 00:05:42,176
接下来 我想分享
我们控件的一些更新

98
00:05:42,209 --> 00:05:45,345
我们有很多令人兴奋的控件增强
值得分享

99
00:05:45,379 --> 00:05:49,449
首先是一个叫做
NSComboButton 的新控件

100
00:05:49,483 --> 00:05:52,085
我们还更新了 NSColorWell

101
00:05:52,119 --> 00:05:55,689
对 NSToolbar API 做了一些增强

102
00:05:55,722 --> 00:05:58,525
调整了 NSAlert 的设计

103
00:05:58,559 --> 00:06:02,629
改善了 NSTableView 的性能

104
00:06:02,663 --> 00:06:05,566
首先是 NSComboButton

105
00:06:05,599 --> 00:06:09,469
NSComboButton 的主旨在于
结合一个即时按钮动作

106
00:06:09,503 --> 00:06:11,738
和一个有附加选项的菜单

107
00:06:13,240 --> 00:06:15,142
在今天的控件视图中

108
00:06:15,175 --> 00:06:18,545
传统上 人们使用按钮
来执行一些即时操作

109
00:06:18,579 --> 00:06:23,684
或者使用下拉按钮来显示
带有多个选项的菜单

110
00:06:23,717 --> 00:06:28,589
NSComboButton 将两个元素
组合成了一个控件

111
00:06:28,622 --> 00:06:33,694
它将主操作和下拉菜单
结合在了一起

112
00:06:33,727 --> 00:06:37,664
这种设计通常用于像 Mail 这样的用例

113
00:06:37,698 --> 00:06:40,667
这样 要获取预估的文件夹
就只需单击一下即可

114
00:06:40,701 --> 00:06:44,738
但您仍然可以访问菜单
来将消息归档到任何地方

115
00:06:44,771 --> 00:06:47,641
以前 您可能已经使用分段控件 API

116
00:06:47,674 --> 00:06:50,244
组装过类似的东西

117
00:06:50,277 --> 00:06:52,913
但现在有了专门的控件做这件事

118
00:06:53,881 --> 00:06:56,416
NSComboButton 有两种样式

119
00:06:56,450 --> 00:07:00,287
分别规定了按钮的外观和行为

120
00:07:00,320 --> 00:07:02,623
默认样式称为 split

121
00:07:02,656 --> 00:07:06,426
它包括一个只用于菜单的
单独的箭头部分

122
00:07:08,262 --> 00:07:13,600
第二种样式是 unified
看起来更像一个普通的按钮

123
00:07:13,634 --> 00:07:16,436
此样式在单击时执行其主要操作

124
00:07:16,470 --> 00:07:20,174
如果单击并按住它 则会显示其菜单

125
00:07:20,207 --> 00:07:21,942
这就是 NSComboButton

126
00:07:21,975 --> 00:07:25,379
NSColorWell 也有一些
很棒的新的更新

127
00:07:25,412 --> 00:07:27,781
首先是一个全新的外观

128
00:07:27,814 --> 00:07:31,151
现在颜色很好地采用了一种新风格

129
00:07:31,185 --> 00:07:33,720
取代了经典的方形渐变外观

130
00:07:33,754 --> 00:07:37,591
并让人能联想到整个系统的
其他按钮外壳

131
00:07:37,624 --> 00:07:40,060
这个更改是完全自动的

132
00:07:40,093 --> 00:07:43,597
因此您不需要采取任何措施
来获得这个新版外观

133
00:07:44,231 --> 00:07:47,334
然而 我们知道颜色选择
是有创造性的

134
00:07:47,367 --> 00:07:49,937
专业 App 的重要组成部分

135
00:07:49,970 --> 00:07:51,505
所以我们更进一步

136
00:07:51,538 --> 00:07:54,508
为 NSColorWell 引入了两种新的样式

137
00:07:55,843 --> 00:07:58,278
第一种是最小样式

138
00:07:58,312 --> 00:08:00,747
它在 rollover 上会显示一个披露箭头

139
00:08:00,781 --> 00:08:03,116
并用弹出完整的 NSColorPanel 选项

140
00:08:03,150 --> 00:08:07,254
通过显示可以立即从调色板中
进行选择的弹出窗口

141
00:08:07,287 --> 00:08:11,525
来提供一个快速的颜色选择体验

142
00:08:11,558 --> 00:08:14,995
默认情况下
它会使用系统标准的颜色网格

143
00:08:15,028 --> 00:08:16,797
但如果您有不同的 UI 或调色板

144
00:08:16,830 --> 00:08:19,933
您可以自定义这里显示的内容

145
00:08:22,269 --> 00:08:24,705
第二种是扩展样式

146
00:08:24,738 --> 00:08:27,941
您可以在 iWork  App 中看到

147
00:08:27,975 --> 00:08:30,944
这种风格结合了两种交互模型

148
00:08:30,978 --> 00:08:33,480
左边的键有相同的披露箭头

149
00:08:33,514 --> 00:08:35,682
和用于快速选择的弹出窗口

150
00:08:35,716 --> 00:08:38,385
而右边的按钮可以拉出整个面板

151
00:08:38,418 --> 00:08:40,654
以进行更细致的颜色选择

152
00:08:43,123 --> 00:08:48,095
有了这个 NSColorWell 现在
能提供三种不同的选择颜色的方式

153
00:08:49,997 --> 00:08:55,035
您可以使用 NSColorWell 上的
新 colorWellStyle 属性访问这些样式

154
00:08:55,068 --> 00:08:57,504
它有每个样式的案例

155
00:08:57,538 --> 00:09:00,941
默认 扩展和最小

156
00:09:02,342 --> 00:09:05,879
NSColorWel 也因其 pulldown action

157
00:09:05,913 --> 00:09:08,248
获得了一个新的目标-操作对

158
00:09:08,282 --> 00:09:11,652
该操作会确定当您单击
最小或扩展颜色的下拉部分时

159
00:09:11,685 --> 00:09:15,088
会发生什么

160
00:09:15,122 --> 00:09:17,457
默认情况下 这些属性是 nil

161
00:09:17,491 --> 00:09:21,995
这意味着 NSColorWell
应该使用系统标准的弹出窗口

162
00:09:22,029 --> 00:09:24,398
但是 您可以自定义此操作

163
00:09:24,431 --> 00:09:27,768
并用它来显示您自己的
自定义弹出窗口

164
00:09:27,801 --> 00:09:32,840
或者您甚至可以显示一个
不同的选择界面 如菜单

165
00:09:32,873 --> 00:09:35,008
这就是新的 NSColorWell

166
00:09:35,042 --> 00:09:39,580
它有一个全新的外观
和两种快速挑选颜色的新方法

167
00:09:40,314 --> 00:09:42,850
接下来是一些
关于 NSToolbar 的新闻

168
00:09:42,883 --> 00:09:44,985
我们对它进行了各种 API 增强

169
00:09:45,018 --> 00:09:47,821
让您更好地控制自定义

170
00:09:47,855 --> 00:09:50,824
并增加布局的灵活性

171
00:09:51,725 --> 00:09:53,293
在自定义方面

172
00:09:53,327 --> 00:09:55,095
我们添加了两个新的委托方法

173
00:09:55,128 --> 00:09:58,999
让您更好地控制工具栏的可自定义性

174
00:09:59,032 --> 00:10:03,604
首先是
toolbar immovable item identifiers

175
00:10:03,637 --> 00:10:07,140
如果您执行此方法
以返回一组项目标识符

176
00:10:07,174 --> 00:10:11,378
那么这些项目
将不能被用户移动或移除

177
00:10:11,411 --> 00:10:14,781
并且当您进入自定义模式时
它们不会显示动画

178
00:10:16,183 --> 00:10:19,353
例如“邮件”App 希望过滤按钮

179
00:10:19,386 --> 00:10:22,990
一直出现在这里 在消息列表的上方

180
00:10:23,023 --> 00:10:27,561
通过使用这个 API
它们可以防止它被从这个位置移走

181
00:10:29,963 --> 00:10:35,636
第二种方法称为“toolbaritem
identifier can be inserted at”

182
00:10:35,669 --> 00:10:39,773
此委托方法让您可以
对工具栏中任何特定的重新排序

183
00:10:39,806 --> 00:10:43,343
插入 或删除操作行使否决权

184
00:10:43,377 --> 00:10:47,047
您可以使用它来实现自己的
自定义规则

185
00:10:47,080 --> 00:10:48,382
例如

186
00:10:48,415 --> 00:10:52,219
您可以创建一个工具栏项
使它在工具栏的一个部分中被允许

187
00:10:52,252 --> 00:10:54,521
但在另一个部分中被禁用

188
00:10:56,957 --> 00:11:00,093
现在您可以使用新的
centeredItemIdentifiers 属性

189
00:11:00,127 --> 00:11:03,664
为工具栏指定多个居中项

190
00:11:03,697 --> 00:11:06,633
如果工具栏是可自定义的
那么您就仍可以从工具栏中

191
00:11:06,667 --> 00:11:09,369
添加或删除此集中的项

192
00:11:09,403 --> 00:11:12,806
但您只能在居中的组中
对它们进行重新排序

193
00:11:12,840 --> 00:11:15,409
在这个例子中 所有的照片编辑工具

194
00:11:15,442 --> 00:11:18,278
都集中在工具栏的中心

195
00:11:18,312 --> 00:11:22,850
而与前后有多少项无关

196
00:11:23,584 --> 00:11:26,019
一旦您按喜欢的方式自定义了工具栏

197
00:11:26,053 --> 00:11:28,589
您不会希望项目到处移动

198
00:11:28,622 --> 00:11:31,325
而这对于根据其他状态
改变含义的工具栏项目来说

199
00:11:31,358 --> 00:11:33,260
是很困难的

200
00:11:33,293 --> 00:11:35,929
比如“邮件”中的静音和取消静音按钮

201
00:11:35,963 --> 00:11:37,831
它们在轻点后会互相切换

202
00:11:39,433 --> 00:11:41,502
由于标签有不同的大小

203
00:11:41,535 --> 00:11:46,039
工具栏中的其他项必须四处移动
以适应变动

204
00:11:48,542 --> 00:11:52,679
在这样的场景中
您可以用 NSToolbarItem 上

205
00:11:52,713 --> 00:11:56,116
新的 possibleLabels 属性来提供一组

206
00:11:56,149 --> 00:11:58,252
将用于该项的本地化字符串

207
00:11:59,887 --> 00:12:04,157
NSToolbar 会自动调整条目的大小
以适应最长的标签

208
00:12:04,191 --> 00:12:08,829
因此 即使重新配置条目
您的布局也会保持不变

209
00:12:08,862 --> 00:12:12,232
接下来 是对警报设计的更新

210
00:12:12,266 --> 00:12:15,269
macOS 上的警报使用紧凑的布局

211
00:12:15,302 --> 00:12:17,738
它经过了针对有几个明确选择的

212
00:12:17,771 --> 00:12:20,807
少量文本的优化

213
00:12:20,841 --> 00:12:24,144
总的来说 这是一个很好的
组合警报的方式

214
00:12:24,178 --> 00:12:26,947
警报最适合较短的文本

215
00:12:26,980 --> 00:12:29,483
您可以更直接地传达信息

216
00:12:29,516 --> 00:12:31,718
而且人们更有可能在
越过警报进行下一步前

217
00:12:31,752 --> 00:12:34,321
阅读您写的内容

218
00:12:35,989 --> 00:12:39,593
然而 有时您确实无法缩短描述

219
00:12:39,626 --> 00:12:43,830
尤其是在需要传达一些
复杂而微妙的信息时

220
00:12:43,864 --> 00:12:45,866
比如这个 Disk Utility 警报

221
00:12:45,899 --> 00:12:50,204
它传达了一个关于文件系统数据的
非常重要的选择

222
00:12:50,237 --> 00:12:54,575
紧凑的布局并不适合这种情况

223
00:12:54,608 --> 00:12:58,812
对于这些情况 我们调整了 NSAlert

224
00:12:58,846 --> 00:13:01,582
以提供适合较长文本的更宽的布局

225
00:13:01,615 --> 00:13:05,686
当提示文本太长
而无法容纳在紧凑的尺寸中时

226
00:13:05,719 --> 00:13:09,923
这种调整会自动发生

227
00:13:09,957 --> 00:13:12,659
如果附属视图太大
无法放进紧凑的警报窗口

228
00:13:12,693 --> 00:13:16,797
我们也会使用这种样式

229
00:13:16,830 --> 00:13:19,800
您的 App 不需要选择这个行为

230
00:13:19,833 --> 00:13:22,903
它会在整个系统范围自动应用

231
00:13:22,936 --> 00:13:25,005
需要注意的是

232
00:13:25,038 --> 00:13:26,974
布局是在显示警报时确定的

233
00:13:27,007 --> 00:13:29,743
因此 如果警报已经显示在屏幕上

234
00:13:29,776 --> 00:13:31,845
则样式无法切换

235
00:13:33,881 --> 00:13:37,684
您仍然应该尽可能地
减短警报文本的长度

236
00:13:37,718 --> 00:13:40,220
但这个设计更新将改善那些

237
00:13:40,254 --> 00:13:42,456
您无法减短文本长度时的用户体验

238
00:13:43,657 --> 00:13:47,261
接下来是
NSTableView 的一个重要新功能

239
00:13:47,294 --> 00:13:51,999
NSTableView
旨在通过在滚动时惰性填充

240
00:13:52,032 --> 00:13:55,636
和重用视图来高效地处理大量的行

241
00:13:56,370 --> 00:13:59,573
但是 对于每一行
都有不同高度的表来说

242
00:13:59,606 --> 00:14:01,308
这是一个挑战

243
00:14:01,341 --> 00:14:04,178
因为为了提供良好的滚动体验

244
00:14:04,211 --> 00:14:06,280
表格需要知道它的总高度

245
00:14:06,313 --> 00:14:10,083
以及每一行在滚动区域中的位置

246
00:14:11,185 --> 00:14:15,889
过去 NSTableView 通过调整
表中所有行的大小来实现这一点

247
00:14:15,923 --> 00:14:19,526
而这可能会对初始加载时间产生影响

248
00:14:19,560 --> 00:14:22,963
在 macOS Ventura 中
NSTableView 实现了这些目标

249
00:14:22,996 --> 00:14:25,866
同时提供了更好的性能

250
00:14:27,968 --> 00:14:31,138
NSTableView 不再即时计算
每一行的高度

251
00:14:31,171 --> 00:14:33,974
而是根据滚动视口内

252
00:14:34,007 --> 00:14:38,278
或附近的行惰性来计算行高度

253
00:14:39,646 --> 00:14:41,748
对于那些没有被测量的行

254
00:14:41,782 --> 00:14:44,818
NSTableView 使用的是一个

255
00:14:44,852 --> 00:14:48,255
基于它已经测量的行高度
得出的运行估计高度

256
00:14:48,288 --> 00:14:49,890
当您滚动表格时

257
00:14:49,923 --> 00:14:52,793
NSTableView 根据需要
来请求行高度

258
00:14:52,826 --> 00:14:56,296
用实际测量值替换估计高度

259
00:14:56,330 --> 00:14:59,867
同时会注意保持正确的滚动位置

260
00:15:02,269 --> 00:15:07,174
这种优化显著改善了
过大的表的加载时间

261
00:15:07,207 --> 00:15:09,576
这个变化改变了
table view: height of row 之类的

262
00:15:09,610 --> 00:15:11,678
委托调用的时间

263
00:15:11,712 --> 00:15:13,113
所以您不应该假设

264
00:15:13,146 --> 00:15:16,850
NSTableView 何时会向您请求行高

265
00:15:18,185 --> 00:15:23,023
这个优化同时适用于
NSTableView 和 SwiftUI 的 List 视图

266
00:15:23,056 --> 00:15:26,326
并且自动用于 macOS Ventura 上的
所有 App

267
00:15:26,360 --> 00:15:28,695
无需采用

268
00:15:28,729 --> 00:15:31,298
这就是 NSTableView 的功能

269
00:15:32,232 --> 00:15:35,736
接下来是 SF Symbols 的一些更新

270
00:15:35,769 --> 00:15:39,106
macOS Ventura 包括 SF Symbols 4

271
00:15:39,139 --> 00:15:42,109
它增加了超过 450 个新符号图像

272
00:15:42,142 --> 00:15:44,678
涵盖了各种主题

273
00:15:45,979 --> 00:15:48,949
这些新符号包括桂冠

274
00:15:48,982 --> 00:15:51,919
各种家居用品

275
00:15:51,952 --> 00:15:54,922
世界各地的货币符号

276
00:15:54,955 --> 00:15:58,258
甚至各种与体育相关的符号

277
00:15:58,292 --> 00:16:00,694
有了数以千计的符号目录

278
00:16:00,727 --> 00:16:04,031
SF symbols 很可能包含了
可以代表您想表达的任何想法的

279
00:16:04,064 --> 00:16:07,134
专业设计的图标

280
00:16:07,167 --> 00:16:08,936
但我们没有止步于此

281
00:16:08,969 --> 00:16:11,471
SF Symbols 4 还包括一些新的功能

282
00:16:11,505 --> 00:16:13,907
以进一步增强您的图标

283
00:16:14,808 --> 00:16:18,278
总结一下
符号图像支持多种呈现模式

284
00:16:18,312 --> 00:16:21,448
您可以依据自己的设计来选择

285
00:16:21,481 --> 00:16:24,384
它有使用一种颜色的单色呈现

286
00:16:24,418 --> 00:16:27,521
使用不同颜色的不透明度来强调

287
00:16:27,554 --> 00:16:30,724
符号某些部分的分层呈现

288
00:16:30,757 --> 00:16:32,926
有允许您为符号的每个部分

289
00:16:32,960 --> 00:16:35,629
指定不同颜色的调色呈现

290
00:16:35,662 --> 00:16:40,400
以及使用直接设计到
符号作品颜色的多色呈现

291
00:16:41,568 --> 00:16:45,973
这些选择使您能够灵活地
实现各种各样的设计

292
00:16:46,006 --> 00:16:49,910
但我们也希望符号图像
在不需要应用任何配置的情况下

293
00:16:49,943 --> 00:16:52,746
就能完美呈现

294
00:16:53,747 --> 00:16:56,216
因此我们在 macOS Ventura 中

295
00:16:56,250 --> 00:16:59,953
为符号引入了一个新功能
首选呈现模式

296
00:16:59,987 --> 00:17:01,555
有了首选呈现模式

297
00:17:01,588 --> 00:17:04,925
符号就可以明确
它们选择的呈现样式

298
00:17:04,958 --> 00:17:09,429
在运行时
AppKit 将自动使用该样式

299
00:17:09,463 --> 00:17:12,366
这对于像 AirPods Pro 这样更倾向于

300
00:17:12,399 --> 00:17:14,601
用分层呈现来增加细节清晰度的

301
00:17:14,635 --> 00:17:18,172
符号来说 是非常棒的

302
00:17:18,205 --> 00:17:20,841
当然 如果您有不同的设计思路

303
00:17:20,874 --> 00:17:24,444
您就随时可以使用
NSImageSymbolConfiguration 对象

304
00:17:24,478 --> 00:17:26,880
来选择您喜欢的样式

305
00:17:28,615 --> 00:17:31,118
有些符号不只是代表一个概念

306
00:17:31,151 --> 00:17:34,821
它们还要传达一些值或数量

307
00:17:34,855 --> 00:17:38,725
比如 Wi-Fi 信号强度或音频音量

308
00:17:38,759 --> 00:17:41,995
对于这样的情况
我们引入了一种新的符号类型

309
00:17:42,029 --> 00:17:44,898
我们称之为 variable symbol

310
00:17:44,932 --> 00:17:48,335
使用变量符号
可以直接向 NSImage

311
00:17:48,368 --> 00:17:50,304
提供一个浮点值

312
00:17:50,337 --> 00:17:52,539
该符号会嵌入数值阈值

313
00:17:52,573 --> 00:17:56,743
来决定每个路径
应该如何根据该值变化

314
00:17:56,777 --> 00:17:58,445
这是 API

315
00:17:58,478 --> 00:18:02,015
变量符号由新的初始化器创建

316
00:18:02,049 --> 00:18:05,252
它类似于现有的符号图像初始化器

317
00:18:05,285 --> 00:18:07,988
只是增加了一个

318
00:18:08,021 --> 00:18:11,758
0 到 1 之间的浮点数作为值参数

319
00:18:11,792 --> 00:18:15,229
如果符号图像没有定义任何可变阈值

320
00:18:15,262 --> 00:18:19,566
则该值将被忽略
符号将按照正常方式绘制

321
00:18:19,600 --> 00:18:23,003
如果是这样 您将发现符号路径

322
00:18:23,036 --> 00:18:25,472
根据您提供的值而有不同的绘制

323
00:18:26,807 --> 00:18:31,111
每个变量符号
都可以以自己独特的方式表示值

324
00:18:31,144 --> 00:18:33,447
通过在 API 级别提供该值

325
00:18:33,480 --> 00:18:36,149
您可以访问所有这些变量

326
00:18:36,183 --> 00:18:40,120
而不必了解符号组成方式的细节

327
00:18:41,188 --> 00:18:44,491
可变符号与呈现样式
如调色板和多色

328
00:18:44,525 --> 00:18:47,361
结合使用效果很好

329
00:18:47,394 --> 00:18:50,297
所以您可以将它们应用到
几乎任何设计中

330
00:18:50,330 --> 00:18:54,701
最后 我想谈谈关于
“共享”的一些重大更新

331
00:18:54,735 --> 00:18:58,305
macOS Ventura 提升了
Mac 上的分享体验

332
00:18:58,338 --> 00:19:00,841
引入了如建议用户

333
00:19:00,874 --> 00:19:05,812
以及邀请和管理合作用户的新方法
等功能

334
00:19:05,846 --> 00:19:09,249
您可以采用一些新的 API
以便您的 App 能够最大限度地

335
00:19:09,283 --> 00:19:11,151
利用这些增强功能

336
00:19:13,754 --> 00:19:18,692
分享体验中最显著的更新
是新的分享弹窗

337
00:19:18,725 --> 00:19:22,095
它用一个丰富的界面
取代了现有的共享菜单

338
00:19:22,129 --> 00:19:25,132
它包含更多
关于您正在共享的文档的信息

339
00:19:25,165 --> 00:19:28,602
以及熟悉的功能 比如推荐用户

340
00:19:28,635 --> 00:19:33,173
它与前一个选择器支持相同的
API 和委托方法

341
00:19:33,207 --> 00:19:36,610
因此您仍然可以进行
如过滤共享服务列表

342
00:19:36,643 --> 00:19:40,380
或将您自己的自定义服务插入到
选择器中之类的操作

343
00:19:42,382 --> 00:19:44,418
如果您正在共享一个文件 URL

344
00:19:44,451 --> 00:19:48,822
nsshareingservicepicker
可以自动为 Header 填充图标

345
00:19:48,856 --> 00:19:52,426
名称 和其他关于文件的元数据

346
00:19:52,459 --> 00:19:55,395
但是如果您要共享一个自定义类型

347
00:19:55,429 --> 00:19:57,831
您可以让您的条目
符合 NSSharingServicePicker

348
00:19:57,865 --> 00:20:02,236
请求那个信息所用的新协议

349
00:20:03,437 --> 00:20:08,041
这个协议叫做
NSPreviewRepresentableActivityItem

350
00:20:08,075 --> 00:20:12,145
符合类型必须能够返回
要共享的底层项

351
00:20:12,179 --> 00:20:14,414
比如 NSItemProvider

352
00:20:14,448 --> 00:20:16,884
它们还要能有选择地返回标题

353
00:20:16,917 --> 00:20:19,853
图像提供程序和图标提供程序

354
00:20:21,555 --> 00:20:24,491
为了方便起见
AppKit 中有一个符合规范的级

355
00:20:24,525 --> 00:20:27,694
它叫做
NSPreviewRepresentingActivityItem

356
00:20:27,728 --> 00:20:32,866
您可以用它来绑定一个现有的
共享项及其元数据

357
00:20:32,900 --> 00:20:36,637
您可以直接以 NSImage 的形式
提供每个图像参数

358
00:20:36,670 --> 00:20:40,474
如果预先生成这些图像
对性能要求太高

359
00:20:40,507 --> 00:20:42,910
您也可以使用 NSItemProvider

360
00:20:44,378 --> 00:20:47,381
新的共享选择器非常适合
从工具栏按钮之类的地方

361
00:20:47,414 --> 00:20:48,949
开始共享

362
00:20:48,982 --> 00:20:51,385
但有时您会想从菜单

363
00:20:51,418 --> 00:20:57,491
比如主菜单栏或 App 内
选定视图的对应菜单开始共享

364
00:20:57,524 --> 00:21:01,228
以前 您可能会通过枚举共享服务
然后为每个共享服务构建菜单项

365
00:21:01,261 --> 00:21:06,433
构建自己的菜单来处理这个问题

366
00:21:06,466 --> 00:21:10,103
虽然这确实有效
但它绕过了标准选择器

367
00:21:10,137 --> 00:21:13,674
这样您就错过了所有这些新功能

368
00:21:13,707 --> 00:21:16,543
在 macOS Ventura 中
NSSharingServicePicker

369
00:21:16,577 --> 00:21:20,247
可以为您创建一个
standard share menu item

370
00:21:20,280 --> 00:21:24,852
您可以将标准项目添加到任何菜单
轻松开始共享

371
00:21:24,885 --> 00:21:28,589
一旦被选中
菜单项就会调用共享弹出窗口

372
00:21:28,622 --> 00:21:31,792
对于特定情景菜单
它甚至会将弹出窗口

373
00:21:31,825 --> 00:21:34,328
固定到生成菜单的视图

374
00:21:34,995 --> 00:21:39,333
在 macOS Ventura 中
有很多管理协作的新支持项

375
00:21:40,000 --> 00:21:43,470
通过一些额外的采用
您的可分享项目也可以

376
00:21:43,504 --> 00:21:45,506
成为合作邀请

377
00:21:45,539 --> 00:21:48,108
用户可以通过共享选择器发起

378
00:21:48,141 --> 00:21:52,346
拖拽到 Messages 信息中
甚至通过 FaceTime 通话做到这些

379
00:21:52,379 --> 00:21:55,983
您可以使用 CloudKit
或 iCloud Drive 来共享内容

380
00:21:56,016 --> 00:22:00,787
也可以将邀请流程
与您自己的协作服务器连接

381
00:22:00,821 --> 00:22:02,689
这是一个牵涉很广的话题

382
00:22:02,723 --> 00:22:06,560
所以我们做了几个视频
来更深入地解释它

383
00:22:06,593 --> 00:22:09,363
如果您的 App 支持协作

384
00:22:09,396 --> 00:22:12,499
或者您想开始添加协作
一定要看看它们

385
00:22:12,533 --> 00:22:15,502
开始使用 macOS Ventura 时

386
00:22:15,536 --> 00:22:19,873
请确保您将窗口设置为
与台前调度最适合的状态

387
00:22:19,907 --> 00:22:24,077
然后 考虑一下您的设计
会如何从 NSComboButton

388
00:22:24,111 --> 00:22:27,881
和 NSColorWell 这样的控件
增强中受益

389
00:22:27,915 --> 00:22:33,921
使用 SF Symbols 的最新符号
和功能改善您的图标

390
00:22:33,954 --> 00:22:36,290
最后 对于协作

391
00:22:36,323 --> 00:22:39,126
采用最新的 API 以便您最大限度地

392
00:22:39,159 --> 00:22:42,796
利用 macOS Ventura 的新共享体验

393
00:22:43,797 --> 00:22:45,199
感谢收看

394
00:22:45,232 --> 00:22:48,869
也感谢您
持续开发好用的 Mac  App

