1
00:00:00,067 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:09,610
♪

3
00:00:09,610 --> 00:00:11,245
大家好 我是 Justin

4
00:00:11,245 --> 00:00:13,280
照片团队的工程师

5
00:00:13,280 --> 00:00:15,983
今天 我想介绍一些针对

6
00:00:15,983 --> 00:00:18,619
系统照片选择器做出的改进

7
00:00:18,619 --> 00:00:21,388
系统照片选择器
是大多数 App 访问

8
00:00:21,388 --> 00:00:24,224
iOS 中照片和视频的最佳方式

9
00:00:24,224 --> 00:00:26,960
选择器在进程外独立运行 这样您的 App

10
00:00:26,960 --> 00:00:29,796
无需请求任何
库访问权限便可使用选择器

11
00:00:29,796 --> 00:00:33,734
它具有直观的 UI
和易于使用的 API

12
00:00:33,734 --> 00:00:36,670
如果您不熟悉 PHPicker API

13
00:00:36,670 --> 00:00:39,840
您可以观看我们
往年的 WWDC 会议

14
00:00:39,840 --> 00:00:43,343
我们有详细的介绍

15
00:00:43,343 --> 00:00:46,413
今天 我将从在选择器中

16
00:00:46,413 --> 00:00:50,083
添加新功能的概览开始

17
00:00:50,083 --> 00:00:53,353
然后 我将介绍当前一些其他的

18
00:00:53,353 --> 00:00:56,857
选择器所支持的平台和框架

19
00:00:56,857 --> 00:00:59,927
那么 我们一起深入探讨吧

20
00:00:59,927 --> 00:01:02,863
一经推出 选择器便支持

21
00:01:02,863 --> 00:01:06,333
过滤图像、视频、和实况照片

22
00:01:06,333 --> 00:01:08,669
但是 我们了解到您的某些 App

23
00:01:08,669 --> 00:01:11,138
可能有其他需求

24
00:01:11,138 --> 00:01:13,974
例如 一个屏幕截图拼接 App

25
00:01:13,974 --> 00:01:17,211
只需要显示选择器中的屏幕截图

26
00:01:17,211 --> 00:01:20,214
当前可以使用今年新增的

27
00:01:20,214 --> 00:01:23,584
屏幕截图过滤器

28
00:01:23,584 --> 00:01:27,588
除了屏幕截图
我们还添加了其他资产类型

29
00:01:27,588 --> 00:01:31,725
比如录屏和慢动作视频

30
00:01:31,725 --> 00:01:34,027
您还可以使用
PHAsset.PlaybackStyle

31
00:01:34,027 --> 00:01:38,532
创建新的过滤器

32
00:01:38,532 --> 00:01:42,970
除了电影视频、
深度效果照片和连拍

33
00:01:42,970 --> 00:01:45,706
所有新过滤器都已向后移植

34
00:01:45,706 --> 00:01:48,408
如果您的 App
面向的是 iOS 15

35
00:01:48,408 --> 00:01:50,878
只要您使用
iOS 16 SDK 进行编译

36
00:01:50,878 --> 00:01:53,847
该功能仍可继续使用

37
00:01:53,847 --> 00:01:58,218
对于复合过滤器来说
除了现有的“any”

38
00:01:58,218 --> 00:02:00,954
现在您也可以使用“all”和“not”

39
00:02:00,954 --> 00:02:04,358
而且也已向后移植到 iOS 15

40
00:02:04,358 --> 00:02:06,994
我们一起看一些代码示例

41
00:02:06,994 --> 00:02:12,299
要显示视频和实况照片
您可以将其与“any”结合

42
00:02:12,299 --> 00:02:17,404
或者您可能只想显示屏幕截图

43
00:02:17,404 --> 00:02:20,140
要显示除屏幕截图以外的所有图像

44
00:02:20,140 --> 00:02:22,442
您可以使用“all”和“not”

45
00:02:22,442 --> 00:02:25,612
来结合图像和屏幕截图过滤器

46
00:02:25,612 --> 00:02:29,149
最后 如果您面向的是 iOS 16

47
00:02:29,149 --> 00:02:32,286
您可以使用
.cinematicVideos 过滤器

48
00:02:32,286 --> 00:02:35,122
接下来 我将介绍与半高选择器

49
00:02:35,122 --> 00:02:37,624
有关的改进

50
00:02:37,624 --> 00:02:41,995
在 iOS 15 中 UIKit 具有新的
UISheetPresentationController API

51
00:02:41,995 --> 00:02:47,301
可用于以半高模式呈现选择器

52
00:02:47,301 --> 00:02:50,637
其在大多数情况下可良好运作

53
00:02:50,637 --> 00:02:53,807
但是有些人可能想要实现自定义 UI

54
00:02:53,807 --> 00:02:56,543
以调整选定的资产并将这些更改

55
00:02:56,543 --> 00:03:00,447
反映回选择器中

56
00:03:00,447 --> 00:03:03,650
在 iOS 16 中
您可以使用其资产标识符

57
00:03:03,650 --> 00:03:07,321
来取消选择资产

58
00:03:07,321 --> 00:03:10,858
如此处所示
调用 deselectAssets 后

59
00:03:10,858 --> 00:03:16,697
选择器已取消第二张照片的选择

60
00:03:16,697 --> 00:03:21,568
您还可以调用 moveAsset 方法
对资产进行重新排序

61
00:03:21,568 --> 00:03:24,705
现在我们熟悉了
所有新的选择器功能

62
00:03:24,705 --> 00:03:27,574
我将介绍平台支持

63
00:03:27,574 --> 00:03:30,577
目前 系统照片选择器只能

64
00:03:30,577 --> 00:03:33,814
由 iOS 和 iPadOS App 使用

65
00:03:33,814 --> 00:03:35,983
今年 我们把照片选择器

66
00:03:35,983 --> 00:03:41,154
引入到了其他两个平台
分别是 macOS 和 watchOS

67
00:03:41,154 --> 00:03:44,157
iPadOS 选择器也更新了设计

68
00:03:44,157 --> 00:03:46,493
但这一新的设计仅适用于 iPad

69
00:03:46,493 --> 00:03:49,696
我们先来看看新的 iPad UI

70
00:03:49,696 --> 00:03:51,398
选择器现在显示了侧边栏

71
00:03:51,398 --> 00:03:55,202
以利用更大的 iPad 显示屏

72
00:03:55,202 --> 00:03:57,070
侧边栏使不同收藏夹之间的

73
00:03:57,070 --> 00:03:59,239
导航更加快捷

74
00:03:59,239 --> 00:04:01,275
但是如果没有足够的空间

75
00:04:01,275 --> 00:04:03,677
就像在分屏模式下一样

76
00:04:03,677 --> 00:04:08,215
我们将回退到
现有的紧凑型选择器 UI

77
00:04:08,215 --> 00:04:11,718
接下来是 macOS

78
00:04:11,718 --> 00:04:16,056
macOS 选择器还具有
Mac 风格控件的侧边栏

79
00:04:16,056 --> 00:04:20,527
和 iOS 选择器一样 支持多选

80
00:04:20,527 --> 00:04:23,931
网格中的流体缩放
并具有强大的搜索功能

81
00:04:23,931 --> 00:04:27,434
允许您搜索诸如人物、地点、

82
00:04:27,434 --> 00:04:30,070
等等分类

83
00:04:30,070 --> 00:04:34,408
新的选择器 UI
也应用到了 NSOpenPanel 中

84
00:04:34,408 --> 00:04:38,278
您可以用其选择系统照片库中的资产

85
00:04:38,278 --> 00:04:39,847
并且首次支持

86
00:04:39,847 --> 00:04:43,617
选择存储在
iCloud Photos 中的资产

87
00:04:43,617 --> 00:04:46,086
您的 App 将免费获得新的 UI

88
00:04:46,086 --> 00:04:49,857
而无需采取任何适配操作

89
00:04:49,857 --> 00:04:54,228
NSOpenPanel 选择器支持拖放

90
00:04:54,228 --> 00:04:57,164
iOS、iPadOS 和 macOS
上的标准选择器

91
00:04:57,164 --> 00:05:00,734
也支持该操作

92
00:05:00,734 --> 00:05:04,838
如果您的 App 只需要
选择几张图片或几个视频

93
00:05:04,838 --> 00:05:08,742
NSOpenPanel API
将满足您的需求

94
00:05:08,742 --> 00:05:11,245
但请记住 照片库中所选的文件

95
00:05:11,245 --> 00:05:15,115
可能随时被系统删除

96
00:05:15,115 --> 00:05:18,118
如果您需要确保其长期可用性

97
00:05:18,118 --> 00:05:23,557
您应该将其复制到
由您的 App 管理的位置

98
00:05:23,557 --> 00:05:28,095
对于以媒体为中心的 macOS App
我们建议您默认为

99
00:05:28,095 --> 00:05:32,699
新的照片选择器
以获得最佳用户体验

100
00:05:32,699 --> 00:05:37,237
但是 您的 App 仍应
提供一种可替代方式

101
00:05:37,237 --> 00:05:39,573
来使用 NSOpenPanel API

102
00:05:39,573 --> 00:05:42,843
从文件系统中选择资产

103
00:05:42,843 --> 00:05:46,480
有时您的用户可能仍想在照片库外

104
00:05:46,480 --> 00:05:50,984
选择资产

105
00:05:50,984 --> 00:05:55,522
最后 我将介绍 watchOS

106
00:05:55,522 --> 00:05:58,192
首次 您能够访问存储于

107
00:05:58,192 --> 00:06:01,562
使用全新 API 手表里的图像

108
00:06:01,562 --> 00:06:04,264
watchOS 选择器也会用完进程

109
00:06:04,264 --> 00:06:06,934
和 iOS 和 macOS 选择器一样

110
00:06:06,934 --> 00:06:10,771
因此您无需请求任何
库访问权限即可使用

111
00:06:10,771 --> 00:06:13,373
其 UI 类似于 iOS 选择器

112
00:06:13,373 --> 00:06:17,177
但针对较小的屏幕进行了优化

113
00:06:17,177 --> 00:06:21,682
您可以在网格中或
按收藏夹浏览您的照片

114
00:06:21,682 --> 00:06:24,785
您可以配置选择器以显示选择顺序

115
00:06:24,785 --> 00:06:29,356
以及指定选择限制

116
00:06:29,356 --> 00:06:32,626
但是 与 iOS
和 macOS 不同的是

117
00:06:32,626 --> 00:06:36,697
只有图像会显示
在 watchOS 选择器中

118
00:06:36,697 --> 00:06:39,733
如果设备存储的照片超过 500 张

119
00:06:39,733 --> 00:06:43,370
将只显示最近的 500 帐图像

120
00:06:43,370 --> 00:06:45,005
您可能想知道

121
00:06:45,005 --> 00:06:48,041
“PHPickerViewController
是基于 UIKit 的

122
00:06:48,041 --> 00:06:52,546
那么如何将其用于我的
macOS 或 watchOS App 中？”

123
00:06:52,546 --> 00:06:54,548
您可能已经猜到了

124
00:06:54,548 --> 00:07:00,687
AppKit 和 SwiftUI
目前提供了新的选择器 API

125
00:07:00,687 --> 00:07:03,690
我们先来看看 AppKit API

126
00:07:03,690 --> 00:07:07,961
实际上
其与 UIKit API 十分相似

127
00:07:07,961 --> 00:07:11,265
您有权限访问相同的
PHPickerConfiguration 类型

128
00:07:11,265 --> 00:07:13,767
及其属性

129
00:07:13,767 --> 00:07:16,336
只有一个很小的区别：

130
00:07:16,336 --> 00:07:19,706
PHPickerViewController
是一个适用于 AppKit App 的

131
00:07:19,706 --> 00:07:23,710
NSViewController 子类

132
00:07:23,710 --> 00:07:27,481
随着基于
AppKit 的 PHPicker 的引入

133
00:07:27,481 --> 00:07:31,785
是时候舍弃传统的媒体库浏览器了

134
00:07:31,785 --> 00:07:35,122
PHPicker 要强大得多

135
00:07:35,122 --> 00:07:38,158
如果您正同时打造
UIKit 和 AppKit App

136
00:07:38,158 --> 00:07:43,730
PHPicker 也更加容易维护

137
00:07:43,730 --> 00:07:47,734
最后 我将介绍 SwiftUI API

138
00:07:49,970 --> 00:07:53,540
还记得您在本视频开始时
看到的 iOS 选择器吗？

139
00:07:53,540 --> 00:07:58,045
只需几行 SwiftUI 代码
即可将其呈现

140
00:07:58,045 --> 00:08:00,514
更重要的是 您有权访问

141
00:08:00,514 --> 00:08:03,016
所有支持选择器的平台上的

142
00:08:03,016 --> 00:08:06,220
SwiftUI PhotosPicker API

143
00:08:06,220 --> 00:08:10,958
iOS、iPadOS
macOS 和 watchOS

144
00:08:10,958 --> 00:08:13,694
选择器将根据平台

145
00:08:13,694 --> 00:08:17,297
您 App 的配置
和可用的屏幕空间

146
00:08:17,297 --> 00:08:20,133
自动选择最佳布局

147
00:08:20,133 --> 00:08:23,070
您无需为选择器 UI 绞尽脑汁

148
00:08:23,070 --> 00:08:26,640
这样您可以更加专注于
将您的 App 打造得更加完善

149
00:08:29,409 --> 00:08:32,980
在我们通过演示
详细了解新 API 之前

150
00:08:32,980 --> 00:08:34,481
我将先介绍如何加载

151
00:08:34,481 --> 00:08:38,318
已选择的照片和视频

152
00:08:38,318 --> 00:08:42,055
您通过 SwiftUI 绑定收到的选择

153
00:08:42,055 --> 00:08:45,459
只包含占位符对象

154
00:08:45,459 --> 00:08:50,030
您仍然需要按需加载实际资产数据

155
00:08:50,030 --> 00:08:51,932
请记住 某些资产数据

156
00:08:51,932 --> 00:08:54,635
不会立即加载

157
00:08:54,635 --> 00:08:56,837
如果遇到错误

158
00:08:56,837 --> 00:08:58,939
加载操作也可能失败

159
00:08:58,939 --> 00:09:02,075
例如 选择器
尝试从 iCloud Photos

160
00:09:02,075 --> 00:09:05,512
下载数据 但设备未连接

161
00:09:05,512 --> 00:09:08,015
到互联网

162
00:09:08,015 --> 00:09:12,486
一些像视频这样的大文件
可能需要很长时间才能下载

163
00:09:12,486 --> 00:09:16,456
所以我们建议您显示
每个项目的内联加载 UI

164
00:09:16,456 --> 00:09:21,061
而替换掉阻塞加载指示器

165
00:09:21,061 --> 00:09:23,564
PhotosPicker
使用 Transferable

166
00:09:23,564 --> 00:09:26,767
这是一种用于
在 App 和扩展程序之间

167
00:09:26,767 --> 00:09:29,903
传输数据的新 SwiftUI 协议

168
00:09:29,903 --> 00:09:33,507
您可以直接通过
Transferable 加载 SwiftUI Image

169
00:09:33,507 --> 00:09:35,809
但对于高级用例

170
00:09:35,809 --> 00:09:37,845
您应该定义符合
Transferable 协议的

171
00:09:37,845 --> 00:09:40,280
自己的模型对象

172
00:09:40,280 --> 00:09:44,918
以完全控制要加载的数据类型

173
00:09:44,918 --> 00:09:47,688
有关 Transferable 的更多信息

174
00:09:47,688 --> 00:09:50,891
您可以查看
“Meet Transferable”一期

175
00:09:50,891 --> 00:09:54,862
如果您的 App 需要
同时处理很多项目

176
00:09:54,862 --> 00:09:57,531
或类似视频等大型资产

177
00:09:57,531 --> 00:10:00,634
将所有内容同时加载到内存中

178
00:10:00,634 --> 00:10:03,170
或许不可行

179
00:10:03,170 --> 00:10:08,008
为了减少内存使用 您可以使用
FileTransferRepresentation

180
00:10:08,008 --> 00:10:11,712
将选定的资产加载为文件

181
00:10:11,712 --> 00:10:13,647
当将资产作为文件加载时

182
00:10:13,647 --> 00:10:16,216
请记住 您的 App 将负责

183
00:10:16,216 --> 00:10:19,219
管理这些资产的生命周期

184
00:10:19,219 --> 00:10:21,822
文件在收到时应始终

185
00:10:21,822 --> 00:10:27,227
复制到您的 App 目录
并在不需要时将其删除

186
00:10:27,227 --> 00:10:30,163
现在我要开始演示了！

187
00:10:30,163 --> 00:10:31,932
我已经将此演示 App

188
00:10:31,932 --> 00:10:34,635
设置为显示帐户个人资料页面

189
00:10:34,635 --> 00:10:39,206
现在 个人资料图像
只是一个占位符图标

190
00:10:39,206 --> 00:10:42,676
我们想使用
PhotosPicker API 添加一个编辑按钮

191
00:10:42,676 --> 00:10:45,012
来更改个人资料图像

192
00:10:45,012 --> 00:10:47,014
个人资料图像视图已经可以响应

193
00:10:47,014 --> 00:10:50,384
我们视图模型中定义的图像状态

194
00:10:50,384 --> 00:10:52,719
所以我们只需在收到选择器选择时

195
00:10:52,719 --> 00:10:56,190
更新图像状态

196
00:10:56,190 --> 00:10:58,592
首先 我们进入我们的视图模型

197
00:10:58,592 --> 00:11:01,495
并添加一个新的
imageSelection 属性

198
00:11:01,495 --> 00:11:04,031
其将作为选择绑定

199
00:11:04,031 --> 00:11:07,301
传递给 PhotosPicker API

200
00:11:07,301 --> 00:11:10,938
现在我们可以回到
我们的个人资料图像视图

201
00:11:10,938 --> 00:11:14,341
并添加一个启动选择器的覆盖按钮

202
00:11:19,213 --> 00:11:22,683
好了 我们暂停一下 并查看一下

203
00:11:22,683 --> 00:11:24,384
我们刚刚添加的代码

204
00:11:24,384 --> 00:11:26,086
我们添加了一个
PhotosPicker 视图

205
00:11:26,086 --> 00:11:29,289
向其传递了我们
刚刚定义的选择绑定

206
00:11:29,289 --> 00:11:33,060
并将其配置为仅显示图像

207
00:11:33,060 --> 00:11:34,294
PhotosPicker 的标签

208
00:11:34,294 --> 00:11:39,099
是一个带有圆形背景的
铅笔标志符号

209
00:11:39,099 --> 00:11:42,336
我们可以生成并运行
以查看我们目前所有的操作

210
00:11:42,336 --> 00:11:46,006
可以点击编辑按钮来启动选择器

211
00:11:46,006 --> 00:11:49,910
点击图像会自动关闭选择器

212
00:11:49,910 --> 00:11:52,513
但不会更新个人资料图像

213
00:11:52,513 --> 00:11:53,714
为什么？

214
00:11:53,714 --> 00:11:55,816
我们还需要连接图片选择

215
00:11:55,816 --> 00:11:57,351
和图像状态

216
00:11:57,351 --> 00:11:59,453
所以 我们开始连接吧

217
00:11:59,453 --> 00:12:01,054
我们可以回到视图模型

218
00:12:01,054 --> 00:12:04,625
并响应已设置的图像选择

219
00:12:04,625 --> 00:12:08,695
如果图像选择数为零
我们将图像状态设置为 empty

220
00:12:08,695 --> 00:12:12,533
否则 开始加载图像

221
00:12:12,533 --> 00:12:15,536
可以看到发生了一个编译器错误
因为我们还没有实现

222
00:12:15,536 --> 00:12:17,871
loadTransferable 方法

223
00:12:17,871 --> 00:12:19,473
接下来 将其修复

224
00:12:23,043 --> 00:12:25,646
实现过程非常简单

225
00:12:25,646 --> 00:12:28,248
我们只需要响应完成处理程序

226
00:12:28,248 --> 00:12:29,917
并更新图像状态

227
00:12:29,917 --> 00:12:34,221
前提是请求仍是最新请求

228
00:12:34,221 --> 00:12:37,791
我们生成并运行
以查看它的运行情况

229
00:12:37,791 --> 00:12:43,230
我可以点击
编辑按钮并选择一个图像

230
00:12:43,230 --> 00:12:46,900
非常好！运行符合预期

231
00:12:46,900 --> 00:12:52,339
实际上 该项目也已设置为
可在 macOS 上运行

232
00:12:52,339 --> 00:12:56,210
我刚刚添加的代码
会自动在 macOS 上运行吗？

233
00:12:56,210 --> 00:12:59,446
我们生成并运行以找出答案

234
00:12:59,446 --> 00:13:01,014
可以编译！

235
00:13:01,014 --> 00:13:04,151
我可以打开选择器 选择一张图像

236
00:13:04,151 --> 00:13:07,955
图像可以显示在 App 中

237
00:13:07,955 --> 00:13:09,990
这就是所有的演示了

238
00:13:09,990 --> 00:13:13,227
您刚刚看到了在
iOS 和 macOS 上的演示

239
00:13:13,227 --> 00:13:17,030
其实相同的代码
也可以在 watchOS 上运行

240
00:13:17,030 --> 00:13:20,434
但是 有几件事要记住

241
00:13:23,270 --> 00:13:25,806
watchOS 选择器
专为简单的流程

242
00:13:25,806 --> 00:13:28,275
和短暂的互动而设计

243
00:13:28,275 --> 00:13:31,778
图像根据设备尺寸进行缩放

244
00:13:31,778 --> 00:13:36,617
通常 图像将与
已配对的 iPhone 同步

245
00:13:36,617 --> 00:13:39,987
但是 家庭设置可以让没有

246
00:13:39,987 --> 00:13:41,488
iPhone 的家庭成员

247
00:13:41,488 --> 00:13:46,093
享受 Apple Watch 的
功能和优势

248
00:13:46,093 --> 00:13:49,229
如果设备处于家庭设置模式

249
00:13:49,229 --> 00:13:52,900
可以使用选择器
选择 iCloud 照片中

250
00:13:52,900 --> 00:13:55,302
最近的 1000 张图像

251
00:13:55,302 --> 00:13:59,439
选择器可能需要
从互联网中下载一些图像

252
00:13:59,439 --> 00:14:01,208
如果这样的话

253
00:14:01,208 --> 00:14:04,878
关闭之前 选择器中将显示加载 UI

254
00:14:06,747 --> 00:14:08,715
本期结束之前 我想对您说

255
00:14:08,715 --> 00:14:11,351
我们致力于使系统照片选择器

256
00:14:11,351 --> 00:14:15,489
成为大多数 App 访问
照片和视频的最佳方式

257
00:14:15,489 --> 00:14:17,591
如果您仍在使用自定义选择器

258
00:14:17,591 --> 00:14:20,327
我们真的鼓励您
换用系统照片选择器

259
00:14:20,327 --> 00:14:23,397
谢谢 祝您在 WWDC 愉快！

260
00:14:23,397 --> 00:14:27,534
♪

