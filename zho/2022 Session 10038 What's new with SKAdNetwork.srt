1
00:00:00,334 --> 00:00:06,340
[激动人心的音乐]

2
00:00:09,743 --> 00:00:13,146
您好 欢迎来到 WWDC

3
00:00:13,180 --> 00:00:17,751
我是 Nikhil 今天我将与您分享
SKAdNetwork 的变化

4
00:00:17,784 --> 00:00:19,653
在探索未来之前

5
00:00:19,686 --> 00:00:23,590
让我们记住我们在哪里
我们是如何来到这里的

6
00:00:23,624 --> 00:00:28,061
在 Apple 我们相信
隐私是一项基本人权

7
00:00:28,095 --> 00:00:32,733
我们在这里所做的一切
与保护隐私密不可分

8
00:00:32,766 --> 00:00:36,236
这就是我们创建
SKAdNetwork 的原因

9
00:00:36,270 --> 00:00:41,642
SKAdNetwork 是 Apple 专注于
隐私保护的安装归因系统

10
00:00:41,675 --> 00:00:44,478
归因数据被发送回给广告商

11
00:00:44,511 --> 00:00:47,948
同时保护用户的隐私

12
00:00:47,981 --> 00:00:51,118
SKAdNetwork 需要三个参与者

13
00:00:51,151 --> 00:00:56,056
广告网络 发行商 App
和广告商 App

14
00:00:56,089 --> 00:01:00,928
我们也来定义一些 SKAdNetwork 中
常用的术语吧

15
00:01:00,961 --> 00:01:02,429
展示

16
00:01:02,462 --> 00:01:06,099
本次讨论中的展示是从发行商 App

17
00:01:06,133 --> 00:01:09,603
到 SKAdNetwork 的输入

18
00:01:09,636 --> 00:01:10,804
互动

19
00:01:10,838 --> 00:01:15,375
当用户与广告商 App 交互时
便会产生互动

20
00:01:15,409 --> 00:01:18,145
广告商 App 会以

21
00:01:18,178 --> 00:01:21,849
转化值更新的形式获取这些互动

22
00:01:21,882 --> 00:01:26,720
最后是转化 也称为回传

23
00:01:26,753 --> 00:01:31,792
回传包含发送到广告网络的归因数据

24
00:01:31,825 --> 00:01:35,229
归因数据向广告网络提供了一个信号

25
00:01:35,262 --> 00:01:39,766
表明这是对原始广告的成功转化

26
00:01:39,800 --> 00:01:45,005
广告网络为广告商 App
生成签名展示

27
00:01:45,038 --> 00:01:50,110
发行商 App 会使用这种展示
并显示广告

28
00:01:50,143 --> 00:01:54,815
然后用户点击广告并安装 App

29
00:01:54,848 --> 00:01:56,517
当第一次启动时

30
00:01:56,550 --> 00:02:00,654
该 App 调用一个 API 来发出转化信号

31
00:02:00,687 --> 00:02:05,025
然后 App 可以重复调用此 API
来更新转化值

32
00:02:05,058 --> 00:02:10,330
并捕获不同级别的互动
和广告支出回报

33
00:02:10,364 --> 00:02:13,166
一旦定时器到期 我们就将包含

34
00:02:13,200 --> 00:02:16,703
归因数据的回传发送给广告网络

35
00:02:17,704 --> 00:02:22,342
让我们快速回顾一下 SKAdNetwork
的版本历史

36
00:02:22,376 --> 00:02:28,682
2.0 版本引入了保护隐私的广告归因

37
00:02:28,715 --> 00:02:34,421
2.2 允许发行商 App
显示自定义广告

38
00:02:34,454 --> 00:02:39,726
3.0 增加了助攻广告的回传

39
00:02:39,760 --> 00:02:45,199
在 iOS 15.0 中 我们为所有版本的

40
00:02:45,232 --> 00:02:48,802
SKAdNetwork 的引入了
给开发者的回传

41
00:02:49,269 --> 00:02:53,407
有关 SKAdNetwork 历史版本的
更多信息

42
00:02:53,440 --> 00:02:58,412
请参阅 WWDC 2021 的课程
“探索保护隐私的广告归因”

43
00:02:59,413 --> 00:03:05,519
现在让我们谈谈
即将到来的 SKAdNetwork 4.0

44
00:03:05,552 --> 00:03:08,522
看看它都有哪些新功能

45
00:03:08,555 --> 00:03:12,326
我们将从 API 的一些变化开始

46
00:03:12,359 --> 00:03:16,230
这些变化旨在为广告商
提供更多的数据

47
00:03:16,263 --> 00:03:20,601
接下来 我们将着眼于广告的转化

48
00:03:20,634 --> 00:03:25,205
然后我们将继续讨论网页广告的归因

49
00:03:25,239 --> 00:03:30,511
并以讨论 SKAdNetwork 的
测试框架来结尾

50
00:03:30,544 --> 00:03:34,615
分级的 ID 和转化值是

51
00:03:34,648 --> 00:03:37,951
SKAdNetwork 4.0 的第一个新功能

52
00:03:38,785 --> 00:03:44,024
在深入研究这个新功能之前
我想先定义一下群体匿名

53
00:03:44,057 --> 00:03:49,229
群体匿名是 SKAdNetwork
提供归因数据时

54
00:03:49,263 --> 00:03:53,433
我们用来指代隐私保护方式的术语

55
00:03:53,467 --> 00:03:56,470
安装数量决定了向您的 App 的用户

56
00:03:56,503 --> 00:04:00,140
提供的隐私保护级别

57
00:04:00,174 --> 00:04:03,510
数量较低时 我们在回传中

58
00:04:03,544 --> 00:04:06,113
向广告商发送更少的归因数据

59
00:04:06,146 --> 00:04:11,018
当安装数量较低时
我们会采取额外的步骤

60
00:04:11,051 --> 00:04:15,122
通过限制发回的
可跟踪信息来保护隐私

61
00:04:15,155 --> 00:04:16,924
随着数量的增加

62
00:04:16,957 --> 00:04:20,561
用户的独特性开始融入人群中

63
00:04:20,594 --> 00:04:23,330
我们会发回更多的数据

64
00:04:23,363 --> 00:04:26,366
最后 当数量达到最高级别时

65
00:04:26,400 --> 00:04:32,005
我们能够在保护隐私的同时
发送最多的数据

66
00:04:32,039 --> 00:04:37,411
在 SKAdNetwork 4.0 中
我们有办法可以在保护隐私的同时

67
00:04:37,444 --> 00:04:41,548
发送更多数据

68
00:04:41,582 --> 00:04:45,919
为此 我们正在更改活动标识符字段

69
00:04:45,953 --> 00:04:49,356
目前 这是一个 2 位字段

70
00:04:49,389 --> 00:04:52,893
我们将此字段的范围
增加到 4 位数

71
00:04:52,926 --> 00:04:56,463
并将其改名为源标识符

72
00:04:56,496 --> 00:05:00,133
新的名称反映了
我们看待该字段的方式

73
00:05:00,167 --> 00:05:04,471
即该字段能够代表
您想用它代表的任何内容

74
00:05:04,505 --> 00:05:08,208
而不仅仅是用于识别活动

75
00:05:09,209 --> 00:05:11,411
虽然这是一个数字

76
00:05:11,445 --> 00:05:15,249
但我们鼓励大家
将其视为三个层次的数字

77
00:05:15,282 --> 00:05:19,319
即 2 3 和 4 位数

78
00:05:19,353 --> 00:05:21,788
将源标识符字段

79
00:05:21,822 --> 00:05:24,691
视为一组层次化的数字有助于

80
00:05:24,725 --> 00:05:28,428
为不同的数字赋予意义

81
00:05:28,462 --> 00:05:33,433
例如 前 2 位数代表广告活动

82
00:05:33,467 --> 00:05:38,138
第 3 位数代表用户所在的位置

83
00:05:38,172 --> 00:05:42,776
第 4 位数代表广告在屏幕上的位置

84
00:05:42,809 --> 00:05:47,714
或者 前 2 位数可以代表广告处理类型

85
00:05:47,748 --> 00:05:51,785
第 3 位数可以代表一天中的时段

86
00:05:51,818 --> 00:05:56,123
第 4 位数可以代表广告显示的尺寸

87
00:05:56,156 --> 00:05:58,492
这些都只是示例

88
00:05:58,525 --> 00:06:02,796
最终 我们希望在这里
向您开放该字段

89
00:06:02,829 --> 00:06:05,666
以更好地满足您的使用需求

90
00:06:05,699 --> 00:06:08,802
回到提供更多数据这个主题上

91
00:06:08,836 --> 00:06:12,105
我们也在改进转化值

92
00:06:12,139 --> 00:06:15,709
目前这是一个 6 位值

93
00:06:15,742 --> 00:06:21,915
在 SKAdNetwork 4.0 中
我们引入了两个转化值

94
00:06:21,949 --> 00:06:25,853
细粒度值和粗粒度值

95
00:06:25,886 --> 00:06:29,690
细粒度值与当前的转化值相同

96
00:06:29,723 --> 00:06:34,127
粗粒度值可以有三个不同的值

97
00:06:34,161 --> 00:06:37,264
假设我们有一个转化值是 高 42

98
00:06:37,297 --> 00:06:41,034
其中 高 是粗略值 42 是精细值

99
00:06:41,068 --> 00:06:44,304
接收粗略值所需的安装计数

100
00:06:44,338 --> 00:06:48,242
小于精细值所需的安装计数

101
00:06:48,275 --> 00:06:53,547
因此 App 接收前者的速度
将比后者快得多

102
00:06:53,580 --> 00:06:58,952
然而请注意 只有其中一个
将被发回广告商

103
00:06:58,986 --> 00:07:02,890
我们来看看群体匿名
如何影响这些新字段

104
00:07:04,224 --> 00:07:09,663
使用我们前面的
5739 示例作为源标识符

105
00:07:09,696 --> 00:07:11,865
在群体匿名的低级别时

106
00:07:11,899 --> 00:07:16,737
预期您可以收到源标识符的
2 位数组成部分

107
00:07:16,770 --> 00:07:19,806
在本例中为 39

108
00:07:19,840 --> 00:07:24,678
在中等级别 预期您可以
收到前 3 位数的组成部分

109
00:07:24,711 --> 00:07:27,548
在最高级别 预期您可以收到

110
00:07:27,581 --> 00:07:31,752
完整的 4 位数源标识符

111
00:07:31,785 --> 00:07:34,154
随着群体匿名级别的增加

112
00:07:34,188 --> 00:07:38,926
将返回更多的源标识符数字

113
00:07:38,959 --> 00:07:44,064
以我们之前的高 42 转化值为例

114
00:07:44,097 --> 00:07:46,233
在群体匿名的低级别时

115
00:07:46,266 --> 00:07:50,938
您将不会在回传中收到转化值

116
00:07:50,971 --> 00:07:54,975
在中等级别 您会得到粗略的转化值

117
00:07:55,008 --> 00:07:56,276
在最高级别

118
00:07:56,310 --> 00:08:01,148
您将在回传中接收细粒度的转化值

119
00:08:01,181 --> 00:08:07,421
随着群体匿名级别的增加
返回的转化值会发生变化

120
00:08:07,454 --> 00:08:10,290
我们来看看 API 的变化

121
00:08:10,324 --> 00:08:15,562
如果您使用
SKAdImpression 实例显示广告

122
00:08:15,596 --> 00:08:22,035
就可以在 SKAdImpression 实例上
设置新的 sourceIdentifier 属性

123
00:08:23,036 --> 00:08:26,240
如果要通过字典对象来设置展示

124
00:08:26,273 --> 00:08:32,846
您可以使用新的 sourceIdentifier 键
来设置源标识符

125
00:08:33,847 --> 00:08:39,319
对于广告主 App
您将调用新的 updateConversionValue 方法

126
00:08:39,353 --> 00:08:43,190
该方法现在已更新为
除了已有的细粒度转化值外

127
00:08:43,223 --> 00:08:47,494
还新增了粗粒度转化值 如下所示

128
00:08:47,528 --> 00:08:51,965
我们建议您在更新回传的转化值后

129
00:08:51,999 --> 00:08:56,069
使用完成处理程序
来执行任何后续任务

130
00:08:56,103 --> 00:08:59,673
下面是关于采用新的分级 ID

131
00:08:59,706 --> 00:09:02,476
和转化值 API 的一些建议

132
00:09:02,509 --> 00:09:05,846
根据安装的隐私级别

133
00:09:05,879 --> 00:09:08,949
将返回源标识符的不同部分

134
00:09:08,982 --> 00:09:14,288
在为展示设置源标识符时
请考虑这一点

135
00:09:14,321 --> 00:09:18,659
粗转化值的粒度

136
00:09:18,692 --> 00:09:20,527
比细转化值低得多

137
00:09:20,561 --> 00:09:25,199
在给它们的值赋予归因涵义时
请考虑这一点

138
00:09:25,232 --> 00:09:29,136
转化值可以递增，也可以递减

139
00:09:29,169 --> 00:09:32,139
最后 请更新服务器

140
00:09:32,172 --> 00:09:35,876
使其在处理 SKAdNetwork 4.0 回传时

141
00:09:35,909 --> 00:09:39,613
能够解析新的源标识符

142
00:09:39,646 --> 00:09:42,449
和粗略的转化值

143
00:09:42,482 --> 00:09:46,220
这就是我们对分级 ID
和转化值的介绍

144
00:09:46,253 --> 00:09:51,258
在保护隐私的同时
为广告商提供更多数据

145
00:09:51,291 --> 00:09:57,898
我们来关注归因流的
另一个关键领域 转化

146
00:09:57,931 --> 00:10:01,835
今天的 SKAdNetwork
使用单一的转化模型

147
00:10:03,103 --> 00:10:06,673
从安装开始 我们更新转化值

148
00:10:06,707 --> 00:10:09,610
以获取各种客户的互动

149
00:10:09,643 --> 00:10:12,112
经过一段时间后

150
00:10:12,145 --> 00:10:15,549
我们将回传的内容发送给广告网络

151
00:10:15,582 --> 00:10:18,018
我们来看一个例子

152
00:10:18,051 --> 00:10:19,720
这个 App 叫 Food Truck

153
00:10:19,753 --> 00:10:22,623
Food Truck 可以让您
控制您的快餐车

154
00:10:22,656 --> 00:10:27,761
定制 控制和创建您自己
独特的甜甜圈交付体验

155
00:10:27,794 --> 00:10:29,663
作为 Food Truck 的开发商

156
00:10:29,696 --> 00:10:33,467
我想知道我这个广告支出的价值

157
00:10:33,500 --> 00:10:37,938
作为一个示例
当用户启动 Food Truck 时

158
00:10:37,971 --> 00:10:41,508
我将更新转化值以标记这一事件

159
00:10:41,542 --> 00:10:44,411
当他们拿到第一批订单之后

160
00:10:44,444 --> 00:10:47,614
我会再次更新转化值

161
00:10:47,648 --> 00:10:52,853
由于这批甜甜圈
需要一定的时间来制作

162
00:10:52,886 --> 00:10:55,789
用户需要等待

163
00:10:55,822 --> 00:10:58,926
制作的这段时间里 在某个地方

164
00:10:58,959 --> 00:11:03,997
转化以回传的形式发送给
广告网络 也可以选择发送给我

165
00:11:04,031 --> 00:11:07,868
然而 当用户最终交付甜甜圈时

166
00:11:07,901 --> 00:11:12,773
我将无法评估这一事件以及
后面所有的用户操作

167
00:11:12,806 --> 00:11:16,844
因为回传已经发送过了

168
00:11:16,877 --> 00:11:21,181
换句话说 我们丢失了再次互动的信息

169
00:11:21,215 --> 00:11:24,451
这就是我们正在改进的

170
00:11:24,484 --> 00:11:30,290
我们把单次回传
改为三次回传

171
00:11:30,324 --> 00:11:33,227
回传与特定的时间窗口相绑定

172
00:11:33,260 --> 00:11:36,463
并在这些窗口结束时发送

173
00:11:36,496 --> 00:11:39,466
我们来回顾一下前面的例子

174
00:11:39,499 --> 00:11:42,503
和之前一样 用户启动 Food Truck

175
00:11:42,536 --> 00:11:47,441
然后拿到第一批订单

176
00:11:47,474 --> 00:11:52,513
第一次回传的时间窗口已过
我们将其发送出去

177
00:11:52,546 --> 00:11:54,748
用户交付甜甜圈

178
00:11:54,781 --> 00:11:57,784
而在之前的例子中
我们无法获知这一情况

179
00:11:57,818 --> 00:12:01,588
现在我们发现自己处于
第二个回传的时间窗口中

180
00:12:01,622 --> 00:12:05,259
我们更新转化值来捕获这一点

181
00:12:05,292 --> 00:12:10,664
第二次回传的时间窗口过去了
我们将其发送出去

182
00:12:10,697 --> 00:12:15,769
用户用 App 中的工具
创建了一个全新的甜甜圈配方

183
00:12:15,802 --> 00:12:19,339
然后再次制作并交付一批新的甜甜圈

184
00:12:19,373 --> 00:12:24,011
第三个时间窗口也过去了
然后第三个回传被发送出去

185
00:12:24,044 --> 00:12:27,247
现在有了更多的机会来评估转化值

186
00:12:27,281 --> 00:12:30,484
并且可以多次地接收到这些值

187
00:12:30,517 --> 00:12:33,820
关于多次转化有几点需要注意

188
00:12:33,854 --> 00:12:37,691
只有第一次回传会收到细粒度转化值

189
00:12:37,724 --> 00:12:42,462
额外的回传可以携带粗粒度转化值

190
00:12:42,496 --> 00:12:47,034
只有冠军广告网络和开发者
会收到额外的回传

191
00:12:47,067 --> 00:12:53,307
接下来 让我们看一下
网页上广告的 SKAdNetwork 归因

192
00:12:53,340 --> 00:13:00,047
我们知道发行商 App 里的广告
会在 App Store 中打开产品页面

193
00:13:00,080 --> 00:13:04,017
然后 App Store 与 SKAdNetwork 合作
对安装进行归因

194
00:13:05,519 --> 00:13:10,324
同时提供我们用户所需要的隐私保护

195
00:13:10,357 --> 00:13:15,329
我们希望将同样的隐私保护
扩展到网页上显示的广告

196
00:13:15,362 --> 00:13:18,265
我们来看看这是如何工作的吧

197
00:13:18,298 --> 00:13:22,503
用户点击 Safari 中的一个广告链接

198
00:13:22,536 --> 00:13:28,842
Safari 会启动 App Store
并显示广告 App 的产品页面

199
00:13:28,876 --> 00:13:30,744
这里发生了两件事

200
00:13:30,777 --> 00:13:35,015
App Store 从广告网络服务器
获取广告展示

201
00:13:35,048 --> 00:13:39,019
然后用户安装 App

202
00:13:39,052 --> 00:13:42,289
接下来的事情都和之前的归因一样了

203
00:13:42,322 --> 00:13:47,561
最终 SKAdNetwork 会发送回传

204
00:13:47,594 --> 00:13:50,964
我们来看看链接是怎么构成的

205
00:13:50,998 --> 00:13:56,803
href 部分包含广告 App 的
App Store 链接

206
00:13:56,837 --> 00:14:00,541
attributionDestination 告诉
Apple 从哪里获取

207
00:14:00,574 --> 00:14:03,510
签名的广告展示

208
00:14:03,544 --> 00:14:07,114
而 attributionSourceNonce 可以
帮助广告网络

209
00:14:07,147 --> 00:14:09,917
准确地找到广告展示并发回

210
00:14:11,318 --> 00:14:15,022
请注意 此链接可以放在第一方站点上

211
00:14:15,055 --> 00:14:18,792
也可以放在嵌入的跨站点 iframe 中

212
00:14:18,825 --> 00:14:22,763
我们来仔细看看 URL 的构建

213
00:14:22,796 --> 00:14:28,936
我们从 attributionDestination 提取 eTLD+1 组件

214
00:14:28,969 --> 00:14:32,039
在此基础上
我们再添加 well-known 限定符

215
00:14:32,072 --> 00:14:34,608
和另外两个路径组件

216
00:14:34,641 --> 00:14:39,580
这为我们提供了一个 URL
我们会向该 URL 发出 HTTP POST 请求

217
00:14:39,613 --> 00:14:42,749
以获得签名展示

218
00:14:42,783 --> 00:14:47,521
请注意 协议和高亮显示的
路径组件是固定的

219
00:14:47,554 --> 00:14:53,060
由广告网络
提供主机名称的部分

220
00:14:54,061 --> 00:14:58,232
SKAdNetwork 将向这个 URL

221
00:14:58,265 --> 00:15:01,635
发出 HTTP POST 请求

222
00:15:01,668 --> 00:15:05,138
POST 主体是 JSON 格式

223
00:15:05,172 --> 00:15:10,277
您会发现 source_nonce
与原始广告链接中的相同

224
00:15:10,310 --> 00:15:13,580
该值是广告网络用来识别

225
00:15:13,614 --> 00:15:16,750
其需要提供的签名展示

226
00:15:17,751 --> 00:15:22,422
我们来看看我们会
从这个 POST 请求中得到什么

227
00:15:22,456 --> 00:15:28,061
这是一个签名展示
可供 SKAdNetwork 使用

228
00:15:28,095 --> 00:15:31,231
注意展示中的
source domain 字段

229
00:15:31,265 --> 00:15:34,468
这是 App 驱动的
SKAdNetwork 流中

230
00:15:34,501 --> 00:15:38,772
源 App ID 的链接模拟

231
00:15:38,805 --> 00:15:43,810
看看如何开始使用这个
进入 SKAdNetwork 系统的新条目

232
00:15:43,844 --> 00:15:46,513
广告网络必须做以下工作

233
00:15:46,547 --> 00:15:52,486
创建链接的唯一标识部分
和链接本身

234
00:15:52,519 --> 00:15:56,123
把前面介绍的组合成的 URL

235
00:15:56,156 --> 00:15:59,660
作为能够提供已签名展示的端点

236
00:15:59,693 --> 00:16:02,863
更新回传服务器

237
00:16:02,896 --> 00:16:05,532
以解析新的可选的
source_domain 字段

238
00:16:05,566 --> 00:16:09,036
对于想要使用
SKAdNetwork 链接的网页

239
00:16:09,069 --> 00:16:14,341
只需嵌入广告网络
提供给广告链接即可

240
00:16:14,374 --> 00:16:19,913
这就是 SKAdNetwork 网页广告归因
的介绍了

241
00:16:19,947 --> 00:16:23,817
看到这一功能在更广泛的
广告生态系统中被采用

242
00:16:23,851 --> 00:16:28,021
我们感到无比兴奋

243
00:16:28,055 --> 00:16:34,595
接下来 我们将介绍
如何测试您的 SKAdNetwork 实现

244
00:16:34,628 --> 00:16:40,133
SKAdNetwork 在上层处理展示和回传

245
00:16:40,167 --> 00:16:45,072
通过与开发者社区的合作
我们了解到 展示

246
00:16:45,105 --> 00:16:49,643
签名和配置一直都是容易出错的地方

247
00:16:49,676 --> 00:16:54,848
能够以一种测试友好的方式

248
00:16:54,882 --> 00:16:57,451
接收和验证回传
也是我们有待改进的领域

249
00:16:57,484 --> 00:17:01,355
为了改善开发者
使用 SKAdNetwork 的体验

250
00:17:01,388 --> 00:17:08,095
我们在 Xcode 13.3 中发布了
SKAdNetwork 测试框架的更新

251
00:17:08,128 --> 00:17:12,132
这是 StoreKitTest 中的
一个单元测试框架

252
00:17:12,165 --> 00:17:15,035
很多人已经在使用它

253
00:17:15,068 --> 00:17:19,540
来测试 StoreKit 实现的各个部分

254
00:17:19,573 --> 00:17:23,076
我们来看看如何校验展示

255
00:17:23,110 --> 00:17:28,515
您创建并配置了
一个 SKAdImpression 实例

256
00:17:28,549 --> 00:17:32,386
并提供了用于生成签名的

257
00:17:32,419 --> 00:17:34,922
私钥所对应的公钥

258
00:17:34,955 --> 00:17:40,427
然后调用 SKAdTestSession
实例上的 validate 方法

259
00:17:40,460 --> 00:17:43,397
这将验证您的展示

260
00:17:43,430 --> 00:17:49,369
如果展示配置错误或者签名无效
会抛出一个错误

261
00:17:49,403 --> 00:17:53,006
另一个主要的测试
是回传的接收

262
00:17:53,040 --> 00:17:54,808
这里有两个步骤

263
00:17:54,842 --> 00:17:59,746
步骤 1
将测试回传添加到测试会话中

264
00:17:59,780 --> 00:18:03,150
您将创建
一个 SKAdTestPostback 的实例

265
00:18:03,183 --> 00:18:07,621
并使用您希望在回传中使用的值
对其进行配置

266
00:18:07,654 --> 00:18:10,390
要特别注意回传 URL

267
00:18:10,424 --> 00:18:13,961
因为这是回传将被发送到的地方

268
00:18:13,994 --> 00:18:18,465
它可以指向远程服务器或本地服务器

269
00:18:18,498 --> 00:18:20,801
然后 您将使用 SKAdTestSession 上的

270
00:18:20,834 --> 00:18:25,739
setPostbacks 方法将其添加到
您的测试会话中

271
00:18:25,772 --> 00:18:29,776
步骤 2 实际操作发送回传

272
00:18:29,810 --> 00:18:33,413
这里需要做的就是
在 SKAdTestSession 上

273
00:18:33,447 --> 00:18:37,718
调用 flushPostbacks 方法
您的回传将被立即发送出去

274
00:18:38,919 --> 00:18:43,357
注意 SKAdTestSession
将通过网络把回传发送到

275
00:18:43,390 --> 00:18:47,628
撰写回传时指定的服务器

276
00:18:47,661 --> 00:18:52,866
这些是今年晚些时候 SKAdNetwork
测试框架会增加的一些内容

277
00:18:52,900 --> 00:18:56,170
支持新的源标识符字段

278
00:18:56,203 --> 00:18:59,873
支持精细和粗略转化值

279
00:18:59,907 --> 00:19:03,043
支持测试多个转化

280
00:19:03,076 --> 00:19:08,015
以上是关于 SKAdNetwork
测试框架更新的简要介绍

281
00:19:08,048 --> 00:19:11,919
这些更新会首先在 Xcode 13.3 中发布

282
00:19:11,952 --> 00:19:15,656
今天 我们讨论了分级 ID 和转化值

283
00:19:15,689 --> 00:19:19,359
旨在更快地向您提供更多数据

284
00:19:19,393 --> 00:19:22,029
然后我们讨论了多次转化

285
00:19:22,062 --> 00:19:26,366
让您可以在更长的时间内
衡量多次互动

286
00:19:26,400 --> 00:19:29,703
然后我们讨论了链接驱动的归因

287
00:19:29,736 --> 00:19:32,873
以及我们如何为其和
SKAdNetwork 之间搭建桥梁

288
00:19:32,906 --> 00:19:36,476
以提供同样的隐私保护

289
00:19:36,510 --> 00:19:42,115
最后我们讨论了 Xcode 中的
SKAdNetwork 测试框架

290
00:19:42,149 --> 00:19:47,754
至此 我们的 SKAdNetwork 4.0 之旅
就结束了

291
00:19:47,788 --> 00:19:51,592
最后 我们所构建的一切

292
00:19:51,625 --> 00:19:54,428
都是基于开发者社区的反馈

293
00:19:54,461 --> 00:19:58,332
听到您为我们的用户建立的
隐私第一的广告体验

294
00:19:58,365 --> 00:20:04,338
我感到非常满足和欣慰

295
00:20:04,371 --> 00:20:06,373
谢谢

296
00:20:06,406 --> 00:20:10,410
[激动人心的音乐]

