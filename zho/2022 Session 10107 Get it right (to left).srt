1
00:00:00,334 --> 00:00:06,340
[欢快的音乐]

2
00:00:09,776 --> 00:00:13,013
Rich Gillam: 大家好 我是Rich
今天我将帮助大家解决从右到左的

3
00:00:13,046 --> 00:00:14,648
问题

4
00:00:14,681 --> 00:00:18,418
您已经将 App 本地化为一系列语言

5
00:00:18,452 --> 00:00:20,521
包括最常见的欧洲语言

6
00:00:20,554 --> 00:00:22,422
和最常见的亚洲语言

7
00:00:22,456 --> 00:00:25,225
所以现在您想将其它本地化为
阿拉伯语和希伯来语

8
00:00:25,259 --> 00:00:26,793
会是个不错的选择

9
00:00:26,827 --> 00:00:30,797
阿拉伯语是我们平台上最常用的
十种语言之一

10
00:00:30,831 --> 00:00:33,367
但是它也带来了一些挑战

11
00:00:33,400 --> 00:00:35,569
这些挑战是您在
开发其他语言时不会遇到的

12
00:00:35,602 --> 00:00:38,939
这就是这次演讲的内容
如何开发您的 App

13
00:00:38,972 --> 00:00:44,278
使其可以本地化为阿拉伯语
和希伯来语等语言

14
00:00:44,311 --> 00:00:46,980
阿拉伯语和希伯来语通常被称为

15
00:00:47,014 --> 00:00:49,583
“从右到左的语言”
“right to left languages.”

16
00:00:49,616 --> 00:00:51,285
为什么叫这个

17
00:00:51,318 --> 00:00:55,589
英语 法语 中文 泰语
和许多其他语言的文字

18
00:00:55,622 --> 00:01:00,060
都是像这样从左到右排列的

19
00:01:00,093 --> 00:01:04,765
而在希伯来语中
字符则是像这样从右向左排列的

20
00:01:04,798 --> 00:01:07,067
阿拉伯语也是一样

21
00:01:07,100 --> 00:01:10,737
在阿拉伯语中
字符是粗略地连接在一起的

22
00:01:10,771 --> 00:01:14,808
“salaam” 中的四个字母
分开写时是这样的

23
00:01:15,976 --> 00:01:18,846
顺便说一下 不仅仅是
阿拉伯语和希伯来语这样排列

24
00:01:18,879 --> 00:01:21,348
Apple 实际上支持15种

25
00:01:21,381 --> 00:01:24,785
从右向左的语言的字体和键盘

26
00:01:24,818 --> 00:01:26,887
这里有一段希伯来文

27
00:01:26,920 --> 00:01:28,488
这是希伯来文版的

28
00:01:28,522 --> 00:01:32,125
“Formulas & Functions Help”页面中的

29
00:01:32,159 --> 00:01:35,762
请注意 这段文本在右边对齐
在左边参差不齐

30
00:01:35,796 --> 00:01:38,432
而且许多行 包括最后一行

31
00:01:38,465 --> 00:01:41,168
在左边都有标点符号

32
00:01:41,201 --> 00:01:43,403
这一段中还有一个数字

33
00:01:43,437 --> 00:01:45,839
数字仍然是从左到右排列

34
00:01:45,873 --> 00:01:50,844
这表明 Numbers  支持超 250 个函数

35
00:01:50,878 --> 00:01:53,881
如果我们放大视图
把另一个段落囊括进来

36
00:01:53,914 --> 00:01:56,583
我们会看到这一段有一些英语单词

37
00:01:56,617 --> 00:01:59,386
iWork 名称及其组成 App

38
00:01:59,419 --> 00:02:01,688
Pages Numbers 和 Keynote

39
00:02:01,722 --> 00:02:03,790
这些也是从左到右写入的

40
00:02:03,824 --> 00:02:05,659
甚至在希伯来语段落中也是如此

41
00:02:05,692 --> 00:02:09,329
因此 对于许多段落来说
文本是双向的

42
00:02:09,363 --> 00:02:12,165
这是阿拉伯语和希伯来语的固有属性

43
00:02:12,199 --> 00:02:16,603
也是为什么它们经常被称为
“bidi” 语言的原因

44
00:02:17,804 --> 00:02:19,740
如果我们进一步扩大视图

45
00:02:19,773 --> 00:02:22,709
会看到整个页面是从右向左布局的

46
00:02:22,743 --> 00:02:25,479
这里有一个表格 文本在图像的右侧

47
00:02:25,512 --> 00:02:28,048
而不是左侧

48
00:02:29,183 --> 00:02:32,719
如果我们进一步放大视图
会看到 Safari 浏览器的窗口框架

49
00:02:32,753 --> 00:02:35,389
发现它并没有随着内容而停止

50
00:02:35,422 --> 00:02:39,593
阿拉伯语和希伯来语文本行
从右侧开始 向左侧推进

51
00:02:39,626 --> 00:02:43,363
因此很自然地会期望其他
UI 元素也这样做

52
00:02:43,397 --> 00:02:47,501
正如读者希望文本从左边开始
向右边推进一样

53
00:02:47,534 --> 00:02:50,637
阿拉伯语和希伯来语的读者
希望的恰恰相反

54
00:02:50,671 --> 00:02:54,074
在这里 Safari 浏览器的工具栏
从右到左运行

55
00:02:54,107 --> 00:02:56,844
红绿灯按钮在右上角

56
00:02:56,877 --> 00:02:59,379
按钮向左移动

57
00:03:00,247 --> 00:03:03,483
如果我们将焦点扩大到整个屏幕

58
00:03:03,517 --> 00:03:05,686
会发现所有文本都是这样的

59
00:03:05,719 --> 00:03:08,355
这是 Numbers 的帮助屏幕
我们看到

60
00:03:08,388 --> 00:03:10,824
Numbers 的所有元素也改变了方向

61
00:03:10,858 --> 00:03:12,526
侧边栏在左边

62
00:03:12,559 --> 00:03:16,763
标签栏从右向左延伸
甚至文档本身也改变了方向

63
00:03:16,797 --> 00:03:21,802
Mac 菜单栏和程序坞
也是从右向左运行的

64
00:03:21,835 --> 00:03:24,471
做好这一切可能会很复杂

65
00:03:24,505 --> 00:03:27,708
但好消息是
我们为您完成了大部分繁重的工作

66
00:03:27,741 --> 00:03:30,344
大多数对从右到左的支持都是免费的

67
00:03:30,377 --> 00:03:32,646
但有些事情需要记住

68
00:03:32,679 --> 00:03:36,083
这就是我们将要讨论的内容
系统为您做了什么

69
00:03:36,116 --> 00:03:37,985
您何时需要选择加入或退出

70
00:03:38,018 --> 00:03:41,188
以及在实现您自己的设备
从右到左支持时应该考虑什么

71
00:03:41,221 --> 00:03:47,227
我们将讨论文本 图像
控件方向和 UI 布局

72
00:03:47,261 --> 00:03:50,697
我们还将介绍如何用
阿拉伯语显示数字

73
00:03:50,731 --> 00:03:54,134
最后 我们将谈一谈如何测试

74
00:03:54,168 --> 00:03:57,604
您的 App 是否能正确地从右向左操作

75
00:03:57,638 --> 00:03:59,239
让我们开始吧

76
00:03:59,273 --> 00:04:01,975
首先 我们将更多地讨论
文本的工作原理

77
00:04:02,009 --> 00:04:04,878
并介绍一些术语

78
00:04:04,912 --> 00:04:07,781
我们先说说写入方向的概念

79
00:04:07,814 --> 00:04:13,120
正如我们看到的
英语是从左到右写入的

80
00:04:13,153 --> 00:04:16,723
希伯来语是从右到左写入的

81
00:04:16,757 --> 00:04:19,393
但如果我们把它们混在一起会怎么样

82
00:04:21,161 --> 00:04:24,264
如果您要写这样一句多语种的句子

83
00:04:24,298 --> 00:04:27,801
每个单独的成分仍然保持
它们的写入方向

84
00:04:27,835 --> 00:04:30,704
但这意味着每个句子将由

85
00:04:30,737 --> 00:04:32,439
三个成分组成

86
00:04:32,472 --> 00:04:35,409
两个独立的母语文本片段

87
00:04:35,442 --> 00:04:38,545
中间夹着一个不同语言的文本片段

88
00:04:38,579 --> 00:04:41,281
当我们讨论一个段落的写入方向时

89
00:04:41,315 --> 00:04:44,852
我们讨论的是这些片段的顺序

90
00:04:44,885 --> 00:04:48,155
当我们说英语句子是
从左到右的写入方向时

91
00:04:48,188 --> 00:04:51,592
是因为这三个方框从左到右排列

92
00:04:51,625 --> 00:04:55,162
当我们说希伯来语句子是
从右到左的写入方向时

93
00:04:55,195 --> 00:04:58,899
是因为这三个方框从右到左排列

94
00:05:00,200 --> 00:05:03,504
另一个不同但相关的概念是文本对齐

95
00:05:03,537 --> 00:05:05,639
如果您阅读的是从左到右的语言

96
00:05:05,672 --> 00:05:09,743
您的眼睛会转向页面的左边
然后向右移动

97
00:05:09,776 --> 00:05:13,247
如果您阅读的是从右到左的语言
情况正好相反

98
00:05:13,280 --> 00:05:18,051
因此 文本在从右到左的语言中
靠右对齐

99
00:05:18,085 --> 00:05:20,521
好消息是 大多数时候

100
00:05:20,554 --> 00:05:23,023
您不必担心这些事情

101
00:05:23,056 --> 00:05:25,893
CoreText 不仅负责在
一行或一段文本中

102
00:05:25,926 --> 00:05:29,530
正确地安排所有字符

103
00:05:29,563 --> 00:05:33,534
包括不同方向的文本混合在一行中时

104
00:05:33,567 --> 00:05:37,137
而且我们所有的 UI 框架也自动
设置写入方向

105
00:05:37,171 --> 00:05:38,906
和对齐方式

106
00:05:38,939 --> 00:05:42,809
所有 UI 小组件都默认为
“自然写入方向”

107
00:05:42,843 --> 00:05:44,578
和“自然对齐”

108
00:05:44,611 --> 00:05:47,314
文本小组件的默认写入方向

109
00:05:47,347 --> 00:05:50,551
与用户 UI 语言的
正常写入方向相匹配

110
00:05:50,584 --> 00:05:53,520
也就是说
如果 UI 是希伯来语或阿拉伯语

111
00:05:53,554 --> 00:05:57,691
则文本小组件的写入方向
默认为从右向左

112
00:05:57,724 --> 00:06:00,794
自然对齐遵循写入方向

113
00:06:00,827 --> 00:06:04,498
也就是说 如果文本小组件的
写入方向是从右到左

114
00:06:04,531 --> 00:06:07,134
它也将右对齐

115
00:06:07,167 --> 00:06:11,205
大多数情况下 这就是您需要的
但您可以重写默认值

116
00:06:11,238 --> 00:06:15,576
我们将在控件方向一节中
更多地讨论这一点

117
00:06:15,609 --> 00:06:19,713
现在是时候开始画一个术语图表了

118
00:06:19,746 --> 00:06:22,683
我们这里说的是 自然对齐
在从左到右的语言中

119
00:06:22,716 --> 00:06:25,285
对应于左对齐
在从右到左的语言中

120
00:06:25,319 --> 00:06:28,322
对应于右对齐

121
00:06:28,355 --> 00:06:30,858
我们会在这个图表中添加

122
00:06:30,891 --> 00:06:33,961
但当然 您要担心的不仅仅是文本

123
00:06:33,994 --> 00:06:36,463
以相反的方向阅读文本会对
您的 App 中

124
00:06:36,496 --> 00:06:40,100
除文本之外的元素产生深远的影响

125
00:06:40,133 --> 00:06:44,638
我们来谈谈它是如何
影响图标和其他图形元素的

126
00:06:45,506 --> 00:06:49,276
这是英语和阿拉伯语的
Pages 工具栏

127
00:06:49,309 --> 00:06:52,679
我们仔细看看工具栏中的一些图标

128
00:06:52,713 --> 00:06:55,616
许多按钮
在两种语言中看起来是一样的

129
00:06:55,649 --> 00:06:57,818
如“添加页面”和“媒体”按钮

130
00:06:57,851 --> 00:07:02,189
这要么是因为它们是对称的
要么是因为它们的方向性

131
00:07:02,222 --> 00:07:05,425
与语言无关
它们在两种语言中都毫无违和感

132
00:07:05,459 --> 00:07:08,629
其他按钮 如“视图”和“文档”按钮

133
00:07:08,662 --> 00:07:11,231
可以切换到阿拉伯语的映射

134
00:07:11,265 --> 00:07:14,168
“视图”按钮会弹出
Pages 侧边栏

135
00:07:14,201 --> 00:07:17,104
它出现在窗口的另一侧
以阿拉伯语显示

136
00:07:17,137 --> 00:07:19,973
因此图标必须改变以反映这一点

137
00:07:20,007 --> 00:07:24,044
“文档”按钮会发生变化
如果用户用阿拉伯语写入

138
00:07:24,077 --> 00:07:27,080
页面会转向相反的方向

139
00:07:27,114 --> 00:07:30,951
您可能会遇到图标完全改变的情况

140
00:07:30,984 --> 00:07:34,821
“插入文本框”按钮上的字母
更改为不同的字母

141
00:07:34,855 --> 00:07:36,990
以反映用户的语言

142
00:07:38,091 --> 00:07:42,129
同样 好消息是
我们已经为您解决了很多类似问题

143
00:07:42,162 --> 00:07:45,732
您必须考虑图像方向
而不是一般的

144
00:07:45,766 --> 00:07:50,337
文字写入方向
但要完成这个任务很简单

145
00:07:50,370 --> 00:07:54,241
这是英语和阿拉伯语的
Mac Pages 中的 View 菜单

146
00:07:54,274 --> 00:07:57,477
请注意 “Show Ruler”图标会反转

147
00:07:57,511 --> 00:07:59,179
在从右向左的语言中

148
00:07:59,213 --> 00:08:02,482
垂直标尺在右手边

149
00:08:02,516 --> 00:08:04,952
对于像标尺图标这样的自定义图像

150
00:08:04,985 --> 00:08:08,655
从右到左的操作是在
Xcode 图像集编辑器中控制的

151
00:08:08,689 --> 00:08:11,558
如果您的图像从左到右
和从右到左是相同的

152
00:08:11,592 --> 00:08:13,560
那么您不需要做任何特别的操作

153
00:08:13,594 --> 00:08:17,464
当您的 App 运行在与开发语言相反的

154
00:08:17,497 --> 00:08:20,501
语言中时 系统还可以通过算法

155
00:08:20,534 --> 00:08:22,336
来映射您的图像

156
00:08:22,369 --> 00:08:25,539
您可以在 Xcode 的
图像集编辑器中请求此功能

157
00:08:25,572 --> 00:08:29,009
在侧边栏中 您会找到一个
标记为“Direction”的控件

158
00:08:29,042 --> 00:08:32,246
如果点击此控件
您会看到一个有四个选项的菜单

159
00:08:32,279 --> 00:08:36,717
如果不管使用何种 UI 语言
图像都是相同的 则选择“Fixed”

160
00:08:36,750 --> 00:08:38,785
如果需要算法映射

161
00:08:38,819 --> 00:08:41,655
可选择其中一个“Mirrors”选项

162
00:08:41,688 --> 00:08:45,559
这取决于开发语言的编写方向

163
00:08:45,592 --> 00:08:48,495
如果图片无法通过算法进行映射

164
00:08:48,529 --> 00:08:51,064
或者图片有多个元素
在 UI 改变方向时

165
00:08:51,098 --> 00:08:52,799
表现方式不同

166
00:08:52,833 --> 00:08:56,436
又或者您有不想移动的着色
可选择“Both"

167
00:08:56,470 --> 00:08:59,606
并将三个新的孔添加到
图像集编辑器中

168
00:08:59,640 --> 00:09:02,009
使您可以创建单独的图像

169
00:09:02,042 --> 00:09:05,479
用于从左到右和从右到左的背景中

170
00:09:06,346 --> 00:09:10,450
但如果您用来自 SF Symbol 的图像
就像 Pages 工具栏那样

171
00:09:10,484 --> 00:09:12,085
事情就更简单了

172
00:09:12,119 --> 00:09:14,688
几乎所有的工作都已为您完成了

173
00:09:14,721 --> 00:09:16,290
从右到左的语言需要

174
00:09:16,323 --> 00:09:19,326
更改的符号会自动更改

175
00:09:19,359 --> 00:09:22,462
以这个项目符号列表图标为例

176
00:09:22,496 --> 00:09:25,299
对于许多图像 SF Symbol 的侧边栏

177
00:09:25,332 --> 00:09:28,569
有一个“本地化”部分
显示所选图像的

178
00:09:28,602 --> 00:09:30,204
本地化版本

179
00:09:30,237 --> 00:09:32,639
在这种情况下 项目符号列表图标

180
00:09:32,673 --> 00:09:35,042
具有不同的从左到右和从右到左版本

181
00:09:35,075 --> 00:09:37,077
它会自动映射

182
00:09:38,078 --> 00:09:41,081
本地化功能不仅仅是

183
00:09:41,114 --> 00:09:42,616
从右向左语言的映射

184
00:09:42,649 --> 00:09:46,253
这是“插入文本框”图标的本地化标签

185
00:09:46,286 --> 00:09:50,157
它不仅有拉丁和阿拉伯文字的
本地化版本

186
00:09:50,190 --> 00:09:52,659
还有其他语种的版本

187
00:09:53,861 --> 00:09:58,065
对于阿拉伯语支持来说
一个特别重要的例子就是问号

188
00:09:58,098 --> 00:10:00,501
它经常被用作“帮助”图标

189
00:10:00,534 --> 00:10:02,936
在阿拉伯语中
问号与拉丁语的问号

190
00:10:02,970 --> 00:10:04,538
是相反的

191
00:10:04,571 --> 00:10:07,708
使用 SF Symbol 中的图标
作为帮助图标

192
00:10:07,741 --> 00:10:10,944
无需任何额外工作即可获得此版本

193
00:10:11,845 --> 00:10:14,648
您必须仔细考虑的一类图像是

194
00:10:14,681 --> 00:10:17,651
箭头和其他方向指示器

195
00:10:17,684 --> 00:10:20,621
这里我们看到了
四个圆圈中的箭头图标

196
00:10:20,654 --> 00:10:22,422
您会发现它们是两对

197
00:10:22,456 --> 00:10:25,826
有两个指向左边 两个指向右边

198
00:10:25,859 --> 00:10:28,495
如果我们只看指向左边的两个

199
00:10:28,529 --> 00:10:31,965
您会看到其中一个叫做
“arrow.backward.circle.”

200
00:10:31,999 --> 00:10:35,402
这个图表从右向左翻转指向右侧

201
00:10:35,435 --> 00:10:38,672
另一个叫做 “arrow.left..circle”

202
00:10:38,705 --> 00:10:41,008
而且不是从右向左翻转

203
00:10:41,041 --> 00:10:44,511
SF Symbol 遵循这个命名惯例

204
00:10:44,545 --> 00:10:48,282
您可能想要也可能不想要
从右到左的图标

205
00:10:48,315 --> 00:10:52,586
“向前”和“向后”的键会翻转
而“左”和“右”的键不会

206
00:10:52,619 --> 00:10:54,755
如果使用箭头或其他形状

207
00:10:54,788 --> 00:10:57,024
传达“向前”或“向后”的概念

208
00:10:57,057 --> 00:10:59,193
则需要使用翻转版本

209
00:10:59,226 --> 00:11:02,262
如果使用箭头来传达绝对方向

210
00:11:02,296 --> 00:11:04,932
则需要使用非翻转版本

211
00:11:06,333 --> 00:11:08,936
让我们在术语表上加一行

212
00:11:08,969 --> 00:11:12,606
在 SF Symbol 中选择图像时
请记住“左”和“右”

213
00:11:12,639 --> 00:11:15,843
总是指向这些方向
而“向前”和“向后”

214
00:11:15,876 --> 00:11:19,513
则根据 UI 语言的不同
指向不同的方向

215
00:11:19,546 --> 00:11:23,016
现在让我们讨论一下控件
和其他 UI 小组件

216
00:11:23,050 --> 00:11:25,419
是如何从右到左处理的

217
00:11:25,452 --> 00:11:28,822
这是英语和阿拉伯语的
Mac Keynote 侧边栏

218
00:11:28,856 --> 00:11:31,725
显示形状的格式检查器

219
00:11:31,758 --> 00:11:35,195
请注意 所有对象的 Appearance
都从右向左翻转

220
00:11:35,229 --> 00:11:38,665
我们有很多弹出式菜单按钮

221
00:11:38,699 --> 00:11:41,301
菜单指示器从右向左移动到左侧

222
00:11:41,335 --> 00:11:43,437
我们有几个复选框 在阿拉伯语中

223
00:11:43,470 --> 00:11:45,706
复选框位于标签的右侧

224
00:11:45,739 --> 00:11:48,375
阿拉伯语的不透明度滑块已更改

225
00:11:48,408 --> 00:11:52,179
因此最小值在右侧 最大值在左侧

226
00:11:52,212 --> 00:11:56,216
在此检查器中的所有
其他控件中依此类推

227
00:11:56,250 --> 00:11:59,186
好消息是这些操作都是免费的

228
00:11:59,219 --> 00:12:02,923
我们所有 UI 框架中的
所有标准 UI 控件

229
00:12:02,956 --> 00:12:06,393
都会自动将它们的外观
转换为从右到左的语言

230
00:12:06,426 --> 00:12:09,696
然而 在某些情况下
您可能不希望发生这种情况

231
00:12:09,730 --> 00:12:12,900
或者您需要对发生的方式
有一定的控制

232
00:12:12,933 --> 00:12:15,969
让我们看几个有趣的例子

233
00:12:16,703 --> 00:12:21,008
我们来讨论一下上面
既有文本标签又有图标的按钮

234
00:12:21,041 --> 00:12:24,511
这是显示“ Move In”动画的

235
00:12:24,545 --> 00:12:26,480
Keynote 讲演动画检查器

236
00:12:26,513 --> 00:12:30,384
这个检查器有两个按钮
既有标签又有图标

237
00:12:30,417 --> 00:12:32,953
请注意 预览按钮上的箭头

238
00:12:32,986 --> 00:12:34,655
随着 UI 方向的更改而翻转

239
00:12:34,688 --> 00:12:38,158
但动画方向菜单上的箭头不会

240
00:12:38,192 --> 00:12:40,794
这两者都与 UI 方向相反

241
00:12:40,827 --> 00:12:44,398
但如果方向控件
是一组按钮而不是菜单

242
00:12:44,431 --> 00:12:47,634
您可能不希望它改变方向

243
00:12:48,802 --> 00:12:52,039
为了展示如何控制这个控件
我将这两个示例分离到

244
00:12:52,072 --> 00:12:54,608
一个小型玩具 App 中

245
00:12:55,709 --> 00:12:58,979
下面是在 SwiftUI 中构建该 UI 的代码

246
00:12:59,012 --> 00:13:01,081
这里有一些有趣的事情需要注意

247
00:13:01,114 --> 00:13:02,749
我们逐一查看它们

248
00:13:02,783 --> 00:13:06,220
我们先从图像名称开始

249
00:13:06,253 --> 00:13:08,922
正如我们之前看到的
对于 SF Symbol 的图像

250
00:13:08,956 --> 00:13:12,459
您可以选择一个翻转的图标
或者一个不翻转的图标

251
00:13:12,492 --> 00:13:15,495
这里我们使用
“arrowtriangle.forward.fill”

252
00:13:15,529 --> 00:13:16,763
作为 Preview 按钮

253
00:13:16,797 --> 00:13:20,534
名字中的“向前”表示
它是从右向左翻转的

254
00:13:20,567 --> 00:13:24,404
我们使用“arrow.left”
和“arrow.right”作为方向按钮

255
00:13:24,438 --> 00:13:26,240
名字中的“左”和“右”表示

256
00:13:26,273 --> 00:13:28,275
它们不会从右到左翻转

257
00:13:29,443 --> 00:13:33,113
如果末使用的是 AppKit 或 UIKit
则其工作方式相同

258
00:13:33,146 --> 00:13:37,784
这是我在 Xcode storyboard
编辑器中的 App 选择了“Preview”按钮

259
00:13:37,818 --> 00:13:40,487
您可以使用 Attribute 检查器中的

260
00:13:40,521 --> 00:13:42,689
“Image”控件控制按钮的图标

261
00:13:43,524 --> 00:13:46,860
在代码中 您可以使用
按钮的“Image”属性设置它

262
00:13:46,894 --> 00:13:51,632
它在 AppKit 和 UIKit 中的
工作方式基本相同

263
00:13:52,566 --> 00:13:56,236
回到我们的 SwiftUI 示例
下一个问题是

264
00:13:56,270 --> 00:13:59,473
如何控制图标位于标签的哪一侧

265
00:13:59,506 --> 00:14:02,276
您可以通过设置标签样式
来完成此操作

266
00:14:02,309 --> 00:14:07,047
内置的 TitleAndIconLabelStyle
将图标放在

267
00:14:07,080 --> 00:14:09,249
用户阅读方向的标签之前

268
00:14:09,283 --> 00:14:11,752
我们可以用这个做“左”按钮

269
00:14:11,785 --> 00:14:15,222
对于另外两个按钮
我们希望图标位于

270
00:14:15,255 --> 00:14:16,990
用户阅读方向上的标签之后

271
00:14:17,024 --> 00:14:22,596
为此 您需要一个自定义标签样式
但这很容易做到

272
00:14:22,629 --> 00:14:26,466
您的标签样式的 makeBody() 方法
只需创建一个 HStack

273
00:14:26,500 --> 00:14:28,669
并将标题和图标添加到其中

274
00:14:28,702 --> 00:14:33,207
与任何 HStack 一样 您添加它们的
顺序决定了它们显示的顺序

275
00:14:33,240 --> 00:14:37,477
并且在适合 UI 方向时
顺序会自动翻转

276
00:14:37,511 --> 00:14:42,916
此技术适用于任何可以
获取标签的视图 而不仅仅是按钮

277
00:14:42,950 --> 00:14:47,154
当然 您不希望“右”按钮上的
图标改变方向

278
00:14:47,187 --> 00:14:51,225
无论 UI 方向如何
您都希望它始终位于右侧

279
00:14:51,258 --> 00:14:55,028
这就引出了这段代码片段中
最后一件有趣的事情

280
00:14:55,062 --> 00:14:57,998
SwiftUI 中的视图
从 SwiftUI 环境中

281
00:14:58,031 --> 00:15:01,768
获取它们的方向性
您可以对其进行修改

282
00:15:01,802 --> 00:15:05,472
要实现这一点 可以向视图添加

283
00:15:05,506 --> 00:15:09,743
“环境”修改器 并为其指定
要更改的属性的键和新值

284
00:15:09,776 --> 00:15:13,180
在这里 我们将重写
环境的 layoutDirection 属性

285
00:15:13,213 --> 00:15:15,182
使其始终从左到右

286
00:15:15,215 --> 00:15:19,086
而不管我们可能从父节点继承什么值

287
00:15:19,119 --> 00:15:22,656
以这种方式改变环境适用于

288
00:15:22,689 --> 00:15:25,792
所有响应用户 UI 方向的
SwiftUI 视图

289
00:15:25,826 --> 00:15:28,629
请注意 我们对包含
“左”和“右”按钮的 HStack

290
00:15:28,662 --> 00:15:31,031
应用了修改器
that contains the “Left”

291
00:15:31,064 --> 00:15:34,401
对视图环境的任何改变都会被

292
00:15:34,434 --> 00:15:37,871
它的子视图继承 所以把它放在这里

293
00:15:37,905 --> 00:15:41,208
不仅可以防止 HStack
颠倒按钮的顺序

294
00:15:41,241 --> 00:15:45,979
还可以防止两个按钮颠倒标签的布局

295
00:15:46,013 --> 00:15:49,016
当然 我们没有将
环境修改器应用到

296
00:15:49,049 --> 00:15:51,718
“Preview”按钮的父链中的任何东西

297
00:15:51,752 --> 00:15:56,056
所以它仍然在适当的时候翻转
正如我们所希望的那样

298
00:15:57,090 --> 00:16:00,127
总结一下 “左”按钮的图标在左边

299
00:16:00,160 --> 00:16:04,698
因为我们使用了内置
TitleAndIconLabelStyle

300
00:16:04,731 --> 00:16:08,235
而“Preview”和“右”按钮的图标在右边

301
00:16:08,268 --> 00:16:13,640
因为我们用了一个自定义的标签样式
我们称之为 IconOnRightLabelStyle

302
00:16:13,674 --> 00:16:16,276
“左”和“左”按钮不会改变它们的顺序

303
00:16:16,310 --> 00:16:18,612
或它们标签的内部排列

304
00:16:18,645 --> 00:16:20,714
因为我们在包含它们的 HStack 中

305
00:16:20,747 --> 00:16:22,683
添加了一个环境修改器

306
00:16:22,716 --> 00:16:25,419
将布局方向设置为从左到右

307
00:16:25,452 --> 00:16:29,256
“Preview”按钮改变了
其标签的内部排列方式

308
00:16:29,289 --> 00:16:31,959
因为它没有此修改器

309
00:16:32,926 --> 00:16:35,729
这在 AppKit 和 UIKit 中是不同的

310
00:16:35,762 --> 00:16:39,032
在这两个框架中
图标相对于标签的位置

311
00:16:39,066 --> 00:16:42,135
是由 Xcode 的 Attribute 检查器中的

312
00:16:42,169 --> 00:16:44,538
“位置”控件控制的

313
00:16:44,571 --> 00:16:46,240
如果点击这个控件

314
00:16:46,273 --> 00:16:49,176
您会看到菜单中有两对选项

315
00:16:49,209 --> 00:16:53,080
它们会将标签和图标水平对齐

316
00:16:53,113 --> 00:16:56,250
您会看到“前缘”和“左”
还有“后缘”和“右”

317
00:16:56,283 --> 00:17:00,254
“前缘”和“后缘”根据 UI 方向
改变它们的含义

318
00:17:00,287 --> 00:17:03,023
“左”和“右”则不会

319
00:17:03,056 --> 00:17:07,227
在 AppKit 中 您可以用按钮的
imagePosition 属性来控制它

320
00:17:07,261 --> 00:17:11,798
在 UIKit 中 则需要按钮配置上的
imagePlacement 属性来控制它

321
00:17:11,832 --> 00:17:16,403
这可能意味着您需要
首先设置按钮的配置

322
00:17:16,436 --> 00:17:19,072
“Preview”按钮上的图标会改变方向

323
00:17:19,106 --> 00:17:21,341
因为我们将其位置设置为“后缘”

324
00:17:21,375 --> 00:17:24,478
而“右”按钮上的图标不会改变方向

325
00:17:24,511 --> 00:17:27,881
因为我们将其位置设置为“右”

326
00:17:27,915 --> 00:17:31,718
这也使得我们填完了
术语表的最后一行

327
00:17:31,752 --> 00:17:34,121
在讨论 UI 布局时

328
00:17:34,154 --> 00:17:35,822
“前缘”和“后缘”这两个术语
会经常出现

329
00:17:35,856 --> 00:17:37,224
就像“向前”和“向后”一样

330
00:17:37,257 --> 00:17:40,527
您经常会看到它们与
“左”和“右”对比使用

331
00:17:40,561 --> 00:17:44,464
“前缘”指的是
最靠近行首一侧的边缘

332
00:17:44,498 --> 00:17:48,402
或者是读者开始阅读的
屏幕或窗口的边缘

333
00:17:48,435 --> 00:17:51,605
从左到右 从右到左

334
00:17:51,638 --> 00:17:53,907
后缘是相对的一侧

335
00:17:53,941 --> 00:17:55,609
最接近直线的末端

336
00:17:55,642 --> 00:17:59,046
从右到右为右 从右到左为左

337
00:17:59,079 --> 00:18:02,649
大多数时候 您想用这些
来代替“左”和“右”

338
00:18:02,683 --> 00:18:07,120
只有在与绝对方向相关的事情上
才使用“左”和“右”

339
00:18:08,455 --> 00:18:10,591
我们来看看另一个有趣的案例

340
00:18:10,624 --> 00:18:14,461
这是英语和阿拉伯语版的
iPhone 上 Keynote 中的

341
00:18:14,494 --> 00:18:16,230
文本格式检查器的一部分

342
00:18:16,263 --> 00:18:20,167
这个特殊的屏幕截图
有四个分段的控件

343
00:18:20,200 --> 00:18:23,303
最上面的两个按钮
即检查器的页面选择器

344
00:18:23,337 --> 00:18:26,640
和标准的“粗体/斜体/下划线”
样式按钮

345
00:18:26,673 --> 00:18:30,310
会根据 UI 语言来颠倒句段的顺序

346
00:18:30,344 --> 00:18:34,381
如果您不懂阿拉伯语
就必须相信页面选择器

347
00:18:34,414 --> 00:18:36,517
与我们所看到的其他控件一样

348
00:18:36,550 --> 00:18:39,987
这是默认设置
您可以免费试用此功能

349
00:18:40,020 --> 00:18:43,123
另外两个分段控件 即对齐控件

350
00:18:43,156 --> 00:18:45,626
不会颠倒其句段的顺序

351
00:18:45,659 --> 00:18:48,762
这是因为它们在绝对方向上移动对象

352
00:18:48,795 --> 00:18:50,964
左对齐就是左对齐

353
00:18:50,998 --> 00:18:54,535
不管它是行首还是行尾

354
00:18:54,568 --> 00:18:58,305
让我们看看如何防止这些控件翻转

355
00:18:58,338 --> 00:19:01,008
我们已经知道如何在
SwiftUI 中实现这一点

356
00:19:01,041 --> 00:19:02,910
您只需应用一个“环境”修改器

357
00:19:02,943 --> 00:19:06,947
将环境的 layoutDirection 属性
更改为从左到右

358
00:19:06,980 --> 00:19:09,950
在这里 我们使用这项技术来防止

359
00:19:09,983 --> 00:19:11,451
对齐控件反转

360
00:19:11,485 --> 00:19:16,323
但让样式控件像往常一样反转

361
00:19:16,356 --> 00:19:18,792
在 UIKit 中 工作方式完全不同

362
00:19:18,825 --> 00:19:22,029
这是 Xcode 中的一个玩具 App
用来模拟

363
00:19:22,062 --> 00:19:24,131
分段控件的行为

364
00:19:24,164 --> 00:19:26,200
我有两个分段控件

365
00:19:26,233 --> 00:19:29,203
一个模仿粗体/斜体/下划线的行为

366
00:19:29,236 --> 00:19:32,172
另一个模仿对齐控件

367
00:19:32,206 --> 00:19:34,341
选择对齐控件

368
00:19:34,374 --> 00:19:38,979
在属性检查器中 您会发现
一个标签为“Semantic”的菜单

369
00:19:39,012 --> 00:19:42,382
如果点击这个菜单 会有五个选项

370
00:19:42,416 --> 00:19:46,353
此菜单控制所谓的语义内容属性

371
00:19:46,386 --> 00:19:49,623
您用它来说明这是什么类型的控件

372
00:19:49,656 --> 00:19:53,493
系统用它来决定它是否

373
00:19:53,527 --> 00:19:55,529
根据 UI 方向翻转其外观

374
00:19:55,562 --> 00:19:57,698
默认值为“未指定”

375
00:19:57,731 --> 00:20:00,767
这将导致控件翻转其外观

376
00:20:00,801 --> 00:20:04,037
“Playback”表示该控件是一个
媒体播放控制面板

377
00:20:04,071 --> 00:20:06,406
或一组播放控制面板的一部分

378
00:20:06,440 --> 00:20:11,345
“Spatial”表示控件是一个空间控件
或一组控件的一部分

379
00:20:11,378 --> 00:20:16,350
空间控件在空间中
以绝对方向移动对象

380
00:20:16,383 --> 00:20:18,752
最后 您可以强制该控件

381
00:20:18,785 --> 00:20:23,290
始终从左向右或从右向左布局

382
00:20:23,323 --> 00:20:27,895
因此 粗体/斜体/下划线控件
从右到左翻转其片段

383
00:20:27,928 --> 00:20:31,765
因为其语义内容属性
被设置为“未指定”

384
00:20:31,798 --> 00:20:35,102
而对齐控件不翻转其片段

385
00:20:35,135 --> 00:20:39,306
因为其语义内容属性
被设置为“空间的”

386
00:20:39,339 --> 00:20:41,808
它的优点在于它不仅仅适用于

387
00:20:41,842 --> 00:20:43,644
UISegmentedControl

388
00:20:43,677 --> 00:20:46,680
所有的 UIView
都有一个语义内容属性

389
00:20:46,713 --> 00:20:50,117
它控制所有控件从右到左的行为

390
00:20:50,150 --> 00:20:53,453
对于任何具有子组件的
标准 UIKit 视图

391
00:20:53,487 --> 00:20:56,557
语义内容属性将确定该视图的

392
00:20:56,590 --> 00:21:01,061
子组件的位置是否基于 UI 语言翻转

393
00:21:02,196 --> 00:21:05,065
在 AppKit 中
这类操作的方式有所不同

394
00:21:05,098 --> 00:21:08,202
对于所有的 NSControls
Xcode 属性检查器

395
00:21:08,235 --> 00:21:11,805
都包含两个菜单 分别标记为
“Layout”和“Mirror.”

396
00:21:11,839 --> 00:21:13,674
“Layout”菜单对应于

397
00:21:13,707 --> 00:21:17,044
控件的
userInterfaceLayoutDirection 属性

398
00:21:17,077 --> 00:21:21,181
该属性指示控件应该使用
从左到右还是从右到左的布局

399
00:21:21,215 --> 00:21:24,551
当您使用 Interface Builder 时
通常不会更改此选项

400
00:21:24,585 --> 00:21:27,087
相反 您可以使用“Mirror”菜单

401
00:21:27,120 --> 00:21:31,158
将其设置为“Always”会导致
userInterfaceLayoutDirection

402
00:21:31,191 --> 00:21:35,295
当 nib 在从右向左的
用户的 UI 语言中加载时

403
00:21:35,329 --> 00:21:37,898
控件的布局会被翻转

404
00:21:37,931 --> 00:21:40,300
而将其设置为“Never”
则会破坏此行为

405
00:21:40,334 --> 00:21:42,336
从而保持布局不变

406
00:21:42,369 --> 00:21:45,372
通过将该值设置为“Never”

407
00:21:45,405 --> 00:21:47,975
可以保持对齐控件的布局不变

408
00:21:48,008 --> 00:21:49,910
如果您没有使用 Interface Builder

409
00:21:49,943 --> 00:21:52,112
则可以通过直接将控件的

410
00:21:52,145 --> 00:21:54,882
userInterfaceLayoutDirection
设置为从左到右

411
00:21:54,915 --> 00:21:57,484
来完成相同的操作

412
00:21:57,518 --> 00:22:01,688
顺便说一句 userInterfaceLayoutDirection
是 NSView 上的一个属性

413
00:22:01,722 --> 00:22:05,492
但它只出现在 Interface Builder 中的
NSControl 实例上

414
00:22:05,526 --> 00:22:08,729
因此 如果您想翻转
非 NSControl 的内容

415
00:22:08,762 --> 00:22:11,198
就需要用到此处显示的代码

416
00:22:12,299 --> 00:22:15,335
在我们继续之前 我想再谈谈文本

417
00:22:15,369 --> 00:22:20,207
这是 Mac 版 iWork 中的
“设置文档密码”对话框

418
00:22:20,240 --> 00:22:23,310
在阿拉伯语版本中
您会看到一切都颠倒了

419
00:22:23,343 --> 00:22:25,712
注意标签的变化

420
00:22:25,746 --> 00:22:28,482
在英语中 它们是右对齐的
这样它们就会

421
00:22:28,515 --> 00:22:29,950
靠近编辑文本字段

422
00:22:29,983 --> 00:22:32,152
在阿拉伯语中 它们是左对齐的

423
00:22:32,186 --> 00:22:35,322
换句话说 这是与自然对齐相反的

424
00:22:35,355 --> 00:22:38,592
尾缘对齐 如果您需要的话

425
00:22:38,625 --> 00:22:42,362
在 Mac 上的 SwiftUI 中
获得这个布局非常简单

426
00:22:42,396 --> 00:22:45,432
只需使用一个 Form
将文本字段聚集在一起

427
00:22:45,465 --> 00:22:48,669
但如果像我们的示例那样

428
00:22:48,702 --> 00:22:51,738
其中一个标签是多行的
这就会变得很有趣

429
00:22:51,772 --> 00:22:56,076
如果我们将最后一个标签扩展为两行
就会得到这样的结果

430
00:22:56,109 --> 00:22:59,079
两个单线标签正确对齐

431
00:22:59,112 --> 00:23:01,148
但双线标签没有对齐

432
00:23:01,181 --> 00:23:04,785
问题是 底部标签确实是右对齐的

433
00:23:04,818 --> 00:23:07,454
只有它的边框是右对齐的

434
00:23:07,487 --> 00:23:11,258
而不是边框内的文本行

435
00:23:11,291 --> 00:23:15,696
可以通过向最后一个标签添加
multilineTextAlignment 修改器

436
00:23:15,729 --> 00:23:17,397
来修复此问题

437
00:23:17,431 --> 00:23:21,134
SwiftUI 中的文本对齐
仅在长度超过一行的

438
00:23:21,168 --> 00:23:23,303
文本对象上起作用

439
00:23:23,337 --> 00:23:25,138
对于单行文本对象

440
00:23:25,172 --> 00:23:28,375
其边界框将文本本身紧紧包围

441
00:23:28,408 --> 00:23:32,312
您可以通过对齐
整个文本对象来对齐它

442
00:23:32,346 --> 00:23:37,017
还要注意 无论对齐文本的边界框

443
00:23:37,050 --> 00:23:39,086
还是边界框内的多行文本

444
00:23:39,119 --> 00:23:41,822
都可以选择前缘和后缘对齐

445
00:23:41,855 --> 00:23:45,359
这将根据用户的 UI 方向改变含义

446
00:23:45,392 --> 00:23:48,629
为了使对齐方式与 UI 方向无关

447
00:23:48,662 --> 00:23:50,497
可以使用环境修改器

448
00:23:50,531 --> 00:23:54,234
来更改环境的布局方向
如我们前面所见

449
00:23:55,202 --> 00:23:58,639
在 UIKit 中 文本默认是对齐的

450
00:23:58,672 --> 00:24:02,276
但您可以在必要时
将其更改为绝对方向

451
00:24:02,309 --> 00:24:05,379
在 Interface Builder 中
该控件如下所示

452
00:24:05,412 --> 00:24:08,148
并对应于 UILabel

453
00:24:08,182 --> 00:24:10,517
和 UITextView 上的 textAlignment 属性

454
00:24:10,551 --> 00:24:13,287
最右边带虚线的按钮

455
00:24:13,320 --> 00:24:16,256
可以实现自然或前缘对齐方式

456
00:24:16,290 --> 00:24:17,658
标签的对齐方式

457
00:24:17,691 --> 00:24:20,360
将遵循标签的语义内容属性

458
00:24:20,394 --> 00:24:24,298
其他按钮可实现固定的
左对齐 右对齐或居中对齐

459
00:24:24,331 --> 00:24:28,869
而与 UI 方向或标签的
语义内容属性无关

460
00:24:28,902 --> 00:24:31,738
没有用于后缘对齐的内置设置

461
00:24:31,772 --> 00:24:34,274
您需要用代码来实现这一点

462
00:24:34,308 --> 00:24:36,443
在 AppKit 中 情况略有不同

463
00:24:36,476 --> 00:24:38,345
您仍然拥有对齐控件

464
00:24:38,378 --> 00:24:41,081
它的工作原理与 UIKit 中的
基本相同

465
00:24:41,114 --> 00:24:44,952
但它与 userInterfaceLayoutDirection
交互的方式不同

466
00:24:44,985 --> 00:24:47,254
如果您将“Mirror”
设置为“Automatically”

467
00:24:47,287 --> 00:24:49,756
并且系统将
userInterfaceLayoutDirection

468
00:24:49,790 --> 00:24:51,124
设置为从右到左

469
00:24:51,158 --> 00:24:53,994
则所有对齐设置的含义将颠倒

470
00:24:54,027 --> 00:24:56,196
因此 如果将“Mirror”
设置为“Automatically”

471
00:24:56,230 --> 00:24:59,132
则左对齐实际上是前缘对齐

472
00:24:59,166 --> 00:25:03,403
而右对齐实际上是后缘对齐

473
00:25:03,437 --> 00:25:06,406
我们已经讨论了所有的
标准 UI 小组件

474
00:25:06,440 --> 00:25:10,143
如何自动翻转它们的布局
来匹配用户的写入方向

475
00:25:10,177 --> 00:25:13,180
但在必要的时候
很容易避免这种情况

476
00:25:13,213 --> 00:25:18,185
这扩展到在屏幕上排列单个
UI 小组件

477
00:25:18,218 --> 00:25:21,288
如果您正在使用一个
标准视图或视图控制器

478
00:25:21,321 --> 00:25:23,657
来处理它们的子视图的位置

479
00:25:23,690 --> 00:25:26,159
那么所有的子视图都会在必要的时候

480
00:25:26,193 --> 00:25:29,296
自动翻转它们的布局
而无需执行任何操作

481
00:25:29,329 --> 00:25:32,366
表格视图和集合视图也能正确处理

482
00:25:32,399 --> 00:25:34,501
从右向左语言的滚动

483
00:25:34,535 --> 00:25:38,105
UINavigationController
会自动改变它的

484
00:25:38,138 --> 00:25:42,042
segue 动画的方向
来反映用户的书写方向

485
00:25:42,075 --> 00:25:45,078
并更改“后退”按钮以与之匹配

486
00:25:45,112 --> 00:25:49,383
UIPageViewController
还会自动翻转翻页方向

487
00:25:49,416 --> 00:25:53,187
和轻扫手势的含义

488
00:25:53,220 --> 00:25:55,856
除了使用 stack 视图
定位子视图之外

489
00:25:55,889 --> 00:25:59,393
您通常不希望重写这些内容

490
00:25:59,426 --> 00:26:02,496
但所有视图都遵循
semanticContentAttribute

491
00:26:02,529 --> 00:26:06,166
并使用它来告诉它们
如何布局子视图

492
00:26:06,200 --> 00:26:09,570
标准 AppKit 视图也是如此

493
00:26:09,603 --> 00:26:13,106
表视图和集合视图
也可以处理从右向左的滚动

494
00:26:13,140 --> 00:26:16,844
视图都使用它们的
userInterfaceLayoutDirection 属性

495
00:26:16,877 --> 00:26:19,112
来决定如何布局它们的子视图

496
00:26:19,146 --> 00:26:21,415
尽管 Interface Builder 也会如此

497
00:26:21,448 --> 00:26:24,051
您必须用代码来做

498
00:26:24,084 --> 00:26:26,954
标准的 SwiftUI 视图也反映了

499
00:26:26,987 --> 00:26:29,890
环境的 layoutDirection 属性

500
00:26:32,659 --> 00:26:36,063
如果您使用 Auto Layout
而不是 stack 和网格视图

501
00:26:36,096 --> 00:26:37,164
来布局您的视图

502
00:26:37,197 --> 00:26:39,933
Auto Layout 还会根据

503
00:26:39,967 --> 00:26:41,668
UI 方向自动翻转

504
00:26:41,702 --> 00:26:43,971
如果您有水平约束

505
00:26:44,004 --> 00:26:46,306
您将看到它们会自动将事物

506
00:26:46,340 --> 00:26:49,676
连接到前缘和后缘
正如我们所看到的

507
00:26:49,710 --> 00:26:53,614
“前缘”和“后缘”根据 UI 方向
有不同的含义

508
00:26:53,647 --> 00:26:57,317
但如果需要
您可以将 Auto Layout 约束

509
00:26:57,351 --> 00:26:58,952
设置为绝对左右方向

510
00:26:58,986 --> 00:27:02,823
您可以点击约束一侧的方向

511
00:27:02,856 --> 00:27:05,325
并在弹出的菜单中关闭
“遵循语言方向”

512
00:27:05,359 --> 00:27:06,960
来完成此操作

513
00:27:06,994 --> 00:27:09,930
这将约束两端的方向

514
00:27:09,963 --> 00:27:13,867
从“前缘”和“后缘”
更改为“左”和“右”

515
00:27:13,901 --> 00:27:17,638
在代码中设置
Auto Layout 约束有许多不同的方法

516
00:27:17,671 --> 00:27:19,039
这是其中之一

517
00:27:19,072 --> 00:27:21,775
无论您如何操作 要记住的是

518
00:27:21,808 --> 00:27:24,912
使用“前缘”和“后缘”
而不是“左”和“右”

519
00:27:24,945 --> 00:27:28,749
除非在相对较少的情况下
无论 UI 语言的

520
00:27:28,782 --> 00:27:34,087
编写方向如何
您都希望使用相同的布局方向

521
00:27:34,121 --> 00:27:37,691
好了 刚才的内容有点多
我们休息一下

522
00:27:37,724 --> 00:27:40,494
主要的结论是 我们已经为您

523
00:27:40,527 --> 00:27:42,829
完成了处理从右到左语言的
大部分工作

524
00:27:42,863 --> 00:27:45,899
当您需要重写它时
有很多方法可以做到这一点

525
00:27:45,933 --> 00:27:48,602
让我们再来看一下术语幻灯片

526
00:27:48,635 --> 00:27:52,339
记住 “左”和“右”始终是左和右

527
00:27:52,372 --> 00:27:54,775
而其他术语的含义

528
00:27:54,808 --> 00:27:57,411
则取决于整个 UI 方向

529
00:27:58,745 --> 00:28:02,282
在结束之前
让我们看一个更重要的问题

530
00:28:02,316 --> 00:28:04,251
那就是如何显示数字

531
00:28:04,284 --> 00:28:07,888
严格来说 这不是从右到左的问题
但对于许多开发者来说

532
00:28:07,921 --> 00:28:10,657
阿拉伯语是他们本地化的第一种语言

533
00:28:10,691 --> 00:28:15,429
因为它使用的数字字符
不同于英语中的数字字符

534
00:28:15,462 --> 00:28:17,631
这些数字是这样的

535
00:28:17,664 --> 00:28:20,300
数字的命名有很多不同的约定

536
00:28:20,334 --> 00:28:24,271
但我将大多数欧洲语言中
使用的数字称为“拉丁”数字

537
00:28:24,304 --> 00:28:27,608
而将阿拉伯语中使用的数字
称为“阿拉伯-印度”数字

538
00:28:27,641 --> 00:28:30,210
还有其他语言也有自己的数字

539
00:28:30,244 --> 00:28:33,013
这些是用于印地语的梵文数字

540
00:28:33,046 --> 00:28:36,850
印地语是另一种
使用不同数字的通用语言

541
00:28:36,884 --> 00:28:40,087
需要记住的一件重要的事是
阿拉伯语和印地语

542
00:28:40,120 --> 00:28:43,490
都不太使用它们的本地数字

543
00:28:43,524 --> 00:28:45,726
对于阿拉伯语 它取决于国家

544
00:28:45,759 --> 00:28:50,097
一些国家 如沙特阿拉伯
使用本地数字

545
00:28:50,130 --> 00:28:53,634
而另一些国家 如阿联酋
使用拉丁数字

546
00:28:53,667 --> 00:28:57,538
个人用户也可以选择他们喜欢的数字

547
00:28:57,571 --> 00:29:00,774
对于印地语 我们默认使用拉丁数字

548
00:29:00,807 --> 00:29:04,444
但是用户可以选择使用本地数字

549
00:29:05,546 --> 00:29:09,716
您已经知道像这样构造
UI 字符串不是个好主意

550
00:29:09,750 --> 00:29:12,419
字符串是硬编码的 无法转换

551
00:29:12,452 --> 00:29:15,856
消息不会更改为处理复数等等

552
00:29:15,889 --> 00:29:18,525
但另一个不好的原因是

553
00:29:18,559 --> 00:29:23,163
“peopleInChat” 的值
总是用拉丁数字表示

554
00:29:23,197 --> 00:29:26,733
您可能也已经知道
解决这个问题的方法是

555
00:29:26,767 --> 00:29:29,436
对字符串使用“本地化”的 init 方法

556
00:29:29,469 --> 00:29:32,773
该方法将在 App 包中
查找实际的字符串

557
00:29:32,806 --> 00:29:36,009
并在有 stringsdict 文件的情况下
正确处理复数

558
00:29:36,043 --> 00:29:39,546
好消息是它还能正确处理数字

559
00:29:39,580 --> 00:29:43,283
此处的“peopleInChat”插值的值
将根据用户的区域设置

560
00:29:43,317 --> 00:29:47,354
和首选项使用正确的
本地化数字呈现

561
00:29:47,387 --> 00:29:50,591
这也适用于 SwiftUI 中的文本视图

562
00:29:50,624 --> 00:29:54,328
文本视图初始值设定项还将使用
正确本地化的数字

563
00:29:54,361 --> 00:29:57,431
来呈现任何字符串插值

564
00:29:57,464 --> 00:30:01,768
构造用户可见字符串时 始终使用
String(localization:)

565
00:30:01,802 --> 00:30:05,372
许多其他可以格式化数字的
字符串 API

566
00:30:05,405 --> 00:30:08,408
包括 +stringWithFormat:
和接受数字的 String init 函数

567
00:30:08,442 --> 00:30:12,613
始终使用拉丁数字

568
00:30:12,646 --> 00:30:16,650
需要注意的一个问题是
包含数字的静态字符串

569
00:30:16,683 --> 00:30:17,951
比如这个

570
00:30:17,985 --> 00:30:19,253
这有什么大不了的

571
00:30:19,286 --> 00:30:22,990
您把它发送给翻译 他们翻译
然后您就会得到这个

572
00:30:23,023 --> 00:30:25,092
这在很多地方都是正确的

573
00:30:25,125 --> 00:30:27,528
但在沙特阿拉伯和其他一些国家

574
00:30:27,561 --> 00:30:29,062
您会看到这个

575
00:30:29,096 --> 00:30:33,233
除了 3 所使用的字符外
文本是相同的

576
00:30:33,267 --> 00:30:35,536
当然 您可以为使用
阿拉伯-印度数字的

577
00:30:35,569 --> 00:30:38,772
阿拉伯语地区
和使用拉丁数字的阿拉伯语地区

578
00:30:38,805 --> 00:30:40,707
进行单独的本地化

579
00:30:40,741 --> 00:30:43,477
但是没人这样做 这是一种浪费

580
00:30:43,510 --> 00:30:45,646
更糟糕的是 在阿拉伯语和印地语中

581
00:30:45,679 --> 00:30:48,415
用户可以选择他们想要使用的数字

582
00:30:48,448 --> 00:30:50,684
所以您必须根据用户的偏好

583
00:30:50,717 --> 00:30:55,088
来选择本地化
而不仅仅是根据他们的地区

584
00:30:55,122 --> 00:30:59,793
解决方案是仍然只对
阿拉伯语或印地语进行本地化

585
00:30:59,826 --> 00:31:02,262
但要在运行时将数字替换进去

586
00:31:02,296 --> 00:31:04,965
尽管您在编译时就知道这个值

587
00:31:04,998 --> 00:31:09,002
在 Swift 中 您可以使用
字符串插值来完成此操作

588
00:31:10,170 --> 00:31:12,873
如果有其他元素和数字一起出现

589
00:31:12,906 --> 00:31:16,510
它们相对于数字的位置也是一个挑战

590
00:31:16,543 --> 00:31:19,413
甚至不是所有
从右到左的语言都是一样的

591
00:31:19,446 --> 00:31:21,982
请注意 在阿拉伯语和希伯来语中

592
00:31:22,015 --> 00:31:25,152
减号和百分号位于数字的不同侧

593
00:31:25,185 --> 00:31:28,322
实际上 并不一定是
从右到左的语言才有这个问题

594
00:31:28,355 --> 00:31:31,358
注意 在从左向右的土耳其语中

595
00:31:31,391 --> 00:31:34,094
百分比符号也在左边

596
00:31:34,127 --> 00:31:37,831
当然 请记住 如果您使用的是
本地阿拉伯数字

597
00:31:37,865 --> 00:31:41,401
它们使用的是完全不同的百分比符号

598
00:31:41,435 --> 00:31:44,938
换言之 您真的不想做这种事情

599
00:31:44,972 --> 00:31:47,875
您要在后面加上百分号
或者货币符号

600
00:31:47,908 --> 00:31:51,178
单位缩写 或者您自己加的任何东西

601
00:31:51,211 --> 00:31:54,748
相反 使用数字格式化程序
添加百分号

602
00:31:54,781 --> 00:31:56,850
货币符号或其他符号

603
00:31:56,884 --> 00:31:59,887
在 Swift 中 对所有数值类型
使用 formatted() 方法

604
00:31:59,920 --> 00:32:01,622
很容易做到这一点

605
00:32:01,655 --> 00:32:04,791
如果它是更大字符串的一部分
如本例中所示

606
00:32:04,825 --> 00:32:08,095
String(localized:) 还将确保
格式化的数字

607
00:32:08,128 --> 00:32:11,031
或在运行时代入字符串的
任何其他内容

608
00:32:11,064 --> 00:32:12,833
包括其他字符串

609
00:32:12,866 --> 00:32:15,836
被标记包围 这样可以防止

610
00:32:15,869 --> 00:32:18,539
格式化数字的书写方向

611
00:32:18,572 --> 00:32:21,141
和周围消息相互混淆

612
00:32:21,175 --> 00:32:25,179
最后 我想给您一个提示
用于测试您的 App

613
00:32:25,212 --> 00:32:27,781
以确保您从右向左的操作是正确的

614
00:32:28,549 --> 00:32:31,518
您不必在可执行文件中使用
阿拉伯语

615
00:32:31,552 --> 00:32:34,688
或希伯来语本地化
就可以从右向左测试您的 App

616
00:32:34,721 --> 00:32:36,957
实际上 您可以在开发语言中

617
00:32:36,990 --> 00:32:38,926
测试从右到左的行为

618
00:32:38,959 --> 00:32:42,329
为此 在 Xcode 中
打开方案编辑器

619
00:32:42,362 --> 00:32:46,633
现在转到 Options 选项卡
寻找“App Language”菜单

620
00:32:46,667 --> 00:32:50,370
在这个菜单的底部是一堆
“pseudolanguage”选项

621
00:32:50,404 --> 00:32:54,274
这些都是假语言
它们以各种方式转换您的 UI

622
00:32:54,308 --> 00:32:56,910
让您在没有实际本地化的情况下

623
00:32:56,944 --> 00:32:59,112
检查本地化问题

624
00:32:59,146 --> 00:33:02,382
选择“Right-to-left Pseudolanguage”选项
并点击运行

625
00:33:02,416 --> 00:33:06,286
您的 App 仍然是
英语或其他开发语言

626
00:33:06,320 --> 00:33:10,190
但 UI 会将全部从右到左翻转

627
00:33:10,224 --> 00:33:11,758
这就是我要介绍的全部内容

628
00:33:11,792 --> 00:33:14,728
从右向左语言的本地化

629
00:33:14,761 --> 00:33:18,031
需要注意一些
与书写方向变化相关的问题

630
00:33:18,065 --> 00:33:21,201
但是系统会为您完成
大部分繁重的工作

631
00:33:21,235 --> 00:33:24,471
在某些情况下 通常是在绝对方向上

632
00:33:24,505 --> 00:33:26,640
您可能希望选择这种行为

633
00:33:26,673 --> 00:33:28,408
而这始终是可能的

634
00:33:28,442 --> 00:33:33,680
请记住 并非所有语言
都使用拉丁数字来表示数字

635
00:33:33,714 --> 00:33:35,449
记住这些东西

636
00:33:35,482 --> 00:33:37,584
实现从右到左

637
00:33:37,618 --> 00:33:38,685
并不难

638
00:33:38,719 --> 00:33:42,990
[欢快的音乐]

