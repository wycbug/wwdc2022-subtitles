1
00:00:01,301 --> 00:00:07,307
[古怪的音乐]

2
00:00:09,309 --> 00:00:10,978
Tyler: 大家好 我是 Tyler

3
00:00:11,011 --> 00:00:14,214
是来自 WebKit accessibility
团队的工程师

4
00:00:14,248 --> 00:00:16,250
在今天的讲座中
我将带大家游览

5
00:00:16,283 --> 00:00:19,520
现代网络的辅助功能
第一站是辅助技术的概览

6
00:00:19,553 --> 00:00:21,922
如屏幕阅读器

7
00:00:23,090 --> 00:00:26,827
然后 我们会介绍您如何
在 Web Speech API 和 dialog 元素中

8
00:00:26,860 --> 00:00:31,999
使用如自定义控件
语音合成标记语言 或简称 SSML 等工具

9
00:00:32,032 --> 00:00:35,135
构建丰富 可访问的
网页 App 的方法

10
00:00:36,503 --> 00:00:39,406
我们先来看下辅助技术

11
00:00:40,374 --> 00:00:43,710
全球大约 1/7 的人有某种残疾

12
00:00:43,744 --> 00:00:47,447
影响他们与世界 设备
和网络之间的互动

13
00:00:48,015 --> 00:00:50,484
不同年纪的人会经历
不同时间长度

14
00:00:50,517 --> 00:00:53,654
不同严重程度的残疾

15
00:00:53,687 --> 00:00:57,157
Apple 构建了多种工具
帮助用户以最佳的方式

16
00:00:57,191 --> 00:01:00,027
来与设备互动

17
00:01:00,060 --> 00:01:04,765
这些工具包括 VoiceOver
开关控制 语音控制

18
00:01:04,798 --> 00:01:09,736
全键盘访问 这些都为用户提供了
不同的设备使用方式

19
00:01:09,770 --> 00:01:12,005
您可以查看去年的

20
00:01:12,039 --> 00:01:13,674
“Support Full Keyboard Access
in your iOS app”讲座

21
00:01:13,707 --> 00:01:16,143
以了解更多关于这些工具
及其它方面的内容

22
00:01:17,211 --> 00:01:19,813
要了解这在网页上的
实际使用感受

23
00:01:19,847 --> 00:01:23,383
我们用 VoiceOver 来处理
一个样本测试评估网站

24
00:01:23,417 --> 00:01:27,354
在我的 iPad 上 通过连按三次
顶部按钮来激活 VoiceOver

25
00:01:28,222 --> 00:01:31,358
Siri: VoiceOver 开启
Safari 浏览器显示侧边栏 按钮

26
00:01:32,426 --> 00:01:36,797
Tyler: 现在 激活 VoiceOver 后
我可以轻触页面顶部来查看

27
00:01:36,830 --> 00:01:38,966
Siri: Pop Quiz 一级标题

28
00:01:38,999 --> 00:01:41,935
Tyler: 向右滑动以在页面的
不同元素间跳转

29
00:01:41,969 --> 00:01:46,940
Siri: 第 1 题 / 共 6 题
1/4 片披萨中 有多少片是总共有 8 片的

30
00:01:46,974 --> 00:01:50,444
2 片 单选按钮 未勾选
第 1 个选项 共 4 个选项

31
00:01:50,477 --> 00:01:51,478
3 片

32
00:01:51,512 --> 00:01:52,412
4 片

33
00:01:52,446 --> 00:01:53,514
6 片

34
00:01:53,547 --> 00:01:54,948
下一题 按钮

35
00:01:55,816 --> 00:01:58,552
Tyler: 作为一个网页开发者
有许多可供选择的工具

36
00:01:58,585 --> 00:02:02,656
让您的页面可被用户访问
如 VoiceOver

37
00:02:02,689 --> 00:02:05,559
例如 Safari 浏览器对语义 HTML 元素
如按钮 标题 h1 到 h6

38
00:02:05,592 --> 00:02:09,930
表格元素 列表元素等

39
00:02:09,963 --> 00:02:13,867
都有内置的易访问性支持

40
00:02:13,901 --> 00:02:16,803
使用这些语义 HTML 元素
应作为您的默认设置

41
00:02:16,837 --> 00:02:20,174
因为它能确保您的用户
在所有浏览器上

42
00:02:20,207 --> 00:02:22,776
都有一致的 可访问的体验

43
00:02:22,809 --> 00:02:27,047
然而 有时语义 HTML 并不一定
能完全满足您的需求

44
00:02:27,080 --> 00:02:30,417
需要用 JavaScript 来
创建自定义组件

45
00:02:30,450 --> 00:02:32,419
如果是这种情况 您可能还需要

46
00:02:32,452 --> 00:02:34,688
使用 ARIA 属性
来补充您的组件

47
00:02:34,721 --> 00:02:38,425
这样它们的语义才能恰当
传达到辅助技术中

48
00:02:38,458 --> 00:02:42,596
这就引出了我们今天的
第二个话题 自定义控件

49
00:02:42,629 --> 00:02:45,933
假如我们想要让这个披萨测试题
更引人入胜

50
00:02:45,966 --> 00:02:49,469
其中一个方法是用自定义控件
来替换单选按钮

51
00:02:49,503 --> 00:02:53,473
从而让用户通过轻触
来添加和移动披萨切片

52
00:02:54,274 --> 00:02:57,477
这种自定义控件的标记符号
以 div 和 ID 开始

53
00:02:58,912 --> 00:03:02,716
为了让用户通过轻触或点击组件
就能进行交互

54
00:03:02,749 --> 00:03:05,052
我们需要添加一个
点击事件监听器

55
00:03:05,085 --> 00:03:07,921
我们用构造器来创建一个
新的 PizzaControl 类

56
00:03:07,955 --> 00:03:09,556
可以接受元素的 ID

57
00:03:10,691 --> 00:03:13,694
我们通过 ID 获取该元素
然后为其添加点击事件监听器

58
00:03:15,195 --> 00:03:18,632
该监听器根据轻触的位置
计算新的切片数量

59
00:03:18,665 --> 00:03:22,402
然后将数量传递给调用更新的函数
从而重新渲染控件

60
00:03:22,436 --> 00:03:25,005
这对一些用户来说很有用
但并不是全部

61
00:03:26,139 --> 00:03:28,775
比如 对于有视力障碍的用户来说

62
00:03:28,809 --> 00:03:31,345
他们不知道要点击或轻触哪里
那怎么办呢

63
00:03:31,378 --> 00:03:34,314
构建自定义组件时 我们一定要
考虑到所有类型的

64
00:03:34,348 --> 00:03:37,918
辅助技术用户
都会与我们的组件互动

65
00:03:37,951 --> 00:03:40,621
从这一点出发 创建可访问组件的
第一步就是

66
00:03:40,654 --> 00:03:44,391
为其提供一个角色属性
值为“slider”

67
00:03:44,424 --> 00:03:47,861
我们的控件能完美地
映射到 slider 模型

68
00:03:47,895 --> 00:03:52,566
有一个最小值 0 片
和最大值 8 片

69
00:03:52,599 --> 00:03:54,868
当前值是 4 片

70
00:03:55,602 --> 00:03:59,373
我们还需要添加 tabindex 为 0
确保使用键盘

71
00:03:59,406 --> 00:04:02,142
和其它非触屏界面的用户
也能在组件上设定焦点

72
00:04:03,443 --> 00:04:05,512
我们也需要添加几个
ARIA 属性

73
00:04:06,547 --> 00:04:10,217
Aria-valuemin 和 aria-valuemax
可提示辅助技术

74
00:04:10,250 --> 00:04:12,853
该 slider 的最小值
和最大值

75
00:04:14,054 --> 00:04:16,490
这些属性与您在
本机范围类型输入中使用的

76
00:04:16,523 --> 00:04:19,026
最小属性和最大属性类似

77
00:04:20,527 --> 00:04:24,498
接下来 我们添加 aria-valuenow
以传递控件的当前值

78
00:04:25,899 --> 00:04:29,269
我们还要使用 aria-valuetext
提供对当前值

79
00:04:29,303 --> 00:04:31,505
更有用的描述 即 4 片

80
00:04:33,040 --> 00:04:35,876
现在我们已经将控件设定为
可定焦 slider

81
00:04:35,909 --> 00:04:37,911
我们需要在辅助技术中

82
00:04:37,945 --> 00:04:40,013
处理控件值的更新

83
00:04:40,047 --> 00:04:43,150
在 iOS 中 VoiceOver 通过
单指上滑来增加 slider

84
00:04:43,183 --> 00:04:45,986
单指下滑减少 slider

85
00:04:46,019 --> 00:04:49,122
从而帮助调整 sliders

86
00:04:49,156 --> 00:04:52,326
Safari 浏览器提供了
处理这些手势的简易方法

87
00:04:52,359 --> 00:04:55,429
当 VoiceOver 用户上滑
定焦一个 slider 时

88
00:04:55,462 --> 00:04:59,166
Safari 浏览器自动模拟
右箭头键事件

89
00:04:59,199 --> 00:05:01,668
同样的
如果 VoiceOver 用户下滑

90
00:05:01,702 --> 00:05:05,806
定焦一个 slider 时
则模拟左箭头键事件

91
00:05:05,839 --> 00:05:09,109
这些模拟事件的行为
与真实键盘按键一样

92
00:05:09,142 --> 00:05:11,912
意味着它们可以通过
键盘事件监听器来处理

93
00:05:11,945 --> 00:05:13,814
有了工具带的这一新知识

94
00:05:13,847 --> 00:05:16,950
我们可以为披萨控件
添加一个键盘按下监听器

95
00:05:16,984 --> 00:05:19,753
如果激活的按键是右箭头
或上箭头

96
00:05:19,786 --> 00:05:23,390
我们将会更新控件为
当前切片数量加 1

97
00:05:23,423 --> 00:05:26,960
同样的 如果激活按键是
左箭头或下箭头

98
00:05:26,994 --> 00:05:30,531
我们将会更新控件为
当前切片数量减 1

99
00:05:30,564 --> 00:05:34,401
增加这个关键事件监听器
不仅对 VoiceOver 用户有利

100
00:05:34,434 --> 00:05:36,603
也对全键盘访问用户有利

101
00:05:36,637 --> 00:05:38,872
他们可能会严重或完全依赖于
您的网页 App

102
00:05:38,906 --> 00:05:40,541
变得键盘可访问

103
00:05:40,574 --> 00:05:42,709
建立了两种事件监听器后

104
00:05:42,743 --> 00:05:46,280
我们现在也要定义更新的函数了

105
00:05:46,313 --> 00:05:49,349
首先 我们要限定所给的数值
使其保持在

106
00:05:49,383 --> 00:05:51,185
0 至 8 的限值内

107
00:05:51,218 --> 00:05:55,122
将我们存储的切片数量状态
更新为该值

108
00:05:55,155 --> 00:05:58,959
接下来 我们要确保更新了
控件的视觉和

109
00:05:58,992 --> 00:06:00,694
ARIA 呈现

110
00:06:00,727 --> 00:06:03,830
当构建自定义组件时
一条黄金规则是 如果您更新

111
00:06:03,864 --> 00:06:06,200
组件的视觉呈现

112
00:06:06,233 --> 00:06:08,135
也要考虑如何更新

113
00:06:08,168 --> 00:06:09,503
ARIA 呈现

114
00:06:10,804 --> 00:06:13,540
在这种情况下 我们需要
同时更新 aria-valuenow

115
00:06:13,574 --> 00:06:15,209
和 aria-valuetext 属性

116
00:06:15,242 --> 00:06:18,512
从而告知辅助技术用户
新的控件状态

117
00:06:19,980 --> 00:06:23,317
首先要设置 aria-valuenow
为当前切片数量

118
00:06:24,351 --> 00:06:27,921
接下来 设置 set aria-valuetext
为更用户友好的

119
00:06:27,955 --> 00:06:31,225
切片数量描述方式
加上“slice”或“slices”

120
00:06:32,192 --> 00:06:34,161
好了 现在一切准备就绪

121
00:06:34,194 --> 00:06:36,029
我们回到测试评估网页 App

122
00:06:36,063 --> 00:06:38,031
来看下 VoiceOver 下的
用户体验

123
00:06:38,065 --> 00:06:40,701
我首先轻触披萨控件以定焦

124
00:06:41,468 --> 00:06:43,704
Siri: 4 片 可调整

125
00:06:43,737 --> 00:06:45,772
单指上滑或下滑以调整数值

126
00:06:46,607 --> 00:06:49,276
Tyler: 我们听到了 VoiceOver
说出了 slider 的初始值

127
00:06:49,309 --> 00:06:52,045
4 片 且这是可调整的

128
00:06:52,079 --> 00:06:54,748
跟着 VoiceOver 的提示
我们可以上滑来增加

129
00:06:54,781 --> 00:06:56,450
选定切片的数量

130
00:06:56,483 --> 00:06:59,152
Siri: 5 片 6 片

131
00:06:59,186 --> 00:07:02,222
Tyler: 下滑来减少选定切片的数量

132
00:07:02,256 --> 00:07:04,725
Siri: 5 片 4 片

133
00:07:04,758 --> 00:07:07,361
Tyler: 这些变化就绪后
我们的自定义 slider 组件

134
00:07:07,394 --> 00:07:08,962
辅助功能提升了

135
00:07:09,930 --> 00:07:13,901
现在 我们来看下您可以如何使用
Web Speech API 中的 SSML

136
00:07:13,934 --> 00:07:16,970
来为您的所有用户
构建更丰富的体验

137
00:07:17,604 --> 00:07:21,642
Web Speech API 是由
两个主要 JavaScript 界面组成的

138
00:07:21,675 --> 00:07:23,911
音频输入的 SpeechRecognition

139
00:07:23,944 --> 00:07:26,980
以及文本-音频输出的 SpeechSynthesis

140
00:07:28,148 --> 00:07:30,117
Web Speech 让您的网页 App
可提供语音辅助

141
00:07:30,150 --> 00:07:33,120
或纯语音交互界面

142
00:07:34,288 --> 00:07:37,391
这对有运动残疾的用户来说
是很有利的

143
00:07:37,424 --> 00:07:39,593
因为他们可能无法使用
其它方式的控件

144
00:07:39,626 --> 00:07:41,962
如鼠标 键盘或触屏

145
00:07:42,696 --> 00:07:46,200
Safari 浏览器中 SpeechSynthesis 的
新功能就是可使用 SSML

146
00:07:46,233 --> 00:07:48,135
从而改变您文本的朗读方式

147
00:07:49,069 --> 00:07:51,905
SSML 有众多功能

148
00:07:51,939 --> 00:07:54,074
例如 您可以使用
break 元素

149
00:07:54,107 --> 00:07:56,543
来在讲话中插入
您选择的暂停时长

150
00:07:57,177 --> 00:08:01,215
您会让您的用户吸气 和呼气

151
00:08:02,216 --> 00:08:04,318
使用 phoneme 元素 您可以控制

152
00:08:04,351 --> 00:08:07,087
单词的发音 如“tomayto”
和“tomahto”之间的区别

153
00:08:08,755 --> 00:08:11,391
prosody 元素让您可以
操控朗读文本的音高

154
00:08:11,425 --> 00:08:14,595
语速和音量

155
00:08:14,628 --> 00:08:18,065
这些只是 SSML 众多功能中的
沧海一粟

156
00:08:18,098 --> 00:08:21,835
您可以查看 w3.org 中的
SSML 规范以了解更多信息

157
00:08:22,703 --> 00:08:26,406
我们来实际应用新发现的
SSML 知识

158
00:08:26,440 --> 00:08:29,009
测试的最后一道问题
我们让学生

159
00:08:29,042 --> 00:08:31,645
通过单选按钮来选择
“the water”

160
00:08:31,678 --> 00:08:34,381
西班牙语的正确翻译

161
00:08:34,414 --> 00:08:36,783
我们也可以将这个问题调整得
更具吸引力 可以让用户

162
00:08:36,817 --> 00:08:40,687
点选按钮 通过文本-语音的方式
来朗读和回答问题

163
00:08:40,721 --> 00:08:43,056
通过 SSML
用西班牙地区特性的语音

164
00:08:43,090 --> 00:08:44,658
来朗读西班牙词组

165
00:08:45,526 --> 00:08:48,862
我们首先创建按钮
确保说话人的表情符号

166
00:08:48,896 --> 00:08:51,265
限制在一定范围内
将 aria-hidden 设置为 true

167
00:08:51,298 --> 00:08:54,434
因为表情符号的描述
在这里并不一定有用

168
00:08:56,036 --> 00:08:58,438
接下来 我们创建一个
helper JavaScript 函数

169
00:08:58,472 --> 00:08:59,973
称为 wrapWithSSML

170
00:09:00,007 --> 00:09:03,043
它会选择一个词组
用具有地区特性的语音来朗读

171
00:09:04,144 --> 00:09:06,680
我们先是用 break 元素
构建 SSML 字符串

172
00:09:06,713 --> 00:09:09,816
从而在每个词组前插入
短暂的停顿以强调

173
00:09:10,884 --> 00:09:13,620
通过 prosody 元素
我们可以指定词组

174
00:09:13,654 --> 00:09:15,756
以默认语速 80% 的
速度来朗读

175
00:09:17,157 --> 00:09:19,459
最后 我们使用 lang 元素
来选择

176
00:09:19,493 --> 00:09:22,596
希望词组使用的
特定地区特性声音

177
00:09:24,198 --> 00:09:26,967
现在我们为朗读问题按钮
添加单击事件监听器

178
00:09:27,000 --> 00:09:29,837
以及构建内部 SSML 字符串

179
00:09:29,870 --> 00:09:32,406
首先将整个字符串
都放置于 speak 元素内

180
00:09:33,607 --> 00:09:36,476
Speak 很重要 因为它可以
提示合成处理器

181
00:09:36,510 --> 00:09:39,046
在这个范围内的所有内容
都应通过 SSML 来处理

182
00:09:40,447 --> 00:09:44,718
加下来 我们加入问题
“the water 西班牙语怎么说”

183
00:09:45,686 --> 00:09:47,855
我们可以用
wrapWithSSML helper 函数

184
00:09:47,888 --> 00:09:50,090
为需要翻译的词组添加强调

185
00:09:50,123 --> 00:09:52,593
确保其用英语地区语音来朗读

186
00:09:53,594 --> 00:09:57,331
四个可能的答案同样
使用了 wrapWithSSML

187
00:09:57,364 --> 00:10:01,101
提供强调 并提出使用
西班牙地区语音来朗读的请求

188
00:10:02,402 --> 00:10:05,739
最后 我们可以用 SSML 字符串
来创建新的

189
00:10:05,772 --> 00:10:08,575
SpeechSynthesisUtterance 对象
并将其传送到

190
00:10:08,609 --> 00:10:11,144
SpeechSynthesis 方法视窗
以朗读

191
00:10:13,480 --> 00:10:15,582
这些都准备就绪后
我们看下在网页 App 中

192
00:10:15,616 --> 00:10:17,184
是怎样的体验

193
00:10:17,217 --> 00:10:20,087
在最后一道问题的页面中
我轻触“Read question”按钮

194
00:10:20,120 --> 00:10:21,855
并听取语音

195
00:10:21,889 --> 00:10:26,260
Siri: “the water”西班牙语怎么说

196
00:10:26,293 --> 00:10:28,295
El agua

197
00:10:28,328 --> 00:10:30,564
La abuela

198
00:10:30,597 --> 00:10:32,900
La abeja

199
00:10:32,933 --> 00:10:34,902
El árbol

200
00:10:34,935 --> 00:10:37,771
Tyler: 多亏了 SSML
我们为学生创建了

201
00:10:37,804 --> 00:10:38,839
更引人入胜的体验

202
00:10:39,973 --> 00:10:42,709
网页另一个常用的设计模式
是 modal

203
00:10:43,710 --> 00:10:47,147
您的网页 Apps 中可能会
将其用于注册或登陆表单

204
00:10:47,181 --> 00:10:49,516
来确认 dialogs 等等

205
00:10:50,684 --> 00:10:52,953
提供可访问 modal 体验的
一个方法

206
00:10:52,986 --> 00:10:55,489
就是 aria-modal 属性

207
00:10:55,522 --> 00:10:58,025
使用 aria-modal="true"
Safari 浏览器会考虑 modal 以外

208
00:10:58,058 --> 00:11:02,329
所有被忽略的可访问元素

209
00:11:02,362 --> 00:11:05,866
最近 Safari 浏览器还新增了
支持 dialog 元素的功能

210
00:11:06,567 --> 00:11:09,503
Dialog 通过标准定焦交互

211
00:11:09,536 --> 00:11:12,239
对 modal 关闭手势的创新处理

212
00:11:12,272 --> 00:11:14,741
如 iOS 上的 Escape 键
和擦除手势等

213
00:11:14,775 --> 00:11:18,145
让提供可访问友好的
modal 体验更为简单

214
00:11:18,879 --> 00:11:21,748
要看它们的实际运行情况
我们将测试评估网页 App 上的

215
00:11:21,782 --> 00:11:24,952
“Show score”按钮改为
打开带有结果的对话

216
00:11:26,920 --> 00:11:30,324
首先 我们需要创建
dialog 元素

217
00:11:30,357 --> 00:11:33,393
标记符号可以是这样的

218
00:11:33,427 --> 00:11:37,898
我们为 dialog 赋予一个 ID
之后可以被 show score 按钮引用

219
00:11:37,931 --> 00:11:40,834
我们还将 dialog 的内容
置入有 method dialog 的表单中

220
00:11:41,935 --> 00:11:44,938
这样操作后 任何提交类型的控件
如我们的按钮

221
00:11:44,972 --> 00:11:47,641
都会导致对话关闭

222
00:11:47,674 --> 00:11:50,878
要打开 modal
我们还需要一点 JavaScript

223
00:11:50,911 --> 00:11:53,080
我们在 Show Score 按钮上
添加点击事件监听器

224
00:11:53,113 --> 00:11:55,215
在我们的 dialog 元素上
调用 showModal()

225
00:11:57,484 --> 00:11:59,953
现在我们已万事俱备

226
00:11:59,987 --> 00:12:03,123
VoiceOver 激活后 我轻触
“Show score”按钮以定焦

227
00:12:04,124 --> 00:12:05,459
Siri: Show score 按钮

228
00:12:06,460 --> 00:12:08,462
Tyler: 然后 我在屏幕任意位置

229
00:12:08,495 --> 00:12:10,531
单指双击以点选按钮

230
00:12:11,465 --> 00:12:14,301
Siri: Show score 网页对话
Close 按钮

231
00:12:14,334 --> 00:12:16,270
Tyler: 现在我们的
modal 就完成了

232
00:12:16,303 --> 00:12:19,573
我可以左滑以在 modal 的内容上
移动 从而听取分数

233
00:12:19,606 --> 00:12:22,009
Siri: 您答对了 6 个问题
太棒了

234
00:12:22,442 --> 00:12:24,878
Tyler: 完成后 我可以通过右滑

235
00:12:24,912 --> 00:12:26,280
回到 close 按钮

236
00:12:26,313 --> 00:12:28,649
Siri: Close 按钮

237
00:12:28,682 --> 00:12:31,084
Tyler: 双击以关闭 modal

238
00:12:31,118 --> 00:12:32,886
Siri: 未勾选

239
00:12:32,920 --> 00:12:34,321
Tyler: 如我之前提到

240
00:12:34,354 --> 00:12:36,523
dialog 元素可处理
iOS 擦除手势

241
00:12:36,557 --> 00:12:38,759
从而立即关闭 modal

242
00:12:38,792 --> 00:12:42,129
我给大家演示下 首先重新
双击打开 modal

243
00:12:42,162 --> 00:12:44,398
Siri: Show score 按钮

244
00:12:44,431 --> 00:12:46,767
网页对话 Close 按钮

245
00:12:46,800 --> 00:12:48,335
Tyler: 然后使用擦除手势

246
00:12:48,368 --> 00:12:52,239
双指快速在屏幕上向右
向左 再向右移动

247
00:12:53,540 --> 00:12:55,075
Siri: Show score 按钮

248
00:12:55,108 --> 00:12:57,044
Tyler: 好了 这样我们就有了一个
功能 modal

249
00:12:57,077 --> 00:12:59,079
但我们还能做到更好

250
00:12:59,112 --> 00:13:00,781
您有没有注意到
当我们打开 modal 时

251
00:13:00,814 --> 00:13:04,418
VoiceOver 只会朗读
“网页对话 close 按钮”

252
00:13:04,451 --> 00:13:06,720
在这种情况下 使用 aria-label
或 aria-labelledby 属性

253
00:13:06,753 --> 00:13:09,556
为辅助技术用户提供更多信息

254
00:13:09,590 --> 00:13:12,860
将会更有意义

255
00:13:12,893 --> 00:13:15,829
由于我们的 modal 内容很短
只要告知用户

256
00:13:15,863 --> 00:13:19,433
他们答对了多少个问题即可
我们用标签来完成

257
00:13:19,466 --> 00:13:24,004
首先 将 modal 内容
用 ID 将其限制在一个范围

258
00:13:24,037 --> 00:13:26,039
然后 我们可以添加
aria-labelledby 属性

259
00:13:26,073 --> 00:13:28,509
到 dialog pointing
到 modal 内容 ID

260
00:13:29,543 --> 00:13:32,412
我们还要明确地把初始
modal 定焦元素

261
00:13:32,446 --> 00:13:34,848
设置为带有自动定焦属性的
close 按钮

262
00:13:36,016 --> 00:13:38,852
虽然这已经是这一简单 modal 的
默认行为

263
00:13:38,886 --> 00:13:41,421
如果我们的 modal 有很多内容
或更复杂

264
00:13:41,455 --> 00:13:43,423
有很多控件 那情况就不一样了

265
00:13:44,591 --> 00:13:47,227
例如 在有很多内容的 modal 中

266
00:13:47,261 --> 00:13:51,164
最好是在最上方的标题栏
加入自动定焦

267
00:13:51,198 --> 00:13:53,467
作为 modal 作者
您最为清楚什么内容

268
00:13:53,500 --> 00:13:55,102
会给您的用户带来完美体验

269
00:13:56,303 --> 00:13:58,205
有了我们的新属性
我们再来看看

270
00:13:58,238 --> 00:14:00,574
在 VoiceOver 中的体验如何

271
00:14:00,607 --> 00:14:03,177
我首先单击
Show score 按钮以定焦

272
00:14:04,077 --> 00:14:05,112
Siri: Show score 按钮

273
00:14:06,613 --> 00:14:09,149
Tyler: 然后双击来点选

274
00:14:09,183 --> 00:14:13,387
Siri: 您 6 个问题全部答对了
太棒了 网页对话 close 按钮

275
00:14:13,954 --> 00:14:15,822
Tyler: 这个体验更完美

276
00:14:15,856 --> 00:14:19,526
多亏了 aria-labelledby
VoiceOver 用户马上就能听到他们的分数

277
00:14:19,560 --> 00:14:21,828
且已经定焦至 close 按钮

278
00:14:21,862 --> 00:14:23,897
他们可以直接双击
以离开 modal

279
00:14:23,931 --> 00:14:26,834
现在我们来总结下今天的讲座

280
00:14:26,867 --> 00:14:29,903
我希望大家都学到了如何构建
丰富 可访问的网页 App 技术

281
00:14:29,937 --> 00:14:32,472
从而为您所有用户带来
完美的体验

282
00:14:33,373 --> 00:14:35,509
请在最新的 Safari 浏览器中
尝试这些功能

283
00:14:35,542 --> 00:14:37,878
如果有任何 bug
请登录 bugs.webkit.org

284
00:14:37,911 --> 00:14:39,913
上传至 WebKit bug tracker

285
00:14:40,681 --> 00:14:44,251
感谢大家参与今天这场
简要的现代网页辅助功能旅程

286
00:14:44,284 --> 00:14:46,787
祝您的 WWDC 之旅一切顺利

287
00:14:46,820 --> 00:14:48,889
[古怪的音乐]

