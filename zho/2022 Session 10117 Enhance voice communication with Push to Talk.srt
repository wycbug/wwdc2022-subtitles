1
00:00:00,000 --> 00:00:03,403
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,403 --> 00:00:09,476
♪

3
00:00:09,476 --> 00:00:11,111
Kevin Ferrell：
嗨 我是 Kevin

4
00:00:11,111 --> 00:00:14,348
是研究 PushToTalk
新框架的工程师

5
00:00:14,348 --> 00:00:16,950
该框架能使 iOS 上的 App

6
00:00:16,950 --> 00:00:19,052
体验对讲机式的系统

7
00:00:19,052 --> 00:00:21,188
稍后我的同事
Trevor 会加入进来

8
00:00:21,188 --> 00:00:24,057
介绍如何在您的 App 中
使用这个新框架

9
00:00:24,057 --> 00:00:27,261
增强语音交流的方法

10
00:00:27,261 --> 00:00:29,496
首先我来介绍一下
PushToTalk 框架

11
00:00:29,496 --> 00:00:32,432
并解释它如何适配您的 App

12
00:00:32,432 --> 00:00:34,935
其次 我们会介绍
如何为 PushToTalk

13
00:00:34,935 --> 00:00:37,237
配置您的 App

14
00:00:37,237 --> 00:00:38,972
随后 Trevor 将详细介绍

15
00:00:38,972 --> 00:00:43,010
使用此框架传输和接收音频的方法

16
00:00:43,010 --> 00:00:46,013
最后 Trevor 将总结增强

17
00:00:46,013 --> 00:00:48,582
一键通用户体验的最佳实践

18
00:00:48,582 --> 00:00:52,486
同时如何为您的用户节省电量

19
00:00:52,486 --> 00:00:54,588
我先从
PushToTalk 新框架的

20
00:00:54,588 --> 00:00:57,457
关键功能讲起

21
00:00:57,457 --> 00:00:59,693
PushToTalk 框架能使您

22
00:00:59,693 --> 00:01:03,197
在 iOS 上构建一类
新的音频通信 App

23
00:01:03,197 --> 00:01:07,768
为您的用户提供对讲机式的体验

24
00:01:07,768 --> 00:01:09,603
一键通 App

25
00:01:09,603 --> 00:01:12,739
在需要快速沟通的领域有很多用途

26
00:01:12,739 --> 00:01:15,976
如医疗保健和紧急服务

27
00:01:15,976 --> 00:01:18,412
为了实现良好的一键通体验

28
00:01:18,412 --> 00:01:20,347
用户需要某种方法来快速访问

29
00:01:20,347 --> 00:01:23,784
音频传输功能 同时还能看到

30
00:01:23,784 --> 00:01:26,186
谁在回应他们

31
00:01:26,186 --> 00:01:28,222
与此同时 一键通 App

32
00:01:28,222 --> 00:01:30,824
必须节能 确保用户

33
00:01:30,824 --> 00:01:35,195
在使用 App 时
能保持一整天的电量

34
00:01:35,195 --> 00:01:38,098
PushToTalk 框架
为您提供 API

35
00:01:38,098 --> 00:01:39,833
以利用系统 UI

36
00:01:39,833 --> 00:01:42,436
用户无需直接启动您的 App

37
00:01:42,436 --> 00:01:45,572
就可访问系统的任何位置

38
00:01:45,572 --> 00:01:48,509
系统 UI 允许用户快速激活

39
00:01:48,509 --> 00:01:51,111
音频传输
这将在后台启动您的 App

40
00:01:51,111 --> 00:01:55,616
录制并将音频传输到您的服务器

41
00:01:55,616 --> 00:01:58,252
当您的 App 从服务器
播放音频时

42
00:01:58,252 --> 00:01:59,586
该系统会显示说话人

43
00:01:59,586 --> 00:02:02,523
从而为用户增加透明度

44
00:02:02,523 --> 00:02:04,625
PushToTalk 框架
实现这一点的方法

45
00:02:04,625 --> 00:02:07,628
是通过引入新的推送通知类型

46
00:02:07,628 --> 00:02:11,965
当有新的音频
可供播放时就会通知您的 App

47
00:02:11,965 --> 00:02:14,368
您的 App 收到此通知后

48
00:02:14,368 --> 00:02:15,903
它就会在后台启动

49
00:02:15,903 --> 00:02:19,273
以便传输和播放音频

50
00:02:19,273 --> 00:02:22,075
PushToTalk 框架可与

51
00:02:22,075 --> 00:02:25,012
现有的端到端通信方法

52
00:02:25,012 --> 00:02:27,147
以及后端基础设施兼容

53
00:02:27,147 --> 00:02:28,649
如果您已在

54
00:02:28,649 --> 00:02:30,851
您的 App 中实施了
一键通工作流程

55
00:02:30,851 --> 00:02:32,386
那么应该很容易

56
00:02:32,386 --> 00:02:36,590
将 PushToTalk 框架
集成到您现有的代码中

57
00:02:36,590 --> 00:02:38,525
该框架允许您的 App 使用

58
00:02:38,525 --> 00:02:41,261
自己的音频编码和传输程序

59
00:02:41,261 --> 00:02:43,897
从而在用户之间传输音频

60
00:02:43,897 --> 00:02:46,400
这为您的 App
处理音频传输方式

61
00:02:46,400 --> 00:02:49,536
提供了灵活性

62
00:02:49,536 --> 00:02:51,905
并能与其他平台兼容

63
00:02:51,905 --> 00:02:53,907
最后 许多一键通 App

64
00:02:53,907 --> 00:02:56,043
依赖无线蓝牙配件

65
00:02:56,043 --> 00:02:59,146
触发录音和传输功能

66
00:02:59,146 --> 00:03:02,015
您的 App 可使用
CoreBluetooth 框架

67
00:03:02,015 --> 00:03:04,151
持续与上述配件集成使用

68
00:03:04,151 --> 00:03:07,654
并且可以在
PushToTalk 中触发录音

69
00:03:07,654 --> 00:03:10,123
如果您正在构建
您的第一个一键通 App

70
00:03:10,123 --> 00:03:12,426
在开始构建代码时请牢记

71
00:03:12,426 --> 00:03:15,262
以上集成注意事项

72
00:03:15,262 --> 00:03:17,164
在开始详细介绍

73
00:03:17,164 --> 00:03:18,999
PushToTalk
新框架的代码之前

74
00:03:18,999 --> 00:03:21,435
我们想先展示一键通

75
00:03:21,435 --> 00:03:24,771
在您 App 中的运行方式

76
00:03:24,771 --> 00:03:26,240
我和 Trevor
构建了一个演示 App

77
00:03:26,240 --> 00:03:28,509
来展示
PushToTalk 的工作原理

78
00:03:28,509 --> 00:03:30,344
首先 我将点击加入按钮

79
00:03:30,344 --> 00:03:32,179
连接到一键通会话

80
00:03:32,179 --> 00:03:36,316
我们称之为频道

81
00:03:36,316 --> 00:03:37,618
加入频道后

82
00:03:37,618 --> 00:03:41,588
我可以接收或将音频
发送给频道上的其他成员

83
00:03:41,588 --> 00:03:42,990
Trevor 和我们的同事

84
00:03:42,990 --> 00:03:44,658
加入了同一频道

85
00:03:44,658 --> 00:03:47,628
这样我们就可全天候交流

86
00:03:47,628 --> 00:03:49,963
使用麦克风按钮 我可以直接

87
00:03:49,963 --> 00:03:52,566
从 App 传输音频
而 PushToTalk 框架

88
00:03:52,566 --> 00:03:54,868
可允许我从系统中的任何位置

89
00:03:54,868 --> 00:03:59,072
访问传输功能

90
00:03:59,072 --> 00:04:00,974
当有激活的一键通频道时

91
00:04:00,974 --> 00:04:03,644
一个蓝色药丸状图标
就会出现在状态栏中

92
00:04:03,644 --> 00:04:08,949
点击该图标可显示系统 UI

93
00:04:08,949 --> 00:04:11,919
系统 UI 会显示
我所加入的一键通频道的名称

94
00:04:11,919 --> 00:04:14,721
以及 App 提供的用于

95
00:04:14,721 --> 00:04:18,892
帮助用户快速识别频道的图像

96
00:04:18,892 --> 00:04:20,561
我可以按住通话按钮

97
00:04:20,561 --> 00:04:22,729
向频道传输音频

98
00:04:22,729 --> 00:04:24,998
然后等待系统提示音

99
00:04:24,998 --> 00:04:27,267
我就可以开始说话了

100
00:04:29,069 --> 00:04:32,072
[铃声] 嘿 Trevor

101
00:04:32,072 --> 00:04:37,444
您准备好展示您的
WWDC 幻灯片了吗？完毕

102
00:04:37,444 --> 00:04:39,746
Trevor Sheridan：
当我的设备收到 Kevin 的信息时

103
00:04:39,746 --> 00:04:42,716
就显示出一个包含
他的名字和图像的通知

104
00:04:42,716 --> 00:04:48,789
公开透明地显示谁向我发送了消息

105
00:04:48,789 --> 00:04:50,724
一旦我启动系统 UI

106
00:04:50,724 --> 00:04:52,860
我就可以快速回复
Kevin 的消息

107
00:04:52,860 --> 00:04:56,196
或者继续做我手头的事 先不回复

108
00:04:56,196 --> 00:05:01,001
我不想让 Kevin 久等
所以我现在就回复

109
00:05:01,001 --> 00:05:04,104
[铃声]嘿 Kevin
再有几分钟就准备好了

110
00:05:04,104 --> 00:05:07,241
完毕

111
00:05:07,241 --> 00:05:09,810
Kevin：PushToTalk
系统 UI 也可

112
00:05:09,810 --> 00:05:13,213
从锁屏界面访问 用户无需解锁设备

113
00:05:13,213 --> 00:05:16,316
即可接收回复消息

114
00:05:21,288 --> 00:05:27,160
[铃声]好的
一会儿见 完毕 [铃声]

115
00:05:27,160 --> 00:05:29,429
我们已经讨论了
PushToTalk 的工作原理

116
00:05:29,429 --> 00:05:33,100
现在来介绍一下如何
将框架集成到您自己的 App 中

117
00:05:33,100 --> 00:05:35,335
您需要对您的 Xcode 项目

118
00:05:35,335 --> 00:05:39,439
进行一些修改以支持
PushToTalk 框架

119
00:05:39,439 --> 00:05:43,177
首先 您需要添加
新的一键通后台模式

120
00:05:43,177 --> 00:05:45,379
这能让您的 App
在响应一键通事件时

121
00:05:45,379 --> 00:05:48,982
可以在后台运行

122
00:05:48,982 --> 00:05:52,019
接下来 您还需
为您的 App 添加

123
00:05:52,019 --> 00:05:55,689
一键通功能以启用框架功能

124
00:05:55,689 --> 00:05:59,293
需要推送通知功能
才能允许 APNS

125
00:05:59,293 --> 00:06:01,028
在后台唤醒您的 App

126
00:06:01,028 --> 00:06:04,097
播放接收到的音频

127
00:06:04,097 --> 00:06:06,834
最后 您的 App
必须向用户请求

128
00:06:06,834 --> 00:06:10,137
录音许可 并在其
Info.plist 文件中

129
00:06:10,137 --> 00:06:12,973
包含麦克风用途字符串

130
00:06:12,973 --> 00:06:16,076
现在我们准备开始集成代码

131
00:06:16,076 --> 00:06:18,212
一键通工作流程的第一步

132
00:06:18,212 --> 00:06:19,947
是加入一个频道

133
00:06:19,947 --> 00:06:21,882
频道代表并描述了

134
00:06:21,882 --> 00:06:24,785
到系统的一键通会话

135
00:06:24,785 --> 00:06:28,388
您的 App 通过
频道管理器与频道交互

136
00:06:28,388 --> 00:06:31,425
频道管理器是
您的 App 加入频道

137
00:06:31,425 --> 00:06:33,861
执行发送和接收音频等操作的

138
00:06:33,861 --> 00:06:37,231
主要界面

139
00:06:37,231 --> 00:06:39,867
您加入频道后 一键通系统 UI

140
00:06:39,867 --> 00:06:43,904
立即启用 您的 App
也会收到一个 APNS 设备令牌

141
00:06:43,904 --> 00:06:47,207
可在频道的整个生命周期中使用

142
00:06:47,207 --> 00:06:49,943
您必须先加入频道
然后才能开始传输

143
00:06:49,943 --> 00:06:52,579
和接收音频

144
00:06:52,579 --> 00:06:54,882
第一步是使用类初始化器

145
00:06:54,882 --> 00:06:57,451
创建频道管理器

146
00:06:57,451 --> 00:06:59,453
该初始化器要求您提供

147
00:06:59,453 --> 00:07:04,057
频道管理器委托和频道恢复委托

148
00:07:04,057 --> 00:07:05,993
多次调用初始化器

149
00:07:05,993 --> 00:07:08,795
会导致相同的共享实例被返回

150
00:07:08,795 --> 00:07:11,131
但我们建议您在实例变量中

151
00:07:11,131 --> 00:07:13,233
存储频道管理器

152
00:07:13,233 --> 00:07:15,636
App 在您 ApplicationDelegate 的

153
00:07:15,636 --> 00:07:17,871
didFinishLaunchingWithOptions 方法中

154
00:07:17,871 --> 00:07:19,573
启动期间
尽快初始化您的频道管理器

155
00:07:19,573 --> 00:07:22,776
非常重要

156
00:07:22,776 --> 00:07:26,213
这样可以确保快速初始化频道管理器

157
00:07:26,213 --> 00:07:28,415
以便恢复现有频道

158
00:07:28,415 --> 00:07:30,751
推送通知也会在您的 App

159
00:07:30,751 --> 00:07:33,654
后台启动时发送过来

160
00:07:33,654 --> 00:07:35,722
现在我们准备加入一个频道

161
00:07:35,722 --> 00:07:37,558
当有人通过
您的 App 加入频道时

162
00:07:37,558 --> 00:07:40,527
您必须提供一个
识别频道的 UUID

163
00:07:40,527 --> 00:07:44,298
和一个描述系统频道的描述符

164
00:07:44,298 --> 00:07:47,701
在该频道的
整个生命周期中 与管理器交互时

165
00:07:47,701 --> 00:07:50,103
使用的是相同的 UUID

166
00:07:50,103 --> 00:07:53,340
描述符包括名称和图像

167
00:07:53,340 --> 00:07:56,143
提供独特的图像来代表频道

168
00:07:56,143 --> 00:07:58,879
可让您的用户在与系统交互时

169
00:07:58,879 --> 00:08:01,615
更易识别频道

170
00:08:01,615 --> 00:08:04,818
您的 App 通过
在频道管理器上调用

171
00:08:04,818 --> 00:08:06,720
requestJoin 方法加入频道

172
00:08:06,720 --> 00:08:09,022
请注意 只有当您的 App

173
00:08:09,022 --> 00:08:12,125
在前台运行时才可加入频道

174
00:08:12,125 --> 00:08:15,028
当您的 App 加入频道时
频道管理器委托的

175
00:08:15,028 --> 00:08:18,198
didJoinChannel 方法将被调用

176
00:08:18,198 --> 00:08:20,367
这个委托方法是您的指示

177
00:08:20,367 --> 00:08:23,070
表明您的 App 已加入频道

178
00:08:23,070 --> 00:08:24,471
此外 该委托的

179
00:08:24,471 --> 00:08:27,608
receivedEphemeralPushToken
方法也将被调用

180
00:08:27,608 --> 00:08:30,277
同时 APNS 推送令牌可用于

181
00:08:30,277 --> 00:08:34,181
将一键通通知发送到该设备

182
00:08:34,181 --> 00:08:35,849
此令牌只在

183
00:08:35,849 --> 00:08:38,685
一键通频道的生命周期内有效

184
00:08:38,685 --> 00:08:41,889
请注意 APNS 推送令牌
长度可变

185
00:08:41,889 --> 00:08:45,859
但您不应将其长度
硬编码到您的 App 中

186
00:08:45,859 --> 00:08:49,129
频道加入请求可能会失败

187
00:08:49,129 --> 00:08:51,031
例如在另一个频道处于激活状态时

188
00:08:51,031 --> 00:08:53,834
尝试加入频道

189
00:08:53,834 --> 00:08:56,637
若发生此类情况
错误处理程序将被调用

190
00:08:56,637 --> 00:09:00,374
错误会指明失败原因

191
00:09:00,374 --> 00:09:01,942
当用户离开频道时

192
00:09:01,942 --> 00:09:04,945
将调用
委托的 didLeaveChannel 方法

193
00:09:04,945 --> 00:09:07,314
您的用户可通过您的 App

194
00:09:07,314 --> 00:09:10,250
以编程方式请求离开频道

195
00:09:10,250 --> 00:09:12,553
或者用户可以点击系统 UI 中的

196
00:09:12,553 --> 00:09:14,321
“离开频道”按钮离开

197
00:09:14,321 --> 00:09:16,657
通道管理器委托有一个关联的

198
00:09:16,657 --> 00:09:19,626
LeaveChannel
错误处理方法将被调用

199
00:09:19,626 --> 00:09:23,230
来应对请求离开频道失败的情况

200
00:09:23,230 --> 00:09:25,632
每当您的 App 被终止
或在设备重启后

201
00:09:25,632 --> 00:09:28,202
再次启动时
PushToTalk 都支持恢复

202
00:09:28,202 --> 00:09:30,771
之前打开的频道

203
00:09:30,771 --> 00:09:33,006
为让系统实现这一点

204
00:09:33,006 --> 00:09:37,077
您必须提供频道描述符来更新系统

205
00:09:37,077 --> 00:09:39,146
这里我们可以用一个辅助方法来获取

206
00:09:39,146 --> 00:09:43,517
在恢复后的委托中缓存的频道描述符

207
00:09:43,517 --> 00:09:45,853
为保持系统响应

208
00:09:45,853 --> 00:09:48,722
您应尽快从该方法返回

209
00:09:48,722 --> 00:09:51,892
且不应执行
任何长时间运行或阻塞的任务

210
00:09:51,892 --> 00:09:53,360
比如检索您

211
00:09:53,360 --> 00:09:56,230
频道描述符的网络请求

212
00:09:56,230 --> 00:09:59,166
在您的一键通会话的
整个生命周期中

213
00:09:59,166 --> 00:10:01,068
您应在频道信息发生变化时

214
00:10:01,068 --> 00:10:04,905
为描述符提供更新

215
00:10:04,905 --> 00:10:06,974
您还应使用服务状态对象

216
00:10:06,974 --> 00:10:09,576
告知系统您的网络连接或

217
00:10:09,576 --> 00:10:12,312
服务器是否可用

218
00:10:12,312 --> 00:10:15,549
这里 我们正在更新频道的描述符

219
00:10:15,549 --> 00:10:16,717
您可在您需要

220
00:10:16,717 --> 00:10:20,654
更新频道名称或图像时调用此方法

221
00:10:20,654 --> 00:10:22,856
在此示例中 我们向系统提供更新

222
00:10:22,856 --> 00:10:25,259
以表明 App 与其服务器的

223
00:10:25,259 --> 00:10:28,462
连接处于重新连接状态

224
00:10:28,462 --> 00:10:30,731
这也会相应更新系统 UI

225
00:10:30,731 --> 00:10:32,833
阻止用户在服务状态为

226
00:10:32,833 --> 00:10:37,104
正在连接或断开时传输音频

227
00:10:37,104 --> 00:10:38,939
重新建立连接后

228
00:10:38,939 --> 00:10:42,242
您应将服务状态更新为“就绪”

229
00:10:42,242 --> 00:10:44,845
现在我们来看
使用 PushToTalk

230
00:10:44,845 --> 00:10:46,780
发送和接收音频的方法

231
00:10:46,780 --> 00:10:49,583
[铃声] Trevor
您准备好讲解

232
00:10:49,583 --> 00:10:51,451
该 API 的其余内容了吗？

233
00:10:51,451 --> 00:10:52,653
完毕

234
00:10:55,088 --> 00:10:59,326
[铃声] Trevor：准备好了
发送 完毕

235
00:10:59,326 --> 00:11:00,327
[铃声]

236
00:11:01,862 --> 00:11:03,463
我们已经看到了配置

237
00:11:03,463 --> 00:11:05,098
PushToTalk 框架的方法

238
00:11:05,098 --> 00:11:09,670
现在我们来探索
传输和接收音频的方法

239
00:11:09,670 --> 00:11:12,172
PushToTalk 框架的
核心功能

240
00:11:12,172 --> 00:11:16,210
是让您的用户快速传输音频

241
00:11:16,210 --> 00:11:18,045
用户可以从您的 App 中

242
00:11:18,045 --> 00:11:19,580
或从系统一键通 UI 中

243
00:11:19,580 --> 00:11:22,616
开始音频传输

244
00:11:22,616 --> 00:11:25,152
如果您的 App 可通过
CoreBluetooth

245
00:11:25,152 --> 00:11:26,753
支持蓝牙配件

246
00:11:26,753 --> 00:11:29,656
您也可在后台开始传输

247
00:11:29,656 --> 00:11:33,927
响应外围设备的特性变化

248
00:11:33,927 --> 00:11:36,663
传输时
PushToTalk 框架

249
00:11:36,663 --> 00:11:39,032
会解锁设备麦克风

250
00:11:39,032 --> 00:11:41,668
并激活您 App 的音频会话

251
00:11:41,668 --> 00:11:44,771
在后台启用音频录制

252
00:11:44,771 --> 00:11:48,108
我们再来详细研究一下这个过程

253
00:11:48,108 --> 00:11:51,311
要从您的 App 中
开始传输 您可调用

254
00:11:51,311 --> 00:11:54,815
requestBeginTransmitting 函数

255
00:11:54,815 --> 00:11:57,951
每当您的 App 在前台运行
或对蓝牙外围设备特性的变化

256
00:11:57,951 --> 00:11:59,720
做出反应时

257
00:11:59,720 --> 00:12:03,490
都可以调用该函数

258
00:12:03,490 --> 00:12:06,426
若系统无法开始传输

259
00:12:06,426 --> 00:12:07,661
委托的

260
00:12:07,661 --> 00:12:11,198
failedToBeginTransmittingInChannel 方法

261
00:12:11,198 --> 00:12:13,467
将被调用并说明失败原因

262
00:12:13,467 --> 00:12:17,738
例如 若用户正在进行蜂窝呼叫

263
00:12:17,738 --> 00:12:22,409
他们就无法开启一键通传输

264
00:12:22,409 --> 00:12:23,944
要停止传输

265
00:12:23,944 --> 00:12:28,248
可调用频道管理器的
stopTransmitting 方法

266
00:12:28,248 --> 00:12:31,785
为处理尝试停止传输时的失败情况

267
00:12:31,785 --> 00:12:34,888
例如当用户未处于传输状态时

268
00:12:34,888 --> 00:12:37,758
频道管理器委托有一个关联的

269
00:12:37,758 --> 00:12:41,528
failedToStopTransmittingInChannel 方法

270
00:12:41,528 --> 00:12:44,898
无论您是从 App 内开始传输

271
00:12:44,898 --> 00:12:48,068
还是用户从系统 UI 开始传输

272
00:12:48,068 --> 00:12:50,470
您的频道管理器委托都将收到

273
00:12:50,470 --> 00:12:53,674
“已开始传输”回调

274
00:12:53,674 --> 00:12:56,577
传输源将传递给方法

275
00:12:56,577 --> 00:12:58,545
并指明传输

276
00:12:58,545 --> 00:13:00,347
是从系统 UI

277
00:13:00,347 --> 00:13:04,685
编程 API 还是
硬件按钮事件开始

278
00:13:04,685 --> 00:13:06,486
一旦开始传输

279
00:13:06,486 --> 00:13:10,123
系统将为您的 App
激活音频会话

280
00:13:10,123 --> 00:13:13,660
这就是可以开始录制的信号

281
00:13:13,660 --> 00:13:19,433
您不应开始或停止自己的音频会话

282
00:13:19,433 --> 00:13:23,103
传输结束时 您的频道管理器委托

283
00:13:23,103 --> 00:13:25,172
将收到结束传输

284
00:13:25,172 --> 00:13:29,109
和音频会话停用事件

285
00:13:29,109 --> 00:13:32,312
请记住 当您的传输处于激活状态时

286
00:13:32,312 --> 00:13:36,016
您的音频会话可能会被其他来源中断

287
00:13:36,016 --> 00:13:38,852
例如电话和 FaceTime 通话

288
00:13:38,852 --> 00:13:42,456
这需要您在 App 内进行处理

289
00:13:42,456 --> 00:13:45,225
PushToTalk 框架
还允许您的 App

290
00:13:45,225 --> 00:13:48,061
在后台接收和播放来自

291
00:13:48,061 --> 00:13:49,963
其他用户的音频

292
00:13:49,963 --> 00:13:53,767
此过程依赖一种新的
专门针对一键通 App 的

293
00:13:53,767 --> 00:13:56,937
Apple 推送通知类型

294
00:13:56,937 --> 00:13:59,740
当您的一键通服务器有新的音频

295
00:13:59,740 --> 00:14:02,643
供用户接收时
它应使用您在加入频道时

296
00:14:02,643 --> 00:14:06,446
接收到的设备推送令牌

297
00:14:06,446 --> 00:14:09,583
向用户发送一键通通知

298
00:14:09,583 --> 00:14:12,953
当您的 App 收到推送通知时

299
00:14:12,953 --> 00:14:16,423
必须向框架报告有源扬声器

300
00:14:16,423 --> 00:14:18,192
这将导致系统激活

301
00:14:18,192 --> 00:14:23,297
您 App 的音频会话
并允许其开始播放

302
00:14:23,297 --> 00:14:25,032
新的一键通通知

303
00:14:25,032 --> 00:14:28,569
类似于 iOS 上的其他通知类型

304
00:14:28,569 --> 00:14:31,438
而且您必须设置某些具体属性

305
00:14:31,438 --> 00:14:34,942
以启用您的
一键通 App 推送功能

306
00:14:34,942 --> 00:14:39,613
首先 APNS 推送类型
必须在请求头中

307
00:14:39,613 --> 00:14:41,949
设置为“pushtotalk”

308
00:14:41,949 --> 00:14:45,352
其次 APNS 主题头必须设置为

309
00:14:45,352 --> 00:14:47,554
您 App 的捆绑标识符

310
00:14:47,554 --> 00:14:52,292
并在末尾加上
“.voip-ptt”后缀

311
00:14:52,292 --> 00:14:55,128
推送负载可以包含

312
00:14:55,128 --> 00:14:57,297
与您 App 相关的自定义密钥

313
00:14:57,297 --> 00:14:59,399
比如有源扬声器的名称

314
00:14:59,399 --> 00:15:02,336
或会话已结束 App 应退出

315
00:15:02,336 --> 00:15:05,539
一键通频道的标识

316
00:15:05,539 --> 00:15:10,010
“aps”属性的主体可以留空

317
00:15:10,010 --> 00:15:13,013
此外 与其他与通信相关的

318
00:15:13,013 --> 00:15:14,214
推送类型一样

319
00:15:14,214 --> 00:15:18,619
一键通有效负载的
APNS 优先级应为 10

320
00:15:18,619 --> 00:15:20,821
以便要求立即推送

321
00:15:20,821 --> 00:15:25,626
APNS 到期时间应为零 以阻止

322
00:15:25,626 --> 00:15:29,563
与未来推送不再相关的陈旧推送

323
00:15:29,563 --> 00:15:32,699
当您的服务器发送一键通通知时

324
00:15:32,699 --> 00:15:35,135
您的 App 将在后台启动

325
00:15:35,135 --> 00:15:39,173
传入的推送委托方法将被调用

326
00:15:39,173 --> 00:15:41,108
当您收到推送有效负载时

327
00:15:41,108 --> 00:15:43,944
您需构建一个推送结果类型

328
00:15:43,944 --> 00:15:46,480
指示推送通知后

329
00:15:46,480 --> 00:15:50,017
应该执行的操作

330
00:15:50,017 --> 00:15:52,819
为表明远程用户正在讲话

331
00:15:52,819 --> 00:15:54,555
需返回一个推送结果 其中包含

332
00:15:54,555 --> 00:15:57,124
活跃参与者的信息

333
00:15:57,124 --> 00:16:01,128
包括他们的名称和可选图像

334
00:16:01,128 --> 00:16:02,429
这会让系统

335
00:16:02,429 --> 00:16:05,098
设置频道的活跃参与者

336
00:16:05,098 --> 00:16:08,735
表明频道处于接收模式

337
00:16:08,735 --> 00:16:11,572
然后系统将激活您的音频会话

338
00:16:11,572 --> 00:16:13,907
调用 didActivateaudioSession

339
00:16:13,907 --> 00:16:15,342
委托方法

340
00:16:15,342 --> 00:16:17,544
您应在开始播放之前

341
00:16:17,544 --> 00:16:19,847
等待该方法被调用

342
00:16:19,847 --> 00:16:21,849
如果您的服务器决定

343
00:16:21,849 --> 00:16:24,284
不应再让用户加入频道

344
00:16:24,284 --> 00:16:27,054
它可能会在推送
有效负载时表明这一点

345
00:16:27,054 --> 00:16:31,558
您可为其返回
leaveChannel 推送结果

346
00:16:31,558 --> 00:16:33,594
务必注意 您应尽快

347
00:16:33,594 --> 00:16:36,029
从此方法中返回
PTPushResult

348
00:16:36,029 --> 00:16:40,434
而非阻塞线程

349
00:16:40,434 --> 00:16:43,203
如果您尝试设置
正在活跃的远程参与者

350
00:16:43,203 --> 00:16:45,873
但却没有将参与者的图像存储在本地

351
00:16:45,873 --> 00:16:48,609
您可返回一个只有说话者名称的

352
00:16:48,609 --> 00:16:50,911
activeRemoteParticipant

353
00:16:50,911 --> 00:16:53,747
然后在单独的线程上下载其图像

354
00:16:53,747 --> 00:16:55,782
一旦检索到图像

355
00:16:55,782 --> 00:16:57,951
即可在频道管理器上

356
00:16:57,951 --> 00:17:00,787
调用 setActiveRemoteParticipant

357
00:17:00,787 --> 00:17:03,323
以更新 activeRemoteParticipant

358
00:17:03,323 --> 00:17:05,726
当远程参与者说完话后

359
00:17:05,726 --> 00:17:08,695
您应将
activeRemoteParticipant 设置为 nil

360
00:17:08,695 --> 00:17:11,665
这会向系统表明您不再

361
00:17:11,665 --> 00:17:13,767
在频道上接收音频

362
00:17:13,767 --> 00:17:17,771
且系统应该停用您的音频会话

363
00:17:17,771 --> 00:17:20,941
这也会更新系统一键通 UI

364
00:17:20,941 --> 00:17:24,278
允许用户再次发送

365
00:17:24,278 --> 00:17:25,712
现在我们已经介绍了

366
00:17:25,712 --> 00:17:28,782
将 PushToTalk
集成到您 App 中的基本操作

367
00:17:28,782 --> 00:17:30,784
我们再来看优化用户体验

368
00:17:30,784 --> 00:17:32,819
以及保存电量的

369
00:17:32,819 --> 00:17:35,489
最佳操作

370
00:17:37,291 --> 00:17:39,993
PushToTalk 框架
提供了一个系统 UI

371
00:17:39,993 --> 00:17:42,396
供用户开始传输

372
00:17:42,396 --> 00:17:46,066
并从系统内的任何地方离开频道

373
00:17:46,066 --> 00:17:50,003
此外 该框架非常灵活 允许您

374
00:17:50,003 --> 00:17:52,673
在您的 App 前台运行时

375
00:17:52,673 --> 00:17:56,143
使用自定义的一键通 UI

376
00:17:56,143 --> 00:17:57,344
PushToTalk 框架

377
00:17:57,344 --> 00:18:00,147
可利用共享系统资源

378
00:18:00,147 --> 00:18:02,549
系统上一次只能激活一个

379
00:18:02,549 --> 00:18:04,384
一键通 App

380
00:18:04,384 --> 00:18:07,621
且一键通通信可被

381
00:18:07,621 --> 00:18:11,758
蜂窝电话 FaceTime 通话
和 VoIP 通话取代

382
00:18:11,758 --> 00:18:14,461
您的 App 应妥善处理
PushToTalk 失败情况

383
00:18:14,461 --> 00:18:18,832
并相应做出响应

384
00:18:18,832 --> 00:18:21,201
如前所述 PushToTalk 框架

385
00:18:21,201 --> 00:18:23,337
为您激活和停用

386
00:18:23,337 --> 00:18:25,639
音频会话

387
00:18:25,639 --> 00:18:27,708
但是 您仍应配置

388
00:18:27,708 --> 00:18:30,944
音频会话类别
以便在您的 App 启动时

389
00:18:30,944 --> 00:18:33,981
播放和录制音频

390
00:18:33,981 --> 00:18:36,383
系统提供了内置音效

391
00:18:36,383 --> 00:18:39,620
以便在传输时提醒用户

392
00:18:39,620 --> 00:18:42,389
麦克风已激活还是已停用

393
00:18:42,389 --> 00:18:44,191
您不应

394
00:18:44,191 --> 00:18:46,693
自定义音效

395
00:18:46,693 --> 00:18:49,396
监控您的 App 并响应

396
00:18:49,396 --> 00:18:53,133
AVAudioSession 通知也很重要

397
00:18:53,133 --> 00:18:54,902
例如会话中断

398
00:18:54,902 --> 00:18:57,471
路线变化和故障等

399
00:18:57,471 --> 00:18:59,806
同系统上的其他音频 App 一样

400
00:18:59,806 --> 00:19:01,775
您的一键通 App 也可能会受到

401
00:19:01,775 --> 00:19:05,612
这些音频会话事件的影响

402
00:19:05,612 --> 00:19:07,614
优化您的 App

403
00:19:07,614 --> 00:19:09,583
以保存电量非常重要

404
00:19:09,583 --> 00:19:11,785
PushToTalk 框架
在需要时会

405
00:19:11,785 --> 00:19:13,887
为您的 App 提供后台运行时间

406
00:19:13,887 --> 00:19:17,191
比如在传输和接收音频时就会如此

407
00:19:17,191 --> 00:19:19,459
当用户没有使用您的 App 时

408
00:19:19,459 --> 00:19:24,031
它将被系统暂停以保存电量

409
00:19:24,031 --> 00:19:26,633
您不应自己激活或停用

410
00:19:26,633 --> 00:19:28,569
您的音频会话

411
00:19:28,569 --> 00:19:32,039
系统将适时为您处理

412
00:19:32,039 --> 00:19:34,341
音频会话激活程序

413
00:19:34,341 --> 00:19:36,143
这可确保您的音频会话

414
00:19:36,143 --> 00:19:38,946
在系统内有适当的优先级

415
00:19:38,946 --> 00:19:43,383
可在不使用时暂停

416
00:19:43,383 --> 00:19:45,085
您的一键通服务器

417
00:19:45,085 --> 00:19:47,621
应该使用新的推送通知类型

418
00:19:47,621 --> 00:19:51,158
提醒您的 App
有新的音频要播放

419
00:19:51,158 --> 00:19:54,561
或一键通会话已结束

420
00:19:54,561 --> 00:19:56,530
有关延长您的
App 电池续航时间的

421
00:19:56,530 --> 00:19:59,066
更多信息 请参考

422
00:19:59,066 --> 00:20:03,537
“断电：减少电池消耗”讲解视频

423
00:20:03,537 --> 00:20:05,906
当您的一键通 App 在后台运行

424
00:20:05,906 --> 00:20:09,276
且 App 没有传输或接收音频时

425
00:20:09,276 --> 00:20:11,945
它将被系统暂停

426
00:20:11,945 --> 00:20:13,480
您的 App 被暂停后

427
00:20:13,480 --> 00:20:17,251
任何网络连接都将断开

428
00:20:17,251 --> 00:20:19,786
您应考虑采用
Network.framework

429
00:20:19,786 --> 00:20:22,689
和 QUIC 以减少

430
00:20:22,689 --> 00:20:25,559
建立 TLS 安全连接

431
00:20:25,559 --> 00:20:28,896
以及提高初始化连接速度所需的步骤

432
00:20:28,896 --> 00:20:31,865
Network.framework 内置支持 QUIC

433
00:20:31,865 --> 00:20:32,900
想了解更多信息 请观看

434
00:20:32,900 --> 00:20:36,904
“减少网络延迟
使 App 更灵敏”的讲解

435
00:20:36,904 --> 00:20:40,674
以了解使用 QUIC 的方法

436
00:20:40,674 --> 00:20:43,043
PushToTalk 框架能让您

437
00:20:43,043 --> 00:20:44,878
在 App 中构建

438
00:20:44,878 --> 00:20:47,514
稳固 省电 对讲机式的

439
00:20:47,514 --> 00:20:49,449
交流体验

440
00:20:49,449 --> 00:20:51,652
如果您已经拥有一个 App

441
00:20:51,652 --> 00:20:54,788
可在 iOS 上实现对讲机式体验

442
00:20:54,788 --> 00:20:57,124
您可更新现有 App

443
00:20:57,124 --> 00:20:59,893
以使用新的 API

444
00:20:59,893 --> 00:21:02,095
如果您正在使用
对讲机式的新 App

445
00:21:02,095 --> 00:21:05,999
您应该立即使用
PushToTalk 框架

446
00:21:05,999 --> 00:21:07,968
最后 您在开始测试新框架

447
00:21:07,968 --> 00:21:10,037
将其集成到您的 App 上时

448
00:21:10,037 --> 00:21:12,639
可向我们提交反馈

449
00:21:12,639 --> 00:21:15,809
谢谢 祝您体验 WWDC 愉快

450
00:21:15,809 --> 00:21:17,344
完毕 退出

451
00:21:17,344 --> 00:21:21,815
♪

