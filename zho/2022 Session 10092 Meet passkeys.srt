1
00:00:00,067 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:09,776
♪

3
00:00:09,776 --> 00:00:11,912
嗨 我是 Garrett

4
00:00:11,912 --> 00:00:15,148
身份验证体验团队的工程师

5
00:00:15,148 --> 00:00:19,386
在这个视频中
我很高兴能和大家聊聊通行密钥

6
00:00:19,386 --> 00:00:23,490
通行密钥是新一代的验证技术

7
00:00:23,490 --> 00:00:25,359
但首先 我需要谈谈

8
00:00:25,359 --> 00:00:28,896
当今的身份验证技术：密码

9
00:00:28,896 --> 00:00:30,397
您可能已经习惯用密码登录

10
00:00:30,397 --> 00:00:33,600
几乎所有的 App 和网站

11
00:00:33,600 --> 00:00:37,137
密码真的很难安全地使用

12
00:00:37,137 --> 00:00:39,940
我们都知道每个帐户都应该创建

13
00:00:39,940 --> 00:00:42,709
强大 独特的密码

14
00:00:42,709 --> 00:00:45,779
但实际上没有多少人会这么做

15
00:00:45,779 --> 00:00:48,782
在设计 App 和网站时

16
00:00:48,782 --> 00:00:52,019
在保持帐户安全与设计良好体验之间

17
00:00:52,019 --> 00:00:55,322
需要不断地权衡

18
00:00:55,322 --> 00:00:59,760
即使您的 App 和网站一切正常

19
00:00:59,760 --> 00:01:02,996
网络钓鱼和密码重用等问题

20
00:01:02,996 --> 00:01:06,433
仍然可能导致帐户泄露

21
00:01:06,433 --> 00:01:09,436
在 macOS Monterey
和 iOS 15 中

22
00:01:09,436 --> 00:01:12,606
我们宣布了这个解决方案的
开发者预览版

23
00:01:12,606 --> 00:01:16,310
也就是通行密钥
并获得了很多很棒的反馈

24
00:01:16,310 --> 00:01:19,313
在 macOS Ventura
和 iOS 16 中

25
00:01:19,313 --> 00:01:23,083
我们很高兴通行密钥将向所有人提供

26
00:01:23,083 --> 00:01:26,086
现在是采用通行密钥的时候了

27
00:01:26,086 --> 00:01:27,387
使用通行密钥

28
00:01:27,387 --> 00:01:31,358
不仅能提供比密码更好的用户体验

29
00:01:31,358 --> 00:01:35,329
而且整个类别的安全问题

30
00:01:35,329 --> 00:01:37,564
如弱密码和重用密码凭据

31
00:01:37,564 --> 00:01:42,769
密码凭据泄露和网络钓鱼
都不复存在了

32
00:01:42,769 --> 00:01:45,272
而且通行密钥非常易于使用

33
00:01:45,272 --> 00:01:47,975
让我来给您展示

34
00:01:47,975 --> 00:01:51,378
从我们最爱的
演示 App Shiny 开始

35
00:01:51,378 --> 00:01:54,781
这个 App 每天会
为我展示一张可爱的照片

36
00:01:54,781 --> 00:01:59,386
并具有典型的基于密码的登录流程

37
00:01:59,386 --> 00:02:01,755
我可以点击用户名字段

38
00:02:01,755 --> 00:02:04,958
看到我的帐户的自动填充建议

39
00:02:04,958 --> 00:02:08,428
选择填充建议 登录

40
00:02:08,428 --> 00:02:10,664
然后 填写密码

41
00:02:12,933 --> 00:02:14,968
然后 我稍等片刻

42
00:02:14,968 --> 00:02:18,005
直到短信传来一次性验证码

43
00:02:20,374 --> 00:02:22,142
收到了

44
00:02:22,142 --> 00:02:25,212
最后 登录上了

45
00:02:25,212 --> 00:02:28,348
花了几个步骤 但在自动填充

46
00:02:28,348 --> 00:02:31,051
和密码管理器的帮助下
我成功登录了

47
00:02:33,320 --> 00:02:37,524
现在登录上了 我将向帐户添加通行密钥

48
00:02:37,524 --> 00:02:41,228
帐户管理 添加通行密钥

49
00:02:41,228 --> 00:02:45,332
这里是用于创建通行密钥的系统表

50
00:02:45,332 --> 00:02:47,000
继续

51
00:02:47,000 --> 00:02:48,802
完毕！

52
00:02:48,802 --> 00:02:52,172
只需几下按键 我的设备就为帐户

53
00:02:52,172 --> 00:02:56,109
生成了一个独特的
加密性强的通行密钥对

54
00:02:56,109 --> 00:02:58,879
并存储在 iCloud 钥匙串中

55
00:02:58,879 --> 00:03:02,049
从而让通行密钥在我的所有运行

56
00:03:02,049 --> 00:03:04,585
macOS Ventura 和 iOS 16 的
设备上同步和工作

57
00:03:06,987 --> 00:03:08,689
现在有了通行密钥

58
00:03:08,689 --> 00:03:11,458
让我来展示一下通行密钥多么容易使用

59
00:03:11,458 --> 00:03:13,627
我先退出登录

60
00:03:13,627 --> 00:03:18,398
又回到了之前用过的登录表单

61
00:03:18,398 --> 00:03:21,902
像之前一样 点击用户名字段

62
00:03:21,902 --> 00:03:25,572
现在我已经为帐户保存了一个通行密钥

63
00:03:25,572 --> 00:03:28,208
通行密钥会显示在 QuickType 栏中

64
00:03:28,208 --> 00:03:31,979
只要点击它 就能登录了

65
00:03:31,979 --> 00:03:34,248
一步就能完成

66
00:03:34,248 --> 00:03:35,883
保存通行密钥时

67
00:03:35,883 --> 00:03:38,652
我不需要设置新密码

68
00:03:38,652 --> 00:03:42,689
也不需要满足密码复杂度要求

69
00:03:42,689 --> 00:03:45,926
每个通行密钥由系统生成

70
00:03:45,926 --> 00:03:49,663
并保证通行密钥强度大

71
00:03:49,663 --> 00:03:52,332
且只用于一个帐户

72
00:03:52,332 --> 00:03:54,968
当我用通行密钥登录时 它可以显示

73
00:03:54,968 --> 00:03:57,938
在我习惯的现有登录流程中

74
00:03:57,938 --> 00:04:00,774
而且只需轻轻一点就可以使用

75
00:04:00,774 --> 00:04:04,511
而且系统会让我仅在

76
00:04:04,511 --> 00:04:07,014
正确的 App 或网站上使用通行密钥

77
00:04:07,014 --> 00:04:10,784
内置了强大的防钓鱼功能

78
00:04:10,784 --> 00:04:14,354
当然 通行密钥也可以在网络页面上使用

79
00:04:14,354 --> 00:04:17,925
我在 Safari 浏览器上
浏览 Shiny 网站

80
00:04:17,925 --> 00:04:21,828
就像在我的手机上
我点击用户名字段

81
00:04:21,828 --> 00:04:25,299
多亏了 iCloud 钥匙串

82
00:04:25,299 --> 00:04:27,334
通行密钥已经可以使用了

83
00:04:27,334 --> 00:04:30,838
只需要触控 ID 就能登录

84
00:04:30,838 --> 00:04:32,973
就这么容易

85
00:04:32,973 --> 00:04:37,010
Apple 的通行密钥实现
是建立在开放标准之上

86
00:04:37,010 --> 00:04:39,279
我们一直在与 FIDO 联盟内的

87
00:04:39,279 --> 00:04:42,182
其他平台供应商合作

88
00:04:42,182 --> 00:04:45,886
以确保通行密钥实现兼容跨平台

89
00:04:45,886 --> 00:04:49,923
并能在尽可能多的设备上工作

90
00:04:49,923 --> 00:04:52,893
把我的帐户升级为使用通行密钥后

91
00:04:52,893 --> 00:04:57,297
我仍然可以在我朋友的电脑上登录

92
00:04:57,297 --> 00:05:00,601
当然 我朋友的电脑
没有本地储存通行密钥

93
00:05:00,601 --> 00:05:05,806
但我仍然可以在这里输入我的用户名

94
00:05:05,806 --> 00:05:07,307
我点击登录时

95
00:05:07,307 --> 00:05:11,078
收到一张允许我使用手机的表单

96
00:05:11,078 --> 00:05:14,581
然后我收到一个二维码
我来扫描一下

97
00:05:16,884 --> 00:05:19,419
我的手机识别出此二维码

98
00:05:19,419 --> 00:05:22,656
是用通行密钥登录的

99
00:05:22,656 --> 00:05:24,458
当我选择这个选项时

100
00:05:24,458 --> 00:05:29,062
我的手机和浏览器
就安全地连接在一起了

101
00:05:29,062 --> 00:05:34,668
接下来点击继续 就能登录上了

102
00:05:34,668 --> 00:05:37,271
这种跨平台的登录体验

103
00:05:37,271 --> 00:05:39,973
是一流的系统功能

104
00:05:39,973 --> 00:05:43,177
是通行密钥背后标准的一部分

105
00:05:43,177 --> 00:05:46,680
表面上 它看起来非常简单

106
00:05:46,680 --> 00:05:49,516
但这不仅仅是一个二维码

107
00:05:49,516 --> 00:05:50,684
在后台

108
00:05:50,684 --> 00:05:53,587
设备正在执行本地通行密钥协议

109
00:05:53,587 --> 00:05:55,289
证明接近性

110
00:05:55,289 --> 00:05:59,259
建立一个端到端加密通信通道

111
00:05:59,259 --> 00:06:02,796
这些都是为了简化登录方式

112
00:06:02,796 --> 00:06:07,034
但又能保持通行密钥强大的对抗钓鱼能力

113
00:06:07,034 --> 00:06:10,137
它可以让我在任何设备上

114
00:06:10,137 --> 00:06:14,541
安全地登录我的帐户

115
00:06:14,541 --> 00:06:17,878
密码替换的另一个重要功能

116
00:06:17,878 --> 00:06:22,382
是可以在两人或多人之间共享帐户

117
00:06:22,382 --> 00:06:24,551
要与其他人共享通行密钥

118
00:06:24,551 --> 00:06:26,386
我可以使用 AirDrop

119
00:06:28,522 --> 00:06:32,626
我和我的伙伴也有一个
共享的 Shiny 帐户

120
00:06:32,626 --> 00:06:35,963
我已经将帐户升级为使用通行密钥

121
00:06:35,963 --> 00:06:39,833
有了通行密钥 我就无需输入密码凭证

122
00:06:39,833 --> 00:06:43,170
但我仍然可以与我信任的人分享通行密钥

123
00:06:43,170 --> 00:06:46,006
在我的手机上 我打开帐户详细信息

124
00:06:48,942 --> 00:06:50,644
这是我所有使用

125
00:06:50,644 --> 00:06:54,648
密码和通行密钥的帐户

126
00:06:54,648 --> 00:06:58,852
我可以点击我们的共享帐户
调出更多细节

127
00:06:58,852 --> 00:07:02,456
在这里 我可以看到
关于我保存的通行密钥的信息

128
00:07:02,456 --> 00:07:04,825
或向此帐户添加备注

129
00:07:04,825 --> 00:07:08,428
我也可以分享我的通行密钥

130
00:07:08,428 --> 00:07:09,997
这是我伙伴的手机

131
00:07:09,997 --> 00:07:11,698
我来选择它

132
00:07:14,868 --> 00:07:17,604
现在我的伙伴也有了通行密钥

133
00:07:19,840 --> 00:07:25,512
可以看出来
到处都能用通行密钥 多么容易

134
00:07:25,512 --> 00:07:29,316
我刚刚介绍了使用通行密钥的体验

135
00:07:29,316 --> 00:07:32,119
接下来说说什么是通行密钥

136
00:07:32,119 --> 00:07:36,323
以及使用通行密钥时的一些界面指南

137
00:07:36,323 --> 00:07:39,359
然后 我将向您展示
如何利用自动填充

138
00:07:39,359 --> 00:07:42,930
将通行密钥集成到您的 App

139
00:07:42,930 --> 00:07:45,832
和网站中现有的登录流程中

140
00:07:45,832 --> 00:07:48,202
然后是一些额外的选项

141
00:07:48,202 --> 00:07:52,539
可以进一步简化您的登录过程

142
00:07:52,539 --> 00:07:55,475
接下来 我将详细介绍

143
00:07:55,475 --> 00:07:58,278
密匙的工作原理

144
00:07:58,278 --> 00:08:04,284
最后 讨论密匙和多因素身份验证

145
00:08:04,284 --> 00:08:07,921
首先 通行密钥的设计

146
00:08:07,921 --> 00:08:10,490
说到通行密钥

147
00:08:10,490 --> 00:08:15,863
首先也是最重要的是
通行密钥是密码的替代品

148
00:08:15,863 --> 00:08:19,399
登录速度更快 使用起来更容易

149
00:08:19,399 --> 00:08:23,370
也更安全

150
00:08:23,370 --> 00:08:26,473
以下是有关如何
在您的 App 和网站中

151
00:08:26,473 --> 00:08:29,343
使用通行密钥的指导方针

152
00:08:29,343 --> 00:08:33,247
“Passkey” (通行密钥) 是一个通用的
用户可见的术语

153
00:08:33,247 --> 00:08:37,217
本视频重点介绍 Apple 的实施

154
00:08:37,217 --> 00:08:40,220
但正如我刚才向开发者展示的
其他主要平台

155
00:08:40,220 --> 00:08:45,092
已经开始建立自己对通行密钥的支持

156
00:08:45,092 --> 00:08:49,196
“Passkey” (通行密钥) 也是个普通名词
就像“密码”一样

157
00:08:49,196 --> 00:08:51,965
在英语中 这个词是小写的

158
00:08:51,965 --> 00:08:54,968
并能像“密码”一样变成复数

159
00:08:54,968 --> 00:08:59,439
我的帐户有通行密钥 可以去“设置”

160
00:08:59,439 --> 00:09:03,610
查看我所有的帐户的通行密钥

161
00:09:03,610 --> 00:09:07,581
在 Apple 平台上
您还可以使用 SF Symbol

162
00:09:07,581 --> 00:09:11,485
person.key.badge 和 .fill 变体

163
00:09:11,485 --> 00:09:15,722
来提供与系统一致的图标

164
00:09:15,722 --> 00:09:18,125
在您的 App 和网站中
提供通行密钥时

165
00:09:18,125 --> 00:09:24,031
您不需要设计全新的界面

166
00:09:24,031 --> 00:09:27,534
用户名字段是目前大多数 App

167
00:09:27,534 --> 00:09:30,137
和网站登录的中心点

168
00:09:30,137 --> 00:09:32,639
几乎每个人都知道如何使用

169
00:09:32,639 --> 00:09:36,376
许多 App 和网站已经利用通行密钥

170
00:09:36,376 --> 00:09:40,614
来定制每个帐户的登录体验

171
00:09:40,614 --> 00:09:45,085
现在用户名字段还有另一个大特点

172
00:09:45,085 --> 00:09:47,554
虽然通行密钥为登录工作带来了新的范式

173
00:09:47,554 --> 00:09:51,859
但摆脱密码的过渡

174
00:09:51,859 --> 00:09:55,062
也需要平稳和简单

175
00:09:55,062 --> 00:09:58,532
您现在可以使用自动填充

176
00:09:58,532 --> 00:10:01,902
作为一级特性来提供通行密钥

177
00:10:01,902 --> 00:10:05,239
让您可以将通行密钥
直接放入现有的登录流中

178
00:10:05,239 --> 00:10:10,277
在熟悉且人们知道如何使用的界面中

179
00:10:10,277 --> 00:10:12,145
使用自动填充提供通行密钥

180
00:10:12,145 --> 00:10:15,282
是使用通行密钥的主要方式

181
00:10:15,282 --> 00:10:18,285
不过 对于更高级的用户

182
00:10:18,285 --> 00:10:21,922
Apple 平台也有
很多额外的 UI 选项

183
00:10:21,922 --> 00:10:25,359
可以使用通行密钥登录

184
00:10:25,359 --> 00:10:27,661
接下来看一下如何开始使用通行密钥

185
00:10:27,661 --> 00:10:30,531
并使用自动填充显示通行密钥

186
00:10:30,531 --> 00:10:33,100
通行密钥是基于
WebAuthentication 构建的

187
00:10:33,100 --> 00:10:37,671
其又名 WebAuthn 标准
并使用公钥加密

188
00:10:37,671 --> 00:10:41,508
每个帐户生成唯一的加密通行密钥对

189
00:10:41,508 --> 00:10:46,680
而不是使用可键入的字或字符串

190
00:10:46,680 --> 00:10:49,950
您需要在服务器后端采用 WebAuthn

191
00:10:49,950 --> 00:10:52,953
来执行通行密钥登录

192
00:10:52,953 --> 00:10:55,956
任何标准的 WebAuthn 服务器实现

193
00:10:55,956 --> 00:10:59,860
应该使用通行密钥

194
00:10:59,860 --> 00:11:01,862
在 Apple 平台上的 App 中

195
00:11:01,862 --> 00:11:05,599
通行密钥是
AuthenticationServices 框架中的

196
00:11:05,599 --> 00:11:08,468
ASAuthorization API 系列的一部分

197
00:11:08,468 --> 00:11:11,004
这是我们的 API 用于处理

198
00:11:11,004 --> 00:11:14,141
各种不同的凭证 包括密码

199
00:11:14,141 --> 00:11:17,744
安全通行密钥和使用 Apple 登录

200
00:11:17,744 --> 00:11:20,514
我们还添加了一些
您可以使用的新方法

201
00:11:20,514 --> 00:11:25,319
像自动填充支持
使这个 API 更加灵活

202
00:11:25,319 --> 00:11:30,424
并让您无缝地将它
融入到现有的登录流中

203
00:11:30,424 --> 00:11:33,727
要开始在
您的 App 中使用通行密钥

204
00:11:33,727 --> 00:11:36,496
首先 您需要
使用 webcredentials 服务

205
00:11:36,496 --> 00:11:39,166
设置相关的域

206
00:11:39,166 --> 00:11:41,301
您可以在 “Introducing Password
AutoFill for Apps”(App 密码自动填充介绍)

207
00:11:41,301 --> 00:11:44,238
和“通用链接中的新功能”
(What's new in Universal Links) 视频中

208
00:11:44,238 --> 00:11:47,608
了解更多细节

209
00:11:47,608 --> 00:11:51,278
在您的 App 界面中
请确保您的用户名字段

210
00:11:51,278 --> 00:11:54,915
使用的是用户名 textContentTtype

211
00:11:54,915 --> 00:11:59,586
这让系统知道在哪里提供通行密钥建议

212
00:11:59,586 --> 00:12:02,089
配置完成后 下面是启动自动填充

213
00:12:02,089 --> 00:12:05,592
辅助通行密钥请求所需的代码

214
00:12:05,592 --> 00:12:09,530
分解时只需几个简单的步骤

215
00:12:09,530 --> 00:12:12,666
与任何 WebAuthn 请求
一样 您首先需要

216
00:12:12,666 --> 00:12:16,103
从服务器获取一个质询

217
00:12:16,103 --> 00:12:19,473
然后创建提供者和请求

218
00:12:19,473 --> 00:12:23,143
ASAuthorizationPlatformPublicKeyCredentialProvider

219
00:12:23,143 --> 00:12:25,179
是 ASAuthorizationProvider

220
00:12:25,179 --> 00:12:28,248
用于处理通行密钥请求

221
00:12:28,248 --> 00:12:32,452
在 WebAuthn 术语中
登录时使用断言

222
00:12:32,452 --> 00:12:35,055
所以在这里 我创建一个断言

223
00:12:35,055 --> 00:12:38,192
请求来使用现有的通行密钥进行登录

224
00:12:38,192 --> 00:12:39,993
ASAuthorizationController

225
00:12:39,993 --> 00:12:42,696
是实际处理请求的内容

226
00:12:42,696 --> 00:12:45,365
使用通行密钥请求创建实例

227
00:12:45,365 --> 00:12:50,537
并配置它的委托
和 presentationContextProvider

228
00:12:50,537 --> 00:12:54,274
最后 调用
performAutoFillAssistedRequests

229
00:12:54,274 --> 00:12:56,510
开始请求

230
00:12:56,510 --> 00:12:59,046
当这个请求在 App 中运行时

231
00:12:59,046 --> 00:13:01,715
每当点击一个用户名字段时

232
00:13:01,715 --> 00:13:05,919
系统将在 QuickType 栏中
提供可用的通行密钥

233
00:13:05,919 --> 00:13:09,756
确保在视图生命周期的早期

234
00:13:09,756 --> 00:13:11,859
在点击用户名字段之前启动这个请求

235
00:13:11,859 --> 00:13:15,629
这样当键盘出现时 通行密钥就准备好了

236
00:13:15,629 --> 00:13:18,465
当 QuickType 栏中的
一个项目被选中时

237
00:13:18,465 --> 00:13:21,468
面容 ID 被调用 然后您会收到

238
00:13:21,468 --> 00:13:24,471
一个 ASAuthorizationController
委托回调

239
00:13:24,471 --> 00:13:26,473
来完成登录

240
00:13:26,473 --> 00:13:29,576
文本框中实际上不会填充内容

241
00:13:29,576 --> 00:13:32,913
当对任何凭据类型的授权成功时

242
00:13:32,913 --> 00:13:35,048
您将获得
didCompleteWithAuthorization

243
00:13:35,048 --> 00:13:37,217
回调

244
00:13:37,217 --> 00:13:38,785
您首先应该

245
00:13:38,785 --> 00:13:41,822
检查您获得的凭证的类型

246
00:13:41,822 --> 00:13:44,658
在使用通行密钥登录的情况下 它将是

247
00:13:44,658 --> 00:13:50,030
ASAuthorizationPlatformPublicKeyCredentialAssertion

248
00:13:50,030 --> 00:13:52,466
断言对象将包含在后端验证登录

249
00:13:52,466 --> 00:13:55,369
所需的字段

250
00:13:55,369 --> 00:13:59,006
您应该读这些值 用服务器验证它们

251
00:13:59,006 --> 00:14:01,141
然后完成登录

252
00:14:01,141 --> 00:14:04,978
自动填充辅助通行密钥请求功能强大

253
00:14:04,978 --> 00:14:06,813
通过这个小小的代码更改

254
00:14:06,813 --> 00:14:11,285
您的 App 的登录流程
现在有了很大的灵活性

255
00:14:11,285 --> 00:14:14,154
当然 主要的情况是从

256
00:14:14,154 --> 00:14:16,823
QuickType 栏中选择通行密钥建议

257
00:14:16,823 --> 00:14:19,960
以便使用通行密钥快速登录

258
00:14:19,960 --> 00:14:24,031
这是应该是最经常发生的情况

259
00:14:24,031 --> 00:14:26,500
不过 还有其他选择

260
00:14:26,500 --> 00:14:29,770
我刚才向您展示的代码还允许
从附近的设备

261
00:14:29,770 --> 00:14:33,440
进行通行密钥登录 无需进行额外的更改

262
00:14:33,440 --> 00:14:36,176
您可以点击钥匙图标以调出视图

263
00:14:36,176 --> 00:14:40,080
列出所有可用的通行密钥和密码

264
00:14:40,080 --> 00:14:43,684
并点击使用附近设备登录的选项

265
00:14:43,684 --> 00:14:47,688
然后可以执行跨设备通行密钥登录

266
00:14:47,688 --> 00:14:50,724
在这两种情况下 如果使用通行密钥

267
00:14:50,724 --> 00:14:52,025
您会收到相同的

268
00:14:52,025 --> 00:14:55,062
ASAuthorizationController
委托回调

269
00:14:55,062 --> 00:14:59,166
要支持这个功能
您不需要做什么特别的操作

270
00:14:59,166 --> 00:15:01,869
如果用户还没有通行密钥

271
00:15:01,869 --> 00:15:05,772
他们可以照旧使用您的登录表单

272
00:15:05,772 --> 00:15:09,142
他们将在 QuickType 栏中
获得密码建议

273
00:15:09,142 --> 00:15:11,979
或直接在输入栏中输入密码

274
00:15:11,979 --> 00:15:14,348
如果选择了密码项

275
00:15:14,348 --> 00:15:17,751
则仍然会将凭据填写到文本字段中

276
00:15:17,751 --> 00:15:21,154
您可以取消正在运行的请求

277
00:15:21,154 --> 00:15:23,290
我们设计这个 API 是为了让您

278
00:15:23,290 --> 00:15:25,993
把它直接放到您现有的登录流中

279
00:15:25,993 --> 00:15:30,631
这对您的用户来说非常容易

280
00:15:30,631 --> 00:15:34,234
如果用户已经升级到使用通行密钥

281
00:15:34,234 --> 00:15:36,870
还是决定输入他们的用户名

282
00:15:36,870 --> 00:15:39,306
而不是使用自动填充建议

283
00:15:39,306 --> 00:15:41,208
您应该取消自动填充请求

284
00:15:41,208 --> 00:15:43,343
并使用 ASAuthorizationController

285
00:15:43,343 --> 00:15:46,280
来呈现模式通行密钥登录表

286
00:15:46,280 --> 00:15:48,815
这里 依旧只需要轻点一下

287
00:15:48,815 --> 00:15:50,317
您会收到相同的

288
00:15:50,317 --> 00:15:53,921
ASAuthorizationController 委托回调

289
00:15:53,921 --> 00:15:56,123
这是之前的代码

290
00:15:56,123 --> 00:15:59,793
要从自动填充请求切换到模态请求

291
00:15:59,793 --> 00:16:03,230
只需将
performAutoFillAssistedRequests 方法调用

292
00:16:03,230 --> 00:16:07,601
与 performRequests() 调用交换

293
00:16:07,601 --> 00:16:11,572
这将显示一个
包含所有可用通行密钥的模式表

294
00:16:11,572 --> 00:16:16,009
以及使用附近设备的通行密钥的选项

295
00:16:16,009 --> 00:16:19,279
这些是您需要在 App 中

296
00:16:19,279 --> 00:16:22,082
支持通行密钥的唯一代码更改

297
00:16:22,082 --> 00:16:25,619
网页平台还支持自动填充辅助

298
00:16:25,619 --> 00:16:28,288
和模态通行密钥请求

299
00:16:28,288 --> 00:16:33,293
在网页上 通行密钥是通过标准的
WebAuthn API 使用的

300
00:16:33,293 --> 00:16:36,697
这个 API 也用于安全通行密钥

301
00:16:36,697 --> 00:16:40,334
就像在 App 中一样
采用自动填充辅助请求功能

302
00:16:40,334 --> 00:16:43,804
只需触控 ID 即可快速登录

303
00:16:43,804 --> 00:16:47,674
获取所有可用的通行密钥和密码

304
00:16:47,674 --> 00:16:50,878
或者使用附近设备的通行密钥

305
00:16:50,878 --> 00:16:54,081
这些都只需要很少的代码

306
00:16:54,081 --> 00:16:57,885
首先 确保在您的网页上

307
00:16:57,885 --> 00:17:01,021
以用户名和 webauthn
自动完成细节标记

308
00:17:01,021 --> 00:17:04,658
注释您的用户名字段

309
00:17:04,658 --> 00:17:07,861
以便在正确的位置

310
00:17:07,861 --> 00:17:10,130
显示密码和通行密钥建议

311
00:17:10,130 --> 00:17:13,667
完成后
这是一个在 JavaScript 中

312
00:17:13,667 --> 00:17:16,303
典型的 WebAuthn 登录

313
00:17:16,303 --> 00:17:19,473
在 WebAuthn 中
使用条件中介调用

314
00:17:19,473 --> 00:17:22,976
自动填充样式的请求

315
00:17:22,976 --> 00:17:24,211
您应该首先使用

316
00:17:24,211 --> 00:17:26,547
标准 JavaScript 特性检测

317
00:17:26,547 --> 00:17:29,249
来检查它是否可用

318
00:17:29,249 --> 00:17:33,320
如果可用 您可以继续提出您的请求

319
00:17:33,320 --> 00:17:37,057
就像使用原生 API 一样
首先使用

320
00:17:37,057 --> 00:17:40,694
从服务器获取的质询发起请求

321
00:17:40,694 --> 00:17:42,863
要使它成为自动填充辅助请求

322
00:17:42,863 --> 00:17:47,901
将 mediation: "conditional"
参数添加到选项中

323
00:17:47,901 --> 00:17:53,407
然后 使用
navigator.credentials.get 启动请求

324
00:17:53,407 --> 00:17:56,276
.get 调用返回一个承诺

325
00:17:56,276 --> 00:17:59,847
如果解析成功
您将收到一个断言对象

326
00:17:59,847 --> 00:18:02,683
您可以将对象发送回服务器进行验证

327
00:18:02,683 --> 00:18:04,852
然后完成登录

328
00:18:04,852 --> 00:18:08,355
就像在 App 中
如果有人手动输入一个

329
00:18:08,355 --> 00:18:12,059
带有通行密钥的帐户的用户名
您应该使用 API

330
00:18:12,059 --> 00:18:15,062
来呈现一个模态登录表

331
00:18:15,062 --> 00:18:19,132
要切换到模态请求
您需要做的就是删除

332
00:18:19,132 --> 00:18:22,669
mediation: "conditional" 参数

333
00:18:22,669 --> 00:18:24,838
使用 WebAuthn 时要注意的一件事

334
00:18:24,838 --> 00:18:29,810
是 Apple 平台如何处理
用户验证 简称 UV

335
00:18:29,810 --> 00:18:33,547
UV 是 WebAuthn 响应中的
布尔字段

336
00:18:33,547 --> 00:18:35,582
表示验证者是否

337
00:18:35,582 --> 00:18:37,885
试图验证当前用户

338
00:18:37,885 --> 00:18:39,953
是设备的所有者

339
00:18:39,953 --> 00:18:44,558
在 Apple 设备上
值 1 表示生物识别技术

340
00:18:44,558 --> 00:18:47,494
或使用的密码

341
00:18:47,494 --> 00:18:50,964
当生物识别技术可用时

342
00:18:50,964 --> 00:18:52,933
Apple 平台
将始终需要 UV 用于通行密钥

343
00:18:52,933 --> 00:18:55,769
所以您不必担心这一点

344
00:18:55,769 --> 00:18:57,771
当提出 WebAuthn 请求时

345
00:18:57,771 --> 00:19:02,109
有一个选项可以指定用户验证要求

346
00:19:02,109 --> 00:19:06,146
默认值为
userVerification: "preferred"

347
00:19:06,146 --> 00:19:10,484
请始终使用默认值
以避免在没有生物识别的设备上

348
00:19:10,484 --> 00:19:14,288
造成不良体验

349
00:19:14,288 --> 00:19:18,559
以下是在网页上
使用通行密钥的一些附加说明

350
00:19:18,559 --> 00:19:20,961
当您提出自动填充辅助请求时

351
00:19:20,961 --> 00:19:23,397
您应该在页面生命周期的早期进行

352
00:19:23,397 --> 00:19:25,732
就像在 App 中一样

353
00:19:25,732 --> 00:19:28,769
对于模态 WebAuthn 请求
您应该从用户手势事件

354
00:19:28,769 --> 00:19:32,906
比如点击按钮 来触发它们

355
00:19:32,906 --> 00:19:36,109
模态请求可以在用户手势事件之外的

356
00:19:36,109 --> 00:19:40,013
每次页面加载触发一次
但如果您这样做

357
00:19:40,013 --> 00:19:44,084
WebKit 可能会
限制页面的后续调用

358
00:19:44,084 --> 00:19:46,720
自动填充请求不是模态的

359
00:19:46,720 --> 00:19:49,089
所以它们不需要用户手势

360
00:19:49,089 --> 00:19:52,359
并且有更长的超时时间

361
00:19:52,359 --> 00:19:55,996
最后 通行密钥正在
取代 Safari 浏览器的

362
00:19:55,996 --> 00:19:58,398
传统平台验证器

363
00:19:58,398 --> 00:20:01,034
现有凭证仍然有效

364
00:20:01,034 --> 00:20:04,271
并且仍然绑定到创建它们的设备上

365
00:20:04,271 --> 00:20:08,842
但新的平台凭据将被创建为通行密钥

366
00:20:08,842 --> 00:20:11,311
在注册期间可以将它们

367
00:20:11,311 --> 00:20:12,913
与遗留凭证区分开来

368
00:20:12,913 --> 00:20:17,317
因为通行密钥不会提供认证声明

369
00:20:17,317 --> 00:20:19,987
以上是通行密钥和自动填充

370
00:20:19,987 --> 00:20:23,390
接下来 我将介绍一些其他平台功能

371
00:20:23,390 --> 00:20:26,894
这可以进一步简化登录体验

372
00:20:26,894 --> 00:20:29,696
除了自动填充辅助的登录

373
00:20:29,696 --> 00:20:31,632
ASAuthorization API

374
00:20:31,632 --> 00:20:34,468
还提供了许多更有用的功能

375
00:20:34,468 --> 00:20:37,571
我将介绍
这个 API 的三个附加功能

376
00:20:37,571 --> 00:20:39,773
以及何时需要使用它们

377
00:20:39,773 --> 00:20:43,076
首先来说说通行密钥允许列表

378
00:20:43,076 --> 00:20:45,479
当用户名输入后

379
00:20:45,479 --> 00:20:47,514
显示模态通行密钥表时

380
00:20:47,514 --> 00:20:50,617
设备上可能保存了

381
00:20:50,617 --> 00:20:52,186
多个帐户的通行密钥

382
00:20:52,186 --> 00:20:56,356
默认情况下 所有可用的通行密钥
都将显示在表单中

383
00:20:56,356 --> 00:20:58,492
您可以使用一个通行密钥允许列表

384
00:20:58,492 --> 00:21:01,662
来限制哪些通行密钥显示在工作表中

385
00:21:01,662 --> 00:21:05,132
以便只提供匹配的帐户

386
00:21:05,132 --> 00:21:07,935
要向模态请求添加允许列表

387
00:21:07,935 --> 00:21:10,604
首先需要用户名

388
00:21:10,604 --> 00:21:13,040
您可以使用该用户名获取

389
00:21:13,040 --> 00:21:17,778
匹配凭据 ID 的列表
并将它转换为允许列表

390
00:21:17,778 --> 00:21:22,015
凭证 ID 是通行密钥的唯一标识符

391
00:21:22,015 --> 00:21:25,719
Webauthn 服务器应该
有一种方法来查找

392
00:21:25,719 --> 00:21:28,155
给定用户名的凭证 ID

393
00:21:28,155 --> 00:21:32,659
接下来 像以前一样继续您的请求

394
00:21:32,659 --> 00:21:35,963
现在 设备上有三个
使用通行密钥的 Shiny 帐户

395
00:21:35,963 --> 00:21:38,932
表单只提供了

396
00:21:38,932 --> 00:21:42,135
我想要使用的一个帐户

397
00:21:42,135 --> 00:21:45,572
发出模态请求时 当您有关于用户

398
00:21:45,572 --> 00:21:48,509
试图用哪个帐户登录的附加场景时

399
00:21:48,509 --> 00:21:50,811
您应该使用允许列表

400
00:21:50,811 --> 00:21:54,214
例如用户是否
已经输入了他们的用户名

401
00:21:54,214 --> 00:21:58,552
接下来 我将介绍
在当前设备上没有保存通行密钥的情况下

402
00:21:58,552 --> 00:22:02,556
发出模态通行密钥请求会发生什么

403
00:22:02,556 --> 00:22:05,225
这同样适用于
当您使用允许列表

404
00:22:05,225 --> 00:22:08,562
而所保存的通行密钥
与该列表不匹配的情况

405
00:22:08,562 --> 00:22:12,366
默认情况下
当您发出模态通行密钥请求时

406
00:22:12,366 --> 00:22:14,735
如果没有匹配的可用通行密钥

407
00:22:14,735 --> 00:22:17,070
将显示模态表

408
00:22:17,070 --> 00:22:19,406
并会立即显示二维码

409
00:22:19,406 --> 00:22:23,110
用于从附近的设备使用通行密钥登录

410
00:22:23,110 --> 00:22:26,747
这在登录时提供了最大的灵活性

411
00:22:26,747 --> 00:22:30,317
并且当您知道正在使用通行密钥时
这是最好的选择

412
00:22:30,317 --> 00:22:34,021
但 API 中有一个新选项
可以优先选择

413
00:22:34,021 --> 00:22:37,257
可以选择立即可用的凭证

414
00:22:37,257 --> 00:22:39,927
并在没有凭证时
使用委托回调静默回退

415
00:22:39,927 --> 00:22:43,030
这可以用于在可能的情况下

416
00:22:43,030 --> 00:22:44,364
甚至在显示传统的登录表单之前

417
00:22:44,364 --> 00:22:47,701
如果当前设备上没有匹配的通行密钥

418
00:22:47,701 --> 00:22:50,571
使用默认选项的模态请求

419
00:22:50,571 --> 00:22:52,906
将退回到显示二维码

420
00:22:52,906 --> 00:22:56,743
如果当前设备上没有匹配的通行密钥

421
00:22:56,743 --> 00:23:00,881
如果您使用
preferImmediatelyAvailableCredentials 选项

422
00:23:00,881 --> 00:23:02,916
您将获得一个带有错误的

423
00:23:02,916 --> 00:23:07,454
委托回调函数 而不是二维码

424
00:23:07,454 --> 00:23:10,157
如果您收到 ASAuthorizationError

425
00:23:10,157 --> 00:23:12,693
代码为 canceled 这意味着

426
00:23:12,693 --> 00:23:16,730
要么用户看到了这个表并手动取消了

427
00:23:16,730 --> 00:23:20,634
要么您传递了
preferImmediatelyAvailableCredentials

428
00:23:20,634 --> 00:23:23,937
而没有立即可用的凭证

429
00:23:23,937 --> 00:23:26,406
要怎么做 取决于

430
00:23:26,406 --> 00:23:28,709
您调用它的场景

431
00:23:28,709 --> 00:23:31,445
例如 如果您使用此选项

432
00:23:31,445 --> 00:23:33,881
作为在显示正常登录表单之前

433
00:23:33,881 --> 00:23:36,650
测试本地凭据的一种方法

434
00:23:36,650 --> 00:23:40,220
那么这就是触发显示表单的地方

435
00:23:40,220 --> 00:23:43,457
如果设备上至少有一个匹配的凭据

436
00:23:43,457 --> 00:23:45,959
则将显示完整的模态表

437
00:23:45,959 --> 00:23:48,896
无论使用什么选项

438
00:23:48,896 --> 00:23:50,864
确保您也在使用

439
00:23:50,864 --> 00:23:54,701
自动填充辅助请求或模态请求

440
00:23:54,701 --> 00:23:57,938
在您的 App 中有默认的回退

441
00:23:57,938 --> 00:24:00,807
因此 如果当前设备上没有通行密钥

442
00:24:00,807 --> 00:24:03,544
仍然可以使用
通过手边的设备

443
00:24:03,544 --> 00:24:06,213
来登录的选项

444
00:24:06,213 --> 00:24:09,149
我要介绍
ASAuthorization API 的

445
00:24:09,149 --> 00:24:13,387
最后一个功能是发出组合凭证请求

446
00:24:13,387 --> 00:24:16,256
在本例中

447
00:24:16,256 --> 00:24:21,195
App 提交了通行密钥、密码
以及通过 Apple 登录的请求

448
00:24:21,195 --> 00:24:24,264
我的设备恰好保存了

449
00:24:24,264 --> 00:24:26,300
三个不同帐户的三个不同凭证

450
00:24:26,300 --> 00:24:29,102
都在表单里

451
00:24:29,102 --> 00:24:30,737
但更有可能的情况是

452
00:24:30,737 --> 00:24:34,007
用户只有一个帐户

453
00:24:34,007 --> 00:24:37,578
在这种情况下 同样的组合凭证请求

454
00:24:37,578 --> 00:24:40,914
将只提供工作表中的一个帐户

455
00:24:40,914 --> 00:24:42,950
向现有的 ASAuthorization 请求

456
00:24:42,950 --> 00:24:47,855
添加额外的凭证类型非常容易

457
00:24:47,855 --> 00:24:50,691
您只需要为额外的请求类型

458
00:24:50,691 --> 00:24:52,492
创建提供程序和请求

459
00:24:52,492 --> 00:24:56,063
然后将这些新请求传递给控制器

460
00:24:56,063 --> 00:24:58,799
现在 模态表将提供任何凭据

461
00:24:58,799 --> 00:25:02,936
从这些凭证类型中获得的任何凭证

462
00:25:02,936 --> 00:25:04,571
无论使用哪种凭据类型

463
00:25:04,571 --> 00:25:07,941
您都将获得相同的委托回调

464
00:25:07,941 --> 00:25:10,978
您应该检查接收到的凭据类型

465
00:25:10,978 --> 00:25:13,080
并根据该凭据类型

466
00:25:13,080 --> 00:25:15,315
完成登录

467
00:25:15,315 --> 00:25:18,018
这就涵盖了
ASAuthorization API 系列的

468
00:25:18,018 --> 00:25:21,388
一些更高级的特性

469
00:25:21,388 --> 00:25:24,057
现在 我将深入探讨一些技术细节

470
00:25:24,057 --> 00:25:29,029
通行密钥工作原理
以及通行密钥为何如此安全

471
00:25:29,029 --> 00:25:31,765
现在 当您使用密码登录时

472
00:25:31,765 --> 00:25:34,234
通常情况下

473
00:25:34,234 --> 00:25:36,537
在您输入密码之后

474
00:25:36,537 --> 00:25:40,841
会被 hash 和 salt
以及由此产生的混淆值

475
00:25:40,841 --> 00:25:44,077
被发送到服务器得以储存

476
00:25:44,077 --> 00:25:48,715
稍后 如果您可以生成
相同的哈希加盐值

477
00:25:48,715 --> 00:25:51,185
则允许您进入帐户

478
00:25:51,185 --> 00:25:53,854
这意味着服务器负责

479
00:25:53,854 --> 00:25:56,924
存储您的密码来源

480
00:25:56,924 --> 00:25:59,860
这对攻击者非常有价值

481
00:25:59,860 --> 00:26:02,529
如果攻击者能获得
他们就有可能知道

482
00:26:02,529 --> 00:26:06,500
您的密码是什么并访问您的帐户

483
00:26:06,500 --> 00:26:10,270
但是 通行密钥的工作原理非常不同

484
00:26:10,270 --> 00:26:13,207
通行密钥不是单独的可输入字符串

485
00:26:13,207 --> 00:26:16,577
而是一对相关的通行密钥

486
00:26:16,577 --> 00:26:19,413
这些通行密钥由您的设备生成

487
00:26:19,413 --> 00:26:23,550
安全而唯一 为每个帐户服务

488
00:26:23,550 --> 00:26:27,588
一个是公开的 存储在服务器上

489
00:26:27,588 --> 00:26:31,491
另一个是私人的 即使在登录时

490
00:26:31,491 --> 00:26:33,727
也会保留在您的设备上

491
00:26:33,727 --> 00:26:36,730
公钥不是私密的

492
00:26:36,730 --> 00:26:40,434
就像您的用户名一样公开

493
00:26:40,434 --> 00:26:44,171
私钥是实际登录所需要的

494
00:26:44,171 --> 00:26:47,341
服务器永远不会知道您的私钥是什么

495
00:26:47,341 --> 00:26:50,978
您的设备会保护它的安全

496
00:26:50,978 --> 00:26:54,448
当您登录时 服务器会向您的设备

497
00:26:54,448 --> 00:26:57,184
发送一个一次性的质询

498
00:26:57,184 --> 00:27:01,388
WebAuthn 会允许
许多不同的质询-响应算法

499
00:27:01,388 --> 00:27:07,327
但 Apple 平台上的通行密钥
使用标准 ES256

500
00:27:07,327 --> 00:27:10,464
只有您的私钥才能

501
00:27:10,464 --> 00:27:14,935
为您的帐户质询产生有效的解决方案

502
00:27:14,935 --> 00:27:17,104
您的设备在本地生成这个解决方案

503
00:27:17,104 --> 00:27:19,873
叫做签名

504
00:27:19,873 --> 00:27:23,744
并且只将解决方案发送回服务器

505
00:27:23,744 --> 00:27:28,949
您的私钥是保密的
并且只保存在您的设备上

506
00:27:28,949 --> 00:27:34,154
然后 服务器
使用您的公钥验证解决方案

507
00:27:34,154 --> 00:27:37,024
如果您的设备提供的解决方案有效

508
00:27:37,024 --> 00:27:39,326
您就登录了！

509
00:27:39,326 --> 00:27:43,830
公钥可用于检查解决方案是否有效

510
00:27:43,830 --> 00:27:47,568
但不能产生解决方案本身

511
00:27:47,568 --> 00:27:49,803
这意味着服务器可以确定

512
00:27:49,803 --> 00:27:51,972
您拥有正确的私钥

513
00:27:51,972 --> 00:27:55,976
而不需要知道私钥是什么

514
00:27:55,976 --> 00:27:59,513
而且由于服务器不知道任何私钥

515
00:27:59,513 --> 00:28:02,015
因此对攻击者来说
这是一个价值较低的目标

516
00:28:02,015 --> 00:28:06,086
因为没有用户凭证可以泄露

517
00:28:06,086 --> 00:28:08,755
这些加密和通行密钥保护都是完全透明的

518
00:28:08,755 --> 00:28:13,193
并由设备执行

519
00:28:13,193 --> 00:28:17,297
您的客户不需要知道或思考通行密钥

520
00:28:17,297 --> 00:28:20,567
从他们的角度来看 通行密钥超级简单

521
00:28:20,567 --> 00:28:23,570
可以随时随地使用

522
00:28:23,570 --> 00:28:27,641
通行密钥也可用于跨设备登录

523
00:28:27,641 --> 00:28:30,711
以安全、防网络钓鱼的方式登录

524
00:28:30,711 --> 00:28:33,013
工作原理如下

525
00:28:33,013 --> 00:28:34,815
这里有两个设备

526
00:28:34,815 --> 00:28:37,651
客户端 也就是我登录的设备
或网页浏览器

527
00:28:37,651 --> 00:28:40,621
以及身份验证器

528
00:28:40,621 --> 00:28:44,291
也就是拥有我的通行密钥的设备

529
00:28:44,291 --> 00:28:46,894
首先 客户端显示一个二维码

530
00:28:46,894 --> 00:28:49,296
身份验证器扫描二维码

531
00:28:49,296 --> 00:28:51,798
此二维码包含一个 URL

532
00:28:51,798 --> 00:28:56,470
这个 URL 编码了
一对一次性使用的加密通行密钥

533
00:28:56,470 --> 00:29:00,240
然后 身份认证器生成一个包含

534
00:29:00,240 --> 00:29:04,444
网络中继服务器路由信息的蓝牙广告

535
00:29:04,444 --> 00:29:07,181
这种本地交换

536
00:29:07,181 --> 00:29:09,216
允许选择服务器和共享路由信息

537
00:29:09,216 --> 00:29:13,086
但也有两个额外的功能

538
00:29:13,086 --> 00:29:15,622
它执行一个服务器看不到的

539
00:29:15,622 --> 00:29:18,859
带外通行密钥协议 因此网络上的

540
00:29:18,859 --> 00:29:21,962
所有内容都是端到端加密的

541
00:29:21,962 --> 00:29:25,165
服务器无法读取任何内容

542
00:29:25,165 --> 00:29:27,701
它还有力地证明了

543
00:29:27,701 --> 00:29:31,538
这两种设备在物理上是接近的

544
00:29:31,538 --> 00:29:35,275
这意味着通过电子邮件发送的二维码

545
00:29:35,275 --> 00:29:39,513
或在虚假网站上生成的二维码
将无法工作

546
00:29:39,513 --> 00:29:42,716
因为远程攻击者将无法接收到

547
00:29:42,716 --> 00:29:47,054
蓝牙广告并完成本地交换

548
00:29:47,054 --> 00:29:49,122
以上就是本地部分

549
00:29:49,122 --> 00:29:52,459
一旦本地交换和通行密钥协议发生

550
00:29:52,459 --> 00:29:54,995
两台设备连接到由手机选择的

551
00:29:54,995 --> 00:29:57,030
中继服务器

552
00:29:57,030 --> 00:30:01,468
然后 执行一个标准的
FIDO CTAP 操作

553
00:30:01,468 --> 00:30:04,204
这是使用前面的通行密钥加密的

554
00:30:04,204 --> 00:30:07,541
所以中继服务器
看不到任何进行中的过程

555
00:30:09,409 --> 00:30:12,446
整个过程是由设备

556
00:30:12,446 --> 00:30:14,181
和网页浏览器执行的

557
00:30:14,181 --> 00:30:17,417
网站在任何时候都不涉及

558
00:30:17,417 --> 00:30:19,620
跨设备通信的过程

559
00:30:19,620 --> 00:30:23,657
跨设备跨平台登录是系统功能

560
00:30:23,657 --> 00:30:28,262
它可以在任何
能够使用通行密钥的平台工作

561
00:30:28,262 --> 00:30:31,665
以上我们更专业地了解了
通行密钥的工作原理

562
00:30:31,665 --> 00:30:35,035
通行密钥如何提供如此强大的安全保证

563
00:30:35,035 --> 00:30:37,104
甚至为何跨设备使用都如此安全

564
00:30:37,104 --> 00:30:40,707
接下来是多因素身份验证

565
00:30:40,707 --> 00:30:44,044
目前 考虑身份验证的一种常见方法

566
00:30:44,044 --> 00:30:46,413
是使用因素

567
00:30:46,413 --> 00:30:48,715
不同的因素

568
00:30:48,715 --> 00:30:51,084
对不同类型的攻击有强弱之分

569
00:30:51,084 --> 00:30:52,519
结合因素

570
00:30:52,519 --> 00:30:55,355
可以提供更好的集体覆盖率

571
00:30:55,355 --> 00:30:59,927
但是有了通行密钥
您就不需要这么考虑了

572
00:30:59,927 --> 00:31:02,029
以下是目前最常用的一些

573
00:31:02,029 --> 00:31:04,264
登录方法

574
00:31:04,264 --> 00:31:05,632
您光凭记忆设置的密码

575
00:31:05,632 --> 00:31:08,468
是很不可靠的

576
00:31:08,468 --> 00:31:09,803
密码管理器

577
00:31:09,803 --> 00:31:14,107
擅长生成独特的、高熵的字符串

578
00:31:14,107 --> 00:31:17,044
可能具有本地保护措施
防止设备被盗

579
00:31:17,044 --> 00:31:20,781
并提供一些关于网络钓鱼的提示

580
00:31:20,781 --> 00:31:23,717
添加短信或实时验证码

581
00:31:23,717 --> 00:31:27,154
在某些情况下
可以帮助防止盗窃或网络钓鱼

582
00:31:27,154 --> 00:31:29,790
但并不能真正解决这两个问题

583
00:31:29,790 --> 00:31:31,225
而有了通行密钥

584
00:31:31,225 --> 00:31:36,163
每个通行密钥都是唯一的
由设备生成的通行密钥对

585
00:31:36,163 --> 00:31:39,700
在 Apple 设备上
通行密钥是在本地设备保护的

586
00:31:39,700 --> 00:31:42,469
强大基础上设立的

587
00:31:42,469 --> 00:31:45,772
通行密钥还完全消除了

588
00:31:45,772 --> 00:31:48,075
网络钓鱼的人为因素

589
00:31:48,075 --> 00:31:51,445
并且通行密钥不会
被 App 或网站服务器泄露

590
00:31:51,445 --> 00:31:55,449
因为服务器没有私钥

591
00:31:55,449 --> 00:31:58,619
在基于密码的登录流程中
添加因素是有意义的

592
00:31:58,619 --> 00:32:01,655
因为与单独使用密码相比

593
00:32:01,655 --> 00:32:05,225
结合在一起可以抵御更多类型的攻击

594
00:32:05,225 --> 00:32:08,829
但单凭通行密钥就能抵御的东西太多了

595
00:32:08,829 --> 00:32:12,466
不需要额外的因素

596
00:32:12,466 --> 00:32:16,570
我很期待一个
不再需要密码的未来

597
00:32:16,570 --> 00:32:20,707
以下是您可以
开始实现这一目标的方法

598
00:32:20,707 --> 00:32:24,244
首先 如果还没有采用 WebAuthn

599
00:32:24,244 --> 00:32:26,713
您需要在服务器上采用它

600
00:32:26,713 --> 00:32:27,981
通行密钥应该可以用于

601
00:32:27,981 --> 00:32:32,519
任何标准的
WebAuthn 服务器的实施

602
00:32:32,519 --> 00:32:34,454
服务器准备就绪后

603
00:32:34,454 --> 00:32:38,225
在您的 App
和网站中采用我们的新 API

604
00:32:38,225 --> 00:32:41,195
自动填充辅助通行密钥请求可以

605
00:32:41,195 --> 00:32:44,531
直接放到您现有的登录流程中

606
00:32:44,531 --> 00:32:48,001
此外 如果您需要 我们还有一系列

607
00:32:48,001 --> 00:32:50,237
更高级的 UI 选项

608
00:32:50,237 --> 00:32:56,176
最后 帮助您的用户
从密码转移到通行密钥

609
00:32:56,176 --> 00:32:59,513
通行密钥是行业标准的解决方案

610
00:32:59,513 --> 00:33:01,715
它能解决安全登录 App 和

611
00:33:01,715 --> 00:33:05,786
网站的便利性和安全性等问题

612
00:33:05,786 --> 00:33:08,488
通过引导您的用户
使用通行密钥来替代密码

613
00:33:08,488 --> 00:33:11,458
您可以给用户带来

614
00:33:11,458 --> 00:33:15,329
非常快速和方便的登录体验

615
00:33:15,329 --> 00:33:18,498
同时为大家提高安全标准

616
00:33:18,498 --> 00:33:19,466
谢谢

617
00:33:19,466 --> 00:33:23,303
♪

