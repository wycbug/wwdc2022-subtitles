1
00:00:00,000 --> 00:00:03,070
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,070 --> 00:00:09,843
♪

3
00:00:09,843 --> 00:00:11,411
您好我叫 Mindy

4
00:00:11,411 --> 00:00:14,248
我是相册团队的工程师

5
00:00:14,248 --> 00:00:16,850
今天我将介绍
如何在您的 App 中

6
00:00:16,850 --> 00:00:20,754
获得图片变更的历史记录

7
00:00:20,754 --> 00:00:23,457
PhotoKit 提供了一组
丰富的 API

8
00:00:23,457 --> 00:00:27,828
用于对照片库中的照片、视频和相册

9
00:00:27,828 --> 00:00:29,930
进行访问和更新

10
00:00:29,930 --> 00:00:33,133
PhotoKit 是专为需要深层
访问和集成相册

11
00:00:33,133 --> 00:00:36,570
的 App 而设计的

12
00:00:36,570 --> 00:00:39,907
用于管理、编辑照片或自定义相机

13
00:00:39,907 --> 00:00:42,976
或构建让人们以独特的方式

14
00:00:42,976 --> 00:00:45,445
浏览照片库的 App

15
00:00:45,445 --> 00:00:48,315
这些类型的 App 可能需要监控

16
00:00:48,315 --> 00:00:50,717
照片库随时间变化情况

17
00:00:50,717 --> 00:00:54,354
以便于更加密切的反映相册的内容

18
00:00:54,354 --> 00:00:57,524
假设我创建了一个社交远足 App

19
00:00:57,524 --> 00:01:00,260
允许人们分享和编辑

20
00:01:00,260 --> 00:01:02,796
和朋友一起远足旅行的照片

21
00:01:02,796 --> 00:01:04,431
当有人启动 App 时

22
00:01:04,431 --> 00:01:07,868
该 App 通过
获取从旅行开始到结束的时间戳

23
00:01:07,868 --> 00:01:11,004
收集最近一次远足时的手机照片

24
00:01:11,004 --> 00:01:13,340
并把他们在山上远足经历
的生成拼贴画

25
00:01:13,340 --> 00:01:16,210
拼贴画与图片库中所选照片

26
00:01:16,210 --> 00:01:18,111
保持同步

27
00:01:18,111 --> 00:01:19,813
如果有人收到远足照片

28
00:01:19,813 --> 00:01:21,582
例如来自朋友的

29
00:01:21,582 --> 00:01:25,886
该 App 将使用
这些更新照片生成新的拼贴画

30
00:01:25,886 --> 00:01:28,255
到目前为止为了让 App 发现

31
00:01:28,255 --> 00:01:30,858
新插入的图片资产

32
00:01:30,858 --> 00:01:33,360
并对以前的远足拼贴画进行更改

33
00:01:33,360 --> 00:01:37,097
该 App 需要
执行一系列参数提取

34
00:01:37,097 --> 00:01:40,100
要确定插入了哪些图片资产

35
00:01:40,100 --> 00:01:41,635
该 App 需要能够获取
图片资产创建日期

36
00:01:41,635 --> 00:01:46,573
晚于 App
最后一次启动日期的资产

37
00:01:46,573 --> 00:01:50,511
确定资产更新和删除的日期比较棘手

38
00:01:50,511 --> 00:01:54,281
该 App 需要重新获取
每个拼贴中的每个图片资产

39
00:01:54,281 --> 00:01:56,350
并检查图片修改日期

40
00:01:56,350 --> 00:01:58,385
从而确定图片资产的更新时间

41
00:01:58,385 --> 00:02:00,320
但这可能会带来误报

42
00:02:00,320 --> 00:02:02,256
作为图片资产 图片的修改时间

43
00:02:02,256 --> 00:02:06,426
可以由相册的内部处理活动设置

44
00:02:06,426 --> 00:02:09,696
照片库中的删除更难追踪

45
00:02:09,696 --> 00:02:13,100
因为需要提取所有跟踪的资产

46
00:02:13,100 --> 00:02:16,170
并对未随提取返回的资产进行区分

47
00:02:16,170 --> 00:02:19,306
总的来说这意味着每次启动 App

48
00:02:19,306 --> 00:02:22,576
都需要做三个单独的检查

49
00:02:22,576 --> 00:02:24,578
如果 App 显示大量图片资产

50
00:02:24,578 --> 00:02:28,515
那么提取和计算开销会非常大

51
00:02:28,515 --> 00:02:31,118
而不是对不确定的结果

52
00:02:31,118 --> 00:02:32,986
进行不同的提取和检查

53
00:02:32,986 --> 00:02:35,856
如果有办法把确已发生的图片变化

54
00:02:35,856 --> 00:02:38,525
统一到一个
API 调用里会怎么样呢？

55
00:02:38,525 --> 00:02:42,529
好吧
我很高兴地告诉您我们已经做到了！

56
00:02:42,529 --> 00:02:46,099
新的变更历史 API
允许以更简单的方式

57
00:02:46,099 --> 00:02:50,437
跟踪照片库的离线更新

58
00:02:50,437 --> 00:02:53,574
变更历史由变更时间线组成

59
00:02:53,574 --> 00:02:55,976
例如插入、更新

60
00:02:55,976 --> 00:02:58,679
和删除照片库

61
00:02:58,679 --> 00:03:00,380
在这个时间线示例中

62
00:03:00,380 --> 00:03:04,184
过去三天
有各种资产、相簿和文件夹的更改

63
00:03:04,184 --> 00:03:07,921
保存于变更历史记录中

64
00:03:07,921 --> 00:03:10,657
使用此时间线您如何确定

65
00:03:10,657 --> 00:03:14,027
最近两天发生了哪些变化

66
00:03:14,027 --> 00:03:17,497
或者上一次您启动 App 的时间？

67
00:03:17,497 --> 00:03:20,534
您现在可以使用持久化更改令牌

68
00:03:20,534 --> 00:03:23,103
在给定的时间点

69
00:03:23,103 --> 00:03:25,672
表示照片库的状态

70
00:03:25,672 --> 00:03:29,476
此令牌可以
在 App 启动时持久化

71
00:03:29,476 --> 00:03:32,713
并且它可用于获取该令牌生成后

72
00:03:32,713 --> 00:03:34,815
照片库的更改

73
00:03:34,815 --> 00:03:37,551
包括第三方 App 的修改

74
00:03:37,551 --> 00:03:40,487
请注意如果您的应用处于受限库模式

75
00:03:40,487 --> 00:03:43,457
则只有更改
用户选择的 PhotoKit 对象

76
00:03:43,457 --> 00:03:45,459
会返回信息

77
00:03:45,459 --> 00:03:48,695
此更改令牌是设备本地的

78
00:03:48,695 --> 00:03:51,164
并且任何时候从
持久化更改或图片库实例访问

79
00:03:51,164 --> 00:03:55,435
开销都会更小

80
00:03:55,435 --> 00:03:58,238
这个新的 API
在以下任何平台上都可用

81
00:03:58,238 --> 00:04:06,313
支持 PhotoKit 的平台有
macOS、iOS、iPadOS 和 tvOS

82
00:04:06,313 --> 00:04:10,250
当您的 App
正在运行并使用照片库时

83
00:04:10,250 --> 00:04:14,855
您可以在 App 中
存储持久化更改令牌

84
00:04:14,855 --> 00:04:19,193
您可以使用该令牌来获取此后

85
00:04:19,193 --> 00:04:21,328
发生的照片库更改

86
00:04:21,328 --> 00:04:23,263
对于每一个持久化更改

87
00:04:23,263 --> 00:04:25,299
您可以对于三种类型的相册对象

88
00:04:25,299 --> 00:04:28,368
获取更改详细信息

89
00:04:28,368 --> 00:04:33,273
资产、资产集合和集合列表

90
00:04:33,273 --> 00:04:36,543
那么这在代码中是什么样的呢？

91
00:04:36,543 --> 00:04:39,446
首先 您需要使用
上次存储的更改令牌

92
00:04:39,446 --> 00:04:42,249
获取持久化更改

93
00:04:42,249 --> 00:04:45,586
接下来您需要枚举

94
00:04:45,586 --> 00:04:50,157
并获取更改对象更改详细信息——
在本例中

95
00:04:50,157 --> 00:04:53,160
每个持久化更改对象
都是“asset”型

96
00:04:53,160 --> 00:04:55,529
这些更改详细信息提供了

97
00:04:55,529 --> 00:04:59,633
自更改令牌以来 更新、删除

98
00:04:59,633 --> 00:05:01,702
和插入到照片库中的

99
00:05:01,702 --> 00:05:04,404
本地标识符的信息

100
00:05:04,404 --> 00:05:06,473
处理完这些改动后

101
00:05:06,473 --> 00:05:10,777
您可以存储最后一个更改令牌
以供将来使用

102
00:05:10,777 --> 00:05:14,681
让我们对比一下
新的持久化历史 API

103
00:05:14,681 --> 00:05:18,418
和现有的改变观察者 API

104
00:05:18,418 --> 00:05:22,256
PHChanges 处理活动的
内存中的获取结果

105
00:05:22,256 --> 00:05:25,692
并在您的 App 运行时

106
00:05:25,692 --> 00:05:28,328
用于记录照片库的实时更改

107
00:05:28,328 --> 00:05:30,430
另一方面 持久化历史记录

108
00:05:30,430 --> 00:05:33,567
记录了对照片库的长期更改

109
00:05:33,567 --> 00:05:35,469
并可用于报告

110
00:05:35,469 --> 00:05:38,572
App 不活动时的更改

111
00:05:38,572 --> 00:05:41,575
您可以根据您的 App 的需求

112
00:05:41,575 --> 00:05:45,212
同时使用这两种 API
或者任选其一

113
00:05:45,212 --> 00:05:47,381
回到远足应用示例

114
00:05:47,381 --> 00:05:50,384
我现在想使用持久化历史 API

115
00:05:50,384 --> 00:05:53,120
跟踪资产变化

116
00:05:53,120 --> 00:05:55,722
以便于创建和更新远足拼贴画

117
00:05:55,722 --> 00:05:59,459
首先我将使用最后存储的更改令牌

118
00:05:59,459 --> 00:06:02,062
并获取持久化更改

119
00:06:02,062 --> 00:06:05,566
接下来我将遍历持久化更改

120
00:06:05,566 --> 00:06:08,368
抓取相关资产的变更明细

121
00:06:08,368 --> 00:06:11,138
然后进行插入、更新操作

122
00:06:11,138 --> 00:06:13,807
并删除标识符

123
00:06:13,807 --> 00:06:16,910
现在我需要从变更历史中

124
00:06:16,910 --> 00:06:19,713
识别出影响 App 的图片库更改

125
00:06:19,713 --> 00:06:22,182
因为 App 不需要获取

126
00:06:22,182 --> 00:06:25,519
更改返回的所有信息

127
00:06:25,519 --> 00:06:28,188
对 App 来说

128
00:06:28,188 --> 00:06:32,826
了解哪一个远足图片资产
已加入到图片库

129
00:06:32,826 --> 00:06:34,995
以及哪些被更新和删除的资产

130
00:06:34,995 --> 00:06:38,599
在以前的远足拼贴画中引用过很重要

131
00:06:38,599 --> 00:06:40,734
我已经通过持久化更改
生成了三个枚举定义

132
00:06:40,734 --> 00:06:44,872
插入、更新和删除资产的

133
00:06:44,872 --> 00:06:47,708
本地标识符

134
00:06:47,708 --> 00:06:51,345
我现在如何更新 App
以反映这些状态？

135
00:06:51,345 --> 00:06:53,981
使用插入标识符集

136
00:06:53,981 --> 00:06:56,416
我可以通过获取
每次远足的开始和结束日期

137
00:06:56,416 --> 00:07:00,621
通过远足图片资产的插入时间戳

138
00:07:00,621 --> 00:07:02,656
和他们的创建时间

139
00:07:02,656 --> 00:07:08,128
来确定添加了哪些资产

140
00:07:08,128 --> 00:07:11,632
更新后的资产可能会进行调整

141
00:07:11,632 --> 00:07:15,002
所以我可以使用新的
hasAdjustments API

142
00:07:15,002 --> 00:07:20,908
检查我是否需要
在 UI 中重绘资产

143
00:07:20,908 --> 00:07:23,844
我可以使用已删除资产的本地标识符

144
00:07:23,844 --> 00:07:27,748
以确定哪些拼贴画需要重新生成

145
00:07:27,748 --> 00:07:31,785
现在我已经处理了
所有离线照片库的更改

146
00:07:31,785 --> 00:07:36,056
并且我的 App 的内容是最新的

147
00:07:36,056 --> 00:07:38,525
以下是当您使用
新的变更历史 API 时

148
00:07:38,525 --> 00:07:42,496
应该记住的几件事

149
00:07:42,496 --> 00:07:45,499
首先确定哪些更改对您

150
00:07:45,499 --> 00:07:49,269
和您的 App 很重要
并且只检查这些更改

151
00:07:49,269 --> 00:07:51,905
考虑执行一个

152
00:07:51,905 --> 00:07:54,474
更新和插入资产的大型获取请求
以提高性能

153
00:07:54,474 --> 00:07:59,580
而不是用多个较小的请求

154
00:07:59,580 --> 00:08:02,549
照片库的内容可能会因处理

155
00:08:02,549 --> 00:08:05,219
和后台同步活动而发生很大变化

156
00:08:05,219 --> 00:08:07,020
所以您最终可能会在

157
00:08:07,020 --> 00:08:08,789
大量变化中进行枚举

158
00:08:08,789 --> 00:08:12,159
尤其是当您的 App 不经常启动

159
00:08:12,159 --> 00:08:14,394
正因为如此我们推荐您

160
00:08:14,394 --> 00:08:17,731
在后台线程上请求更改历史记录

161
00:08:17,731 --> 00:08:20,734
以避免阻塞 UI

162
00:08:20,734 --> 00:08:22,803
在获取持久化历史记录时

163
00:08:22,803 --> 00:08:25,572
可能发生两种类型的错误

164
00:08:25,572 --> 00:08:26,607
如果更改令牌

165
00:08:26,607 --> 00:08:29,543
比更改的可用历史记录更早

166
00:08:29,543 --> 00:08:33,514
将返回更改令牌过期的报错

167
00:08:33,514 --> 00:08:35,716
在某些情况下持久化更改

168
00:08:35,716 --> 00:08:38,685
不能依赖于完全重建

169
00:08:38,685 --> 00:08:40,420
所发生的更改

170
00:08:40,420 --> 00:08:44,958
并将返回更改详细信息不可用的报错

171
00:08:44,958 --> 00:08:47,761
在这些情况下我们建议

172
00:08:47,761 --> 00:08:51,031
重新获取照片库中的跟踪对象

173
00:08:51,031 --> 00:08:54,234
以确保您的应用的内容是最新的

174
00:08:54,234 --> 00:08:56,670
在我们结束之前
还有一些我想与您分享

175
00:08:56,670 --> 00:09:01,041
新的 PhotoKit API 的内容

176
00:09:01,041 --> 00:09:04,411
PhotoKit 现在
支持按媒体子类型

177
00:09:04,411 --> 00:09:08,182
和智能相册访问电影视频

178
00:09:08,182 --> 00:09:11,585
还有两个新的错误代码

179
00:09:11,585 --> 00:09:13,020
如果照片库绑定
在 macOS 系统的

180
00:09:13,020 --> 00:09:17,124
File Provider 同步根目录下

181
00:09:17,124 --> 00:09:19,092
图片库可能会损坏

182
00:09:19,092 --> 00:09:23,564
尝试执行更改时将返回错误

183
00:09:23,564 --> 00:09:25,732
如果由于网络问题

184
00:09:25,732 --> 00:09:27,434
找不到资产资源

185
00:09:27,434 --> 00:09:31,171
资源请求将返回网络错误的报错

186
00:09:31,171 --> 00:09:33,106
请在开发者文档查看

187
00:09:33,106 --> 00:09:35,409
所有最新的更新

188
00:09:35,409 --> 00:09:38,545
最后一定要在相册选取器中

189
00:09:38,545 --> 00:09:39,813
看看今年的会议

190
00:09:39,813 --> 00:09:44,585
因为它是使用和访问
相册的最简单方法

191
00:09:44,585 --> 00:09:48,322
我们很高兴您能
使用新的变更历史 API

192
00:09:48,322 --> 00:09:51,291
以及 PhotoKit 中
所有出色的新功能

193
00:09:51,291 --> 00:09:52,993
谢谢！

194
00:09:52,993 --> 00:09:57,397
♪

