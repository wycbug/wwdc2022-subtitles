1
00:00:00,033 --> 00:00:03,036
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,036 --> 00:00:09,443
♪

3
00:00:09,443 --> 00:00:13,981
大家好 我是 Jared Marsau
在 Apple 游戏技术部门工作

4
00:00:13,981 --> 00:00:16,416
今天 我会和大家聊聊如何使用

5
00:00:16,416 --> 00:00:19,186
一些精选 Apple 框架
为基于 Unity 开发的游戏

6
00:00:19,186 --> 00:00:21,655
添加新特性

7
00:00:21,655 --> 00:00:25,526
据我们所知 有许多开发者
在使用诸如 Unity 之类的工具

8
00:00:25,526 --> 00:00:27,427
来构建游戏

9
00:00:27,427 --> 00:00:29,696
我们的目标是为您带来最新的功能

10
00:00:29,696 --> 00:00:32,165
无论您用的是哪一种工具

11
00:00:32,165 --> 00:00:34,334
从今天开始
您可以使用一组新的 Unity 插件

12
00:00:34,334 --> 00:00:37,237
来增强您的游戏

13
00:00:37,237 --> 00:00:39,940
使用 Game Center 插件
来添加 GameKit 功能 比如：

14
00:00:39,940 --> 00:00:43,710
玩家身份验证 排行榜 和游戏配对

15
00:00:43,710 --> 00:00:46,613
使用 Game Controller 插件
来自定义输入和图标

16
00:00:46,613 --> 00:00:51,385
进而获得支持 MFi 和第三方控制器的能力

17
00:00:51,385 --> 00:00:54,321
使用 Accessibility 插件
来改善辅助功能使用

18
00:00:54,321 --> 00:00:58,659
调动起 旁白 和 动态字体 等系统特性

19
00:00:58,659 --> 00:01:02,429
如要集成 Apple 由数据驱动的
完善的触觉反馈系统

20
00:01:02,429 --> 00:01:04,965
可以使用 Core Haptics 插件

21
00:01:04,965 --> 00:01:07,634
如要添加先进的几何感知空间音频

22
00:01:07,634 --> 00:01:09,203
可以使用 PHASE 插件

23
00:01:09,203 --> 00:01:12,873
最后 使用 Apple.Core 插件
管理构建设置

24
00:01:12,873 --> 00:01:16,577
简化构建流程

25
00:01:16,577 --> 00:01:18,745
这一组插件初始套装能帮您

26
00:01:18,745 --> 00:01:22,282
添加新游戏玩法机制
让您的游戏更加无障碍

27
00:01:22,282 --> 00:01:24,151
还能助您更快地

28
00:01:24,151 --> 00:01:27,054
利用上最新的功能和服务

29
00:01:27,054 --> 00:01:29,423
我已经迫不及待地想要看看大家会用

30
00:01:29,423 --> 00:01:32,593
这一组新的 Unity 插件
做出多么棒的游戏了

31
00:01:32,593 --> 00:01:35,662
现在
让我们来详细了解一下这个项目

32
00:01:35,662 --> 00:01:38,966
首先
我们会讨论这个项目的设计原则

33
00:01:38,966 --> 00:01:42,169
然后 我会介绍项目概念和组织

34
00:01:42,169 --> 00:01:44,505
接下来 我会讲一些

35
00:01:44,505 --> 00:01:47,140
关于与项目库交互的关键点

36
00:01:47,140 --> 00:01:50,544
最后 我会详细介绍一下各个插件

37
00:01:50,544 --> 00:01:52,279
您可能已经知道

38
00:01:52,279 --> 00:01:56,450
Apple 框架
是用模块化的方式封装各种功能的

39
00:01:56,450 --> 00:01:58,819
这种方式能让您
为 App 挑选正确的技术

40
00:01:58,819 --> 00:02:03,290
同时还保持代码的简洁和高效

41
00:02:03,290 --> 00:02:06,894
在 Unity 插件中
我们遵循类似的模式

42
00:02:06,894 --> 00:02:10,163
每个插件
都映射到一个单一的底层框架

43
00:02:10,163 --> 00:02:12,332
这样您就可以根据游戏的需要

44
00:02:12,332 --> 00:02:15,669
挑选所需的插件组合

45
00:02:15,669 --> 00:02:19,373
每个插件都包含
Unity 所需的 C# 脚本

46
00:02:19,373 --> 00:02:21,275
该脚本尽可能地直接映射

47
00:02:21,275 --> 00:02:23,443
到底层框架

48
00:02:23,443 --> 00:02:26,580
这种方法意味着
您面对底层框架的经验

49
00:02:26,580 --> 00:02:29,950
可以直接继承到插件的使用上

50
00:02:29,950 --> 00:02:33,187
在很多情况下
框架 API 以及基本概念

51
00:02:33,187 --> 00:02:35,022
都可以无缝过渡

52
00:02:35,022 --> 00:02:38,525
反过来说 通过学习这些插件

53
00:02:38,525 --> 00:02:42,162
您也会在潜移默化中
学习底层框架

54
00:02:42,162 --> 00:02:44,598
另一个重要的细节是
这些插件

55
00:02:44,598 --> 00:02:48,202
都是作为
Apple 平台原生库开发的

56
00:02:48,202 --> 00:02:51,638
这些库
像胶水一样连接着 C# 脚本

57
00:02:51,638 --> 00:02:55,242
和底层框架 API

58
00:02:55,242 --> 00:02:59,346
Apple Unity 插件
是以 Unity 资源包的形式组织的

59
00:02:59,346 --> 00:03:02,082
因此使用 Unity 编辑器的
内置 Package Manager

60
00:03:02,082 --> 00:03:05,953
就可以管理它们与您的项目的集成

61
00:03:05,953 --> 00:03:09,356
在某些情况下 插件还会包含

62
00:03:09,356 --> 00:03:12,793
编辑器的扩展功能
让开发工作更加轻松

63
00:03:12,793 --> 00:03:15,629
并且与您已经熟练掌握的
基于 Inspector 的

64
00:03:15,629 --> 00:03:18,265
Unity 工作流程保持一致

65
00:03:18,265 --> 00:03:21,702
当然 每个插件
还附带有详细的自述文件

66
00:03:21,702 --> 00:03:25,038
示例 以及额外资源的链接

67
00:03:25,038 --> 00:03:28,842
比如相关的
Apple Developer 文档

68
00:03:28,842 --> 00:03:32,412
接下来
我会简要讲解一些关键工作流程概念

69
00:03:32,412 --> 00:03:35,315
以帮助您入门

70
00:03:35,315 --> 00:03:38,652
第一步是
克隆 GitHub 上的源代码

71
00:03:38,652 --> 00:03:42,456
在那里您可以找到
所有的项目源代码和文档

72
00:03:42,456 --> 00:03:44,758
这是每个人使用

73
00:03:44,758 --> 00:03:47,261
Apple Unity 插件的第一步

74
00:03:47,261 --> 00:03:48,962
克隆了代码库之后

75
00:03:48,962 --> 00:03:52,299
您的首要任务之一就是构建插件

76
00:03:52,299 --> 00:03:55,135
为了简化这个流程 代码库中包含了

77
00:03:55,135 --> 00:03:59,806
一个 Python 脚本
存放在库根目录下：build.py

78
00:03:59,806 --> 00:04:02,176
这个脚本会构建原生库

79
00:04:02,176 --> 00:04:04,511
把它们复制到正确的位置

80
00:04:04,511 --> 00:04:08,081
更新 Unity 元文件 打包插件

81
00:04:08,081 --> 00:04:10,250
以及构建插件测试

82
00:04:10,250 --> 00:04:13,353
这个插件是这样组织的：
用最简单的调用

83
00:04:13,353 --> 00:04:17,090
构建所有插件
把它们打包成 tar 包

84
00:04:17,090 --> 00:04:18,959
并保存到 Build 文件夹中

85
00:04:18,959 --> 00:04:22,729
准备妥当
等待集成入您的 Unity 项目

86
00:04:22,729 --> 00:04:25,666
请注意 完整构建和打包这些插件很重要

87
00:04:25,666 --> 00:04:32,239
需要 Xcode
Python3 npm 以及 Unity

88
00:04:32,239 --> 00:04:34,241
最后 在项目库中 我们还有

89
00:04:34,241 --> 00:04:38,879
关于使用 build.py 的详细文档

90
00:04:38,879 --> 00:04:40,614
现在是时候让我们深入

91
00:04:40,614 --> 00:04:42,549
这些插件的细节了

92
00:04:42,549 --> 00:04:44,718
我会讲解如何把各个插件

93
00:04:44,718 --> 00:04:49,056
加入到您的 Unity 项目中
简要介绍一下它们包含的功能

94
00:04:49,056 --> 00:04:51,825
关键脚本概念 以及一些代码片段

95
00:04:51,825 --> 00:04:54,061
或是 Unity 编辑器中的示例

96
00:04:54,061 --> 00:04:57,798
主要着眼于
如何把它们集成入您的项目

97
00:04:57,798 --> 00:05:00,000
让我们从最基础的插件开始

98
00:05:00,000 --> 00:05:01,768
Apple.Core

99
00:05:01,768 --> 00:05:04,838
Apple.Core
把各个插件的构建设置统一到

100
00:05:04,838 --> 00:05:09,276
Unity 项目设置窗口中
的单个偏好设置面板上

101
00:05:09,276 --> 00:05:12,412
因为您编译了各个插件的原生库

102
00:05:12,412 --> 00:05:15,215
Apple.Core
进而包含了一个资源处理器

103
00:05:15,215 --> 00:05:17,885
它确保每个插件库在导入时

104
00:05:17,885 --> 00:05:21,021
都会根据相应平台配置好

105
00:05:21,021 --> 00:05:24,024
当构建您的项目时
Apple.Core 还包含了

106
00:05:24,024 --> 00:05:26,660
用于后处理项目的脚本

107
00:05:26,660 --> 00:05:29,696
以确保正确引用了这些原生库

108
00:05:29,696 --> 00:05:32,399
尤其是在您的 Xcode 中间项目

109
00:05:32,399 --> 00:05:35,669
由于每个插件都与一个底层框架互动

110
00:05:35,669 --> 00:05:37,104
Apple.Core 还定义了

111
00:05:37,104 --> 00:05:40,707
一些运行时交互操作类型
以简化 C# 脚本

112
00:05:40,707 --> 00:05:44,311
和原生代码层之间的数据传递

113
00:05:44,311 --> 00:05:46,647
最后 Apple.Core

114
00:05:46,647 --> 00:05:49,516
是所有其他
Apple Unity 插件的依赖项

115
00:05:49,516 --> 00:05:51,585
也就是它应该优先导入您的项目

116
00:05:51,585 --> 00:05:55,889
一定要早于其它插件

117
00:05:55,889 --> 00:05:57,925
在这个演示中 我会展示

118
00:05:57,925 --> 00:06:00,460
如何把 Apple.Core 插件
导入一个新项目

119
00:06:00,460 --> 00:06:04,965
并简单介绍一下
Apple 构建设置的偏好设置

120
00:06:04,965 --> 00:06:07,467
一旦插件构建和打包完成

121
00:06:07,467 --> 00:06:11,738
就可以用 Unity Package Manager
导入 Apple.Core

122
00:06:11,738 --> 00:06:14,708
只需选择
“Add package from tarball…” 选项

123
00:06:14,708 --> 00:06:17,978
并找到打包好的插件

124
00:06:23,183 --> 00:06:26,920
编辑器就会
加载这个包并编译脚本

125
00:06:26,920 --> 00:06:31,391
完成之后
Apple.Core 就可以用了

126
00:06:34,761 --> 00:06:37,264
Apple.Core
主要的面向用户的功能

127
00:06:37,264 --> 00:06:39,633
是在编辑器的项目设置窗口中

128
00:06:39,633 --> 00:06:43,537
新增的 Apple 构建设置选项卡

129
00:06:46,540 --> 00:06:49,009
导入一个
Apple Unity 插件之后

130
00:06:49,009 --> 00:06:52,613
它所有的
可用构建选项都会出现在这里

131
00:06:52,613 --> 00:06:53,780
无需额外设置 开箱即用

132
00:06:53,780 --> 00:06:56,783
Apple.Core
有一些默认的配置选项

133
00:06:56,783 --> 00:07:00,754
比如支持的最低 OS 版本

134
00:07:00,754 --> 00:07:03,156
请注意 您还可以禁用

135
00:07:03,156 --> 00:07:07,127
任何插件构建的后处理步骤

136
00:07:10,531 --> 00:07:13,467
最后 您可以配置常用的安全设置

137
00:07:13,467 --> 00:07:18,438
它会应用至
您的中间 Xcode 项目中

138
00:07:18,438 --> 00:07:21,108
使用 Game Center 插件
来为您的游戏

139
00:07:21,108 --> 00:07:23,844
带来更多趣味和互动

140
00:07:23,844 --> 00:07:26,413
Game Center
是 Apple 的游戏社交网络

141
00:07:26,413 --> 00:07:29,016
Game Center 能让玩家在 Apple 平台上

142
00:07:29,016 --> 00:07:32,085
建立自己的身份
并启用很多功能 比如：

143
00:07:32,085 --> 00:07:35,822
安全可靠的玩家身份验证
游戏内成就系统

144
00:07:35,822 --> 00:07:39,560
共享的排行榜 玩家之间发送挑战

145
00:07:39,560 --> 00:07:41,995
以及多人游戏匹配

146
00:07:41,995 --> 00:07:44,331
您可以选择
把哪些 Game Center 功能

147
00:07:44,331 --> 00:07:45,999
集成入您的游戏中

148
00:07:45,999 --> 00:07:49,203
但一切都从玩家身份验证开始

149
00:07:49,203 --> 00:07:51,672
把 Game Center
玩家身份验证加入您的游戏

150
00:07:51,672 --> 00:07:53,841
Game Center 小组件
就可以在玩家的主屏幕

151
00:07:53,841 --> 00:07:57,978
或是 App Store 中
展示您的游戏

152
00:07:57,978 --> 00:07:59,813
而且 只需要很少的编程工作

153
00:07:59,813 --> 00:08:02,182
就可以添加玩家身份验证

154
00:08:02,182 --> 00:08:04,618
第一步是把 Apple.Core

155
00:08:04,618 --> 00:08:06,787
和 GameKit 插件
添加到您的项目中

156
00:08:06,787 --> 00:08:10,457
GameKit 插件
会连接到 Game Center 服务

157
00:08:10,457 --> 00:08:13,594
进行身份验证时
它会连接到 Game Center 服务

158
00:08:13,594 --> 00:08:16,964
并初始化
一个 GKLocalPlayer 对象

159
00:08:16,964 --> 00:08:19,733
初始化完成之后
开始根据本地玩家资料

160
00:08:19,733 --> 00:08:22,336
询问玩家限制情况

161
00:08:22,336 --> 00:08:26,139
包括限制未成年玩家

162
00:08:26,139 --> 00:08:29,343
访问成人或露骨内容

163
00:08:29,343 --> 00:08:32,079
限制使用多人游戏功能

164
00:08:32,079 --> 00:08:34,815
或禁用游戏内交流

165
00:08:34,815 --> 00:08:37,684
管理 GKLocalPlayer 以及

166
00:08:37,684 --> 00:08:40,153
它与 Game Center 服务
交互的一个简单方法是：

167
00:08:40,153 --> 00:08:43,190
在 Unity 中定义一个组件

168
00:08:43,190 --> 00:08:44,391
比如

169
00:08:44,391 --> 00:08:47,661
这是一个简单的
Game Manager 组件定义

170
00:08:47,661 --> 00:08:50,864
这个组件引用了
一个 GKLocalPlayer

171
00:08:50,864 --> 00:08:53,567
它还在 Start 方法中

172
00:08:53,567 --> 00:08:56,003
处理身份验证并询问玩家限制情况

173
00:08:56,003 --> 00:08:58,605
玩家身份验证在游戏生命周期内

174
00:08:58,605 --> 00:09:01,074
只需要发生一次

175
00:09:01,074 --> 00:09:04,211
这就是这个
GameManager 组件的脚本

176
00:09:04,211 --> 00:09:07,214
这是缓存 GKLocalPlayer 的字段

177
00:09:07,214 --> 00:09:09,316
在组件的 Start 方法中

178
00:09:09,316 --> 00:09:12,986
有对 GKLocalPlayer.Authenticate
的单次调用

179
00:09:12,986 --> 00:09:17,124
这是一种返回
GKLocalPlayer 实例的静态方法

180
00:09:17,124 --> 00:09:19,927
成功验证本地玩家的身份后

181
00:09:19,927 --> 00:09:22,963
就该检查玩家的限制情况了

182
00:09:22,963 --> 00:09:24,798
在代码中 检查玩家限制情况

183
00:09:24,798 --> 00:09:27,734
体现为一系列的 Bool 检查

184
00:09:27,734 --> 00:09:31,572
可以添加到 GameManager
组件脚本中的 try 代码块中

185
00:09:31,572 --> 00:09:33,774
此处 True 意味着应该

186
00:09:33,774 --> 00:09:36,276
限制本地玩家访问露骨内容

187
00:09:36,276 --> 00:09:38,045
此处 True 意味着

188
00:09:38,045 --> 00:09:40,848
应该限制本地玩家参与多人游戏

189
00:09:40,848 --> 00:09:43,951
最后 此处 True 意味着

190
00:09:43,951 --> 00:09:46,320
应该禁用游戏内交流

191
00:09:46,320 --> 00:09:48,455
这就是在您的游戏中添加

192
00:09:48,455 --> 00:09:51,325
玩家身份验证要更改的所有代码了

193
00:09:51,325 --> 00:09:54,328
接下来 还需要两个额外步骤

194
00:09:54,328 --> 00:09:58,632
以使您的游戏
充分利用 Game Center 的优势

195
00:09:58,632 --> 00:10:01,535
首先 您需要把
Game Center 功能

196
00:10:01,535 --> 00:10:04,304
添加到您的中间 Xcode 项目中

197
00:10:04,304 --> 00:10:07,441
这使用 Xcode 项目 UI 即可完成

198
00:10:07,441 --> 00:10:09,176
更多信息请查看

199
00:10:09,176 --> 00:10:11,645
Apple Developer 文档文章

200
00:10:11,645 --> 00:10:14,882
“Enabling and Configuring
Game Center”

201
00:10:14,882 --> 00:10:17,818
接下来 您需要使用
App Store Connect

202
00:10:17,818 --> 00:10:20,020
把 Game Center 功能
加入到您的 App 中

203
00:10:20,020 --> 00:10:23,924
更多信息请查看
App Store Connect 网页

204
00:10:23,924 --> 00:10:26,627
完成这些步骤后
您就可以进行玩家身份验证

205
00:10:26,627 --> 00:10:30,197
并确保一个安全的游戏环境了

206
00:10:30,197 --> 00:10:33,300
玩家身份验证只是
Game Center Unity 插件

207
00:10:33,300 --> 00:10:34,902
所提供的功能的

208
00:10:34,902 --> 00:10:37,538
很小一部分

209
00:10:37,538 --> 00:10:40,641
要学习如何提高您的游戏的曝光量

210
00:10:40,641 --> 00:10:42,142
请查看

211
00:10:42,142 --> 00:10:45,345
“Reach new players
with Game Center dashboard”讲座

212
00:10:45,345 --> 00:10:47,981
要学习更多
关于多人游戏和匹配的内容

213
00:10:47,981 --> 00:10:52,486
请观看去年
“What’s new in Game Center” 讲座

214
00:10:52,486 --> 00:10:56,123
控制器(主要是游戏手柄)
是玩家与

215
00:10:56,123 --> 00:10:58,425
您创造的游戏世界
交互的主要途径

216
00:10:58,425 --> 00:11:02,062
Game Controller 插件
可以轻松为您的游戏

217
00:11:02,062 --> 00:11:04,998
带来灵活可靠的游戏控制器支持

218
00:11:04,998 --> 00:11:08,068
Game Controller 插件
有相当多的功能

219
00:11:08,068 --> 00:11:11,138
比如支持游戏控制器自定义

220
00:11:11,138 --> 00:11:13,106
这个功能让玩家可以在一个地方

221
00:11:13,106 --> 00:11:15,843
为所有游戏重新映射按键

222
00:11:15,843 --> 00:11:19,713
按键图标功能
能保证连贯一致的用户体验

223
00:11:19,713 --> 00:11:22,115
还有对所有 MFi 控制器

224
00:11:22,115 --> 00:11:23,784
以及第三方控制器的支持

225
00:11:23,784 --> 00:11:27,354
比如一部分索尼和微软的控制器

226
00:11:27,354 --> 00:11:29,022
只需和其它插件一样

227
00:11:29,022 --> 00:11:31,325
使用 Package Manager
把 Apple.Core

228
00:11:31,325 --> 00:11:34,228
和 Game Controller 插件
添加到您的项目中

229
00:11:34,228 --> 00:11:36,196
载入 Game Controller 插件后

230
00:11:36,196 --> 00:11:40,501
第一步就是初始化
GCControllerService

231
00:11:40,501 --> 00:11:43,403
我们接下来就会看到 这个服务

232
00:11:43,403 --> 00:11:46,473
如何访问
控制器和它们的连接事件

233
00:11:46,473 --> 00:11:49,209
初始化完成后
向 GCControllerService 询问

234
00:11:49,209 --> 00:11:52,546
连接到系统的所有控制器情况

235
00:11:52,546 --> 00:11:54,581
已连接的控制器会作为

236
00:11:54,581 --> 00:11:58,919
GCController 对象
表示在 Game Controller 插件中

237
00:11:58,919 --> 00:12:01,388
向每个已连接的 GCController

238
00:12:01,388 --> 00:12:03,757
轮询控制器更新状态

239
00:12:03,757 --> 00:12:06,660
轮询频率或高或低
主要根据您的游戏的需要

240
00:12:06,660 --> 00:12:08,862
但 Unity 的定期更新循环

241
00:12:08,862 --> 00:12:11,632
是一个比较好的起始点

242
00:12:11,632 --> 00:12:13,667
一旦控制器状态更新之后

243
00:12:13,667 --> 00:12:15,969
会开始测试各控制器上的

244
00:12:15,969 --> 00:12:19,406
单独输入元素 比如按键 摇杆

245
00:12:19,406 --> 00:12:20,908
等等

246
00:12:20,908 --> 00:12:23,410
别忘了 在您的游戏生命周期内

247
00:12:23,410 --> 00:12:26,513
玩家可能会添加或移除控制器

248
00:12:26,513 --> 00:12:30,050
您可以注册回调函数
来管理控制器连接与断开事件

249
00:12:30,050 --> 00:12:32,619
有个简单的方法可以用于
集成 Game Controller 插件

250
00:12:32,619 --> 00:12:36,557
就是创建一个简单的输入管理组件

251
00:12:36,557 --> 00:12:39,293
该组件有三个关键元素：

252
00:12:39,293 --> 00:12:40,794
一个容器

253
00:12:40,794 --> 00:12:43,697
其中包含了所有当前连接的控制器

254
00:12:43,697 --> 00:12:46,066
一个 Start 方法 用于初始化

255
00:12:46,066 --> 00:12:48,268
还有一个 Update 方法 用于处理

256
00:12:48,268 --> 00:12:50,637
对输入信号的轮询和测试

257
00:12:50,637 --> 00:12:53,941
首先 让我们来看看 Start 方法

258
00:12:53,941 --> 00:12:56,476
这里可以很方便的布置所有必要的

259
00:12:56,476 --> 00:12:58,912
一次性设置任务

260
00:12:58,912 --> 00:13:01,315
游戏控制器服务的初始化

261
00:13:01,315 --> 00:13:02,749
就应该在这里进行

262
00:13:02,749 --> 00:13:05,986
还有已连接控制器的初始检查

263
00:13:05,986 --> 00:13:07,888
以及为连接和断开事件

264
00:13:07,888 --> 00:13:11,124
注册的回调函数

265
00:13:11,124 --> 00:13:14,494
这是输入管理组件的脚本

266
00:13:14,494 --> 00:13:16,063
所以的一次性设置代码

267
00:13:16,063 --> 00:13:19,700
都在组件的 Start 方法里
包括调用了一次

268
00:13:19,700 --> 00:13:23,370
GCControllerService.Initialize()

269
00:13:23,370 --> 00:13:26,640
调用 GetConnectedControllers
会得到一个可枚举的容器

270
00:13:26,640 --> 00:13:30,177
其中包含了所有当前连接的控制器

271
00:13:30,177 --> 00:13:33,447
初始化的最后一步是注册回调函数

272
00:13:33,447 --> 00:13:37,551
用于处理控制器连接和断开事件

273
00:13:37,551 --> 00:13:39,887
初始化完成之后

274
00:13:39,887 --> 00:13:42,723
输入管理器还需要一个 Update 方法

275
00:13:42,723 --> 00:13:45,158
主要是为了轮询各已连接的控制器

276
00:13:45,158 --> 00:13:48,095
以更新输入状态

277
00:13:48,095 --> 00:13:50,831
并处理各控制器输入信号的状态

278
00:13:50,831 --> 00:13:53,066
要轮询输入信号 首先

279
00:13:53,066 --> 00:13:55,602
对已连接的控制器进行迭代

280
00:13:55,602 --> 00:13:57,771
调用 GCController 的轮询方法

281
00:13:57,771 --> 00:13:59,740
来收集最新状态

282
00:13:59,740 --> 00:14:05,012
然后检查各个按键状态
并给出相应的响应

283
00:14:05,012 --> 00:14:08,348
我简单介绍了一下如何使用
Game Controller 插件

284
00:14:08,348 --> 00:14:12,786
来访问连接的控制器
并获取输入信号

285
00:14:12,786 --> 00:14:15,989
要获取更多关于
Game Controller 框架的细节

286
00:14:15,989 --> 00:14:18,725
了解第三方控制器

287
00:14:18,725 --> 00:14:22,796
和非标准输入方式等主题
请查看往年的讲座：

288
00:14:22,796 --> 00:14:24,531
“Supporting New Game Controllers”

289
00:14:24,531 --> 00:14:27,334
以及“Advancements
in Game Controllers”

290
00:14:27,334 --> 00:14:30,838
辅助功能是让技术触手可及

291
00:14:30,838 --> 00:14:32,639
进而造福所有人

292
00:14:32,639 --> 00:14:36,176
Accessibility 插件可以将

293
00:14:36,176 --> 00:14:38,478
Apple 丰富的辅助技术

294
00:14:38,478 --> 00:14:41,248
集成到您的 Unity 游戏中

295
00:14:41,248 --> 00:14:43,750
Accessibility 插件可以让您

296
00:14:43,750 --> 00:14:46,520
添加许多关键功能
比如 旁白（VoiceOver）

297
00:14:46,520 --> 00:14:50,190
这个功能可以把以编程方式
标记的内容读给您的用户听

298
00:14:50,190 --> 00:14:51,358
切换控制功能（Switch Control）

299
00:14:51,358 --> 00:14:54,795
允许用户使用多种辅助输入设备

300
00:14:54,795 --> 00:14:57,798
动态字体（Dynamic Type）
可以随用户所需

301
00:14:57,798 --> 00:15:00,868
轻松缩放游戏内文本和 UI

302
00:15:00,868 --> 00:15:03,737
以及 UI 适应性设置选项（UI Accommodation）

303
00:15:03,737 --> 00:15:07,274
用来同步系统层级的
辅助功能偏好设置

304
00:15:07,274 --> 00:15:09,877
关于 Accessibility
插件还有许多内容可以深入探讨

305
00:15:09,877 --> 00:15:11,879
您可以查看讲座

306
00:15:11,879 --> 00:15:14,781
“Add accessibility to your Unity games”

307
00:15:14,781 --> 00:15:18,685
获得更多关于
Accessibility Unity 插件的知识

308
00:15:18,685 --> 00:15:21,922
这个讲座中不仅有示例和应用实例

309
00:15:21,922 --> 00:15:23,757
还能帮助您理解

310
00:15:23,757 --> 00:15:26,159
Apple 平台上的辅助功能

311
00:15:26,159 --> 00:15:28,262
可以做到些什么

312
00:15:28,262 --> 00:15:32,332
有机会的话请务必看看那个讲座

313
00:15:32,332 --> 00:15:34,801
在您的游戏中添加触觉反馈

314
00:15:34,801 --> 00:15:38,672
能够大幅增强沉浸感 提高游戏体验

315
00:15:38,672 --> 00:15:41,408
Core Haptics 插件
可以将 Apple 的

316
00:15:41,408 --> 00:15:43,810
先进的触觉功能集成入您的游戏中

317
00:15:43,810 --> 00:15:47,080
Core Haptics 插件
可以用一组触觉和声音事件

318
00:15:47,080 --> 00:15:49,917
构建自定义的触觉模式

319
00:15:49,917 --> 00:15:52,886
播放同步好的自定义声音和触觉

320
00:15:52,886 --> 00:15:55,956
通过编程实时调整参数

321
00:15:55,956 --> 00:15:58,625
定义或更新触觉反馈

322
00:15:58,625 --> 00:16:02,496
Apple Haptic and Audio Pattern
文件格式 简称 AHAP

323
00:16:02,496 --> 00:16:04,765
能以资源文件的形式

324
00:16:04,765 --> 00:16:07,134
设计和存储您的触觉模式

325
00:16:07,134 --> 00:16:09,703
使用 Unity 编辑器的
Inspector 窗口 调整您的

326
00:16:09,703 --> 00:16:12,472
Core Haptics 模式

327
00:16:12,472 --> 00:16:14,842
为了充分利用
Core Haptics 插件

328
00:16:14,842 --> 00:16:17,211
您需要了解 Core Haptics 四个基本元素

329
00:16:17,211 --> 00:16:20,681
以及它们之间的相互关系

330
00:16:20,681 --> 00:16:24,518
其中 最高层级的元素是
CHHapticEngine

331
00:16:24,518 --> 00:16:27,321
触觉引擎（Haptic Engine）代表了
通往设备上触觉模块的链接

332
00:16:27,321 --> 00:16:31,859
要播放任何一种触觉模式
它都是不可或缺的

333
00:16:31,859 --> 00:16:35,896
CHHapticEngine 创建了
CHHapticPatternPlayers

334
00:16:35,896 --> 00:16:39,066
模式播放器（Pattern Player）用于控制
CHHapticPatterns 的播放

335
00:16:39,066 --> 00:16:44,137
实现诸如播放 停止
暂停和恢复之类的功能

336
00:16:44,137 --> 00:16:47,274
一个 CHHapticPattern
就是一个或多个

337
00:16:47,274 --> 00:16:50,511
触觉与声音事件组成的逻辑组

338
00:16:50,511 --> 00:16:54,882
CHHapticEngine
用这些模式来创建播放器

339
00:16:54,882 --> 00:16:57,251
CHHapticEvents 是定义

340
00:16:57,251 --> 00:17:00,554
一种触觉体验的构建单元

341
00:17:00,554 --> 00:17:02,990
Core Haptics
则是数据驱动的 API

342
00:17:02,990 --> 00:17:06,627
有了它 才能实现
以编程方式 直接写入脚本的方法

343
00:17:06,627 --> 00:17:11,331
或是修改 AHAP 文件的方法
定义触觉模式

344
00:17:11,331 --> 00:17:13,834
有一个简单的方法
在您的项目中添加 Core Haptics

345
00:17:13,834 --> 00:17:16,637
就是创建一个 Haptics 组件

346
00:17:16,637 --> 00:17:20,707
用来管理各个必要的
Core Haptics 对象

347
00:17:20,707 --> 00:17:22,910
这是一个 Haptics 组件示例

348
00:17:22,910 --> 00:17:25,012
其中包含了一个 CHHapticEngine

349
00:17:25,012 --> 00:17:29,283
一个 CHHapticPatternPlayer
和一个 AHAP 资源文件

350
00:17:29,283 --> 00:17:31,852
AHAP 资源文件是
由 Core Haptics 插件定义的

351
00:17:31,852 --> 00:17:34,655
一种自定义 Unity 资源

352
00:17:34,655 --> 00:17:38,025
它可以让您轻松地
导入导出 AHAP 文件

353
00:17:38,025 --> 00:17:40,060
还可以作为一个

354
00:17:40,060 --> 00:17:43,230
自定义的编辑器拓展
来管理模式的创建和自定义

355
00:17:43,230 --> 00:17:46,366
让我们详细了解一下

356
00:17:46,366 --> 00:17:48,802
首先
我会确保我的项目已经安装好了

357
00:17:48,802 --> 00:17:52,606
Apple.Core
和 Core Haptics 插件

358
00:17:52,606 --> 00:17:53,740
添加好之后

359
00:17:53,740 --> 00:17:59,346
我就可以开始
使用触觉来改善游戏体验了

360
00:17:59,346 --> 00:18:01,548
这是我基于之前的框图

361
00:18:01,548 --> 00:18:03,784
创建的一个触觉组件

362
00:18:03,784 --> 00:18:06,153
我们稍后再来看它的实现方法

363
00:18:06,153 --> 00:18:09,656
现在 先把它附到我的飞机上

364
00:18:12,359 --> 00:18:13,560
附加上去之后

365
00:18:13,560 --> 00:18:16,763
会看到这个组件
需要一个 AHAP 资源文件

366
00:18:16,763 --> 00:18:20,167
但我的 AHAP 资源文件夹是空的

367
00:18:20,167 --> 00:18:21,702
让我新建一个

368
00:18:21,702 --> 00:18:29,710
点击 Assets  Create  Apple 
CoreHaptics  AHAP

369
00:18:29,710 --> 00:18:31,678
创建好之后 让我给它

370
00:18:31,678 --> 00:18:39,219
起一个酷炫而有创意的名字：
MyHapticPattern

371
00:18:39,219 --> 00:18:41,955
Core Haptics 插件
自带 编辑器拓展

372
00:18:41,955 --> 00:18:46,727
让我可以直接在
Inspector 窗口中调整触觉模式

373
00:18:46,727 --> 00:18:49,096
在这里 我可以定义
CHHapticEvents

374
00:18:49,096 --> 00:18:50,931
它构成了 CHHapticPattern

375
00:18:50,931 --> 00:18:53,100
用于播放的部分

376
00:18:53,100 --> 00:18:55,702
默认状况下 这是一个瞬态事件

377
00:18:55,702 --> 00:19:01,775
但我也可以
很轻松地添加一个连续事件

378
00:19:01,775 --> 00:19:06,780
UI 中有导入（Import） 导出（Export）
和重置（Reset）按键

379
00:19:06,780 --> 00:19:08,882
重置会清空所有

380
00:19:08,882 --> 00:19:13,453
我添加的事件
把触觉模式恢复到默认状态

381
00:19:13,453 --> 00:19:16,089
导入和导出也是很棒的功能

382
00:19:16,089 --> 00:19:23,096
它们让您可以
载入和保存项目 AHAP 文件

383
00:19:23,096 --> 00:19:25,999
在这里 我导入了一个准备好的 AHAP 文件
名叫 Rumble

384
00:19:25,999 --> 00:19:28,569
它会触发一个很棒的触觉效果

385
00:19:28,569 --> 00:19:34,875
但我觉得需要做一点修改

386
00:19:34,875 --> 00:19:36,476
现在我更新了触觉模式

387
00:19:36,476 --> 00:19:38,645
我可以把它导出到
一个新的 AHAP 文件

388
00:19:38,645 --> 00:19:40,814
好让我把这个改善过的触觉模式

389
00:19:40,814 --> 00:19:45,152
共享给团队同事

390
00:19:51,158 --> 00:19:53,227
现在我已经创建并调整了资源文件

391
00:19:53,227 --> 00:19:59,233
让我回到飞机这里
把它指向 MyHapticPattern

392
00:19:59,233 --> 00:20:03,337
好极了！一切就绪

393
00:20:03,337 --> 00:20:06,206
定义并连接好触觉模式之后

394
00:20:06,206 --> 00:20:08,242
剩下的就是要给 Haptics 组件

395
00:20:08,242 --> 00:20:11,812
添加一些逻辑 好让它播放触觉模式

396
00:20:11,812 --> 00:20:14,414
这可以分为两个方法：

397
00:20:14,414 --> 00:20:17,618
PrepareHaptics 和 Play

398
00:20:17,618 --> 00:20:21,255
在 PrepareHaptics 中
触觉引擎会初始化

399
00:20:21,255 --> 00:20:24,391
触觉模式播放器会被创建出来

400
00:20:24,391 --> 00:20:25,926
Play 则会调用

401
00:20:25,926 --> 00:20:30,831
CHHapticPatternPlayer
的 Start 方法来开始播放

402
00:20:30,831 --> 00:20:34,101
这就是 Haptics 组件的脚本

403
00:20:34,101 --> 00:20:36,870
字段被分别定义为触觉引擎

404
00:20:36,870 --> 00:20:39,106
和触觉播放器

405
00:20:39,106 --> 00:20:41,942
请注意 在字段中
添加一个 serializeField 属性

406
00:20:41,942 --> 00:20:46,146
才可以在 editor UI 中
设置这个 AHAP 资源

407
00:20:46,146 --> 00:20:50,884
接下来 添加创建
CHHapticEngine 的代码 启动它

408
00:20:50,884 --> 00:20:52,853
然后通过
直接从引用资源中访问 AHAP

409
00:20:52,853 --> 00:20:56,924
创建一个触觉模式播放器

410
00:20:56,924 --> 00:20:59,226
当然 为播放器调用 Start

411
00:20:59,226 --> 00:21:02,296
就会播放这个触觉模式

412
00:21:02,296 --> 00:21:05,098
Core Haptics Unity
插件提供的工具

413
00:21:05,098 --> 00:21:08,936
可以助您把游戏的沉浸感
上升到一个新的高度

414
00:21:08,936 --> 00:21:11,672
请使用 Core Haptics 插件

415
00:21:11,672 --> 00:21:15,742
去创造那些亦真亦幻的游戏时刻吧

416
00:21:15,742 --> 00:21:17,644
要更深入了解 Core Haptics

417
00:21:17,644 --> 00:21:21,548
请查看
“Introducing Core Haptics”讲座

418
00:21:21,548 --> 00:21:25,152
要了解优秀的触觉体验的设计细节

419
00:21:25,152 --> 00:21:28,622
请务必观看“Designing
Audio-Haptic Experiences”

420
00:21:28,622 --> 00:21:32,059
以及“Practice audio
haptic design”

421
00:21:32,059 --> 00:21:34,995
沉浸式的音频对优秀的游戏体验

422
00:21:34,995 --> 00:21:37,197
无比重要

423
00:21:37,197 --> 00:21:41,168
PHASE Unity 插件
可以助您释放创造潜力

424
00:21:41,168 --> 00:21:45,572
在您的游戏世界中构建丰富的声景

425
00:21:45,572 --> 00:21:47,908
PHASE 让您可以为游戏

426
00:21:47,908 --> 00:21:51,278
提供复杂的动态声音体验

427
00:21:51,278 --> 00:21:54,481
几何感知音频意味着声音是

428
00:21:54,481 --> 00:21:57,251
从场景中发出的
并与其中的网格交互

429
00:21:57,251 --> 00:21:59,686
有了回响和反射 您的游戏中的环境

430
00:21:59,686 --> 00:22:02,789
听起来会更加逼真

431
00:22:02,789 --> 00:22:05,292
您可以构建分层音频图

432
00:22:05,292 --> 00:22:09,763
来实现游戏中的动态音频控制

433
00:22:09,763 --> 00:22:13,133
PHASE 插件包括了
一组预定义的组件

434
00:22:13,133 --> 00:22:14,935
可以直接使用

435
00:22:14,935 --> 00:22:17,104
只需把它们附加到您的游戏对象上

436
00:22:17,104 --> 00:22:18,372
就可以开始使用 PHASE 了

437
00:22:18,372 --> 00:22:21,208
甚至连一行代码都不用写

438
00:22:21,208 --> 00:22:24,678
第一个组件是 PHASEListener

439
00:22:24,678 --> 00:22:27,247
它充当您的游戏场景中的“耳朵”

440
00:22:27,247 --> 00:22:31,485
它根据位置 方向和回响预设值

441
00:22:31,485 --> 00:22:33,787
处理音频

442
00:22:33,787 --> 00:22:36,790
接下来是 PHASEOccluder 组件

443
00:22:36,790 --> 00:22:38,959
PHASEOccluder 附加在游戏对象上

444
00:22:38,959 --> 00:22:41,595
它附带几何数据

445
00:22:41,595 --> 00:22:46,099
会在对象阻挡场景中的音源时
降低音量

446
00:22:46,099 --> 00:22:48,836
接下来是 PHASESource 组件

447
00:22:48,836 --> 00:22:50,370
它们附加在游戏对象上

448
00:22:50,370 --> 00:22:53,006
会根据对象的 Transform

449
00:22:53,006 --> 00:22:55,042
在您的游戏世界中定位声音

450
00:22:55,042 --> 00:22:57,377
除了这些内置组件之外

451
00:22:57,377 --> 00:23:00,581
PHASE 插件还定义了
一个自定义资源

452
00:23:00,581 --> 00:23:02,749
即 SoundEvent 资源文件

453
00:23:02,749 --> 00:23:06,153
声音事件描述了声音播放事件

454
00:23:06,153 --> 00:23:09,957
还定义了场景中音源播放的声音

455
00:23:09,957 --> 00:23:11,825
要启用 PHASE 插件

456
00:23:11,825 --> 00:23:14,261
首先要确保项目中已经安装了

457
00:23:14,261 --> 00:23:17,898
Apple.Core 和 PHASE 插件

458
00:23:17,898 --> 00:23:21,134
安装好之后 我就可以把自带的组件

459
00:23:21,134 --> 00:23:22,636
添加到场景中了

460
00:23:22,636 --> 00:23:23,937
在这个示例项目中

461
00:23:23,937 --> 00:23:26,740
有三个相关的游戏对象

462
00:23:26,740 --> 00:23:31,745
飞机 建筑物和摄像机

463
00:23:31,745 --> 00:23:34,147
首先 我会把
PHASEListener 组件

464
00:23:34,147 --> 00:23:36,283
附加到摄像机上

465
00:23:36,283 --> 00:23:40,087
如此一来
我就添加了这个场景中的“耳朵”

466
00:23:40,087 --> 00:23:42,122
接下来 我会把建筑物设置为遮挡物

467
00:23:42,122 --> 00:23:45,826
给它附加 PHASEOccluder 组件

468
00:23:48,829 --> 00:23:51,632
最后 我要给这个场景添加一个音源

469
00:23:51,632 --> 00:23:55,836
把 PHASESource 添加到飞机上

470
00:23:55,836 --> 00:23:59,106
现在 这个音源要播放一些声音

471
00:23:59,106 --> 00:24:01,441
所以我要给它附加一个声音事件

472
00:24:01,441 --> 00:24:04,745
但 Sound Events文件夹是空的

473
00:24:04,745 --> 00:24:06,547
让我们创建一个

474
00:24:06,547 --> 00:24:14,288
点击 Assets  Create  Apple 
PHASE  SoundEvent

475
00:24:14,288 --> 00:24:15,923
创建好一个声音事件之后

476
00:24:15,923 --> 00:24:17,791
PHASE 插件会立即打开

477
00:24:17,791 --> 00:24:20,861
PHASE 声音事件编辑器窗口

478
00:24:20,861 --> 00:24:24,598
这就是您构建声音事件的画布

479
00:24:24,598 --> 00:24:27,534
我首先右键点击窗口的任意位置

480
00:24:27,534 --> 00:24:31,371
弹出菜单允许我
为这个事件添加一个节点

481
00:24:31,371 --> 00:24:36,109
因为我想播放一个音频片段（Clip）
或者创建一个采样器（Sampler）节点

482
00:24:36,109 --> 00:24:39,146
我已经为这个项目
添加好了一架待机状态飞机的

483
00:24:39,146 --> 00:24:45,619
音频素材 所以在这里我直接引用

484
00:24:45,619 --> 00:24:47,087
我启用了循环播放

485
00:24:47,087 --> 00:24:50,157
这样这架飞机就会一直发出嗡嗡声

486
00:24:50,157 --> 00:24:53,794
要听到这架飞机的声音
我要把它路由至混音器（Mixer）

487
00:24:53,794 --> 00:24:55,062
要创建混音器

488
00:24:55,062 --> 00:24:58,966
我只需把输出线
拖拽到事件编辑器画布上

489
00:24:58,966 --> 00:25:02,469
它就会显示创建混音器的选项

490
00:25:05,472 --> 00:25:10,944
这样我的声音事件
就创建完成 准备就绪了

491
00:25:10,944 --> 00:25:13,213
点击声音事件

492
00:25:13,213 --> 00:25:16,583
我可以直接在
Inspector 中查看其设置

493
00:25:16,583 --> 00:25:19,786
这样我调整数值时 就不必回到

494
00:25:19,786 --> 00:25:22,289
声音事件编辑器中了

495
00:25:22,289 --> 00:25:23,790
声音事件创建好后

496
00:25:23,790 --> 00:25:26,293
就可以在之前附加到飞机上的

497
00:25:26,293 --> 00:25:30,964
PHASESource 组件中引用它了

498
00:25:30,964 --> 00:25:33,367
如此一来 就路由并配置好了

499
00:25:33,367 --> 00:25:35,969
场景中的声音 可以播放了

500
00:25:35,969 --> 00:25:39,106
PHASE Unity 插件
为游戏内声音设计

501
00:25:39,106 --> 00:25:41,441
带来了全新的可能性

502
00:25:41,441 --> 00:25:43,744
要更深入学习 PHASE

503
00:25:43,744 --> 00:25:45,946
了解我今天介绍的这些概念

504
00:25:45,946 --> 00:25:49,283
请务必查看
Apple Developer 文档网站

505
00:25:49,283 --> 00:25:54,888
以及去年的 WWDC 讲座视频

506
00:25:54,888 --> 00:25:59,560
我们对新 Apple Unity 插件的
概述就到这里

507
00:25:59,560 --> 00:26:02,162
我今天讲了很多内容 如果您想要

508
00:26:02,162 --> 00:26:05,399
了解更多关于
Apple Unity 插件的知识

509
00:26:05,399 --> 00:26:09,636
我们在 GitHub 上的仓库
是一个绝佳的起点

510
00:26:09,636 --> 00:26:12,239
那里有源代码

511
00:26:12,239 --> 00:26:17,311
详细文档 以及各个插件的示例

512
00:26:17,311 --> 00:26:19,980
要了解更多
关于在 Unity 游戏中

513
00:26:19,980 --> 00:26:21,849
集成辅助功能的内容

514
00:26:21,849 --> 00:26:24,952
请查看“Add accessiblity
to your Unity games”讲座

515
00:26:24,952 --> 00:26:26,353
也别忘了查看

516
00:26:26,353 --> 00:26:29,256
“Reach new players
with Game Center dashboard”讲座

517
00:26:29,256 --> 00:26:32,326
来学习如何增加您的游戏的曝光量

518
00:26:32,326 --> 00:26:34,027
感谢收看

519
00:26:34,027 --> 00:26:38,599
♪

