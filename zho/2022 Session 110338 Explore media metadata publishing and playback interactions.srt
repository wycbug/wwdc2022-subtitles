1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:12,646
Nik: 大家好 我是 Nik
是 Video 团队的工程师

3
00:00:12,679 --> 00:00:16,049
今天 我很高兴能为大家介绍
媒体元数据发布

4
00:00:16,083 --> 00:00:17,684
和播放交互

5
00:00:17,718 --> 00:00:19,887
这是什么意思呢

6
00:00:19,920 --> 00:00:21,788
Apple 设备中有很多地方

7
00:00:21,822 --> 00:00:25,192
是可以显示播放信息
并控制媒体播放的

8
00:00:25,225 --> 00:00:28,562
例如 控制中心的正在播放部分
可以显示当前设备播放的

9
00:00:28,595 --> 00:00:32,165
专辑 标题和进度条

10
00:00:32,199 --> 00:00:36,737
您也可以播放 暂停
甚至是快进或快退

11
00:00:36,770 --> 00:00:40,741
放大“正在播放”窗口
可以显示更多信息 如专辑和进度条

12
00:00:40,774 --> 00:00:45,812
您也可以设置静音
增大或减小音量

13
00:00:45,846 --> 00:00:48,315
锁定屏幕也显示了
同样的信息和控制按钮

14
00:00:48,348 --> 00:00:51,685
让用户可以更方便地查看
播放进度 暂停

15
00:00:51,718 --> 00:00:54,755
甚至不用解锁 就能 AirPlay 到
另一个设备中

16
00:00:57,424 --> 00:01:00,527
不管是在什么设备上
Apple Watch 的“正在播放”App

17
00:01:00,561 --> 00:01:01,895
都能为用户提供相同的体验

18
00:01:01,929 --> 00:01:04,398
它甚至有内置的
Apple TV 遥控

19
00:01:05,866 --> 00:01:08,702
在 Apple tvOS 上使用 AVKit 时
展示控制按钮的

20
00:01:08,735 --> 00:01:11,905
覆盖信息会显示
播放标题和章节信息

21
00:01:11,939 --> 00:01:13,373
如果您下滑到信息面板

22
00:01:13,407 --> 00:01:16,176
会显示更详细的信息
如专辑名称和描述

23
00:01:17,878 --> 00:01:21,114
按住 Apple TV 遥控上的
TV 按钮会显示控制中心

24
00:01:21,148 --> 00:01:25,586
和 iOS 一样 会出现一个
“正在播放”的窗口 也支持放大

25
00:01:25,619 --> 00:01:28,722
当 Apple tvOS 后台开始
播放音频内容时

26
00:01:28,755 --> 00:01:30,657
按下遥控上的播放按钮

27
00:01:30,691 --> 00:01:33,660
或者从另一个设备的
音乐 App 上选择一个曲目

28
00:01:33,694 --> 00:01:38,365
会显示有正在播放
信息的通知

29
00:01:38,398 --> 00:01:42,936
另外 Apple tvOS 上播放音频时
如果有一段时间未进行操作

30
00:01:42,970 --> 00:01:46,607
会有全屏覆盖 显示当前播放信息

31
00:01:48,308 --> 00:01:52,112
最后 在 iOS 上
Control Other Speakers and TVs 按钮

32
00:01:52,145 --> 00:01:54,815
可以让您查看您其它所有设备的
正在播放信息

33
00:01:54,848 --> 00:01:56,950
您可以控制播放

34
00:01:58,352 --> 00:02:01,989
随着可支持显示正在播放信息
且可以控制播放的

35
00:02:02,022 --> 00:02:03,690
设备和 UI 越来越多

36
00:02:03,724 --> 00:02:05,759
如何适当发布
正在播放信息

37
00:02:05,792 --> 00:02:08,896
并相应遥控指令显得愈发重要

38
00:02:08,929 --> 00:02:10,898
这次讲座接下来的时间

39
00:02:10,931 --> 00:02:12,900
我们将阐述如何响应
遥控指令中的播放交互

40
00:02:12,933 --> 00:02:15,936
自动元数据发布

41
00:02:15,969 --> 00:02:18,872
AVKit 显示以及手动发布

42
00:02:18,906 --> 00:02:21,008
当使用 AVFoundation
来播放媒体内容时

43
00:02:21,041 --> 00:02:22,876
显示正在播放元数据

44
00:02:22,910 --> 00:02:27,347
并响应播放交互的最好方法
就是使用 MPNowPlayingSession 类

45
00:02:28,749 --> 00:02:31,852
过去该类只可用于 Apple tvOS

46
00:02:31,885 --> 00:02:34,621
但现在也可用于 iOS 16 了

47
00:02:36,523 --> 00:02:38,825
它可用来显示不同的播放会话

48
00:02:38,859 --> 00:02:40,727
如果您的 App 包含
多种活动会话时

49
00:02:40,761 --> 00:02:44,398
也可提供对
正在播放状态的控制

50
00:02:44,431 --> 00:02:46,633
它支持手动元数据发布

51
00:02:46,667 --> 00:02:50,537
以及 iOS 和 Apple tvOS 16 上
全新的自动发布

52
00:02:52,206 --> 00:02:55,475
MPNowPlayingSession 使用 AVKit 时
不应用在 Apple tvOS 上

53
00:02:55,509 --> 00:02:57,678
它有自己的自动发布机制

54
00:02:57,711 --> 00:02:59,613
我们稍后会讲到

55
00:03:00,514 --> 00:03:03,016
成为“正在播放”App 意味着
您的 App 会出现在

56
00:03:03,050 --> 00:03:05,219
控制中心 锁定屏幕等等

57
00:03:05,252 --> 00:03:06,620
并接收播放控制

58
00:03:06,653 --> 00:03:10,123
如用户从另一个界面按下暂停

59
00:03:10,157 --> 00:03:12,559
有了 MPNowPlayingSession
您可以体现在一个 App 中

60
00:03:12,593 --> 00:03:15,229
展示同时播放的多个播放会话

61
00:03:15,262 --> 00:03:17,064
然而 使用多重会话时

62
00:03:17,097 --> 00:03:19,032
您的 App 必须将其中一个
设置为活动会话

63
00:03:19,066 --> 00:03:22,035
在用遥控控制您的 App 时
该会话会显示在整个系统中

64
00:03:22,069 --> 00:03:23,737
例如 使用画中画时

65
00:03:23,770 --> 00:03:25,772
可能同时有两个播放会话

66
00:03:25,806 --> 00:03:27,574
全屏播放部分应是

67
00:03:27,608 --> 00:03:30,244
活动的正在播放会话

68
00:03:30,277 --> 00:03:34,548
系统也有特定的标准来判定
App 是否可以加入正在播放列表

69
00:03:34,581 --> 00:03:38,151
首先 您要注册一个最少有
一个遥控指令的处理程序

70
00:03:38,185 --> 00:03:41,655
如您所见 不能响应
播放交互的 App

71
00:03:41,688 --> 00:03:45,559
并不适合显示在
正在播放列表中

72
00:03:45,592 --> 00:03:48,695
第二 您 App 的 AVAudioSession
必须在

73
00:03:48,729 --> 00:03:52,032
类别选择中配置有
non-mixable 类

74
00:03:52,065 --> 00:03:54,668
Mixable 播放类别和选项
通常是在播放

75
00:03:54,701 --> 00:03:57,471
后台通知时使用的
因此这可以提示系统

76
00:03:57,504 --> 00:04:01,808
正在播放的内容并不适合
加入正在播放列表

77
00:04:01,842 --> 00:04:04,811
以下是几个帮助您理解
播放会话的例子

78
00:04:04,845 --> 00:04:07,281
在这个例子中
只有一个播放内容

79
00:04:07,314 --> 00:04:10,951
所以可以用单一的
MPNowPlayingSession 来体现

80
00:04:10,984 --> 00:04:14,188
如果您的 App 支持 PiP
您也会有两个 MPNowPlayingSessions

81
00:04:14,221 --> 00:04:17,824
一个为主播放器
另一个是 PiP 播放

82
00:04:17,858 --> 00:04:20,961
在更复杂的情况下
单一的 MPNowPlayingSession

83
00:04:20,994 --> 00:04:22,362
有多个播放器

84
00:04:22,396 --> 00:04:25,132
在这个例子中 有 4 个播放器
每个占 1/4 的屏幕空间

85
00:04:25,165 --> 00:04:27,801
显示同一场比赛的不同视角

86
00:04:27,835 --> 00:04:30,337
添加到相同
MPNowPlayingSession 中的播放器

87
00:04:30,370 --> 00:04:33,173
应该具有相同的内容

88
00:04:33,207 --> 00:04:36,476
这里为每个例子做了说明

89
00:04:36,510 --> 00:04:38,879
首先 我们只播放单一内容

90
00:04:38,912 --> 00:04:41,715
因此 在一个播放器
开启了一个会话

91
00:04:41,748 --> 00:04:44,051
第二个例子用的是画中画

92
00:04:44,084 --> 00:04:46,520
所以我们有两个会话
每个会话一个播放器

93
00:04:46,553 --> 00:04:50,958
第一个全屏显示 第二个是画中画

94
00:04:50,991 --> 00:04:53,794
最后一个例子 在一个会话中
从多个视角

95
00:04:53,827 --> 00:04:56,997
展示了四个参赛者的情况

96
00:04:57,030 --> 00:04:58,732
App 有多重会话时

97
00:04:58,765 --> 00:05:02,936
在必要时 App 需将指定的会话
定义为活动会话

98
00:05:02,970 --> 00:05:05,606
例如 如果媒体以画中画的形式
来播放

99
00:05:05,639 --> 00:05:07,508
如果用户将其放大到全屏

100
00:05:07,541 --> 00:05:10,010
之前的全屏会话应该
不再为活跃会话

101
00:05:10,043 --> 00:05:12,679
或者说当前为全屏的
正在播放和 PiP 会话

102
00:05:12,713 --> 00:05:13,947
应为活跃会话

103
00:05:13,981 --> 00:05:17,184
这种过渡可以通过
在 MPNowPlayingSession 上

104
00:05:17,217 --> 00:05:20,787
调用 becomeActiveIfPossible 来实现

105
00:05:20,821 --> 00:05:23,090
现在我们已经了解了设置
MPNowPlayingSession 实例

106
00:05:23,123 --> 00:05:26,260
以及控制正在播放会话的
基础知识

107
00:05:26,293 --> 00:05:28,529
我们来看下从锁定屏幕
或另一个房间的 HomePod 中

108
00:05:28,562 --> 00:05:31,298
接收和响应遥控指令

109
00:05:31,331 --> 00:05:33,667
首先是注册播放和暂停指令的

110
00:05:33,700 --> 00:05:35,402
基本例子

111
00:05:35,435 --> 00:05:37,771
这样 用户在另一个设备上
按下播放或暂停按钮

112
00:05:37,804 --> 00:05:40,674
或用 Siri 来发布指令时

113
00:05:40,707 --> 00:05:43,410
您的 App 可以
收到回调

114
00:05:43,443 --> 00:05:46,713
我们先将 MPNowPlayingSession
实例化

115
00:05:46,747 --> 00:05:48,081
由于我们只有一个会话

116
00:05:48,115 --> 00:05:50,918
就无需唤醒
‘becomeActiveIfPossible’方法

117
00:05:50,951 --> 00:05:52,386
当您只有一个会话

118
00:05:52,419 --> 00:05:56,256
且 App 为“正在播放”App 时
该会话则为默认会话

119
00:05:56,290 --> 00:06:00,594
每个 MPNowPlayingSession 实例
有其自己的 MPRemoteCommandCenter 实例

120
00:06:00,627 --> 00:06:02,563
可用于声明您的播放会话

121
00:06:02,596 --> 00:06:04,464
响应的是哪个遥控指令

122
00:06:04,498 --> 00:06:07,167
接下来 我们为 playCommand
添加处理程序

123
00:06:07,201 --> 00:06:11,738
用于在播放器中唤醒
play 方法 返回 success

124
00:06:11,772 --> 00:06:14,141
然后 pauseCommand
也是同样的操作

125
00:06:14,174 --> 00:06:17,010
您要为 App 支持的每个指令
都添加处理程序

126
00:06:17,044 --> 00:06:20,280
这适用于当前播放内容

127
00:06:20,314 --> 00:06:23,350
另一个例子是快进和快退指令

128
00:06:23,383 --> 00:06:25,886
这个指令应该用于大部分内容

129
00:06:25,919 --> 00:06:27,287
但对不能向前跳转的情况不适用

130
00:06:27,321 --> 00:06:30,357
如流媒体直播

131
00:06:30,390 --> 00:06:32,860
首先我们要指明首选间隔

132
00:06:32,893 --> 00:06:35,996
或者跳转的秒数

133
00:06:36,029 --> 00:06:38,365
在这里 我们用 15 秒

134
00:06:38,398 --> 00:06:40,968
然后与播放和暂停指令的
操作一样

135
00:06:41,001 --> 00:06:43,504
添加一个处理程序
在用户按下快进按钮

136
00:06:43,537 --> 00:06:47,174
或让 Siri 快进时唤醒该程序

137
00:06:47,207 --> 00:06:51,078
在我们的处理程序中
将会收到 MPSkipIntervalCommandEvent

138
00:06:51,111 --> 00:06:54,481
所以首先我们要将事件
转换为该类型

139
00:06:54,515 --> 00:06:57,584
然后通过 MPSkipIntervalCommandEvent
提供的当前时间和间隔

140
00:06:57,618 --> 00:07:00,754
计算新的运行时间

141
00:07:00,787 --> 00:07:05,058
找到该位置 返回 success
表明我们跳转到新的位置

142
00:07:05,092 --> 00:07:07,294
也有可能您的 App 正处于

143
00:07:07,327 --> 00:07:09,096
指令暂时不可用的情形

144
00:07:09,129 --> 00:07:11,265
例如在广告时快进的时候

145
00:07:11,298 --> 00:07:14,568
这样的话
可禁用 skipForwardCommand

146
00:07:14,601 --> 00:07:16,537
现在我们响应了遥控指令

147
00:07:16,570 --> 00:07:18,972
可以再处理自动元数据发布

148
00:07:19,006 --> 00:07:22,376
自动发布让您能更容易
保证元数据的精准性

149
00:07:22,409 --> 00:07:25,312
它可自动维持其直接在播放器
观察到的元数据属性

150
00:07:25,345 --> 00:07:28,882
如持续时间 当前运行时间

151
00:07:28,916 --> 00:07:31,585
播放状态 播放进度

152
00:07:31,618 --> 00:07:34,388
如果内容中有植入广告
则不应计入

153
00:07:34,421 --> 00:07:36,156
总持续时间和运行时间

154
00:07:36,190 --> 00:07:39,726
而应计算纯运行时间并报告

155
00:07:39,760 --> 00:07:43,330
其它元数据如标题 描述
和专辑可以

156
00:07:43,363 --> 00:07:47,434
用 nowPlayingInfo 属性
直接添加到 AVPlayerItems

157
00:07:47,467 --> 00:07:49,503
在这个例子中  我们用自动发布

158
00:07:49,536 --> 00:07:52,639
来做大部分工作
并自己设置标题和专辑

159
00:07:52,673 --> 00:07:55,776
首先 创建一个新的
MPMediaItemArtwork 实例

160
00:07:55,809 --> 00:07:57,144
传递专辑图片

161
00:07:57,177 --> 00:08:00,180
大部分 App 会运行
网络请求来抓取这些内容

162
00:08:00,214 --> 00:08:03,150
然后我们设置内容的视频标题

163
00:08:03,183 --> 00:08:04,985
然后将专辑和标题

164
00:08:05,018 --> 00:08:06,987
在当前使用
MPMediaItemPropertyTitle

165
00:08:07,020 --> 00:08:10,457
和 MPMediaItemPropertyArtwork 的
播放器上

166
00:08:10,490 --> 00:08:12,893
设置为 nowPlayingInfo 词典

167
00:08:12,926 --> 00:08:16,396
正在播放元数据可以包含

168
00:08:16,430 --> 00:08:19,399
和 MPNowPlayingInfoProperty

169
00:08:19,433 --> 00:08:22,102
最后 我们创建
MPNowPlayingSession 实例

170
00:08:22,135 --> 00:08:23,270
传递到播放器

171
00:08:23,303 --> 00:08:26,740
将 automaticallyPublishNowPlayingInfo
设置为 true

172
00:08:26,773 --> 00:08:29,376
automaticallyPublishNowPlayingInfo
设置为 true 后

173
00:08:29,409 --> 00:08:32,279
MPNowPlayingSession 实例将会开始
观察播放器的

174
00:08:32,312 --> 00:08:33,814
状态变化 如静音

175
00:08:33,847 --> 00:08:37,050
播放 / 暂停事件
或当前播放项目的变化

176
00:08:37,084 --> 00:08:40,120
这是另一个例子
可以演示有植入广告时

177
00:08:40,153 --> 00:08:42,789
如果您希望广告时间不计入
总持续时间或当前运行时间

178
00:08:42,823 --> 00:08:47,327
我们可以如何在实例中
使用自动发布

179
00:08:47,361 --> 00:08:50,898
我们要为每个植入的广告

180
00:08:50,931 --> 00:08:52,766
创建 MPAdTimeRange 实例

181
00:08:52,799 --> 00:08:55,502
在这个例子中
我们有一条 30 秒的广告

182
00:08:55,536 --> 00:08:56,837
在视频最开始播放

183
00:08:56,870 --> 00:09:01,909
所以我们创建开始点为 0
持续时间为 30 秒

184
00:09:01,942 --> 00:09:04,811
与之前标题和专辑的
处理方式类似

185
00:09:04,845 --> 00:09:09,082
我们只要在使用
MPNowPlayingInfoPropertyAdTimeRanges 的播放项目上

186
00:09:09,116 --> 00:09:14,154
添加一组 MPAdTimeRange's
到其 nowPlayingInfo 词典

187
00:09:14,188 --> 00:09:17,724
然后和之前的操作一样
创建 MPNowPlayingSession

188
00:09:17,758 --> 00:09:19,993
启用自动发布

189
00:09:20,027 --> 00:09:22,729
接下来是 AVKit 的
元数据发布

190
00:09:22,763 --> 00:09:26,400
在 Apple tvOS 上发布 AVKit 的
正在播放元数据

191
00:09:26,433 --> 00:09:27,968
与 MPNowPlayingSession
操作类似

192
00:09:28,001 --> 00:09:30,137
元数据直接添加到
AVPlayerItem

193
00:09:30,170 --> 00:09:33,207
发布如运行时间 持续时间
播放状态的数值

194
00:09:33,240 --> 00:09:34,842
并保持更新

195
00:09:34,875 --> 00:09:37,377
直接从播放器
和资产中获取的元数据

196
00:09:37,411 --> 00:09:40,480
与您 App 在 AVPlayerItem 上
提供的元数据

197
00:09:40,514 --> 00:09:43,417
一起输入到播放器 UI 的
信息面板

198
00:09:43,450 --> 00:09:47,554
AVKit 也负责注册
和响应遥控指令

199
00:09:47,588 --> 00:09:50,858
用 AVKit 是最好
也是最简单的方法来整合

200
00:09:50,891 --> 00:09:55,562
我们迄今讨论过的平台
以及其它如 AirPlay 和画中画的特性

201
00:09:55,596 --> 00:09:59,466
使用 AVKit 时设置元数据
可以通过在 AVPlayerItem 上

202
00:09:59,499 --> 00:10:03,637
使用 externalMetadata 数组来完成
包括描述内容的

203
00:10:03,670 --> 00:10:05,138
AVMetadataItem 实例

204
00:10:05,172 --> 00:10:08,342
每个 AVMetadataItem
您最多可以设置三个数值

205
00:10:08,375 --> 00:10:10,711
首先 标识符 这是表明

206
00:10:10,744 --> 00:10:14,381
AVMetadataItem 代表的是
什么元数据的关键

207
00:10:14,414 --> 00:10:18,285
例如 当前标题的
AVMetadataCommonIdentifierTitle

208
00:10:18,318 --> 00:10:21,788
或专辑的

209
00:10:21,822 --> 00:10:23,357
AVMetadataCommonIdentifierArtwork

210
00:10:23,390 --> 00:10:24,992
第二是数值

211
00:10:25,025 --> 00:10:27,160
在标题中 这是包含标题的字符串

212
00:10:27,194 --> 00:10:31,198
在专辑中 这是包含图像数据的
NSData 实例

213
00:10:31,231 --> 00:10:34,735
dataType 用于指明
所提供专辑的格式

214
00:10:34,768 --> 00:10:36,537
如果包含 JPEG 数据

215
00:10:36,570 --> 00:10:40,274
将会使用
kCMMetadatabaseDataType_JPEG

216
00:10:40,307 --> 00:10:44,378
最后 extendedLanguageTag
用于指明字符串

217
00:10:44,411 --> 00:10:47,014
所用的语言 如标题和描述

218
00:10:47,047 --> 00:10:49,917
大部分时候 这里应该用
数值“und”

219
00:10:49,950 --> 00:10:52,653
来确保所有观众都看到
同样的数值

220
00:10:52,686 --> 00:10:55,923
如果数值是英语
您可能会想使用“en-us”

221
00:10:55,956 --> 00:10:58,992
但这样的话会该语言的设备
设置成其它语言

222
00:10:59,026 --> 00:11:01,261
如西班牙语 从而不显示元数据

223
00:11:02,262 --> 00:11:05,899
这里我们有一个
设置专辑和标题的例子

224
00:11:05,933 --> 00:11:08,402
首先 从软件包中抓取专辑图像数据

225
00:11:08,435 --> 00:11:11,471
大部分 App 会通过网络资源
来抓取该信息

226
00:11:11,505 --> 00:11:15,442
然后 我们将新的
可变 AVMetadataItem 实例化

227
00:11:15,475 --> 00:11:18,712
设置标识符为
.commonIdentifierArtwork

228
00:11:18,745 --> 00:11:23,183
然后设置数值为
原始专辑图像数据及 NSData

229
00:11:23,217 --> 00:11:24,651
由于图像数据是 JPEG

230
00:11:24,685 --> 00:11:28,021
我们将 dataType
设置为 kCMMetadataBaseDataType_JPEG

231
00:11:28,055 --> 00:11:29,890
如果您的专辑是 PNG

232
00:11:29,923 --> 00:11:33,193
那就用 kCMMetadataBaseDataType_PNG

233
00:11:33,227 --> 00:11:35,128
因为我们希望
不管用户设备是什么语言

234
00:11:35,162 --> 00:11:37,097
这个元数据都是可见的

235
00:11:37,130 --> 00:11:40,734
所以将 extendedLanguageTag
设置为“und,”或“undefined.”

236
00:11:40,767 --> 00:11:44,137
然后为标题重复同样的步骤
用 .commonIdentifierTitle

237
00:11:44,171 --> 00:11:46,073
视频标题作为数值

238
00:11:46,106 --> 00:11:49,543
再用“und”
作为 extendedLanguageTag

239
00:11:49,576 --> 00:11:51,545
我们建立好所有元数据项目后

240
00:11:51,578 --> 00:11:54,114
将其添加到数组
设置为 AVPlayerItem 的

241
00:11:54,147 --> 00:11:57,718
externalMetadata 属性

242
00:11:57,751 --> 00:12:00,320
现在播放项目上已经添加好了
专辑和标题

243
00:12:00,354 --> 00:12:05,425
您可以看下这是如何映射到
iOS 的控制中心和锁定屏幕上的

244
00:12:05,459 --> 00:12:07,995
如专辑一样 还有其它元数据类型
是可以设置的

245
00:12:08,028 --> 00:12:11,532
如描述 字幕信息 内容评级

246
00:12:11,565 --> 00:12:13,634
您的 App 可以设置
尽量多的信息

247
00:12:13,667 --> 00:12:17,604
尽可能为用户提供丰富的体验

248
00:12:17,638 --> 00:12:20,807
到目前为止 我们讨论了
MPNowPlayingSession 的自动发布

249
00:12:20,841 --> 00:12:22,276
AVKit 的发布

250
00:12:22,309 --> 00:12:24,811
但 MPNowPlayingSession
及其自动发布功能

251
00:12:24,845 --> 00:12:27,314
需要传递一个 AVPlayer 实例

252
00:12:27,347 --> 00:12:31,785
这并不一定适用于所有 App
仍然可以使用手动发布

253
00:12:31,818 --> 00:12:35,055
手动发布需要您提供
所有元数据数值

254
00:12:35,088 --> 00:12:37,824
与自动发布不同 如运行时间

255
00:12:37,858 --> 00:12:40,360
播放状态的信息无法由系统提供

256
00:12:40,394 --> 00:12:43,764
这意味着您需要对低等级
播放状态进行手动细粒度控制

257
00:12:43,797 --> 00:12:48,302
您的 App 保证在播放状态改变下
信息随着时间的准确性

258
00:12:48,335 --> 00:12:51,071
要注意 注册和响应遥控指令

259
00:12:51,104 --> 00:12:52,406
同样也是需要的

260
00:12:52,439 --> 00:12:54,975
因为我们没有
使用 MPNowPlayingSession

261
00:12:55,008 --> 00:12:58,645
那就要使用
MPRemoteCommandCenter 的共享实例

262
00:12:58,679 --> 00:13:02,082
以下是更新正在播放Info
词典的基础示例

263
00:13:02,115 --> 00:13:06,019
首先 创建包含图像的
MPMediaItemArtwork 实例

264
00:13:06,053 --> 00:13:08,055
和我们在自动发布时的操作类似

265
00:13:08,088 --> 00:13:12,125
然后 创建包含
我们已有元数据的词典

266
00:13:12,159 --> 00:13:17,064
在这里 我们设置标题 专辑
以及播放持续时间

267
00:13:17,097 --> 00:13:19,399
运行时间 播放状态的数值

268
00:13:19,433 --> 00:13:21,768
然后将其设置到
MPNowPlayingInfoCenter

269
00:13:21,802 --> 00:13:23,670
默认实例上

270
00:13:23,704 --> 00:13:27,074
在播放期间有任意变化
如播放或暂停

271
00:13:27,107 --> 00:13:29,076
用户滑动快进或快退
或者开始播放新项目时

272
00:13:29,109 --> 00:13:32,779
这一元数据都应相应更新

273
00:13:32,813 --> 00:13:34,948
您不需要定期更新运行时间

274
00:13:34,982 --> 00:13:37,484
系统会根据自上一次更新以来

275
00:13:37,518 --> 00:13:41,054
过去了多少时间 从而推算
正确的运行时间

276
00:13:41,088 --> 00:13:43,857
现在您已经熟悉了
发布正在播放元数据

277
00:13:43,891 --> 00:13:47,494
及响应其它设备和界面遥控指令的
所有不同方法

278
00:13:47,528 --> 00:13:50,130
那就可以集成这些方法
从而最大化用户体验了

279
00:13:50,163 --> 00:13:51,632
这是前所未有的便捷

280
00:13:51,665 --> 00:13:53,834
当前的集成同样也能用上

281
00:13:53,867 --> 00:13:57,070
转换到自动发布 从而避免
未来的性能倒退

282
00:13:57,104 --> 00:13:59,506
最小化您要维持的代码数量

283
00:13:59,540 --> 00:14:03,410
您可访问 developer.apple.com 上的
MediaPlayer 以获取更多信息

284
00:14:03,443 --> 00:14:04,811
感谢大家的观看

