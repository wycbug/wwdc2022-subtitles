1
00:00:01,001 --> 00:00:07,007
[古怪的音乐]

2
00:00:09,309 --> 00:00:12,746
Eric: 大家好 欢迎来到 WWDC

3
00:00:12,779 --> 00:00:13,947
我是 Eric

4
00:00:13,981 --> 00:00:16,250
我是地图 App 团队的工程师

5
00:00:16,283 --> 00:00:19,786
今天 我和同事 Yingxiu 一起

6
00:00:19,820 --> 00:00:21,922
与大家共同探索下
MapKit 的新内容

7
00:00:23,357 --> 00:00:27,427
Apple 发布全新的地图 App
及其沉浸式的

8
00:00:27,461 --> 00:00:29,663
Look Around 功能
已有三年

9
00:00:31,031 --> 00:00:33,367
最初这一新地图和 Look Around

10
00:00:33,400 --> 00:00:36,837
仅支持美国地区 现已新增

11
00:00:36,870 --> 00:00:38,405
覆盖加拿大

12
00:00:38,438 --> 00:00:41,341
大多数欧洲国家 日本等地区

13
00:00:42,910 --> 00:00:45,712
去年 Apple 地图 App
进行了全新升级

14
00:00:45,746 --> 00:00:49,983
推出了增强的 3D 地图体验
有详细的 车辆变道

15
00:00:50,017 --> 00:00:51,885
人行横道 自行车道等信息

16
00:00:51,919 --> 00:00:55,589
以及精美绝伦的 3D 地标模型
如轮渡大厦

17
00:00:57,457 --> 00:00:59,526
地图上这些详尽的细节

18
00:00:59,560 --> 00:01:01,728
为用户提供了

19
00:01:01,762 --> 00:01:04,264
前所未见的内容和精确体验

20
00:01:04,298 --> 00:01:06,633
3D 的地形高差

21
00:01:06,667 --> 00:01:09,469
所带来的逼真感也是无可比拟的

22
00:01:10,704 --> 00:01:13,674
今年 MapKit 可以将
Apple 地图 App 的功能

23
00:01:13,707 --> 00:01:15,576
也集成到您的 App 中

24
00:01:15,609 --> 00:01:19,012
让您的用户也能极尽细节地
探索世界

25
00:01:20,247 --> 00:01:24,484
今天的内容将包括
MapKit 几个新功能

26
00:01:24,518 --> 00:01:27,721
首先 我们谈下如何用
地图配置 API

27
00:01:27,754 --> 00:01:30,858
应用这一全新的地图

28
00:01:31,992 --> 00:01:35,863
接下来 我们将会介绍
我们针对 Overlay APIs 所做的

29
00:01:35,896 --> 00:01:39,533
各种改进 从而将您的内容
与地图无缝集成

30
00:01:40,834 --> 00:01:43,136
我们还会讨论全新的
混合模式支持

31
00:01:43,170 --> 00:01:47,040
以及您可以如何利用这一模式
以进一步增强

32
00:01:47,074 --> 00:01:49,510
地图内容的显示

33
00:01:49,543 --> 00:01:53,113
然后 我们会介绍通过使用我们
全新的 Selectable Map Features API

34
00:01:53,146 --> 00:01:56,450
增加您地图互动性的方法

35
00:01:57,384 --> 00:02:01,154
最后 我们会探讨如何直接在您的
应用程序中

36
00:02:01,188 --> 00:02:03,190
整合沉浸式的
Look Around 体验

37
00:02:04,124 --> 00:02:08,395
我们本次的内容非常丰富
准备好进入第一个话题 …

38
00:02:08,428 --> 00:02:12,332
集成新地图和
使用地图配置 API

39
00:02:13,600 --> 00:02:16,170
在您的 iOS macOS
和 tvOS App 中

40
00:02:16,203 --> 00:02:18,505
集成新地图

41
00:02:18,539 --> 00:02:20,307
实在是太容易了

42
00:02:20,340 --> 00:02:23,610
您只要使用新的 SDK
重新编译您的 App

43
00:02:23,644 --> 00:02:27,347
就能自动获得全新的
Apple 地图 feature

44
00:02:27,381 --> 00:02:30,083
包括在可用地区的 3D 城市体验

45
00:02:30,717 --> 00:02:34,588
对大部分 App 来说
只需要简单的重新编译即可

46
00:02:36,089 --> 00:02:39,059
当然 在部分情况下
您可能需要对地图的显示

47
00:02:39,092 --> 00:02:40,727
有更多的控制

48
00:02:41,495 --> 00:02:46,033
在 iOS 15 中 您是通过
MKMapView 的不同属性

49
00:02:46,066 --> 00:02:47,267
来配置地图的

50
00:02:48,202 --> 00:02:53,173
而在 iOS 16 中
我们软性摒弃了这些属性

51
00:02:53,207 --> 00:02:56,376
推出了全新的
地图配置 API

52
00:02:56,410 --> 00:02:57,344
来取代这些属性

53
00:02:58,779 --> 00:03:03,984
MKMapConfiguration 是
全新地图配置 API 的核心类

54
00:03:04,017 --> 00:03:07,454
MKMapConfiguration 是
一个抽象基类

55
00:03:07,487 --> 00:03:09,489
它有三个具体子类

56
00:03:11,058 --> 00:03:16,296
MKImageryMapConfiguration 用于
显示卫星风格的影像

57
00:03:16,330 --> 00:03:20,167
MKHybridMapConfiguration 用于
在影像的地图上添加地图特征

58
00:03:20,200 --> 00:03:24,505
比如 道路标签和兴趣点

59
00:03:26,006 --> 00:03:30,644
MKStandardMapConfiguration 用于
显示完全用图形描绘的地图

60
00:03:31,411 --> 00:03:35,549
这三种地图配置听起来应该不陌生
因为它们

61
00:03:35,582 --> 00:03:37,251
和我们已有的地图类型一样

62
00:03:40,153 --> 00:03:44,691
地图配置的基类支持
elevationStyle 属性

63
00:03:44,725 --> 00:03:47,294
它的值可以是 flat 或 realistic

64
00:03:48,562 --> 00:03:52,533
flat 风格的地图是平面的

65
00:03:52,566 --> 00:03:57,137
道路 包括桥梁和立交桥
都是扁平呈现的

66
00:03:57,171 --> 00:03:59,673
elevationStyle 属性的默认值是 flat

67
00:04:00,741 --> 00:04:03,110
realistic 风格的地图中

68
00:04:03,143 --> 00:04:06,346
地形是按现实世界的
实际海拔来呈现

69
00:04:06,380 --> 00:04:08,782
如丘陵和山脉

70
00:04:08,815 --> 00:04:12,553
道路展现了现实世界中的高度细节

71
00:04:13,754 --> 00:04:17,591
现在 我们来仔细看看
地图配置的子类

72
00:04:18,825 --> 00:04:22,496
MKImageryMapConfiguration 只显示卫星影像

73
00:04:22,529 --> 00:04:26,667
没有额外的地图 feature
因此没有其它属性

74
00:04:28,068 --> 00:04:31,104
MKHybridMapConfiguration 有额外的属性

75
00:04:31,138 --> 00:04:33,907
用来控制过滤特定类别的兴趣点

76
00:04:33,941 --> 00:04:35,909
以及是否显示交通路况

77
00:04:37,911 --> 00:04:41,949
MKStandardConfiguration 支持
emphasisStyle 属性

78
00:04:41,982 --> 00:04:44,051
它的值可以是 default 或者 muted

79
00:04:45,485 --> 00:04:48,755
从其命名可以知道 除非另作说明

80
00:04:48,789 --> 00:04:50,324
否则默认使用 default 风格

81
00:04:51,458 --> 00:04:55,762
muted 风格柔化了
地图细节的对比度

82
00:04:55,796 --> 00:04:59,633
可以让用户的注意力更多地
集中到您显示在地图上的

83
00:04:59,666 --> 00:05:02,102
额外的图形信息上

84
00:05:02,903 --> 00:05:06,540
MKStandardMapConfiguration 也有额外的属性

85
00:05:06,573 --> 00:05:09,343
用来控制过滤特定类别的兴趣点

86
00:05:09,376 --> 00:05:11,278
以及是否显示交通路况

87
00:05:12,379 --> 00:05:15,682
我们可以总结下可用的地图配置类

88
00:05:15,716 --> 00:05:16,850
及其属性

89
00:05:18,819 --> 00:05:21,421
这个全新的 API 确保您只能

90
00:05:21,455 --> 00:05:23,824
用支持的选项组合进行配置

91
00:05:23,857 --> 00:05:27,661
您也可以以原子操作的方式
改变地图配置

92
00:05:27,694 --> 00:05:31,331
我们认为这是对当前 API 的
重大改进

93
00:05:32,799 --> 00:05:34,535
概括下我们刚刚的内容

94
00:05:34,568 --> 00:05:36,370
这一表格展示了

95
00:05:36,403 --> 00:05:40,507
新的 MKMapConfiguration 类和
MKMapType 属性之间的关联

96
00:05:42,109 --> 00:05:44,611
全新的 3D 城市体验的地图

97
00:05:44,645 --> 00:05:46,914
对硬件有一定要求

98
00:05:46,947 --> 00:05:53,020
在 iOS 中 新地图需要
搭载 A12 或更新芯片的 iPhone 和 iPad

99
00:05:53,053 --> 00:05:55,722
在 macOS 中 新地图需要

100
00:05:55,756 --> 00:05:57,958
搭载 M1 或更新芯片的电脑

101
00:05:59,593 --> 00:06:02,829
在 3D 城市体验不可用地区

102
00:06:02,863 --> 00:06:06,266
地图会自动调整为

103
00:06:06,300 --> 00:06:08,001
扁平风格新地图

104
00:06:09,236 --> 00:06:11,772
在不支持的硬件上

105
00:06:11,805 --> 00:06:13,807
新地图都会以扁平风格显示

106
00:06:15,375 --> 00:06:19,813
在搭载 M1 的Mac 中
您只需在 Xcode 中改变 OS 版本

107
00:06:19,847 --> 00:06:21,815
就可以模拟两种不同的体验

108
00:06:22,683 --> 00:06:24,585
我们鼓励您这两种体验都尝试一下

109
00:06:24,618 --> 00:06:26,753
确保您的 App 在所有设备中

110
00:06:26,787 --> 00:06:28,055
都能完美运行

111
00:06:29,423 --> 00:06:31,925
3D 城市体验在全球许多大都市区

112
00:06:31,959 --> 00:06:34,361
均可使用

113
00:06:35,362 --> 00:06:38,098
我们还会陆续增加新的城市到该列表中

114
00:06:38,131 --> 00:06:41,735
您可以去这个讲座的
相关链接的网页上

115
00:06:41,768 --> 00:06:45,272
了解更多 3D 城市体验的信息

116
00:06:45,305 --> 00:06:48,942
那些链接中也包括了如何集成新地图

117
00:06:48,976 --> 00:06:51,011
和使用地图配置 API 的内容

118
00:06:52,646 --> 00:06:55,115
现在我们来说下 Overlay

119
00:06:55,148 --> 00:06:59,520
MapKit 在很多年前就已经支持
多种样式的 Overlay

120
00:06:59,553 --> 00:07:01,021
在 iOS 16 中

121
00:07:01,054 --> 00:07:03,257
我们改进了已有的 API

122
00:07:03,290 --> 00:07:06,894
让您的 Overlay 可以与地图无缝集成

123
00:07:06,927 --> 00:07:10,163
我们首先快速回顾下 Overlay 层级

124
00:07:11,632 --> 00:07:14,434
Overlay 可以在两个不同的层级上渲染

125
00:07:14,468 --> 00:07:17,004
aboveRoads 和 aboveLabels

126
00:07:17,037 --> 00:07:20,374
MapKit 的 Overlay 插入函数都支持

127
00:07:20,407 --> 00:07:23,477
在插入时指定渲染的层级

128
00:07:24,778 --> 00:07:28,949
aboveLabels 将您的 Overlay 渲染到
所有元素之上 包括标签

129
00:07:29,716 --> 00:07:32,953
由于标签提供了重要的上下文信息

130
00:07:32,986 --> 00:07:36,857
我们建议您只在极端情况下
使用 aboveLabels 的方式

131
00:07:36,890 --> 00:07:40,661
比如，您完全不希望数据
与地图有交互的情况下

132
00:07:40,694 --> 00:07:43,263
如果您想要实现的是让内容

133
00:07:43,297 --> 00:07:45,065
显示在地图之上

134
00:07:45,098 --> 00:07:48,202
您可能需要把
emphasisStyle 属性设置为 muted

135
00:07:48,235 --> 00:07:50,938
或我们稍后讲到的混合模式

136
00:07:52,840 --> 00:07:56,610
aboveRoads 指的是 Overlay
呈现在地形之上

137
00:07:56,643 --> 00:08:00,080
包括道路 地表覆盖
或者水域

138
00:08:00,113 --> 00:08:04,418
然而 它会在标签以及

139
00:08:04,451 --> 00:08:06,119
树木和建筑的之下显示

140
00:08:06,153 --> 00:08:07,888
稍后我们会再详细了解

141
00:08:07,921 --> 00:08:10,991
aboveRoads 是 iOS 16 中
全新的默认模式

142
00:08:11,925 --> 00:08:16,230
接下来 我们来谈谈
iOS 16 中推出的新功能

143
00:08:16,263 --> 00:08:17,698
透明建筑

144
00:08:18,832 --> 00:08:21,101
不管您的 Overlay 级别

145
00:08:21,134 --> 00:08:23,504
是 aboveRoads 还是 aboveLabels

146
00:08:23,537 --> 00:08:26,373
您的 Overlay 在
无倾斜的顶视图中

147
00:08:26,406 --> 00:08:28,475
总是渲染在建筑之上

148
00:08:28,509 --> 00:08:30,711
然而 我们针对在倾斜地图中

149
00:08:30,744 --> 00:08:32,846
使用 aboveRoads 的体验

150
00:08:32,880 --> 00:08:34,648
做了一些改进

151
00:08:35,883 --> 00:08:38,318
地面物体 如树木 建筑

152
00:08:38,352 --> 00:08:41,088
在 Overlay 之上显示时

153
00:08:41,121 --> 00:08:43,023
会自动以透明的方式渲染

154
00:08:43,056 --> 00:08:45,592
从而不会完全遮挡 Overlay

155
00:08:45,626 --> 00:08:49,730
其 α 值会随着地图的倾斜角度
不同而发生改变

156
00:08:49,763 --> 00:08:54,067
如果我们把地图还原为顶视图
此时倾斜角度为 0°

157
00:08:54,101 --> 00:08:57,371
这些遮挡的地面物体
将会从视图中消失

158
00:08:57,404 --> 00:08:59,306
让您的 Overlay 完全可见

159
00:09:00,607 --> 00:09:04,811
透明建筑也适用于半透明的 Overlay

160
00:09:04,845 --> 00:09:07,748
Overlay 的 α 值
会与透明建筑的

161
00:09:07,781 --> 00:09:11,218
α 值叠加在一起

162
00:09:11,251 --> 00:09:13,921
针对 Overlay 我们还做了一个改变

163
00:09:14,855 --> 00:09:17,024
在真实地形的地图中

164
00:09:17,057 --> 00:09:18,458
添加 Overlay 时

165
00:09:18,492 --> 00:09:22,996
MapKit 会自动将地图
转换为扁平风格

166
00:09:23,030 --> 00:09:26,266
在您移除了所有 Overlay 之后

167
00:09:26,300 --> 00:09:27,668
地图又会自动还原为立体风格

168
00:09:28,635 --> 00:09:32,506
这一规则有一例外
就是 MapKit 的 directions API

169
00:09:32,539 --> 00:09:35,609
生成的 Overlay

170
00:09:35,642 --> 00:09:39,012
这些 Overlay 会自动贴合地形显示

171
00:09:39,680 --> 00:09:42,282
现在 有请 Yingxiu 来为大家展示

172
00:09:42,316 --> 00:09:45,452
Yingxiu: 谢谢 Eric
大家好 我是 Yingxiu

173
00:09:45,485 --> 00:09:47,387
我是地图 App 团队的工程师

174
00:09:47,421 --> 00:09:50,224
我会为大家展示我们
全新的 MapKit 功能

175
00:09:50,257 --> 00:09:54,094
以及用我们最新的 API 搭建

176
00:09:54,127 --> 00:09:56,363
一个完美的地图体验有多简单

177
00:09:56,396 --> 00:09:57,865
我会用我们的示例 App 来展示

178
00:09:57,898 --> 00:09:59,499
用户如何租踏板车

179
00:09:59,533 --> 00:10:01,168
环游旧金山

180
00:10:04,571 --> 00:10:06,740
我们用一个 table view 来显示

181
00:10:06,773 --> 00:10:09,109
这个 App 的各个功能

182
00:10:10,077 --> 00:10:14,915
“Operating Area” 可以让用户
看到哪里能租到踏板车

183
00:10:14,948 --> 00:10:19,753
“Ride” 可以带用户环游金门大桥

184
00:10:19,786 --> 00:10:22,689
“Explore” 为用户提供
旧金山市中心的互动地图

185
00:10:22,723 --> 00:10:25,425
用户可通过这一地图

186
00:10:25,459 --> 00:10:28,028
探索海边的景点

187
00:10:28,662 --> 00:10:32,833
“Highlights” 可以让用户
近距离查看那些必去的景点

188
00:10:33,534 --> 00:10:36,870
我们在这一讲座中
会实现和升级这些功能

189
00:10:36,904 --> 00:10:38,572
现在开始吧

190
00:10:42,576 --> 00:10:45,412
首先 我以 Operating Area 功能为例

191
00:10:45,445 --> 00:10:49,316
给大家看下应用新地图
有多简单

192
00:10:49,349 --> 00:10:50,784
然后为您介绍

193
00:10:50,817 --> 00:10:53,453
我们针对 Overlay 所做的一些改进

194
00:10:54,254 --> 00:10:57,457
我已经在 Xcode 中
打开了这一项目

195
00:10:57,491 --> 00:11:00,294
我们用 iOS 16 SDK 重新编译

196
00:11:00,327 --> 00:11:01,862
看下结果如何

197
00:11:05,399 --> 00:11:06,333
好了

198
00:11:06,366 --> 00:11:09,403
我们已经集成了全新的地图 feature

199
00:11:09,436 --> 00:11:11,471
新的地图视图有着非常丰富的细节

200
00:11:11,505 --> 00:11:13,540
以及地形上的光照和

201
00:11:13,574 --> 00:11:16,476
山丘阴影的效果

202
00:11:16,510 --> 00:11:20,581
让我们继续放大 您可以看到

203
00:11:26,053 --> 00:11:27,087
建筑 树木 以及地标

204
00:11:29,089 --> 00:11:33,093
现在我们添加一个多边形 Overlay
将我们的操作区可视化

205
00:11:37,164 --> 00:11:41,869
我已经有了操作区的多边形数据

206
00:11:41,902 --> 00:11:47,140
视图加载后 我们首先设置
region 和 cameraBoundary

207
00:11:47,174 --> 00:11:49,309
确保我们对着正确的区域

208
00:11:50,544 --> 00:11:52,913
然后 只要添加 Overlay 就可以了

209
00:11:53,914 --> 00:11:55,782
我们先编译运行一下看看

210
00:11:57,818 --> 00:12:01,522
多边形的 Overlay 从上往下看时是不透明的

211
00:12:01,555 --> 00:12:08,362
当我们继续放大 并倾斜视角

212
00:12:08,395 --> 00:12:09,897
建筑开始显现

213
00:12:09,930 --> 00:12:13,700
随着倾斜角度增大
透明度也会增加

214
00:12:13,734 --> 00:12:18,238
这一效果仅在使用
aboveRoads  Overlay 层级时才会出现

215
00:12:18,272 --> 00:12:21,141
如果您想有
透明的建筑和树木透明度

216
00:12:21,175 --> 00:12:23,510
要记得选择正确的 Overlay 层级

217
00:12:25,412 --> 00:12:28,916
Overlay 看起来不错 但我希望
地图在不倾斜的时候

218
00:12:28,949 --> 00:12:30,651
也能显示

219
00:12:30,684 --> 00:12:33,287
我们回到代码 将其设置为半透明

220
00:12:37,324 --> 00:12:39,693
我们调整 α 值为 0.8

221
00:12:44,131 --> 00:12:45,999
现在我们就有了一个透明得 Overlay

222
00:12:46,033 --> 00:12:49,736
即使没有倾斜 我也能看到
道路和建筑

223
00:12:49,770 --> 00:12:53,240
如果我继续放大 倾斜地图

224
00:12:53,273 --> 00:12:55,642
透明度还是会增加

225
00:12:55,676 --> 00:12:57,411
看起来很不错

226
00:12:57,444 --> 00:12:59,680
这就是多边形 Overlay

227
00:12:59,713 --> 00:13:03,417
接下来 我向大家展示
如何整合真实地形

228
00:13:03,450 --> 00:13:05,719
来显示有高低差的路线

229
00:13:05,752 --> 00:13:08,355
以实现我们的 “Ride” 功能

230
00:13:08,388 --> 00:13:10,657
让用户可以游览金门大桥

231
00:13:14,962 --> 00:13:17,831
我们首先配置地图视图

232
00:13:17,865 --> 00:13:20,334
我们可以用代码改变 elevationStyle

233
00:13:20,367 --> 00:13:23,303
也可以打开 Interface Builder

234
00:13:23,337 --> 00:13:24,605
右边的 Inspector 面板

235
00:13:26,874 --> 00:13:30,110
就可以看到可用的地图视图的配置选项

236
00:13:30,143 --> 00:13:32,579
在 “elevation” 处勾选 “realistic”

237
00:13:34,214 --> 00:13:36,016
现在，让我们添加路线

238
00:13:38,752 --> 00:13:41,121
我们希望在用户打开 显示路线 开关时

239
00:13:41,154 --> 00:13:44,324
能显示一条路线

240
00:13:44,358 --> 00:13:47,761
我们也会让相机对焦到路线上
并随着路线移动

241
00:13:52,599 --> 00:13:56,069
因为我们要显示的
是金门大桥的路线

242
00:13:56,103 --> 00:13:59,239
我们用 Presidio Park 入口
作为起点

243
00:13:59,273 --> 00:14:01,909
Battery Spencer 作为终点

244
00:14:05,112 --> 00:14:08,015
地图视图加载后
我们创建标注

245
00:14:08,048 --> 00:14:10,651
以标记起点和终点

246
00:14:16,557 --> 00:14:18,759
设置坐标和名称

247
00:14:18,792 --> 00:14:21,428
并加到一个标记数组中

248
00:14:21,461 --> 00:14:23,497
然后把数组添加到地图视图

249
00:14:31,839 --> 00:14:34,308
现在 我们可以看看路线折线了

250
00:14:37,211 --> 00:14:39,580
但是普通的Overlay 会让地图扁平化

251
00:14:39,613 --> 00:14:42,249
MapKit 的 Direction API
返回的折线

252
00:14:42,282 --> 00:14:44,284
将保留逼真的地形

253
00:14:45,986 --> 00:14:50,490
在这个 IBAction 函数中
如果开关打开

254
00:14:50,524 --> 00:14:54,027
我们将用前面定义的坐标
建立位置标记

255
00:14:57,998 --> 00:15:02,736
然后我们用源位置和目标位置

256
00:15:02,769 --> 00:15:06,206
创建寻路请求

257
00:15:06,240 --> 00:15:08,675
最后 获取路线

258
00:15:11,812 --> 00:15:13,847
如果获取操作成功

259
00:15:13,881 --> 00:15:16,483
只要将路线折线添加为 Overlay 即可

260
00:15:21,889 --> 00:15:22,723
好了

261
00:15:22,756 --> 00:15:24,725
我们重新编译下 看看结果如何吧

262
00:15:29,830 --> 00:15:33,100
您能看到标记自动升级到

263
00:15:33,133 --> 00:15:35,135
新的有斜度的外观

264
00:15:35,169 --> 00:15:38,572
并且完美呈现了正确的高度

265
00:15:38,605 --> 00:15:40,474
当我打开路线显示

266
00:15:40,507 --> 00:15:41,909
摄像头倾斜

267
00:15:41,942 --> 00:15:43,977
然后 就有了更完美的视角

268
00:15:46,079 --> 00:15:48,415
如您所见 路线是跟随

269
00:15:48,448 --> 00:15:50,083
地形升高的

270
00:15:50,117 --> 00:15:51,518
当导航到复杂的十字路口时

271
00:15:51,552 --> 00:15:54,121
这就非常便捷了

272
00:15:54,154 --> 00:15:57,157
它还能跟随桥梁上的道路

273
00:15:57,191 --> 00:15:59,159
还有 注意桥柱间呈现的

274
00:15:59,193 --> 00:16:01,261
路线的细节

275
00:16:03,830 --> 00:16:06,733
最后 地图真正倾斜后

276
00:16:06,767 --> 00:16:08,302
您可以看到树木前面呈现的

277
00:16:08,335 --> 00:16:11,004
蜿蜒的路线

278
00:16:11,038 --> 00:16:14,575
看 没有树木的地方

279
00:16:14,608 --> 00:16:16,176
路线颜色也消失了

280
00:16:16,210 --> 00:16:18,779
我们缩小看看这里是什么

281
00:16:22,850 --> 00:16:26,153
好 这部分的路线是穿过隧道的

282
00:16:26,186 --> 00:16:28,555
所以会以透明的方式显示

283
00:16:28,589 --> 00:16:32,259
搭载 A12 的 iOS 设备支持

284
00:16:32,292 --> 00:16:35,662
ElevationRealisticStyle 和
有高低差的路线

285
00:16:35,696 --> 00:16:39,166
如果我在更早的设备上
运行同样的 App

286
00:16:39,199 --> 00:16:44,872
就会自动转变为 2D 地图上的
2D 路线

287
00:16:44,905 --> 00:16:47,174
在 3D 城市体验中添加有高低差的路线

288
00:16:47,207 --> 00:16:49,409
就是如此简单

289
00:16:49,443 --> 00:16:51,945
接下来 再次有请 Eric

290
00:16:51,979 --> 00:16:53,247
Eric: 谢谢 Yingxiu

291
00:16:53,280 --> 00:16:55,249
这场骑踏板车环游金门大桥的旅程

292
00:16:55,282 --> 00:16:57,384
实在是令人叹为观止

293
00:16:57,417 --> 00:17:00,821
以上是 MapKit 中关于
Overlay 的新内容

294
00:17:02,556 --> 00:17:05,459
接下来要介绍的是混合模式

295
00:17:05,492 --> 00:17:09,730
这一全新 API 为您的 Overlay 的外观
和体验提供了更多的控制

296
00:17:09,763 --> 00:17:12,833
解锁了一系列创新的可能性

297
00:17:14,067 --> 00:17:16,103
我相信你们大多数人已经熟悉

298
00:17:16,136 --> 00:17:18,705
照片编辑类 App
和 Apple CoreGraphics API 中的

299
00:17:18,739 --> 00:17:21,275
混合模式

300
00:17:21,308 --> 00:17:23,177
在一个混合操作中

301
00:17:23,210 --> 00:17:25,078
两个图层会按照

302
00:17:25,112 --> 00:17:26,647
混合模式指定的

303
00:17:26,680 --> 00:17:28,815
一套公式来进行叠加

304
00:17:28,849 --> 00:17:32,486
现在 我们来看看一个
如何在 MapKit 环境下

305
00:17:32,519 --> 00:17:34,121
使用混合模式的案例

306
00:17:35,522 --> 00:17:38,458
在这个场景中 我想要重高亮

307
00:17:38,492 --> 00:17:41,128
地图中间的

308
00:17:41,161 --> 00:17:43,096
旧金山的 Presidio National Park 区域

309
00:17:43,130 --> 00:17:45,599
首先 创建一个

310
00:17:45,632 --> 00:17:47,568
裁剪成 Presidio 形状的 Overlay

311
00:17:47,601 --> 00:17:50,003
覆盖整个地图区域

312
00:17:51,338 --> 00:17:53,273
我还没有使用混合模式

313
00:17:53,307 --> 00:17:55,442
这只是一个简单的 Overlay

314
00:17:55,475 --> 00:17:58,011
就像一个很大的方形甜甜圈

315
00:17:58,045 --> 00:18:00,747
接下来 我在 Overlay 中

316
00:18:00,781 --> 00:18:04,384
使用色相混合模式 并用灰色填充

317
00:18:04,418 --> 00:18:06,320
这可以减少 Presidio 以外的

318
00:18:06,353 --> 00:18:08,288
地图的饱和度

319
00:18:08,322 --> 00:18:11,091
接下来 复制这一 Overlay

320
00:18:11,124 --> 00:18:13,460
使用强光混合模式

321
00:18:13,493 --> 00:18:14,928
并用深灰色填充

322
00:18:16,263 --> 00:18:18,732
这可以使 Presidio 周围的区域

323
00:18:18,765 --> 00:18:20,567
颜色加深

324
00:18:20,601 --> 00:18:22,236
这看起来已经很不错了

325
00:18:22,269 --> 00:18:23,937
但是 我们还要添加一个 Overlay

326
00:18:23,971 --> 00:18:27,641
这次 我们增加
Presidio 形状的 Overlay

327
00:18:27,674 --> 00:18:29,810
使用饱和混合模式

328
00:18:29,843 --> 00:18:31,311
并用黄色填充

329
00:18:32,279 --> 00:18:36,316
额 这不是我想要的效果

330
00:18:36,350 --> 00:18:38,886
这颜色太亮了

331
00:18:38,919 --> 00:18:40,687
我们试下别的

332
00:18:40,721 --> 00:18:43,924
我们试下颜色加深混合模式
使用灰色填充

333
00:18:44,992 --> 00:18:47,327
哇喔 看起来好多了

334
00:18:47,361 --> 00:18:48,795
完美

335
00:18:48,829 --> 00:18:50,697
现在 我们来看看代码

336
00:18:52,099 --> 00:18:54,434
要使用刚刚看到的效果

337
00:18:54,468 --> 00:18:57,738
我们在 MKOverlayRenderer 中
增加一个

338
00:18:57,771 --> 00:18:59,573
blendMode 属性

339
00:18:59,606 --> 00:19:01,341
您只需要在 overlay 渲染器里设置

340
00:19:01,375 --> 00:19:05,245
想要的CoreGraphics 混合模式
就可以了

341
00:19:06,113 --> 00:19:09,917
如之前所说 混合模式
和顺序相关

342
00:19:09,950 --> 00:19:11,885
栈底部的 Overlay

343
00:19:11,919 --> 00:19:13,720
与地图混合

344
00:19:13,754 --> 00:19:16,290
倒数第二个 Overlay
在前一个混合操作的基础上

345
00:19:16,323 --> 00:19:18,926
再次混合

346
00:19:18,959 --> 00:19:21,128
以此类推

347
00:19:21,161 --> 00:19:23,764
在 MapKit 中 Overlay 的顺序

348
00:19:23,797 --> 00:19:25,799
是在插入时决定的

349
00:19:25,832 --> 00:19:29,403
MKMapView 提供了很多 overlay 插入函数

350
00:19:29,436 --> 00:19:33,106
它们都支持在绝对的或相对的位置插入 overlay

351
00:19:35,576 --> 00:19:38,278
MapKit 支持各种不同的混合模式

352
00:19:38,312 --> 00:19:41,114
我们今天无法逐一介绍

353
00:19:41,148 --> 00:19:42,783
我鼓励大家讲座之后
可以都尝试一下

354
00:19:43,317 --> 00:19:45,752
以上就是混合模式的内容了

355
00:19:45,786 --> 00:19:47,087
如您所见

356
00:19:47,120 --> 00:19:49,456
混合模式是控制地图样式的

357
00:19:49,489 --> 00:19:51,258
强大工具

358
00:19:51,291 --> 00:19:54,328
您可以使用它来
高亮某些地理区域

359
00:19:54,361 --> 00:19:57,397
同时降低其它区域的对比度
来突现出那些区域

360
00:19:57,431 --> 00:19:58,599
它能做的还不仅于此

361
00:20:00,133 --> 00:20:03,637
接下来 我们来看下Selectable Map Features的功能

362
00:20:03,670 --> 00:20:06,006
这一功能呼声很高

363
00:20:06,039 --> 00:20:07,941
我很高兴终于能与大家见面了

364
00:20:09,943 --> 00:20:12,846
如果您的 App 中
已经使用了 MapKit

365
00:20:12,880 --> 00:20:16,683
那您可能会用标注来显示城市位置

366
00:20:16,717 --> 00:20:19,353
兴趣点或者是某些实体

367
00:20:20,554 --> 00:20:22,890
除非您使用了兴趣点过滤

368
00:20:22,923 --> 00:20:25,893
您用来添加的标记的地图中
已经包含了一些

369
00:20:25,926 --> 00:20:28,862
Apple 提供的简单标注

370
00:20:29,830 --> 00:20:32,866
到目前为止 您的用户只能

371
00:20:32,900 --> 00:20:34,868
与您提供的标注互动

372
00:20:35,636 --> 00:20:39,506
在 iOS 16 中
这一切即将改变

373
00:20:39,540 --> 00:20:42,643
使用我们全新的
Selectable Map Features功能 API

374
00:20:42,676 --> 00:20:47,181
您现在可以让用户
选择地图上的功能

375
00:20:48,715 --> 00:20:51,952
Selectable Map Features 里的
Feature 类型有 兴趣点

376
00:20:51,985 --> 00:20:55,689
如商店 餐厅和地标建筑

377
00:20:55,722 --> 00:20:59,059
地理区域
如城市和省份

378
00:20:59,092 --> 00:21:02,629
以及地表特征 如山脉和湖泊

379
00:21:03,897 --> 00:21:07,000
在您的 App 中使用
Selectable Map Features功能

380
00:21:07,034 --> 00:21:10,737
您只需要如下几个步骤

381
00:21:10,771 --> 00:21:14,441
首先 配置您希望可选的 feature 类型

382
00:21:14,474 --> 00:21:17,277
如我刚刚介绍的
一共有三个主要的 feature 类型

383
00:21:17,311 --> 00:21:19,279
您如果让这三种类型
全部在 App 里都可以交互

384
00:21:19,313 --> 00:21:21,782
可能没有什么意义

385
00:21:22,616 --> 00:21:24,318
对于兴趣点 feature

386
00:21:24,351 --> 00:21:27,087
您也可以使用我们现有的
过滤 API

387
00:21:27,120 --> 00:21:30,490
来限制可以显示的兴趣点类别

388
00:21:30,524 --> 00:21:31,959
从而实现可选的 feature

389
00:21:33,627 --> 00:21:36,964
其次 实现 MKMapView 的
代理回调函数

390
00:21:36,997 --> 00:21:38,932
来处理选择事件

391
00:21:38,966 --> 00:21:42,369
您可以自由选择处理这些事件

392
00:21:42,402 --> 00:21:45,372
您可能想控制选择的 feature 如何呈现

393
00:21:45,405 --> 00:21:47,674
或者您可能想显示额外的 UI

394
00:21:47,708 --> 00:21:49,510
来响应选择事件

395
00:21:50,944 --> 00:21:53,480
其三 您会希望在

396
00:21:53,514 --> 00:21:54,982
您的 App 的用户界面上

397
00:21:55,015 --> 00:21:56,917
请求和现实额外的地点信息

398
00:21:57,618 --> 00:21:59,586
嵌入在地图 feature 中的信息

399
00:21:59,620 --> 00:22:01,522
仅限于屏幕的可见范围之内

400
00:22:02,756 --> 00:22:06,059
为了给用户提供所选地点的
更多内容

401
00:22:06,093 --> 00:22:08,428
您需要请求额外信息

402
00:22:09,196 --> 00:22:11,632
让我们通过各个步骤的实现

403
00:22:11,665 --> 00:22:13,267
来了解这个全新的 API

404
00:22:14,768 --> 00:22:17,137
首先配置哪个地图 feature

405
00:22:17,171 --> 00:22:18,839
是可选的

406
00:22:18,872 --> 00:22:22,376
使用新的
selectableMapFeatures 属性

407
00:22:23,977 --> 00:22:27,714
您可以使用包含兴趣点

408
00:22:27,748 --> 00:22:29,850
地理区域和地表特征的任意组合

409
00:22:29,883 --> 00:22:32,619
一旦配置好了可选的地图 feature

410
00:22:32,653 --> 00:22:35,389
如果用户点击这些 feature

411
00:22:35,422 --> 00:22:38,258
您就会收到新的代理回调

412
00:22:38,292 --> 00:22:41,695
让您可以自定义选择行为

413
00:22:41,728 --> 00:22:45,732
您收到的第一个回调就是
新的 didSelect annotation 回调

414
00:22:46,333 --> 00:22:50,404
这一回调函数可供您

415
00:22:50,437 --> 00:22:51,839
使用稍后介绍的全新请求 API

416
00:22:51,872 --> 00:22:54,842
来请求地图条目有关的额外数据

417
00:22:56,210 --> 00:23:00,914
您收到的第二个回调是
已有的 viewFor annotation 回调

418
00:23:00,948 --> 00:23:03,183
您可以用它来定制视图

419
00:23:03,217 --> 00:23:06,053
从而在选定状态中显示

420
00:23:06,086 --> 00:23:07,955
我们为这个已有的 API

421
00:23:07,988 --> 00:23:10,991
增加了一个全新的标注类型

422
00:23:11,024 --> 00:23:13,760
称之为 MKMapFeatureAnnotation

423
00:23:13,794 --> 00:23:16,463
在用户选择地图 feature 时

424
00:23:16,496 --> 00:23:18,699
这个类会被传给标注视图

425
00:23:19,800 --> 00:23:23,003
MKMapFeatureAnnotation 类有许多属性

426
00:23:23,036 --> 00:23:25,138
您可以通过查看 featureType 属性

427
00:23:25,172 --> 00:23:26,640
来判断 feature 的类型是兴趣点

428
00:23:26,673 --> 00:23:28,041
地理区域

429
00:23:28,075 --> 00:23:30,344
还是地表特征

430
00:23:31,345 --> 00:23:33,814
如果地图 feature 是兴趣点

431
00:23:33,847 --> 00:23:35,616
通过 pointOfInterestCategory 属性

432
00:23:35,649 --> 00:23:37,818
您可知道这是哪种类型的兴趣点

433
00:23:37,851 --> 00:23:40,287
通过 iconStyle 属性

434
00:23:40,320 --> 00:23:42,756
您可获得关于图标的额外信息

435
00:23:42,789 --> 00:23:45,125
比如 背景颜色

436
00:23:45,158 --> 00:23:46,727
和图标图片

437
00:23:48,262 --> 00:23:51,598
我们来看一个
如何使用 viewFor annotation 回调

438
00:23:51,632 --> 00:23:53,600
来自定义标注视图的案例

439
00:23:55,102 --> 00:23:57,738
如果您想要获得和地图 App

440
00:23:57,771 --> 00:24:00,007
一样的选择样式 您只需要

441
00:24:00,040 --> 00:24:01,108
返回 nil

442
00:24:02,309 --> 00:24:04,845
如果您想自定义选择样式

443
00:24:04,878 --> 00:24:06,947
您可以返回一个标注视图

444
00:24:06,980 --> 00:24:09,783
这和您实现自己的标注是相同的方式

445
00:24:10,784 --> 00:24:13,554
MKMarkerAnnotationView 是一个不错的选择

446
00:24:13,587 --> 00:24:15,689
它能为您提供和地图 App

447
00:24:15,722 --> 00:24:17,024
一样的气泡样式

448
00:24:17,057 --> 00:24:18,525
和渐变效果

449
00:24:18,559 --> 00:24:21,428
您也可以指定颜色和图标

450
00:24:22,429 --> 00:24:26,333
在这个示例中 我用了
从 feature 的图标风格中

451
00:24:26,366 --> 00:24:29,870
获得的图片 仅仅改了一下颜色

452
00:24:29,903 --> 00:24:31,872
让其与 App 的色调相匹配

453
00:24:33,040 --> 00:24:35,008
如果您想全部都自定义

454
00:24:35,042 --> 00:24:37,444
可以使用您创建的

455
00:24:37,477 --> 00:24:39,079
任何标注视图子类

456
00:24:40,047 --> 00:24:42,950
如您刚看到的 您可以使用
feature 标注

457
00:24:42,983 --> 00:24:45,986
来获取选中 feature 的视觉信息

458
00:24:46,854 --> 00:24:51,925
通过将 feature 标注传递给
全新的 MKMapItemRequest API

459
00:24:51,959 --> 00:24:55,028
您也可以为选中的 feature
获取一个地图条目

460
00:24:57,231 --> 00:25:00,901
地图条目里有关于地点的
额外的元数据

461
00:25:00,934 --> 00:25:06,139
如地址 名称 电话号码 URL

462
00:25:07,508 --> 00:25:11,144
如果您的用户想要了解的
额外的元数据

463
00:25:11,178 --> 00:25:13,881
在 MapKit 中不可用时

464
00:25:13,914 --> 00:25:15,983
地图条目也提供了
跳转至地图 App 的功能

465
00:25:17,184 --> 00:25:20,220
这部分 我再次有请 Yingxiu
为我们演示

466
00:25:20,254 --> 00:25:21,688
Yingxiu: 谢谢 Eric

467
00:25:22,956 --> 00:25:26,159
Eric 刚刚和大家介绍了
Selectable Map Features

468
00:25:26,193 --> 00:25:30,063
我来给大家演示下
使用这个 API 有多么简单

469
00:25:33,000 --> 00:25:36,470
让我们继续实现示例 App 的
Explore 功能

470
00:25:36,503 --> 00:25:40,107
我们想要用户可以探索海边的

471
00:25:40,140 --> 00:25:41,575
一些有趣的地方

472
00:25:41,608 --> 00:25:43,076
如果他们点击兴趣点

473
00:25:43,110 --> 00:25:44,978
将会弹出标注

474
00:25:45,012 --> 00:25:48,315
我们会为点击的位置播放镜头动画

475
00:25:48,348 --> 00:25:50,617
在底部显示信息卡

476
00:25:52,452 --> 00:25:55,422
首先 我们过滤地图上的兴趣点

477
00:25:55,455 --> 00:25:59,059
移除与我们的行程不相关的类别

478
00:26:00,661 --> 00:26:03,230
除了在代码中应用过滤

479
00:26:03,263 --> 00:26:07,167
我们还可以在
Interface Builder 的 Inspector 中设置

480
00:26:07,201 --> 00:26:09,069
我们选择地图视图

481
00:26:09,102 --> 00:26:11,371
打开右边的 Inspector

482
00:26:13,307 --> 00:26:16,243
我们选择排除过滤器

483
00:26:18,278 --> 00:26:21,048
然后选择不需要的类别

484
00:26:21,081 --> 00:26:25,319
比如 机场

485
00:26:25,352 --> 00:26:31,925
汽车租赁 医院和洗衣店

486
00:26:33,227 --> 00:26:36,163
现在地图视图上只剩下

487
00:26:36,196 --> 00:26:37,664
我们想要的那些兴趣点了

488
00:26:42,436 --> 00:26:45,639
启用 Selectable Map Features 很简单

489
00:26:45,672 --> 00:26:47,908
我们只需要指定

490
00:26:47,941 --> 00:26:50,911
一个想要的可选 feature 的选项集

491
00:26:54,848 --> 00:26:59,152
在这个示例 App 中
我们只用了兴趣点

492
00:26:59,186 --> 00:27:00,921
但别忘了 我们也支持

493
00:27:00,954 --> 00:27:02,489
可选的地表特征

494
00:27:02,523 --> 00:27:03,991
和地理区域

495
00:27:10,397 --> 00:27:15,169
我们可以用已有的
代理方法 mapView viewForAnnotation

496
00:27:15,202 --> 00:27:17,404
来为 feature 标注创建一个视图

497
00:27:19,039 --> 00:27:22,242
这里 我们暂时只返回 nil

498
00:27:26,280 --> 00:27:29,883
以使用 MapKit 默认提供的
有着渐变色的标注

499
00:27:30,651 --> 00:27:32,986
我们稍后会回来进行定制

500
00:27:35,756 --> 00:27:38,158
如果标注处于选中的状态

501
00:27:38,192 --> 00:27:41,962
新的代理回调
mapView didSelectAnnotation 会

502
00:27:41,995 --> 00:27:44,598
通知我们

503
00:27:46,200 --> 00:27:49,636
我们用这一功能来实现镜头动画

504
00:27:49,670 --> 00:27:51,839
并放大选中的 feature

505
00:27:53,640 --> 00:27:58,111
首先 我们把 annotation 转换为 featureAnnotation

506
00:27:58,145 --> 00:28:00,814
然后创建一个地图条目请求

507
00:28:04,751 --> 00:28:08,856
这是一个通过 feature 标注
获得额外地点信息的

508
00:28:08,889 --> 00:28:10,691
全新 API

509
00:28:11,992 --> 00:28:13,994
我们发送请求

510
00:28:19,099 --> 00:28:21,802
一旦获取信息成功

511
00:28:21,835 --> 00:28:24,204
我们会通过镜头动画移动到地图条目上

512
00:28:27,007 --> 00:28:29,543
镜头动画结束后

513
00:28:29,576 --> 00:28:31,879
我们会把 feature 条目的细节

514
00:28:31,912 --> 00:28:33,647
显示在一张信息卡上

515
00:28:34,781 --> 00:28:36,984
重新编译看看效果如何

516
00:28:41,555 --> 00:28:44,892
我们选一个海边的兴趣点

517
00:28:47,261 --> 00:28:49,229
渐变的标注出来了

518
00:28:49,263 --> 00:28:51,932
镜头移动到标注位置

519
00:28:51,965 --> 00:28:53,667
然后信息卡出现

520
00:28:54,601 --> 00:28:55,802
这是一个博物馆

521
00:28:55,836 --> 00:28:57,037
这是 URL

522
00:28:57,070 --> 00:28:59,039
如果感兴趣的话
我们可以进一步了解

523
00:28:59,773 --> 00:29:01,708
这里有详细地址

524
00:29:03,443 --> 00:29:05,279
如果这是个地标建筑

525
00:29:05,312 --> 00:29:07,748
就能看到其精美的图解

526
00:29:14,655 --> 00:29:16,223
现在回到代码

527
00:29:16,256 --> 00:29:18,125
为选中的状态

528
00:29:18,158 --> 00:29:19,293
自定义我们的标注

529
00:29:22,663 --> 00:29:25,899
我们创建一个 MKMarkerAnnotationView
来替代 nil

530
00:29:26,700 --> 00:29:29,703
我们把 annotation 转换为 featureAnnotation

531
00:29:29,736 --> 00:29:33,674
这样可以使用其中的具体数据
来自定义视图

532
00:29:34,875 --> 00:29:37,978
我们给标注加上略带紫色的色彩

533
00:29:38,011 --> 00:29:41,181
让它和 App 的风格一致

534
00:29:42,950 --> 00:29:45,552
我们也可以定制标注的字形

535
00:29:47,054 --> 00:29:51,158
SelectedGlyphImage
是被选中状态的标注字形

536
00:29:52,659 --> 00:29:54,895
GlyphImage 尺寸则要小一些

537
00:29:54,928 --> 00:29:58,332
是未被选中状态的标注字形

538
00:29:59,333 --> 00:30:02,202
我们推荐给它们指定相同的字形

539
00:30:02,236 --> 00:30:06,573
这样从非选中状态到选中状态的
过渡才比较自然

540
00:30:08,242 --> 00:30:12,346
我们使用 featureAnnotation 中的
iconStyle 图像

541
00:30:13,881 --> 00:30:17,951
MKIconStyle 是 iOS 16 中的
一种新的类型

542
00:30:17,985 --> 00:30:22,689
用来保存选中的兴趣点的图标和颜色信息

543
00:30:22,723 --> 00:30:24,758
重新编译 看看效果如何

544
00:30:29,696 --> 00:30:30,931
不错

545
00:30:30,964 --> 00:30:32,332
现在我们有了一个

546
00:30:32,366 --> 00:30:34,334
与 App 色调相匹配的标注了

547
00:30:34,368 --> 00:30:36,503
它仍然使用了 Apple 的图标

548
00:30:40,374 --> 00:30:43,143
现在您了解了如何在您自己的 App 中

549
00:30:43,177 --> 00:30:46,113
使用 Selectable Map Features
和自定义标注了

550
00:30:46,146 --> 00:30:48,382
现在 我们重新有请 Eric

551
00:30:49,183 --> 00:30:50,384
Eric: 谢谢 Yingxiu

552
00:30:50,417 --> 00:30:53,554
如您所见 Selectable Map Features API

553
00:30:53,587 --> 00:30:55,689
让您的用户可以用一种全新的方式

554
00:30:55,722 --> 00:30:57,424
与地图互动

555
00:30:57,457 --> 00:30:59,359
MapFeatureAnnotation 类

556
00:30:59,393 --> 00:31:02,262
与 MapView 代理回调函数
相结合

557
00:31:02,296 --> 00:31:05,065
让您可以自定义
选中项的外观和特性

558
00:31:05,098 --> 00:31:08,235
而 MapItemRequest 让您可以
获得一个地图条目的 feature 信息

559
00:31:08,268 --> 00:31:10,437
从而可以访问

560
00:31:10,470 --> 00:31:11,705
关于选中的地图 feature 的

561
00:31:11,738 --> 00:31:13,440
额外信息

562
00:31:14,074 --> 00:31:16,977
接下来 我们来看看
Look Around 功能

563
00:31:18,245 --> 00:31:21,782
iOS 13 的 地图 App
就推出了 Look Around

564
00:31:21,815 --> 00:31:24,117
倍受欢迎

565
00:31:24,151 --> 00:31:25,319
您可以使用 Look Around

566
00:31:25,352 --> 00:31:27,621
获得沉浸式的实地体验

567
00:31:27,654 --> 00:31:30,958
Look Around 的影像
极尽细节

568
00:31:30,991 --> 00:31:33,994
利用 3D 模型提供了其它地图

569
00:31:34,027 --> 00:31:35,362
都无法比拟的真实感

570
00:31:37,331 --> 00:31:39,199
Look Around 已开放

571
00:31:39,233 --> 00:31:41,468
全球多个地区 包括这些城市

572
00:31:41,502 --> 00:31:43,036
和国家

573
00:31:44,872 --> 00:31:47,908
我们会持续增加新地区的支持

574
00:31:47,941 --> 00:31:51,111
您可以在本次讲座附带的链接中的
可用特性网页上

575
00:31:51,144 --> 00:31:54,715
查找 Look Around 部分的内容
来了解更多

576
00:31:54,748 --> 00:31:58,919
在 iOS 16中 我们将 Look Around
加入到了 MapKit 中

577
00:31:58,952 --> 00:32:01,889
只需简单三步即可应用

578
00:32:03,590 --> 00:32:05,692
首先 检查数据在目标区域

579
00:32:05,726 --> 00:32:07,694
是否可用

580
00:32:08,362 --> 00:32:11,131
即使 Look Around
在您的目标区域可用

581
00:32:11,164 --> 00:32:13,934
但并不是每个位置的街道
都可见

582
00:32:13,967 --> 00:32:15,736
因此 Look Around 影像

583
00:32:15,769 --> 00:32:18,305
也有可能不可用

584
00:32:18,338 --> 00:32:21,475
确认 Look Around 数据可用后

585
00:32:21,508 --> 00:32:22,910
您需要将该数据

586
00:32:22,943 --> 00:32:25,045
传送到 Look Around View Controller

587
00:32:25,078 --> 00:32:26,713
或 Look Around Snapshotter

588
00:32:27,848 --> 00:32:30,684
最后 如果 Look Around 数据可用

589
00:32:30,717 --> 00:32:32,386
您可以更新 App 界面

590
00:32:32,419 --> 00:32:35,155
来显示 Look Around 预览

591
00:32:35,189 --> 00:32:37,791
我们看看完成这三个步骤

592
00:32:37,824 --> 00:32:39,826
您所要用到的新的 API

593
00:32:41,762 --> 00:32:44,631
尝试显示 Look Around 预览
的第一步是

594
00:32:44,665 --> 00:32:46,800
检查数据的可用性

595
00:32:46,834 --> 00:32:50,304
因此 您需要
创建 MKLookAroundSceneRequest

596
00:32:50,337 --> 00:32:54,208
这是 iOS 16 新推出的类

597
00:32:54,241 --> 00:32:57,845
您可以通过坐标或地图条目

598
00:32:57,878 --> 00:32:59,313
初始化一个新的实例

599
00:33:00,547 --> 00:33:03,984
接下来 是获取场景属性

600
00:33:04,017 --> 00:33:07,855
这是一个可选的异步属性

601
00:33:07,888 --> 00:33:11,525
如果数据可用
会返回一个场景实例

602
00:33:11,558 --> 00:33:12,926
如果数据不可用

603
00:33:12,960 --> 00:33:15,128
返回的是 nil

604
00:33:15,162 --> 00:33:17,297
如果请求出错

605
00:33:17,331 --> 00:33:18,765
会抛出一个错误

606
00:33:20,200 --> 00:33:22,402
MKLookAroundScene 是无属性的

607
00:33:22,436 --> 00:33:23,871
黑盒对象

608
00:33:23,904 --> 00:33:25,205
它的功能是作为一个令牌

609
00:33:25,239 --> 00:33:27,908
确保 Look Around 在

610
00:33:27,941 --> 00:33:29,510
请求区域的可用性

611
00:33:30,978 --> 00:33:33,914
要显示一个可交互的 Look Around
场景预览

612
00:33:33,947 --> 00:33:35,883
您只需将场景

613
00:33:35,916 --> 00:33:38,652
作为构造参数传给

614
00:33:38,685 --> 00:33:41,121
新的 MKLookAroundViewController 实例

615
00:33:41,154 --> 00:33:43,857
或者将其赋给已有实例的

616
00:33:43,891 --> 00:33:46,527
可以读写的 scene 属性

617
00:33:46,560 --> 00:33:49,596
或者 如您需要静态图像

618
00:33:49,630 --> 00:33:51,331
也可以将场景

619
00:33:51,365 --> 00:33:53,934
作为构造参数传给

620
00:33:53,967 --> 00:33:55,702
新的 MKLookAroundViewSnapshotter
实例

621
00:33:55,736 --> 00:33:58,639
随后读取其 snapshot 异步属性

622
00:34:00,174 --> 00:34:01,942
MKLookAroundViewController 类

623
00:34:01,975 --> 00:34:04,311
可让嵌入较小尺寸的
Look Around 静态预览

624
00:34:04,344 --> 00:34:07,814
变得更加简单

625
00:34:07,848 --> 00:34:09,683
用户还可以点击预览

626
00:34:09,716 --> 00:34:12,219
进入全屏的 Look Around
交互会话

627
00:34:13,687 --> 00:34:16,557
现在 我们再次有请 Yingxiu

628
00:34:16,590 --> 00:34:20,160
为我们演示将其整合到一起
是多么简单

629
00:34:20,928 --> 00:34:22,930
Yingxiu: 谢谢 Eric

630
00:34:22,963 --> 00:34:26,300
Eric 给我们展示了 MapKit 中

631
00:34:26,333 --> 00:34:27,868
强大的 Look Around 体验支持

632
00:34:27,901 --> 00:34:30,370
接下来 我为大家演示
将其整合到我们的示例 App 中

633
00:34:30,404 --> 00:34:32,472
有多么简单

634
00:34:32,506 --> 00:34:36,743
在此之前 我们先了解
示例 App 的最后一个功能 Highlights

635
00:34:36,777 --> 00:34:39,880
用户可以看到必去地点的
真实场景

636
00:34:44,251 --> 00:34:47,254
在屏幕顶部的分段控件中
已经有了旧金山的一些

637
00:34:47,287 --> 00:34:49,723
地标性建筑的名称

638
00:34:50,757 --> 00:34:52,359
用户点击的时候

639
00:34:52,392 --> 00:34:54,728
我们希望可以将镜头移动到

640
00:34:54,761 --> 00:34:55,929
选中的位置

641
00:34:57,030 --> 00:35:01,201
并且在底部显示
Look around 预览

642
00:35:01,235 --> 00:35:03,637
供用户跳转到全屏界面

643
00:35:04,404 --> 00:35:05,372
我们开始吧

644
00:35:06,907 --> 00:35:08,909
首先 需要为我们的容器视图

645
00:35:08,942 --> 00:35:10,310
添加一个 Look Around 预览

646
00:35:22,723 --> 00:35:24,558
我们先到尺寸检查器

647
00:35:27,661 --> 00:35:33,400
为其指定一个位置和尺寸

648
00:35:37,171 --> 00:35:39,373
一开始这个预览窗口要隐藏起来

649
00:35:39,406 --> 00:35:45,512
所以我们打开属性检查器
勾选 Hidden

650
00:35:48,415 --> 00:35:51,518
接下来 我们要
创建 Look Around View Controller

651
00:36:00,027 --> 00:36:02,362
将其嵌入容器视图

652
00:36:09,303 --> 00:36:11,138
和其它 segue 一样

653
00:36:11,171 --> 00:36:13,207
我需要为其指定一个标识符

654
00:36:15,008 --> 00:36:16,443
我们命名为

655
00:36:16,476 --> 00:36:22,583
“presentLookAroundEmbedded”

656
00:36:27,988 --> 00:36:30,057
然后导入到代码中

657
00:36:44,071 --> 00:36:46,640
命名为“preview”

658
00:36:46,673 --> 00:36:49,476
稍后会再让其显示

659
00:36:53,547 --> 00:36:56,817
现在 我们已经声明了一个
Look Around view controller

660
00:36:56,850 --> 00:36:59,653
只需要在 prepare 函数中获得
View Controller 的实例

661
00:37:04,391 --> 00:37:06,960
确保 segue 标识符匹配

662
00:37:12,432 --> 00:37:16,170
然后 在分段控件的 action 函数中

663
00:37:16,203 --> 00:37:19,740
我们用地标名称
创建一个本地搜索

664
00:37:24,511 --> 00:37:27,748
如果请求成功 将会获得

665
00:37:27,781 --> 00:37:30,484
用于接下来的镜头动画

666
00:37:30,517 --> 00:37:32,452
和 Look Around 场景的
地图条目

667
00:37:35,589 --> 00:37:37,124
镜头动画方面

668
00:37:37,157 --> 00:37:40,861
我们首先需要用新的 API
创建一个镜头 MKMapCamera

669
00:37:44,665 --> 00:37:47,568
来看向地图条目

670
00:37:47,601 --> 00:37:50,637
我们使用地图视图边框大小
作为可见大小

671
00:37:50,671 --> 00:37:52,873
将允许倾斜设置为 true

672
00:37:56,610 --> 00:37:59,179
这样就能对地标使用倾斜视图

673
00:37:59,213 --> 00:38:01,248
而其它地区使用顶视图

674
00:38:02,482 --> 00:38:04,551
把镜头赋给 camera 就行了

675
00:38:07,120 --> 00:38:09,389
镜头动画结束以后

676
00:38:09,423 --> 00:38:11,859
就可以显示其
Look Around 预览了

677
00:38:15,262 --> 00:38:18,432
首先 我们需要确定
这一地图条目的

678
00:38:18,465 --> 00:38:20,801
Look Around 数据是否可用

679
00:38:20,834 --> 00:38:22,536
为此 我们需要用

680
00:38:22,569 --> 00:38:24,738
新的 LookAroundSceneRequest 类

681
00:38:25,339 --> 00:38:28,609
创建我们的请求 传入地图条目

682
00:38:29,610 --> 00:38:31,645
然后执行请求

683
00:38:36,650 --> 00:38:39,620
如果获取场景的请求成功

684
00:38:39,653 --> 00:38:40,787
只要将场景

685
00:38:40,821 --> 00:38:43,724
赋给我们的 Look Around View Controller

686
00:38:43,757 --> 00:38:47,294
如果没有错误
但场景返回 nil

687
00:38:47,327 --> 00:38:51,331
意味着 Look Around 数据
在请求的位置不可用

688
00:38:53,567 --> 00:38:55,802
最后 不要忘了显示预览

689
00:38:57,271 --> 00:38:59,106
我们看下在 App 中
的效果如何吧

690
00:39:04,144 --> 00:39:06,346
我们试下轮渡大厦

691
00:39:08,582 --> 00:39:09,483
来了

692
00:39:09,516 --> 00:39:11,919
轮渡大厦是地标建筑
所以我们能看到

693
00:39:11,952 --> 00:39:14,254
这一精美绝伦的

694
00:39:14,288 --> 00:39:16,056
镜头视角

695
00:39:16,089 --> 00:39:17,891
最后 Look Around 预览出现

696
00:39:18,825 --> 00:39:21,495
我们试下另一个地方 龙门

697
00:39:23,263 --> 00:39:25,098
龙门不是地标建筑

698
00:39:25,132 --> 00:39:26,767
所以我们看到的是
顶视图

699
00:39:29,469 --> 00:39:31,939
我们点击预览 进入全屏

700
00:39:34,174 --> 00:39:37,177
这是一个交互式视图
所以我可以操作导航

701
00:39:42,015 --> 00:39:45,319
在 Look Around 全屏视图中

702
00:39:45,352 --> 00:39:47,187
我能看到这些精美的图标
和标注

703
00:39:51,792 --> 00:39:54,795
在您的 App 中添加
强大的 Look Around 体验

704
00:39:54,828 --> 00:39:56,063
就是如此简单

705
00:39:56,096 --> 00:39:57,998
我们再次有请 Eric

706
00:39:58,699 --> 00:39:59,967
Eric: 谢谢 Yingxiu

707
00:40:00,000 --> 00:40:01,768
Look Around 的
Interface Builder 支持

708
00:40:01,802 --> 00:40:03,170
让其开发更便捷

709
00:40:03,904 --> 00:40:06,573
我们今天探索了很多话题

710
00:40:07,541 --> 00:40:09,810
包括自动集成新地图

711
00:40:09,843 --> 00:40:12,112
新的地图配置 API

712
00:40:12,145 --> 00:40:14,448
Overlay 的新行为和改进

713
00:40:14,481 --> 00:40:17,417
以及类似 Selectable Map Features

714
00:40:17,451 --> 00:40:19,219
和 Look Around 这样的新特性

715
00:40:19,253 --> 00:40:20,954
我们相信大家都一致认同

716
00:40:20,988 --> 00:40:24,958
可以通过地图体验
让您的 App 更上一层楼

717
00:40:24,992 --> 00:40:27,160
我们迫不及待想看到您的成果了

718
00:40:28,028 --> 00:40:29,730
在结束之前 还有几点

719
00:40:29,763 --> 00:40:30,898
我想跟大家分享

720
00:40:32,332 --> 00:40:34,801
一如往常 您的反馈可以帮助我们

721
00:40:34,835 --> 00:40:37,838
进行下一步的优化

722
00:40:37,871 --> 00:40:40,741
所以请使用反馈助理

723
00:40:40,774 --> 00:40:43,911
给我们发送 bug 报告
以及对您 App

724
00:40:43,944 --> 00:40:45,279
最有用的功能

725
00:40:46,980 --> 00:40:50,050
另外 我们更新了现有的示例代码

726
00:40:50,083 --> 00:40:52,319
里面包含了我们刚刚所讨论的内容

727
00:40:52,352 --> 00:40:53,954
欢迎大家去查看

728
00:40:55,322 --> 00:40:58,792
最后 我们发布了
全新的 REST API

729
00:40:58,825 --> 00:41:00,527
您也可以去了解一下

730
00:41:00,561 --> 00:41:02,796
我们相信 如果您想将您的

731
00:41:02,829 --> 00:41:05,332
地理编码 ETA 确认或者其它调用
转到服务器上的话

732
00:41:05,365 --> 00:41:09,603
这些 API 就能提供帮助

733
00:41:10,904 --> 00:41:13,140
更多细节 请查看题为

734
00:41:13,173 --> 00:41:16,543
“Meet Apple Maps Server APIs”
的讲座

735
00:41:17,678 --> 00:41:20,814
我再次谨代表地图团队
感谢大家的观看

736
00:41:20,848 --> 00:41:22,850
齐: 祝您有一个愉快的 WWDC 之旅

737
00:41:22,883 --> 00:41:25,853
[古怪的音乐]

