1
00:00:00,000 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:09,710
♪

3
00:00:09,710 --> 00:00:12,145
您好！我是
Kendall Bagley

4
00:00:12,145 --> 00:00:14,982
Safari 浏览器
团队的软件工程师

5
00:00:14,982 --> 00:00:19,486
自从上次我们
在 WWDC 相遇已经过去一年了

6
00:00:19,486 --> 00:00:21,488
今天 我们会来聊聊

7
00:00:21,488 --> 00:00:23,957
Safari 浏览器
和 WebKit 上的所有绝妙的

8
00:00:23,957 --> 00:00:25,425
新功能和改进

9
00:00:25,425 --> 00:00:28,629
包括今年 WWDC 的最新更新

10
00:00:28,629 --> 00:00:32,032
以及过去一整年间的积累

11
00:00:32,032 --> 00:00:35,335
说实话 这一年可真够忙的！

12
00:00:35,335 --> 00:00:38,372
从去年秋天起
每次 Safari 的版本更新

13
00:00:38,372 --> 00:00:42,209
都带来了各位网页开发者一直想要的

14
00:00:42,209 --> 00:00:44,211
令人激动的全新功能

15
00:00:44,211 --> 00:00:47,014
一年来 我们做出的所有改进

16
00:00:47,014 --> 00:00:49,349
都是在响应开发者分享给我们的

17
00:00:49,349 --> 00:00:51,451
反馈中的重点

18
00:00:51,451 --> 00:00:55,022
比如用 :has()
伪类添加了父选择器

19
00:00:55,022 --> 00:00:59,059
新的 flexbox inspector
还有容器查询功能

20
00:00:59,059 --> 00:01:02,362
我们想要在优化和简化
您的日常工作的同时

21
00:01:02,362 --> 00:01:05,032
构建出最强大的

22
00:01:05,032 --> 00:01:06,400
Web 开发软件

23
00:01:06,400 --> 00:01:09,670
实际上 画面上的
就是我们今天要介绍的

24
00:01:09,670 --> 00:01:11,872
一部分新内容

25
00:01:11,872 --> 00:01:15,242
但我们不可能在短短的一个讲座里

26
00:01:15,242 --> 00:01:18,378
面面俱到的讲清楚一切

27
00:01:18,378 --> 00:01:23,150
过去一年间 Safari 浏览器

28
00:01:23,150 --> 00:01:26,019
经历了七次版本更新
带来了总计 162 个

29
00:01:26,019 --> 00:01:27,721
新网页平台功能

30
00:01:27,721 --> 00:01:31,692
我们很荣幸能为您提供那么多新工具

31
00:01:31,692 --> 00:01:34,361
来帮助您建设网站和网页 App

32
00:01:34,361 --> 00:01:38,932
对 macOS 来说
尽快查看更新内容的最佳方法

33
00:01:38,932 --> 00:01:42,836
就是使用
Safari Technology Preview

34
00:01:42,836 --> 00:01:45,339
在那里 您可以试用最新最棒的

35
00:01:45,339 --> 00:01:48,308
Safari 和 WebKit 功能

36
00:01:48,308 --> 00:01:51,011
并帮助我们了解还需改进之处

37
00:01:51,011 --> 00:01:55,148
但如您所见 新功能可真是有一大堆

38
00:01:55,148 --> 00:01:56,250
让我们来看看

39
00:01:56,250 --> 00:01:59,086
接下来要讲解的内容吧

40
00:01:59,086 --> 00:02:03,557
今天我们要了解一下
新的 HTML 功能

41
00:02:03,557 --> 00:02:05,192
CSS 改进

42
00:02:05,192 --> 00:02:09,463
有一大堆改进 帮您改善代码架构

43
00:02:09,463 --> 00:02:15,435
新的 Web Inspector 工具
多种新 web API

44
00:02:15,435 --> 00:02:19,206
出色的 JavaScript
和 WebAssembly 功能

45
00:02:19,206 --> 00:02:23,210
以及安全和隐私方面的改进

46
00:02:23,210 --> 00:02:27,281
首先 让我们来看看
HTML 有哪些更新

47
00:02:27,281 --> 00:02:29,750
我创建了一个网页供我和同事使用

48
00:02:29,750 --> 00:02:32,753
让我们拿它当作示例

49
00:02:32,753 --> 00:02:36,223
我这个人比较节俭 喜欢再利用衣服

50
00:02:36,223 --> 00:02:39,226
好让我的衣橱更加持久

51
00:02:39,226 --> 00:02:41,461
所以我觉得一个衣物交换网站

52
00:02:41,461 --> 00:02:46,233
应该是一个好主意
可以让我们的团队也参与进来

53
00:02:46,233 --> 00:02:49,670
我设计的网站有一个请求物品按键

54
00:02:49,670 --> 00:02:51,338
能让您在发现一件中意的衣服时

55
00:02:51,338 --> 00:02:54,174
展示一个供您填写的表单

56
00:02:54,174 --> 00:02:56,577
我想在整个
网页的上方 一个覆盖层上

57
00:02:56,577 --> 00:02:58,812
展示这个表单

58
00:02:58,812 --> 00:03:01,882
新的对话框元素
提供了一个非常简单的方法

59
00:03:01,882 --> 00:03:06,253
可以稳定而方便的创建覆盖层

60
00:03:06,253 --> 00:03:08,789
好创建我们的申请表

61
00:03:08,789 --> 00:03:11,959
CSS 中新的背景伪元素

62
00:03:11,959 --> 00:03:14,461
让我们可以设置模态后面

63
00:03:14,461 --> 00:03:16,330
背景的样式

64
00:03:16,330 --> 00:03:19,867
让我们请求一个物品 调出对话框

65
00:03:19,867 --> 00:03:22,369
看到这阴影和动画了吗？

66
00:03:22,369 --> 00:03:24,471
看起来真棒！

67
00:03:24,471 --> 00:03:27,374
有人在网站上申请了物品之后

68
00:03:27,374 --> 00:03:28,575
发布它的人

69
00:03:28,575 --> 00:03:32,980
要能够接受这个请求

70
00:03:32,980 --> 00:03:35,415
在页面底部 有一个轮播

71
00:03:35,415 --> 00:03:38,452
可以让您翻阅所有收到的请求

72
00:03:38,452 --> 00:03:41,788
但我不希望有人因为

73
00:03:41,788 --> 00:03:44,591
鼠标或键盘的误点按

74
00:03:44,591 --> 00:03:46,360
与这些不是在最前面的

75
00:03:46,360 --> 00:03:49,463
按钮或文本框互动

76
00:03:49,463 --> 00:03:52,766
我可以使用
inert 属性来解决这个问题

77
00:03:52,766 --> 00:03:55,202
在 JavaScript 的这里

78
00:03:55,202 --> 00:03:56,937
动态应用 inert 属性

79
00:03:56,937 --> 00:04:00,541
我就可以在用户切换轮播时

80
00:04:00,541 --> 00:04:02,843
禁用与非当前轮播卡片上

81
00:04:02,843 --> 00:04:04,945
元素的互动

82
00:04:04,945 --> 00:04:08,782
Inert 还能关闭

83
00:04:08,782 --> 00:04:11,885
辅助技术的互动 防止屏幕阅读器

84
00:04:11,885 --> 00:04:14,688
读出那些禁用的项目

85
00:04:14,688 --> 00:04:16,523
这能更清晰的引导系统

86
00:04:16,523 --> 00:04:20,661
知道应该与哪些元素交互

87
00:04:20,661 --> 00:04:25,399
最后 对 HTML 来说
还有新的图像延迟加载功能

88
00:04:25,399 --> 00:04:27,534
在我的网站上 那些头部的图标

89
00:04:27,534 --> 00:04:32,339
需要立刻加载 但那些初次加载时

90
00:04:32,339 --> 00:04:34,875
处在屏幕外的衣物图片

91
00:04:34,875 --> 00:04:37,511
可以对它们使用延迟加载

92
00:04:37,511 --> 00:04:40,881
这样 只有在用户
滚动到它们时 图片才会加载

93
00:04:40,881 --> 00:04:44,685
这会使网页的
加载和响应看起来都变得更快

94
00:04:44,685 --> 00:04:47,254
我很喜欢这个网站现在的样子

95
00:04:47,254 --> 00:04:48,989
对于那些使用

96
00:04:48,989 --> 00:04:52,392
辅助技术的人来说 它也会十分好用

97
00:04:52,392 --> 00:04:56,697
这些 HTML 特性只是一个开始

98
00:04:56,697 --> 00:04:58,966
因为今年 CSS 也有许多

99
00:04:58,966 --> 00:05:02,269
值得关注之处

100
00:05:02,269 --> 00:05:04,838
我们对 CSS 的关注重点

101
00:05:04,838 --> 00:05:07,975
主要是通过更强大的架构 让您可以

102
00:05:07,975 --> 00:05:10,410
更轻松的复用您的 CSS

103
00:05:10,410 --> 00:05:13,280
鉴于此 我们知道
对于新 web 技术

104
00:05:13,280 --> 00:05:16,650
开发者的头号需求就是容器查询

105
00:05:16,650 --> 00:05:19,419
我们很高兴地宣布

106
00:05:19,419 --> 00:05:22,589
容器查询会在
Safari 16 中实装！

107
00:05:22,589 --> 00:05:24,758
您将可以同时使用尺寸查询

108
00:05:24,758 --> 00:05:27,261
和容器查询单元

109
00:05:27,261 --> 00:05:30,197
在这里
我在尝试为这个衣物交换网站

110
00:05:30,197 --> 00:05:32,499
设计另一种布局

111
00:05:32,499 --> 00:05:35,235
我要把这个代表一件衣服的卡片

112
00:05:35,235 --> 00:05:38,672
变成一个可复用的组件
并把这个组件

113
00:05:38,672 --> 00:05:42,176
放到页面布局的几个不同位置

114
00:05:42,176 --> 00:05:43,610
在侧边栏中

115
00:05:43,610 --> 00:05:46,580
这里的空间有点狭窄

116
00:05:46,580 --> 00:05:49,149
所以我希望组件中的内容

117
00:05:49,149 --> 00:05:51,451
垂直堆叠

118
00:05:51,451 --> 00:05:53,086
在物品的主网格中

119
00:05:53,086 --> 00:05:56,190
我想把第一个变成主页横幅

120
00:05:56,190 --> 00:05:59,660
让它占满所有横向空间

121
00:05:59,660 --> 00:06:02,896
并把其中的内容调整成适合

122
00:06:02,896 --> 00:06:05,232
宽布局的样式

123
00:06:05,232 --> 00:06:07,968
主内容区域中的其他物品

124
00:06:07,968 --> 00:06:10,871
应被分成较小的列

125
00:06:10,871 --> 00:06:12,873
所以我又创建了一种布局

126
00:06:12,873 --> 00:06:17,110
适用于中等横向空间的情况

127
00:06:17,110 --> 00:06:20,747
用容器查询 而不是媒体查询的方式

128
00:06:20,747 --> 00:06:22,416
处理这种布局的变化

129
00:06:22,416 --> 00:06:26,420
我只需为这个组件写一次布局代码

130
00:06:26,420 --> 00:06:29,523
就可以在网站的任何地方
任何大小的容器中

131
00:06:29,523 --> 00:06:31,859
使用这个组件

132
00:06:31,859 --> 00:06:35,395
且始终会应用正确的布局

133
00:06:35,395 --> 00:06:38,799
我指定了容器应该使用哪些元素

134
00:06:38,799 --> 00:06:41,935
以及它应该只衡量行内大小

135
00:06:41,935 --> 00:06:45,806
还是要同时衡量行内和块级大小

136
00:06:45,806 --> 00:06:48,909
这是通过
container-type 属性实现的

137
00:06:48,909 --> 00:06:51,445
为容器命名是一个可选项

138
00:06:51,445 --> 00:06:53,614
用 container-name 属性即可

139
00:06:53,614 --> 00:06:58,519
它能让我更加灵活的构建 HTML

140
00:06:58,519 --> 00:07:03,090
然后我使用 @container 规则
基于容器的尺寸

141
00:07:03,090 --> 00:07:05,359
规定了应用样式的条件

142
00:07:05,359 --> 00:07:08,095
这里 如果一个衣物卡片组件

143
00:07:08,095 --> 00:07:10,898
处于一个宽度超过
250 像素的组件中

144
00:07:10,898 --> 00:07:14,968
网格就会有两列 而不是一列

145
00:07:14,968 --> 00:07:18,739
CSS 架构的另一个更新：级联层

146
00:07:18,739 --> 00:07:22,809
这是 CSS 级联的一个重大升级

147
00:07:22,809 --> 00:07:24,912
自 CSS 诞生之日起

148
00:07:24,912 --> 00:07:28,348
级联就一直是由这些不同的层组成的

149
00:07:28,348 --> 00:07:32,052
但无论各层中给定选择器的

150
00:07:32,052 --> 00:07:34,621
优先级如何 作者样式

151
00:07:34,621 --> 00:07:37,024
也就是您作为
web 开发者所写的样式

152
00:07:37,024 --> 00:07:39,860
总是会覆盖浏览器默认样式

153
00:07:39,860 --> 00:07:43,597
而行内样式则总是高于作者样式

154
00:07:43,597 --> 00:07:46,600
以此类推 剩下的层级也如此

155
00:07:46,600 --> 00:07:49,369
级联层采用了这种概念

156
00:07:49,369 --> 00:07:52,339
还允许您创建自己的自定义层

157
00:07:52,339 --> 00:07:57,277
每层中的优先级都是独立计算得出的

158
00:07:57,277 --> 00:08:00,380
一整层的优先级会高于另一整层

159
00:08:00,380 --> 00:08:04,985
无论使用中的选择器优先级如何

160
00:08:04,985 --> 00:08:08,388
而哪些层高于哪些层是由您

161
00:08:08,388 --> 00:08:13,293
通过在 CSS 中
定义层顺序决定的

162
00:08:13,293 --> 00:08:15,395
在为大型项目构建 CSS

163
00:08:15,395 --> 00:08:18,298
以及长期维护其代码时

164
00:08:18,298 --> 00:08:20,767
级联层会成为一种好用的工具

165
00:08:20,767 --> 00:08:22,202
也许您的团队会用它

166
00:08:22,202 --> 00:08:24,938
防止一个设计系统被覆盖

167
00:08:24,938 --> 00:08:28,775
或者把它与您为项目中的
自定义样式使用的框架分开

168
00:08:28,775 --> 00:08:30,911
一切都取决于您！

169
00:08:30,911 --> 00:08:33,780
对您的 CSS 架构来说
所有这些精彩的

170
00:08:33,780 --> 00:08:36,917
新改进之上的
画龙点睛一笔就是 :has()

171
00:08:36,917 --> 00:08:40,921
这是一个伪类
用作大家期待已久的父选择器

172
00:08:40,921 --> 00:08:42,689
它还有许多其他功能

173
00:08:42,689 --> 00:08:45,626
与 CSS 中的
任何其他选择器结合

174
00:08:45,626 --> 00:08:48,629
:has() 可以用于
寻找兄弟元素 属性

175
00:08:48,629 --> 00:08:51,131
表单文本框状态等等

176
00:08:51,131 --> 00:08:54,034
它真的很强大

177
00:08:54,034 --> 00:08:56,970
在这里 我想在
每当有人为一条消息

178
00:08:56,970 --> 00:08:59,706
选中了“Urgent?”(紧急？) 复选框时

179
00:08:59,706 --> 00:09:01,608
就高亮显示整个消息框

180
00:09:01,608 --> 00:09:05,145
我可以用 :has 伪类来规定

181
00:09:05,145 --> 00:09:08,715
只要表单元素有一个复选框被选中的

182
00:09:08,715 --> 00:09:12,719
复选框类型输入
就应用这个 CSS

183
00:09:12,719 --> 00:09:16,890
我甚至都不需要
用 JavaScript

184
00:09:16,890 --> 00:09:19,359
我们希望这些为处理

185
00:09:19,359 --> 00:09:21,995
CSS 架构所进行的改进

186
00:09:21,995 --> 00:09:25,999
包括 :has() 级联层
以及容器查询

187
00:09:25,999 --> 00:09:28,135
能大大改善
您作为一名 web 开发者的

188
00:09:28,135 --> 00:09:30,470
工作效率

189
00:09:30,470 --> 00:09:33,240
但让我们如此兴奋的 CSS 改进

190
00:09:33,240 --> 00:09:35,976
可不止这些

191
00:09:35,976 --> 00:09:39,179
开发者一直想要一个
类似现有的视口单元的工具

192
00:09:39,179 --> 00:09:41,915
但要更好的适配那些在滚动时

193
00:09:41,915 --> 00:09:44,618
视口尺寸会变化的设备

194
00:09:44,618 --> 00:09:48,589
为此我们给大家
带来了新的视口单元

195
00:09:48,589 --> 00:09:50,457
如果您想知道视口在最小状态时

196
00:09:50,457 --> 00:09:53,527
它的高度 用 svh 即可

197
00:09:53,527 --> 00:09:54,828
要是想知道视口

198
00:09:54,828 --> 00:09:57,431
在最大状态时的高度 请用 lvh

199
00:09:57,431 --> 00:10:00,868
只要记住：s 代表小 l 代表大

200
00:10:00,868 --> 00:10:03,637
对于那些始终匹配视口

201
00:10:03,637 --> 00:10:07,741
当前实际高度的动态数字
用 dvh 即可

202
00:10:07,741 --> 00:10:10,210
不只是高度

203
00:10:10,210 --> 00:10:14,581
我们还为您准备了更多视口单元

204
00:10:14,581 --> 00:10:17,618
有宽度单元 与常用的高度单元配合

205
00:10:17,618 --> 00:10:20,687
可以改善完整性

206
00:10:20,687 --> 00:10:24,091
还有块和行内元素

207
00:10:24,091 --> 00:10:25,792
它们在多语言情况下

208
00:10:25,792 --> 00:10:28,729
不同语言的文本
溢出情况不同时 会很有用

209
00:10:28,729 --> 00:10:32,332
当然我们也没忘了最小和最大值

210
00:10:32,332 --> 00:10:35,736
但要是您想在网页上创造一些运动

211
00:10:35,736 --> 00:10:39,039
而不只是做出被动反应呢？

212
00:10:39,039 --> 00:10:42,509
以前 动画一直都是高度声明性的

213
00:10:42,509 --> 00:10:46,079
您要指定一个
开始 结束 和持续时间

214
00:10:46,079 --> 00:10:48,015
让物体动起来

215
00:10:48,015 --> 00:10:51,785
但让网页元素动起来
一直都是一个挑战

216
00:10:51,785 --> 00:10:54,655
无论是在您试图
让它沿着弧形轨迹移动时

217
00:10:54,655 --> 00:10:59,426
还是只是让它根据一个偏移量移动

218
00:10:59,426 --> 00:11:02,162
而我想在您点按头部横幅时

219
00:11:02,162 --> 00:11:04,531
添加一个秘密动画效果

220
00:11:04,531 --> 00:11:07,801
因为这样会很有趣

221
00:11:07,801 --> 00:11:10,637
有了新的 offset-path

222
00:11:10,637 --> 00:11:13,574
您可以定义对象运动的轨迹

223
00:11:13,574 --> 00:11:17,678
用 offset-path
来设置运动轨迹

224
00:11:17,678 --> 00:11:19,947
用 offset-distance
来设置关键帧效果

225
00:11:19,947 --> 00:11:24,218
然后用 animation 属性
来应用关键帧效果

226
00:11:24,218 --> 00:11:27,855
这样您就可以全权控制

227
00:11:27,855 --> 00:11:30,190
CSS 中的动画

228
00:11:30,190 --> 00:11:33,660
我们还想把更多的网页控制权交给您

229
00:11:33,660 --> 00:11:36,430
即使是那些通常都是被

230
00:11:36,430 --> 00:11:39,132
浏览器引擎定义的那一部分

231
00:11:39,132 --> 00:11:43,470
而 over scroll-behavior
就是这类实践的第一个例子

232
00:11:43,470 --> 00:11:46,473
自网络诞生以来 如果您点按了一个

233
00:11:46,473 --> 00:11:49,109
把您转至网页某处的链接

234
00:11:49,109 --> 00:11:51,812
它会在视觉上表现为一次跳跃

235
00:11:51,812 --> 00:11:54,982
有时候这会使用户迷失方向

236
00:11:54,982 --> 00:11:58,085
CSS 中的
scroll-behavior 属性

237
00:11:58,085 --> 00:12:01,788
允许您指定是否想要这种行为

238
00:12:01,788 --> 00:12:06,760
它的默认值是自动
也就是显示为那种跳跃

239
00:12:06,760 --> 00:12:09,630
如果把 scroll-behavior
指定为平滑

240
00:12:09,630 --> 00:12:12,699
浏览器就会平滑的滚动到

241
00:12:12,699 --> 00:12:14,902
页面上的指定位置

242
00:12:14,902 --> 00:12:17,604
您还可以用 JavaScript
方法来实现这个效果

243
00:12:17,604 --> 00:12:21,942
用 Window.scroll()
scrollTo() 或 scrollBy() 即可

244
00:12:21,942 --> 00:12:24,044
最了解您的客户的人就是您自己

245
00:12:24,044 --> 00:12:27,247
您应该能定义自己的网页体验

246
00:12:27,247 --> 00:12:30,417
而不必拘束于浏览器引擎默认值

247
00:12:30,417 --> 00:12:33,654
在这方面 :focus-visible

248
00:12:33,654 --> 00:12:37,157
和 accent-color
同样可以大放异彩

249
00:12:37,157 --> 00:12:39,860
如果您曾经想要对焦点选择器

250
00:12:39,860 --> 00:12:42,496
应用某种样式 以使其更符合

251
00:12:42,496 --> 00:12:44,364
您的整体设计

252
00:12:44,364 --> 00:12:47,935
那您可能已经很熟悉焦点选择器了

253
00:12:47,935 --> 00:12:50,571
但这么做可能会导致

254
00:12:50,571 --> 00:12:55,576
损失一些
基于浏览器的无障碍辅助功能

255
00:12:55,576 --> 00:12:59,046
而在我的网站上
我喜欢用自定义表单颜色

256
00:12:59,046 --> 00:13:02,349
而不是内置的颜色

257
00:13:02,349 --> 00:13:05,285
让我们把头部横幅的蓝绿色

258
00:13:05,285 --> 00:13:09,156
用在这里的焦点高亮和复选框上吧

259
00:13:09,156 --> 00:13:11,458
用 :focus-visible 伪类

260
00:13:11,458 --> 00:13:14,528
您可以自定义焦点选择器的样式

261
00:13:14,528 --> 00:13:18,098
同时使其只在浏览器原生支持时

262
00:13:18,098 --> 00:13:21,802
才显示出来

263
00:13:21,802 --> 00:13:25,172
而且
要为您的表单增加另一层自定义

264
00:13:25,172 --> 00:13:27,708
您还可以用
accent-color 来改变

265
00:13:27,708 --> 00:13:30,844
表单控件 UI 不同部分的颜色

266
00:13:30,844 --> 00:13:32,913
它可以用来调整复选框

267
00:13:32,913 --> 00:13:35,983
以及单选按钮 等等

268
00:13:35,983 --> 00:13:38,018
另外 对于 CSS

269
00:13:38,018 --> 00:13:42,256
我们一直在越来越多的
替换掉 WebKit 前缀

270
00:13:42,256 --> 00:13:44,124
它们曾经是进行

271
00:13:44,124 --> 00:13:47,194
特性实验的完美方法 但现在

272
00:13:47,194 --> 00:13:50,297
我们可以逐步接近
它们的标准定义属性了

273
00:13:50,297 --> 00:13:55,202
这样可以使您的 CSS
更易于编写 提高互操作性

274
00:13:55,202 --> 00:13:59,940
但别担心 您已有的带有
WebKit 前缀的 CSS

275
00:13:59,940 --> 00:14:02,009
将在您把它们过渡至

276
00:14:02,009 --> 00:14:04,578
相应的 web 标准期间正常工作

277
00:14:04,578 --> 00:14:08,682
Backface-visibility
print-color-adjust

278
00:14:08,682 --> 00:14:11,919
以及 text-align: match-parent
都与它们的对应前缀版本

279
00:14:11,919 --> 00:14:14,521
完全相同

280
00:14:14,521 --> 00:14:17,558
Mask 和 text-combine-upright

281
00:14:17,558 --> 00:14:20,827
都从前缀版本更新了语法

282
00:14:20,827 --> 00:14:23,163
以符合标准

283
00:14:23,163 --> 00:14:26,633
而且不带前缀的
appearance 属性还增加了

284
00:14:26,633 --> 00:14:29,303
对新的 auto 值的支持
但 Safari 16 中移除了

285
00:14:29,303 --> 00:14:32,306
WebKit 特定的值

286
00:14:32,306 --> 00:14:34,541
比如 caret 和 listitem

287
00:14:34,541 --> 00:14:38,345
以符合标准规范

288
00:14:38,345 --> 00:14:39,613
我们新增的排版选项

289
00:14:39,613 --> 00:14:42,249
也颇值得关注

290
00:14:42,249 --> 00:14:45,419
特别是
font-palette 属性的加入

291
00:14:45,419 --> 00:14:48,155
使为彩色字体选择调色板

292
00:14:48,155 --> 00:14:50,257
变得更加简单

293
00:14:50,257 --> 00:14:52,192
尝试为我的网站添加 logo

294
00:14:52,192 --> 00:14:55,796
想必会很酷

295
00:14:55,796 --> 00:14:57,264
我们可以用内置的深色

296
00:14:57,264 --> 00:15:00,133
或浅色调色板来试试看怎么样

297
00:15:00,133 --> 00:15:02,369
甚至还可以用色彩覆盖

298
00:15:02,369 --> 00:15:05,405
自定义加入一点明亮的黄色

299
00:15:05,405 --> 00:15:08,909
使其完全符合我想要的样子

300
00:15:08,909 --> 00:15:11,778
在排版方面 还增加了

301
00:15:11,778 --> 00:15:15,282
text-decoration-skip-ink
它允许您控制

302
00:15:15,282 --> 00:15:18,051
一条下划线或上划线

303
00:15:18,051 --> 00:15:21,221
与字母或字符相交时会发生什么

304
00:15:21,221 --> 00:15:25,492
还有 ic 单元 可以让您在块方向

305
00:15:25,492 --> 00:15:28,829
精确排列 CJK 字符

306
00:15:28,829 --> 00:15:31,765
对于中文 日文和韩文等语言

307
00:15:31,765 --> 00:15:36,570
它可以助您创建一个整洁的排版网格

308
00:15:36,570 --> 00:15:40,741
最后在这些
优秀的 CSS 特性中

309
00:15:40,741 --> 00:15:43,777
我们当然还得说说 subgrid

310
00:15:43,777 --> 00:15:47,414
多年来 网页布局一直都是一个难题

311
00:15:47,414 --> 00:15:50,217
CSS Grid 是革命性的功能

312
00:15:50,217 --> 00:15:55,455
但它只对网格容器的直接子级有用

313
00:15:55,455 --> 00:15:59,526
在这里我使用了
CSS Grid 来布局这些卡片

314
00:15:59,526 --> 00:16:01,528
使其根据视口宽度

315
00:16:01,528 --> 00:16:04,965
通过增加或移除列来调整布局

316
00:16:04,965 --> 00:16:08,068
这里没有进行任何媒体查询

317
00:16:08,068 --> 00:16:12,439
但每张卡片的内容的尺寸都是不同的

318
00:16:12,439 --> 00:16:14,541
有些标题会更长

319
00:16:14,541 --> 00:16:17,244
照片的宽高比也不同

320
00:16:17,244 --> 00:16:21,048
这使一切看起来很乱

321
00:16:21,048 --> 00:16:23,684
我想要让页面上所有的

322
00:16:23,684 --> 00:16:27,454
请求物品按键和消息框都对齐

323
00:16:27,454 --> 00:16:31,425
我想要在出现标题很长的卡片时

324
00:16:31,425 --> 00:16:35,696
其他卡片能随其调整
使它们维持相同的间距

325
00:16:35,696 --> 00:16:39,132
现在 我们可以用
subgrid 来实现此功能

326
00:16:39,132 --> 00:16:41,401
我在每张卡片上都放了一个网格

327
00:16:41,401 --> 00:16:44,905
并把这些网格
都绑定到了它们的父网格

328
00:16:44,905 --> 00:16:49,843
只需写入
“grid-template-rows: subgrid”即可

329
00:16:49,843 --> 00:16:53,380
您可以在 Web Inspector
的 Grid Inspector 中看到

330
00:16:53,380 --> 00:16:57,184
所有衣物卡片的内容都完美对齐了

331
00:16:57,184 --> 00:17:01,622
在这里我还可以
启用所有我需要的网格

332
00:17:01,622 --> 00:17:06,727
使用 Web Inspector
能让许多 CSS 作业都变得轻松

333
00:17:06,727 --> 00:17:10,163
事实上
Web Inspector 获得了许多

334
00:17:10,163 --> 00:17:11,498
很棒的新功能

335
00:17:11,498 --> 00:17:14,968
我觉得您一定会跃跃欲试的

336
00:17:14,968 --> 00:17:17,271
首先 布局变的更容易写了

337
00:17:17,271 --> 00:17:19,406
因为您可以实时看到它们的情况

338
00:17:19,406 --> 00:17:23,744
这正是
Web Inspector 如此重要的原因

339
00:17:23,744 --> 00:17:26,146
另外 有了新的
Flexbox Inspector

340
00:17:26,146 --> 00:17:30,317
您可以直接看到各元素之间的间距

341
00:17:30,317 --> 00:17:32,819
在我的网站上
我在为头部横幅添加图标时

342
00:17:32,819 --> 00:17:35,589
遇到了一些麻烦

343
00:17:35,589 --> 00:17:39,626
我只需点按检查元素

344
00:17:39,626 --> 00:17:42,162
选择布局选项卡

345
00:17:42,162 --> 00:17:44,932
因为我现在要看的不是网格

346
00:17:44,932 --> 00:17:47,534
我可以折叠这一部分

347
00:17:47,534 --> 00:17:51,205
直接进入新的
Flexbox Inspector

348
00:17:51,205 --> 00:17:53,240
甚至只需点按一下

349
00:17:53,240 --> 00:17:57,911
我就能打开所有的视图
而且并不影响流畅性

350
00:17:57,911 --> 00:18:00,147
打开所有视图后

351
00:18:00,147 --> 00:18:01,915
我可以清楚的看到那些井号

352
00:18:01,915 --> 00:18:05,419
和容器框标识着
这些元素是如何排列的的

353
00:18:05,419 --> 00:18:09,590
以及空白空间为什么占据了视图

354
00:18:09,590 --> 00:18:13,393
现在我可以使用新的对齐编辑器

355
00:18:13,393 --> 00:18:16,163
来好好对齐这些内容了

356
00:18:16,163 --> 00:18:18,065
转到样式选项卡

357
00:18:18,065 --> 00:18:21,134
找到 align-items
旁的一个新按钮

358
00:18:21,134 --> 00:18:24,137
在这里 我可以切换不同的选项

359
00:18:24,137 --> 00:18:26,907
来找到哪种样式最适合我的头部横幅

360
00:18:26,907 --> 00:18:30,677
justify-content
也可以应用同样的方法

361
00:18:30,677 --> 00:18:33,881
同样的 只需在不同选项间切换

362
00:18:33,881 --> 00:18:39,253
找到适合您的那一款

363
00:18:39,253 --> 00:18:43,090
我还觉得这些黄色图标有点太小了

364
00:18:43,090 --> 00:18:47,060
我想让它们变得与红色图标一样大

365
00:18:47,060 --> 00:18:49,396
这些红色图标应该在名称中

366
00:18:49,396 --> 00:18:50,931
使用了“medium”这个变量

367
00:18:50,931 --> 00:18:54,768
但我实在想不起来它们的全名了

368
00:18:54,768 --> 00:18:56,803
我可以检查这些黄色图标

369
00:18:56,803 --> 00:18:58,805
在 inspector 中更改它们的高度

370
00:18:58,805 --> 00:19:02,009
这样就可以调整它们的尺寸

371
00:19:02,009 --> 00:19:05,312
而且 有了新的
CSS 模糊自动补全功能

372
00:19:05,312 --> 00:19:10,851
我可以直接输入“medium”
我想要的变量就直接出现了

373
00:19:10,851 --> 00:19:14,354
尽管“medium”
是在其名称的末尾

374
00:19:14,354 --> 00:19:16,256
这样一来那些黄色图标

375
00:19:16,256 --> 00:19:20,093
终于不会显得太小了

376
00:19:20,093 --> 00:19:23,030
而且 对于我要检查的元素中

377
00:19:23,030 --> 00:19:26,233
不需要的各图标中的其他变量

378
00:19:26,233 --> 00:19:29,369
新的 CSS 工具
会将它们隐藏起来

379
00:19:29,369 --> 00:19:32,339
但别担心
如果您需要 也有一个按键

380
00:19:32,339 --> 00:19:34,308
可以显示它们

381
00:19:34,308 --> 00:19:38,145
接下来的这个 可能是今年
Web Inspector 最为激动人心的更新

382
00:19:38,145 --> 00:19:40,514
我们很高兴的宣布

383
00:19:40,514 --> 00:19:44,518
Safari Web Inspector
支持开发者工具扩展了

384
00:19:44,518 --> 00:19:47,688
创作了您最喜欢的
开发者工具扩展的人

385
00:19:47,688 --> 00:19:50,390
现在可以把它们
移植到 Safari 浏览器上了

386
00:19:50,390 --> 00:19:55,329
可以使用它们在其他浏览器中
使用的相同底层 API 来完成移植

387
00:19:55,329 --> 00:19:58,532
如果您想学习如何为

388
00:19:58,532 --> 00:20:00,367
Web Inspector
开发扩展

389
00:20:00,367 --> 00:20:03,637
探索新 API 并开始自己

390
00:20:03,637 --> 00:20:06,707
设置与使用它们 请务必查看

391
00:20:06,707 --> 00:20:12,412
今年 WWDC 的“创建
Safari Web Inspector 扩展”讲座

392
00:20:12,412 --> 00:20:15,082
现在我们已经了解了相当多的

393
00:20:15,082 --> 00:20:18,485
我们的前端技术 是时候换个方向

394
00:20:18,485 --> 00:20:22,256
了解一下我们的
web API 有什么新内容了

395
00:20:22,256 --> 00:20:26,827
我们很高兴的宣布
对 web push 的支持

396
00:20:26,827 --> 00:20:31,365
该功能会在 Safari 16
和 macOS Ventura 中更新

397
00:20:31,365 --> 00:20:35,769
它将在明年登陆
iOS 和 iPadOS

398
00:20:35,769 --> 00:20:39,406
Web push 让您可以从
网站或 web App 向用户

399
00:20:39,406 --> 00:20:41,775
远程发送通知

400
00:20:41,775 --> 00:20:46,513
这是一个完全可互操作的
基于标准的功能

401
00:20:46,513 --> 00:20:48,882
如果您已经在其他浏览器中

402
00:20:48,882 --> 00:20:50,918
部署实现了 web push

403
00:20:50,918 --> 00:20:55,255
那您应该无需任何修改
就可使其在 Safari 浏览器上工作

404
00:20:55,255 --> 00:20:58,825
而且您也不需要
Apple Developer 账户

405
00:20:58,825 --> 00:21:00,794
要了解所有详情

406
00:21:00,794 --> 00:21:06,433
请查看 WWDC 22 的“了解
Safari 浏览器的 Web Push”讲座

407
00:21:06,433 --> 00:21:08,569
如果您为
web push 感到兴奋

408
00:21:08,569 --> 00:21:10,204
那想必新的
web App 清单改进

409
00:21:10,204 --> 00:21:13,273
也会令您兴奋

410
00:21:13,273 --> 00:21:16,810
现在 您可以在
manifest 文件中

411
00:21:16,810 --> 00:21:20,247
自定义用户保存在主屏幕上的图标

412
00:21:20,247 --> 00:21:23,317
要优先显示清单中的图标

413
00:21:23,317 --> 00:21:24,918
您要确保在 HTML head 中

414
00:21:24,918 --> 00:21:28,922
没有定义 apple-touch-icon

415
00:21:28,922 --> 00:21:32,826
如果您想在 iOS 和
iPadOS 中显示一种图标

416
00:21:32,826 --> 00:21:36,463
而在其他移动平台上显示另一种

417
00:21:36,463 --> 00:21:39,967
您仍然可以使用
HTML head 中的

418
00:21:39,967 --> 00:21:44,037
apple-touch-icon
来定义 Apple 设备的图标

419
00:21:44,037 --> 00:21:47,174
如果您没有在这两个地方设置图标

420
00:21:47,174 --> 00:21:50,043
用户把您的网站保存到主屏幕时

421
00:21:50,043 --> 00:21:52,546
就只会看到您的网站的屏幕截图

422
00:21:52,546 --> 00:21:56,283
激动人心的是 我们在
载入 manifest 文件时

423
00:21:56,283 --> 00:21:58,685
不再等待用户在共享菜单中选择

424
00:21:58,685 --> 00:22:01,889
“添加到主屏幕”了
也就是说 您可以

425
00:22:01,889 --> 00:22:05,325
在您的整个网站上
用 manifest 文件来定义网页特征

426
00:22:05,325 --> 00:22:08,428
进一步降低

427
00:22:08,428 --> 00:22:11,632
使用 meta 标签的需求

428
00:22:11,632 --> 00:22:15,235
此外 我们的 API 还改进了

429
00:22:15,235 --> 00:22:18,172
相同来源情况下 多种浏览上下文的

430
00:22:18,172 --> 00:22:20,007
网页使用情况

431
00:22:20,007 --> 00:22:22,843
广播频道允许您在那些

432
00:22:22,843 --> 00:22:25,812
不同浏览上下文间发送通知

433
00:22:25,812 --> 00:22:29,249
假设有人正在使用这个衣物交换网站

434
00:22:29,249 --> 00:22:32,619
并同时在两个窗口中打开了它

435
00:22:32,619 --> 00:22:35,923
然后用户
在其中一个窗口请求了一件衣服

436
00:22:35,923 --> 00:22:39,626
我们能够发布一条消息
在其他打开的

437
00:22:39,626 --> 00:22:43,397
选项卡或窗口中同步这个不可用状态

438
00:22:43,397 --> 00:22:47,134
但也许您不只需要更新后台选项卡

439
00:22:47,134 --> 00:22:49,803
还需要更新网站保存的文件

440
00:22:49,803 --> 00:22:51,605
为此 我们还更新了

441
00:22:51,605 --> 00:22:54,675
文件系统访问 API

442
00:22:54,675 --> 00:22:57,177
我们在这一年间的几个版本中

443
00:22:57,177 --> 00:22:59,780
对这个 API 进行了增量更新

444
00:22:59,780 --> 00:23:02,983
从访问域私有文件系统开始

445
00:23:02,983 --> 00:23:05,786
它是基于访问域的私有存储

446
00:23:05,786 --> 00:23:06,854
比如

447
00:23:06,854 --> 00:23:09,857
我的衣物交换网站上的文件

448
00:23:09,857 --> 00:23:13,694
不会被其他网站
比如 apple.com 读取

449
00:23:13,694 --> 00:23:17,164
然后我们给 API 添加了

450
00:23:17,164 --> 00:23:21,068
FileSystemFileHandle
的 getFile() 方法

451
00:23:21,068 --> 00:23:24,071
它会从您的网站的
根目录读取检索得出的已存在的文件

452
00:23:24,071 --> 00:23:26,540
就像我们对这个

453
00:23:26,540 --> 00:23:29,910
我们刚刚创建的草稿文件所做的一样

454
00:23:29,910 --> 00:23:33,146
现在让我们看看我们今年

455
00:23:33,146 --> 00:23:37,718
最有活力的 API 新内容 色彩

456
00:23:37,718 --> 00:23:40,854
Display P3 色域使我们可以

457
00:23:40,854 --> 00:23:45,158
呈现 RGB 色域中不存在的颜色

458
00:23:45,158 --> 00:23:48,295
这是色彩选择器的一些示例

459
00:23:48,295 --> 00:23:50,464
弯曲的白线的左侧

460
00:23:50,464 --> 00:23:53,267
是 RGB 色域中存在的颜色

461
00:23:53,267 --> 00:23:58,238
而线的右侧则
是只在 P3 色域中才有的颜色

462
00:23:58,238 --> 00:24:03,443
2016 年 我们为
视频和照片添加了 P3 色域支持

463
00:24:03,443 --> 00:24:06,947
去年 我们很高兴成为了第一个

464
00:24:06,947 --> 00:24:12,352
实装了 CSS Color Level 4
定义的新色值语法的浏览器

465
00:24:12,352 --> 00:24:15,489
今年 我们为画布元素内的内容

466
00:24:15,489 --> 00:24:18,258
添加了 P3 色域的支持

467
00:24:18,258 --> 00:24:21,461
我们终于不必再受限于

468
00:24:21,461 --> 00:24:24,565
90 年代设备的色域了
您可以开始利用

469
00:24:24,565 --> 00:24:28,168
今天的优秀设备所支持的全部

470
00:24:28,168 --> 00:24:29,870
色彩再现能力

471
00:24:29,870 --> 00:24:33,740
过去一年间
我们的 Web API 的新功能

472
00:24:33,740 --> 00:24:38,879
甚至还不止这些
包括 shadow realms web locks

473
00:24:38,879 --> 00:24:42,916
以及更新了对
ResizeObserver API 的支持

474
00:24:42,916 --> 00:24:45,953
用于 ResizeObserverSize 界面

475
00:24:45,953 --> 00:24:47,287
它能助您监控

476
00:24:47,287 --> 00:24:50,357
元素的 box-sizing 属性变化

477
00:24:50,357 --> 00:24:52,559
在我们 API 更新中

478
00:24:52,559 --> 00:24:55,262
有太多值得一试的部分

479
00:24:55,262 --> 00:24:58,699
当然了 那些新功能也是

480
00:24:58,699 --> 00:25:02,002
事实上 我们还有更多内容

481
00:25:02,002 --> 00:25:05,038
接下来 让我们来看看

482
00:25:05,038 --> 00:25:08,141
JavaScript
和 WebAssembly 的新特性

483
00:25:08,141 --> 00:25:11,144
如果您的网站使用 worker
而您想让这些 worker 的

484
00:25:11,144 --> 00:25:14,681
实例在选项卡和窗口间共享

485
00:25:14,681 --> 00:25:17,684
那么新的共享 worker 界面
一定会有所帮助

486
00:25:17,684 --> 00:25:20,888
它还可能减少内存使用量

487
00:25:20,888 --> 00:25:24,491
不需要为每项您希望发生在后台的

488
00:25:24,491 --> 00:25:27,561
任务产生新的 worker

489
00:25:27,561 --> 00:25:31,498
每个同访问域的浏览上下文
只需要一个 worker

490
00:25:31,498 --> 00:25:35,202
每个脚本都会用同样方式
创建一个共享 worker

491
00:25:35,202 --> 00:25:37,604
然后它们就可以用相同的端口

492
00:25:37,604 --> 00:25:40,140
来接收和发送消息

493
00:25:40,140 --> 00:25:42,442
共享 worker 将可以

494
00:25:42,442 --> 00:25:44,378
接收和回复来自所有

495
00:25:44,378 --> 00:25:47,648
不同脚本的消息

496
00:25:47,648 --> 00:25:50,751
这会降低您的服务器的载荷

497
00:25:50,751 --> 00:25:52,286
同时使客户的

498
00:25:52,286 --> 00:25:56,223
网页浏览体验顺滑快速

499
00:25:56,223 --> 00:26:00,360
我们还有一系列的
数组功能要展示给您

500
00:26:00,360 --> 00:26:03,764
当您想要从末尾搜索时

501
00:26:03,764 --> 00:26:05,899
不必使用
reverse() 来改变数组

502
00:26:05,899 --> 00:26:10,370
现在您只需要使用 findLast()
和 findLastIndex() 方法

503
00:26:10,370 --> 00:26:13,273
就像我现在这样 查询最后一个项目

504
00:26:13,273 --> 00:26:17,344
包含“鞋带”的项目和索引

505
00:26:17,344 --> 00:26:19,880
新的 at() 方法还能使

506
00:26:19,880 --> 00:26:22,783
从末尾搜索数组更加简单

507
00:26:22,783 --> 00:26:26,386
当索引为正时 使用大括号效果很好

508
00:26:26,386 --> 00:26:28,922
但 at() 给了我们额外的功能

509
00:26:28,922 --> 00:26:31,258
可以用负值索引

510
00:26:31,258 --> 00:26:35,262
使您的代码更简洁易读

511
00:26:35,262 --> 00:26:39,499
但即使有这么多的新数组功能

512
00:26:39,499 --> 00:26:41,969
也没有什么能比得上

513
00:26:41,969 --> 00:26:46,540
我们新增的国际化功能的数量

514
00:26:46,540 --> 00:26:49,676
在过去一年间
WebKit 持续不断的

515
00:26:49,676 --> 00:26:54,147
得到了我们的
Intl 功能方面的更新

516
00:26:54,147 --> 00:26:57,618
我们增加了支持不同数字系统的

517
00:26:57,618 --> 00:27:00,187
新方法：NumberFormat

518
00:27:00,187 --> 00:27:03,557
更新了 Locale 和 DisplayNames
以支持更多日历

519
00:27:03,557 --> 00:27:09,630
还有通过 Intl Enumeration API
支持了更多货币种类

520
00:27:09,630 --> 00:27:13,100
正如我所说 这一年来我们

521
00:27:13,100 --> 00:27:15,836
新增了许多 Intl 功能

522
00:27:15,836 --> 00:27:20,040
可供您尝试和探索 以满足您的

523
00:27:20,040 --> 00:27:24,111
世界各地用户的功能

524
00:27:24,111 --> 00:27:27,681
绝不会少对于那些已经有
各种不同编程语言的项目

525
00:27:27,681 --> 00:27:32,886
比如 C Objective C 或 Swift

526
00:27:32,886 --> 00:27:34,988
要把它们带到 web 上来

527
00:27:34,988 --> 00:27:38,959
只需使用 WebAssembly
无需重写 即可运行

528
00:27:38,959 --> 00:27:40,627
有了今年的这些改进

529
00:27:40,627 --> 00:27:45,365
您的使用 WebAssembly 的
web App 只会变得更强大

530
00:27:45,365 --> 00:27:49,203
其可寻址内存扩展到了 4GB

531
00:27:49,203 --> 00:27:51,505
新的零成本异常处理

532
00:27:51,505 --> 00:27:54,575
也会进一步提升性能

533
00:27:54,575 --> 00:27:58,011
总的来说
JavaScript 和 WebAssembly

534
00:27:58,011 --> 00:28:01,582
毫无疑问都得到了一些
激动人心的特性供您尝试

535
00:28:01,582 --> 00:28:05,519
说到 WebAssembly
我们还有一些安全

536
00:28:05,519 --> 00:28:08,155
和隐私增强 它们不仅

537
00:28:08,155 --> 00:28:11,258
保护我们开发的网页所面向的用户

538
00:28:11,258 --> 00:28:16,396
还会为您
作为开发者带来许多新的潜能

539
00:28:16,396 --> 00:28:19,833
有了新的
Cross Origin Opener Policy

540
00:28:19,833 --> 00:28:25,305
和 Cross Origin Embedder Policy
HTTP 响应标头

541
00:28:25,305 --> 00:28:28,542
您的网站可以选择加入进程隔离

542
00:28:28,542 --> 00:28:30,110
使您的网站运行在

543
00:28:30,110 --> 00:28:33,680
它自己的专用
webContent 进程中

544
00:28:33,680 --> 00:28:36,850
我们知道 使用
WebAssembly 多线程

545
00:28:36,850 --> 00:28:40,888
许多 App 可以受益于
在多个线程上平行运行

546
00:28:40,888 --> 00:28:46,026
有了这些新的标头
您可以安全的使用这一功能

547
00:28:46,026 --> 00:28:51,031
我们的第二个安全性增强
同样涉及 HTTP 标头

548
00:28:51,031 --> 00:28:55,502
我们支持了
内容安全策略 level 3

549
00:28:55,502 --> 00:28:58,272
CSP 增强了对您的加载内容的

550
00:28:58,272 --> 00:29:01,308
安全控制 还降低了

551
00:29:01,308 --> 00:29:04,745
跨站点脚本以及其他漏洞的风险

552
00:29:04,745 --> 00:29:08,015
Level 3 更新
带来的最令人激动的新功能

553
00:29:08,015 --> 00:29:11,485
就是新的
strict-dynamic 源表达式

554
00:29:11,485 --> 00:29:15,389
Strict-dynamic 的设计者
意识到您可以用随机数

555
00:29:15,389 --> 00:29:18,125
来允许某些脚本 然后把这种信任

556
00:29:18,125 --> 00:29:21,061
扩展到已受信任脚本加载的脚本中

557
00:29:21,061 --> 00:29:24,331
而不再需要明确的允许列表

558
00:29:24,331 --> 00:29:26,767
看看这能让标头变的多简洁

559
00:29:26,767 --> 00:29:29,303
原来的那种一长串域名的形式

560
00:29:29,303 --> 00:29:32,539
可能会导致允许值过多

561
00:29:32,539 --> 00:29:37,010
这就是我们的安全和隐私特性更新

562
00:29:37,010 --> 00:29:39,346
今天我们的讲座

563
00:29:39,346 --> 00:29:41,748
也就到此为止了

564
00:29:41,748 --> 00:29:45,018
但还有许多东西 等待您自己去探索

565
00:29:45,018 --> 00:29:47,588
比如 我们还带来了一些媒体更新

566
00:29:47,588 --> 00:29:51,558
包括使用
getUserDisplay() API

567
00:29:51,558 --> 00:29:57,564
支持截屏特定 Safari 窗口
WebRTC 完美协商

568
00:29:57,564 --> 00:30:03,003
带内章节轨道
和 requestVideoFrameCallback()

569
00:30:03,003 --> 00:30:06,173
以及许多
web 扩展的酷炫新特性

570
00:30:06,173 --> 00:30:08,642
支持了 manifest version 3

571
00:30:08,642 --> 00:30:12,613
以及一堆新的
web 扩展 API

572
00:30:12,613 --> 00:30:16,350
要更深入了解今天介绍的这些特性

573
00:30:16,350 --> 00:30:20,220
探索 Safari
和 WebKit 在过去一年间的

574
00:30:20,220 --> 00:30:23,757
所有 162 项特性和改进

575
00:30:23,757 --> 00:30:26,460
请务必下载
Safari Technology Preview

576
00:30:26,460 --> 00:30:29,930
来跟上未来的更新

577
00:30:29,930 --> 00:30:33,300
为探索 web 技术
请查看我们的版本更新日志

578
00:30:33,300 --> 00:30:37,070
博客文章以及
webkit.org 上所有的精彩内容

579
00:30:37,070 --> 00:30:41,642
包括关于
Web Inspector 的详细文档

580
00:30:41,642 --> 00:30:44,178
和往常一样 通过提交错误报告

581
00:30:44,178 --> 00:30:47,881
告诉我们您的想法
和您接下来想要的东西

582
00:30:47,881 --> 00:30:50,284
如果您在
WebKit 中遇到了错误

583
00:30:50,284 --> 00:30:55,889
无论是 HTML CSS
JavaScript DOM API

584
00:30:55,889 --> 00:30:58,592
还是 Web Inspector
都请务必提交您的反馈

585
00:30:58,592 --> 00:31:03,830
使用 bugs.webkit.org 上的
WebKit 的错误跟踪系统即可

586
00:31:03,830 --> 00:31:07,367
有关 Safari 浏览器界面
的建议或错误报告

587
00:31:07,367 --> 00:31:11,171
请通过 Apple
反馈助理提交问题

588
00:31:11,171 --> 00:31:14,775
在接下来的一年 我们期待着

589
00:31:14,775 --> 00:31:17,044
带来更多优秀的特性

590
00:31:17,044 --> 00:31:19,680
持续更新 Safari 浏览器

591
00:31:19,680 --> 00:31:22,349
和 Safari Technology Preview

592
00:31:22,349 --> 00:31:24,451
来改善 web 开发者的工作效率

593
00:31:24,451 --> 00:31:26,687
感谢参加我的讲座

594
00:31:26,687 --> 00:31:30,190
祝您在 WWDC 过的愉快

595
00:31:30,190 --> 00:31:32,259
再见！

596
00:31:32,259 --> 00:31:35,562
♪

