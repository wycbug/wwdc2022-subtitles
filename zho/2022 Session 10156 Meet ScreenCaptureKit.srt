1
00:00:01,368 --> 00:00:07,374
[古怪的音乐]

2
00:00:09,710 --> 00:00:11,211
Ernest: 大家好 欢迎

3
00:00:11,245 --> 00:00:13,480
我是 Ernest
ScreenCaptureKit 团队的

4
00:00:13,514 --> 00:00:15,382
一名软件工程师

5
00:00:15,415 --> 00:00:17,684
在过去的几年中

6
00:00:17,718 --> 00:00:20,787
我们对远程协作的依赖度
日益提高

7
00:00:20,821 --> 00:00:22,990
屏幕共享就是其中的
常用功能之一

8
00:00:25,659 --> 00:00:27,094
最重要的是

9
00:00:27,127 --> 00:00:31,532
总的来说 使用如
OBS Studio 录制 App 的

10
00:00:31,565 --> 00:00:33,700
流媒体游戏和内容创作

11
00:00:33,734 --> 00:00:38,839
已经成为了人们教育和娱乐
持续增长的领域

12
00:00:40,574 --> 00:00:43,177
在这一概念下 我们创建了
满足开发者们需求的

13
00:00:43,210 --> 00:00:48,115
高性能 稳定的屏幕捕获框架

14
00:00:48,148 --> 00:00:49,616
那就是 ScreenCaptureKit

15
00:00:51,618 --> 00:00:55,055
ScreenCaptureKit 是 macOS 中
一款全新框架

16
00:00:55,088 --> 00:00:56,823
专为帮助您搭建

17
00:00:56,857 --> 00:00:59,259
App 屏幕共享体验而设计

18
00:01:00,227 --> 00:01:04,064
ScreenCaptureKit 提供
可让您选择

19
00:01:04,097 --> 00:01:05,599
想要捕获内容的 API

20
00:01:05,632 --> 00:01:10,170
开发者可按 App 需要
进行控制和切换

21
00:01:10,204 --> 00:01:13,941
所有的过滤程序和控制
都可以实时更新

22
00:01:15,409 --> 00:01:18,412
该框架可以高品质 高性能
提供高达屏幕显示的

23
00:01:18,445 --> 00:01:22,916
原生分辨率和帧率

24
00:01:22,950 --> 00:01:26,186
同时隐私安全
通过全局守卫得以保障

25
00:01:27,454 --> 00:01:31,425
在这个讲座中 我会为您讲解
如何开始 ScreenCaptureKit 框架

26
00:01:32,559 --> 00:01:34,962
您掌握基础知识后 可查看讲座

27
00:01:34,995 --> 00:01:37,431
将 ScreenCaptureKit
提升到全新境界

28
00:01:37,464 --> 00:01:39,099
以了解更高阶的内容

29
00:01:40,501 --> 00:01:43,904
首先 我先回顾下该框架的
关键功能

30
00:01:45,305 --> 00:01:48,942
然后 我将于 API 概述中
阐述 ScreenCaptureKit 的

31
00:01:48,976 --> 00:01:50,177
主要构造

32
00:01:51,512 --> 00:01:54,214
接着 我会为大家演示
如何用过滤器和配置

33
00:01:54,248 --> 00:01:55,749
来配置您的 stream 流

34
00:01:56,850 --> 00:01:59,453
最后 我带大家看下如何将您
App 的视频

35
00:01:59,486 --> 00:02:01,889
和音频样本流媒体化

36
00:02:03,457 --> 00:02:05,959
首先是 ScreenCaptureKit 的
关键功能

37
00:02:07,294 --> 00:02:11,331
ScreenCaptureKit 可让您
指定您想要共享或过滤的

38
00:02:11,365 --> 00:02:13,467
内容类型

39
00:02:13,500 --> 00:02:17,804
您可以捕获任意屏幕内容
不管是屏幕显示 App

40
00:02:17,838 --> 00:02:22,910
窗口以及音频的组合

41
00:02:25,879 --> 00:02:29,149
ScreenCaptureKit 支持
多种开发者控制

42
00:02:29,183 --> 00:02:33,787
包括像素格式 色彩空间

43
00:02:33,820 --> 00:02:37,424
帧率 分辨率

44
00:02:37,457 --> 00:02:41,862
以及音频方面 也可控制
采样率和通道数

45
00:02:44,598 --> 00:02:47,100
这些过滤程序和配置

46
00:02:47,134 --> 00:02:49,436
都可以实时调整

47
00:02:49,469 --> 00:02:52,372
为 App 设计
提供了更高的灵活性

48
00:02:54,174 --> 00:02:59,079
为了发送高达 48kHz 立体声的
音频样本

49
00:02:59,112 --> 00:03:03,650
以及高达您屏幕显示原始分辨率
和帧率的视频

50
00:03:03,684 --> 00:03:08,622
ScreenCaptureKit 主要聚焦于性能
并充分利用 Mac GPU 的能力

51
00:03:08,655 --> 00:03:13,026
却比当前屏幕捕获方式
耗费更少的 CPU

52
00:03:13,060 --> 00:03:16,930
当然 ScreenCaptureKit
非常注重隐私安全

53
00:03:16,964 --> 00:03:21,335
为使用该框架的所有 App
都提供全局隐私保障

54
00:03:23,203 --> 00:03:27,941
该框架在捕获视频和音频内容前
会请求用户许可

55
00:03:27,975 --> 00:03:31,144
该选择也会存储于系统偏好中的

56
00:03:31,178 --> 00:03:32,746
屏幕录制隐私设置中

57
00:03:34,181 --> 00:03:37,417
现在您已经了解了
ScreenCaptureKit 的基本内容

58
00:03:37,451 --> 00:03:41,021
我为大家演示下 API 中
一些最重要的概念

59
00:03:41,054 --> 00:03:44,358
ScreenCaptureKit 框架
主要以 SCStream 为中心

60
00:03:45,559 --> 00:03:49,363
SCStream 处理如开始
和停止的控制

61
00:03:49,396 --> 00:03:52,799
与 SCShareableContent
SCContentFilter 和

62
00:03:52,833 --> 00:03:57,104
SCStreamConfiguration 一起创建

63
00:03:58,172 --> 00:04:01,508
这些对象决定您想要捕获的
是什么内容

64
00:04:01,542 --> 00:04:03,410
以及您想要如何捕获它

65
00:04:04,811 --> 00:04:09,216
一旦创建并启动后
媒体样本将会通过

66
00:04:09,249 --> 00:04:12,853
SCStreamOutput 协议
发送到您的 App 中

67
00:04:13,487 --> 00:04:15,589
我稍后会进一步解释

68
00:04:17,391 --> 00:04:22,596
现在 我为大家演示下如何使用 API
在您 App 中配置 stream 流

69
00:04:24,498 --> 00:04:28,368
这些是配置 stream 流时
您需要熟悉的对象

70
00:04:30,137 --> 00:04:33,607
这些对象确定了您捕获的

71
00:04:33,640 --> 00:04:36,276
内容 品质和性能

72
00:04:37,845 --> 00:04:41,381
首先我要看的
是 SCShareableContent

73
00:04:44,318 --> 00:04:50,791
在这个桌面 有窗口
App 和屏幕显示本身

74
00:04:52,259 --> 00:04:55,662
ScreenCaptureKit 针对
每个您可用于

75
00:04:55,696 --> 00:04:58,699
构建共享内容的部件
都有对应的类

76
00:05:01,001 --> 00:05:03,904
首先 我们看下 SCDisplay

77
00:05:05,105 --> 00:05:10,043
ScreenCaptureKit 将屏幕显示
分类为 SCDisplays 只读属性

78
00:05:10,077 --> 00:05:13,180
包括显示标识符

79
00:05:13,213 --> 00:05:16,717
大小属性宽度和高度

80
00:05:19,119 --> 00:05:23,223
在屏幕显示中 可能会有不同的
App 在运行

81
00:05:23,257 --> 00:05:27,461
每个都有
对应的 SCRunningApplication

82
00:05:29,196 --> 00:05:31,865
SCRunningApplication 中的
App 级别信息

83
00:05:31,899 --> 00:05:34,034
有只读属性

84
00:05:34,067 --> 00:05:36,770
如 bundle 标识符

85
00:05:36,803 --> 00:05:40,040
App 名称及其进程标识符

86
00:05:41,909 --> 00:05:45,579
在这个例子中
Keynote 和 Safari

87
00:05:45,612 --> 00:05:48,048
各有一个 SCRunningApplication

88
00:05:49,249 --> 00:05:52,519
当然 这些 App 都有窗口

89
00:05:53,787 --> 00:05:56,957
这些窗口都有
对应的 SCWindow

90
00:05:56,990 --> 00:05:58,392
包括定义窗口的只读属性

91
00:05:58,425 --> 00:06:04,398
比如窗口 id frame 标题

92
00:06:04,431 --> 00:06:07,134
窗口是否在屏幕上或最小化

93
00:06:08,602 --> 00:06:11,705
SCWindow 也会有一个
所属 App

94
00:06:12,973 --> 00:06:16,009
在这个情况下
两个 Safari SCWindows

95
00:06:16,043 --> 00:06:18,212
都会有一样的
Safari 所属 App

96
00:06:22,015 --> 00:06:27,221
SCWindows SCRunningApplications
和 SCDisplays 相结合

97
00:06:27,254 --> 00:06:29,823
为您提供在 SCShareableContent 中

98
00:06:29,857 --> 00:06:32,059
可以共享的潜在内容

99
00:06:32,092 --> 00:06:36,063
您可以获得设备中
所有可共享内容的列表

100
00:06:36,096 --> 00:06:38,765
或者也可以指定某个参数

101
00:06:41,168 --> 00:06:44,137
假如您想要列出屏幕上

102
00:06:44,171 --> 00:06:45,506
所有 App 和窗口

103
00:06:45,539 --> 00:06:48,208
这样用户可以选择
需要共享的内容

104
00:06:49,009 --> 00:06:52,379
ScreenCaptureKit 有一个
简单的 API 来完成

105
00:06:54,815 --> 00:06:57,985
这个简短的代码片段
是捕获示例代码

106
00:06:58,018 --> 00:06:59,720
可在 developer.apple.com 中找到

107
00:07:00,754 --> 00:07:05,058
只有屏幕上的窗口
会通过 SCShareableContent 返回

108
00:07:05,092 --> 00:07:11,265
包括相关联的 SCWindows
SCApplications 和 SCDisplays

109
00:07:12,566 --> 00:07:14,635
现在您有了可共享内容

110
00:07:14,668 --> 00:07:16,170
就可以创建一个过滤器了

111
00:07:18,205 --> 00:07:21,942
SCContentFilter 有
两种主要类型

112
00:07:21,975 --> 00:07:25,712
显示器无关的窗口过滤器
它可以捕获

113
00:07:25,746 --> 00:07:28,882
在多个显示器间移动的窗口

114
00:07:28,916 --> 00:07:31,351
以及依赖显示器的过滤器

115
00:07:31,385 --> 00:07:36,356
可以选择包含或排除
指定的窗口或 App

116
00:07:37,357 --> 00:07:40,460
要注意音频捕获只能
在 App 级别上

117
00:07:40,494 --> 00:07:41,962
进行过滤

118
00:07:43,063 --> 00:07:46,600
我会给大家演示几个
过滤程序的例子

119
00:07:48,468 --> 00:07:51,205
假如您只对共享
keynote 窗口感兴趣

120
00:07:53,473 --> 00:07:56,510
您可以选择显示器无关的
窗口过滤器

121
00:07:56,543 --> 00:07:59,379
从而在它跨屏幕移动时
可以捕获对应的窗口

122
00:08:00,614 --> 00:08:04,651
即使您想要共享
屏幕上的所有内容

123
00:08:04,685 --> 00:08:07,487
也可能会有一些内容
是您想要排除在外的

124
00:08:07,521 --> 00:08:11,058
比如 您会想将
自己的捕获 App 排除在外

125
00:08:11,091 --> 00:08:13,727
从而避免镜像嵌套效果

126
00:08:16,330 --> 00:08:21,802
有些窗口或 App 中可能还有

127
00:08:21,835 --> 00:08:24,738
您不想捕获的敏感信息

128
00:08:24,771 --> 00:08:28,609
这些场景都可通过
SCContentFilter 来处理

129
00:08:28,642 --> 00:08:31,111
现在我们跳转到代码
看下如何完成

130
00:08:34,214 --> 00:08:36,617
这是我之前展示的代码片段

131
00:08:38,051 --> 00:08:40,587
查询了可共享内容后

132
00:08:40,621 --> 00:08:44,191
代码会查找与捕获示例 App

133
00:08:44,224 --> 00:08:45,759
bundle 标识符相同的 App

134
00:08:46,827 --> 00:08:51,498
然后 依赖显示器的内容过滤器
将 App 排除在 stream 流之外

135
00:08:54,535 --> 00:08:58,472
除了内容过滤器
ScreenCaptureKit 提供

136
00:08:58,505 --> 00:09:01,475
高品质 高性能 可于
每个 stream 流调整的控制

137
00:09:02,943 --> 00:09:06,213
这些控制可在
SCStreamConfiguration 中设置

138
00:09:08,182 --> 00:09:13,086
有些视频控制包括
输出分辨率 帧率

139
00:09:13,120 --> 00:09:14,988
以及是否显示鼠标光标

140
00:09:16,723 --> 00:09:21,161
在音频方面 您可以启用音频
改变采样率

141
00:09:21,195 --> 00:09:22,863
调整通道数

142
00:09:23,997 --> 00:09:28,001
我会为大家演示一些
应用这些参数的场景

143
00:09:29,970 --> 00:09:34,141
当共享文本清晰度更重要的
低频运动屏幕内容时

144
00:09:34,174 --> 00:09:37,211
如票据或电子数据表

145
00:09:37,244 --> 00:09:41,682
设置捕获的输出分辨率
为 4K 每秒 10 帧

146
00:09:43,350 --> 00:09:45,752
由于内容中不含有音频

147
00:09:45,786 --> 00:09:47,454
您也可以禁用音频

148
00:09:48,522 --> 00:09:50,791
但如果是高动态内容

149
00:09:50,824 --> 00:09:53,827
如共享最近假期的视频

150
00:09:53,861 --> 00:09:57,264
您应该以帧率优先
而非分辨率

151
00:09:57,297 --> 00:10:00,033
将输出分辨率
降低为 1080p

152
00:10:00,067 --> 00:10:02,769
帧率增加为每秒 60 帧

153
00:10:04,471 --> 00:10:07,107
鼠标光标的移动可能会让人分心

154
00:10:07,140 --> 00:10:08,742
您可能会想隐藏光标

155
00:10:10,344 --> 00:10:14,815
您也可以启用音频捕获
会更有沉浸式的体验感

156
00:10:16,383 --> 00:10:19,353
这些控制都可以
在 SCStreamConfiguration 中

157
00:10:19,386 --> 00:10:20,988
通过不同的属性来设置

158
00:10:24,424 --> 00:10:27,961
这是共享高动态内容的
一种可能的配置

159
00:10:29,563 --> 00:10:34,034
在这个示例代码中 捕获的
输出分辨率设置为 1080p

160
00:10:34,935 --> 00:10:39,973
然后 最小帧间隔设置为
1/60 从而以每秒 60 帧的帧率

161
00:10:40,007 --> 00:10:41,441
进行捕获

162
00:10:42,643 --> 00:10:45,979
最后 stream 流配置
会隐藏鼠标光标

163
00:10:47,681 --> 00:10:52,719
在音频方面 首先通过将 capturesAudio
设置为 true 以启用音频

164
00:10:52,753 --> 00:10:58,125
然后 设置采样率为 48kHz
通道数为 2

165
00:11:00,027 --> 00:11:04,164
有了 SCContentFilter
和 SCStreamConfiguration

166
00:11:04,198 --> 00:11:06,867
您就有了 App 设置屏幕捕获

167
00:11:06,900 --> 00:11:08,468
所需的所有信息

168
00:11:09,536 --> 00:11:12,339
有了这些 您现在可以
创建 SCStream 了

169
00:11:15,342 --> 00:11:16,977
我们回到概述

170
00:11:18,212 --> 00:11:20,214
您要用所需的过滤器和配置

171
00:11:20,247 --> 00:11:22,583
来初始化 stream 流

172
00:11:23,784 --> 00:11:26,053
您也可以传送可选代理

173
00:11:26,086 --> 00:11:27,688
来处理错误

174
00:11:29,022 --> 00:11:33,427
设置好后 您可以调用 startCapture
ScreenCaptureKit 在可用的时候

175
00:11:33,460 --> 00:11:37,064
会提供带采样的 SCStream

176
00:11:38,365 --> 00:11:43,237
创建了过滤器和配置后
启动 stream 流代码就易如反掌了

177
00:11:43,270 --> 00:11:44,271
我来给大家演示下

178
00:11:47,307 --> 00:11:50,410
同样的 有了您需要的
过滤器和配置

179
00:11:50,444 --> 00:11:52,980
您就可以初始化
SCStream 对象

180
00:11:54,648 --> 00:11:59,119
在捕获样本项目中
self 作为错误处理代理传送

181
00:12:01,054 --> 00:12:05,125
创建 SCStream 后
您现在可以调用 startCapture

182
00:12:06,894 --> 00:12:09,396
您初始化
和开始 stream 流后

183
00:12:09,429 --> 00:12:12,599
下一步就是通过
App 获得媒体样本

184
00:12:16,136 --> 00:12:19,239
音频和视频样本都会以
CMSampleBuffers 的形式

185
00:12:19,273 --> 00:12:21,441
发送到您的 App

186
00:12:22,910 --> 00:12:26,146
为了从 stream 流中
获取媒体样本

187
00:12:26,180 --> 00:12:27,648
您需要添加一个对象

188
00:12:27,681 --> 00:12:31,385
为 stream 流实现
SCStreamOutput 协议

189
00:12:32,553 --> 00:12:36,890
当您添加 stream 流输出时
可能也会指定一个处理队列

190
00:12:38,825 --> 00:12:41,728
这在您想要在特定队列中
传送样本时会很有用

191
00:12:41,762 --> 00:12:45,265
无需额外的分发

192
00:12:47,434 --> 00:12:51,038
如果您没有指定队列
将会使用默认队列

193
00:12:54,775 --> 00:12:59,746
stream 流已开始 输出已添加
新样本准备好后

194
00:12:59,780 --> 00:13:01,415
ScreenCaptureKit 会提供
一个回调函数

195
00:13:02,683 --> 00:13:06,119
现在 我给大家演示下
如何用代码来获取媒体样本

196
00:13:09,089 --> 00:13:12,793
这是 SCStreamOutputProtocol 的实现

197
00:13:12,826 --> 00:13:15,729
在新媒体样本准备好后调用

198
00:13:17,297 --> 00:13:21,068
ScreenCaptureKit 将这些样本
作为 CMSampleBuffers 来传送

199
00:13:21,101 --> 00:13:23,837
提供 stream 流和样本类型

200
00:13:25,873 --> 00:13:31,078
实现了样本缓冲处理程序后
您只需要添加 stream 流输出

201
00:13:32,713 --> 00:13:35,816
这样 stream 流中的媒体样本

202
00:13:35,849 --> 00:13:39,419
有了您需要的内容和格式

203
00:13:39,453 --> 00:13:41,355
将会传送到您的 App

204
00:13:44,157 --> 00:13:48,128
ScreenCaptureKit 以
CMSampleBuffers 的形式传送样本

205
00:13:48,161 --> 00:13:50,564
那我们再来看下如何使用

206
00:13:53,267 --> 00:13:57,304
在视频方面 CMSampleBuffer
有 IOSurface 支持

207
00:13:58,805 --> 00:14:00,974
ScreenCaptureKit 也为
SCStreamFrameInfo 中的

208
00:14:01,008 --> 00:14:04,678
CMSampleBuffer 提供附件

209
00:14:06,980 --> 00:14:10,450
附件可提供您收到的
视频样本的信息

210
00:14:12,219 --> 00:14:15,389
检查 stream 当前状态下的
帧状态

211
00:14:15,422 --> 00:14:19,626
complete 帧状态表示
有一个新的视频帧

212
00:14:19,660 --> 00:14:22,896
idle 帧状态意味着
视频样本没有改变

213
00:14:22,930 --> 00:14:25,065
所以没有新的 IOSurface

214
00:14:26,233 --> 00:14:30,637
否则 所提供的样本
与所有 CMSampleBuffer 一样

215
00:14:30,671 --> 00:14:33,941
您可以使用当前
CMSampleBuffer 工具

216
00:14:35,209 --> 00:14:39,079
ScreenCaptureKit 的 API
可帮您获得过滤后屏幕的

217
00:14:39,112 --> 00:14:40,647
音频和视频内容

218
00:14:41,481 --> 00:14:43,584
最重要的是 该框架可提供

219
00:14:43,617 --> 00:14:47,087
许多不同的开发者控制
从而匹配您 App 的需求

220
00:14:48,455 --> 00:14:50,924
我还讲到了一些基础知识
能帮您开始创建

221
00:14:50,958 --> 00:14:53,894
不同的屏幕捕获体验

222
00:14:56,463 --> 00:14:59,833
有了全新推出的 ScreenCaptureKit
旧的捕获框架

223
00:14:59,867 --> 00:15:04,571
CGDisplayStream 和 CGWindowList
未来将会被弃用

224
00:15:06,240 --> 00:15:08,075
我希望大家和我一样

225
00:15:08,108 --> 00:15:10,143
对 ScreenCaptureKit 的推出
感到激动不已

226
00:15:11,845 --> 00:15:14,281
您如果准备好了查看
更多进阶话题

227
00:15:14,314 --> 00:15:17,684
请观看将 ScreenCaptureKit 提升到全新境界
的相关内容

228
00:15:18,785 --> 00:15:20,420
感谢收看

229
00:15:20,454 --> 00:15:22,523
[古怪的音乐]

