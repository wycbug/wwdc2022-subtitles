1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:13,080
Devin Rousso: 大家好 我是 Devin Rousso
WebKit 团队的一名工程师

3
00:00:13,113 --> 00:00:16,250
今天我想在这里与你分享
一个激动人心的新机会

4
00:00:16,283 --> 00:00:19,186
为 Safari 浏览器的
Web Inspector 创建扩展

5
00:00:19,219 --> 00:00:22,589
Web Inspector
是在所有 Apple 平台上

6
00:00:22,623 --> 00:00:24,791
调试网络内容的主要开发工具

7
00:00:24,825 --> 00:00:29,162
它已经有了大量
用于调试网站的内置功能

8
00:00:29,196 --> 00:00:31,231
但是通常网络开发的一些领域

9
00:00:31,265 --> 00:00:35,102
很难构建成一个通用的开发工具

10
00:00:35,135 --> 00:00:38,038
也许你正在调试
一个流行的 JavaScript 库

11
00:00:38,071 --> 00:00:41,375
或者你只是需要一些更具体的东西

12
00:00:41,408 --> 00:00:44,077
Web Inspector 扩展是这些
个人工作流程场景的

13
00:00:44,111 --> 00:00:46,313
绝佳解决方案

14
00:00:47,381 --> 00:00:51,818
通过利用跨浏览器网络扩展
和 DevTools APIs

15
00:00:51,852 --> 00:00:56,456
你现在可以在 Safari 16 的
Web Inspector 中添加自己的标签

16
00:00:56,490 --> 00:00:59,793
我们来快速浏览一下
Web Inspector 扩展

17
00:00:59,826 --> 00:01:02,162
然后我将向你展示
如何构建自己的扩展

18
00:01:02,196 --> 00:01:05,265
首先我将打开
Safari 浏览器的扩展偏好设置

19
00:01:07,701 --> 00:01:10,070
并启用 Web Inspector 扩展

20
00:01:10,103 --> 00:01:13,807
然后我会关闭 Safari 浏览器的
扩展偏好设置并检查页面

21
00:01:15,409 --> 00:01:19,046
我将从开发菜单中选择
显示 Web Inspector

22
00:01:19,079 --> 00:01:22,416
在 Web Inspector 中
我不仅可以看到许多内置的选项卡

23
00:01:22,449 --> 00:01:23,951
如 Elements Tab

24
00:01:23,984 --> 00:01:28,121
还可以看到我刚刚启用的
Web Inspector 扩展的选项卡

25
00:01:28,155 --> 00:01:30,591
因为我们刚刚启用了这个扩展

26
00:01:30,624 --> 00:01:34,628
但是我们首先必须给它权限
来处理当前检查的页面

27
00:01:34,661 --> 00:01:37,965
我有和 Web Inspector 之外的

28
00:01:37,998 --> 00:01:39,700
其他扩展相同的权限持续时间选项

29
00:01:39,733 --> 00:01:42,336
所以现在让我们给它一天的访问权限

30
00:01:42,369 --> 00:01:45,839
我将在本期讲座中
构建这个 Open Graph 扩展

31
00:01:45,873 --> 00:01:49,810
它显示大多数网站放在页面上的
常见社交媒体元数据

32
00:01:49,843 --> 00:01:52,012
通过 Messages
和其他社交媒体网站的链接

33
00:01:52,045 --> 00:01:54,882
预览使用

34
00:01:54,915 --> 00:01:58,552
现在我们已经快速了解了
Web Inspector 扩展的功能

35
00:01:58,585 --> 00:02:00,687
让我们来谈谈它们是如何构建的

36
00:02:00,721 --> 00:02:03,757
与其他 Safari Web 扩展一样
Web Inspector 扩展

37
00:02:03,790 --> 00:02:06,527
通过 App Store 中的 App 来分发

38
00:02:07,961 --> 00:02:11,798
要构建自己的 Web Inspector 扩展
你需要有 Xcode

39
00:02:11,832 --> 00:02:15,936
这是 Apple 用于构建 Mac
和 iOS app 的应用程序创建工具

40
00:02:15,969 --> 00:02:19,273
Xcode 还附带项目模板
以帮助快速制作

41
00:02:19,306 --> 00:02:21,408
新的 Safari 浏览器扩展 App

42
00:02:21,441 --> 00:02:23,777
如果你已经有了为另一个浏览器

43
00:02:23,810 --> 00:02:25,512
创建的现有网络扩展

44
00:02:25,546 --> 00:02:28,815
你也可以使用 Xcode 的
捆绑转换工具

45
00:02:28,849 --> 00:02:32,219
只需从终端运行
safari-web-extension-converter

46
00:02:32,252 --> 00:02:34,621
传递包含 manifest.json 文件的

47
00:02:34,655 --> 00:02:37,491
扩展目录的路径

48
00:02:37,524 --> 00:02:40,527
然后将为你的扩展
创建一个完整的 App 项目

49
00:02:40,561 --> 00:02:42,029
并准备好构建和运行

50
00:02:43,197 --> 00:02:44,932
有关此工具的更多信息

51
00:02:44,965 --> 00:02:48,836
请查看 WWDC 2020 中的

52
00:02:48,869 --> 00:02:50,971
Meet Safari Web Extensions
以及在线文档

53
00:02:51,004 --> 00:02:56,476
因此 今天我将介绍
Web Inspector 扩展的基本结构

54
00:02:56,510 --> 00:03:00,147
介绍如何最好地评估该扩展中的代码

55
00:03:00,180 --> 00:03:03,650
并讨论一些适合用户的最佳实践

56
00:03:03,684 --> 00:03:05,118
我们开始吧

57
00:03:06,653 --> 00:03:11,024
Web Inspector 扩展的结构
与其他 Safari Web Extension 一样

58
00:03:11,058 --> 00:03:14,928
有工具栏图标 背景页 内容脚本等

59
00:03:14,962 --> 00:03:18,432
但它们也有专用的开发工具背景页

60
00:03:18,465 --> 00:03:21,068
我们来看看它在实践中是如何工作的

61
00:03:21,101 --> 00:03:23,403
典型的 Safari Web 扩展的结构

62
00:03:23,437 --> 00:03:26,473
从一个清单文件开始
该文件声明了扩展的

63
00:03:26,507 --> 00:03:30,944
基本细节 如名称 图标 描述等

64
00:03:30,978 --> 00:03:34,882
它可以声明一个背景页来处理
你的扩展程序的

65
00:03:34,915 --> 00:03:36,450
所有幕后逻辑

66
00:03:36,483 --> 00:03:40,287
还可以声明任何用于将功能注入到

67
00:03:40,320 --> 00:03:43,790
用户访问网页中的内容脚本

68
00:03:43,824 --> 00:03:47,794
对于 Web Inspector 扩展
还有一些其他的页面

69
00:03:47,828 --> 00:03:50,898
首先有一个必需的开发工具背景页

70
00:03:50,931 --> 00:03:54,401
用于 Web Inspector 扩展的幕后逻辑

71
00:03:54,434 --> 00:03:58,338
该页面可以访问独特的开发工具 API

72
00:03:58,372 --> 00:04:01,775
和有限的内容脚本 API

73
00:04:01,808 --> 00:04:06,113
从这个开发工具背景页
你可以创建在 Web Inspector 中

74
00:04:06,146 --> 00:04:08,215
显示的开发工具选项卡页面

75
00:04:08,248 --> 00:04:11,485
但所有这些都只是针对
单个 Web Inspector

76
00:04:11,518 --> 00:04:15,422
如果有多个 Web Inspector
每个都有自己的

77
00:04:15,455 --> 00:04:17,758
相同的开发工具背景页实例

78
00:04:17,791 --> 00:04:21,762
在相关 Web Inspector 打开期间
保持活动状态

79
00:04:21,795 --> 00:04:24,932
因此 每个开发工具选项卡页面

80
00:04:24,965 --> 00:04:27,701
也可能有多个实例

81
00:04:27,734 --> 00:04:30,103
我们来看看这种结构
在实践中是怎样的

82
00:04:30,137 --> 00:04:33,607
并开始构建我的
Open Graph Web Inspector 扩展

83
00:04:34,708 --> 00:04:37,544
首先我会在 Xcode 中创建一个新项目

84
00:04:41,081 --> 00:04:45,219
我要创建的项目类型是
Safari Extension App

85
00:04:45,252 --> 00:04:48,755
我只需要 macOS
但我会让它在多平台中保持原样

86
00:04:48,789 --> 00:04:52,392
以防我将来想添加 iOS 功能

87
00:04:52,426 --> 00:04:56,496
我会把它命名为 Open Graph
并保留其余的默认值

88
00:04:56,530 --> 00:05:00,300
请注意 你需要根据
你使用的 Apple 开发者帐户

89
00:05:00,334 --> 00:05:02,970
选择一个团队和捆绑包标识符

90
00:05:03,003 --> 00:05:05,672
最后 我把它保存在桌面上

91
00:05:07,474 --> 00:05:11,979
现在我有了一个通用的
Safari Web 扩展项目 可以随时修改

92
00:05:12,012 --> 00:05:14,681
我首先进入 manifest.json 文件

93
00:05:14,715 --> 00:05:18,151
这是每个网络扩展的根配置文件

94
00:05:18,185 --> 00:05:22,422
清单文件引用
构成扩展程序的其他资源

95
00:05:22,456 --> 00:05:26,693
本地化 图像 页面 脚本 样式等

96
00:05:26,727 --> 00:05:30,330
对于我的 Web Inspector 扩展
我不需要其中的一些文件

97
00:05:30,364 --> 00:05:33,867
如背景页 内容脚本或弹出窗口

98
00:05:33,901 --> 00:05:36,303
所以我会从清单和整个项目中

99
00:05:36,336 --> 00:05:38,772
删除它们

100
00:05:42,543 --> 00:05:46,313
好的 让我们开始把它
变成一个 Web Inspector 扩展

101
00:05:46,346 --> 00:05:50,184
为此 我需要将开发工具背景页

102
00:05:50,217 --> 00:05:52,386
添加到清单并为其创建相应的文件

103
00:05:52,419 --> 00:05:55,722
以及我会在其中使用的
JavaScript 文件

104
00:05:55,756 --> 00:05:58,926
我将点击 File New File

105
00:06:01,762 --> 00:06:04,765
向下滚动找到 Empty 文件模板

106
00:06:12,773 --> 00:06:16,176
我将此文件命名为
devtools_background.htm

107
00:06:16,210 --> 00:06:18,679
以匹配我在清单中使用的名称

108
00:06:20,848 --> 00:06:24,318
该位置已经设置在我的其他资源
和部分正确目标的旁边

109
00:06:24,351 --> 00:06:28,589
所以我不需要在这里做任何更改

110
00:06:31,325 --> 00:06:35,329
我将再次对 JavaScript 文件
重复相同的步骤

111
00:06:40,968 --> 00:06:44,338
我将其命名为
“devtools_background.js”

112
00:06:48,375 --> 00:06:52,679
最后 我需要在我的开发工具
背景页中包含 JavaScript 文件

113
00:06:54,314 --> 00:06:57,985
请记住 此页面是在
Web Inspector 打开时创建的

114
00:06:58,018 --> 00:07:02,189
负责创建出现在
Web Inspector 中的自定义选项卡

115
00:07:02,222 --> 00:07:04,191
我几乎总是想创建一个选项卡

116
00:07:04,224 --> 00:07:07,294
这样 如果有需要的话 我之前

117
00:07:07,327 --> 00:07:09,997
看到的权限将在线显示给我的用户

118
00:07:10,030 --> 00:07:11,598
而不是在其他地方

119
00:07:11,632 --> 00:07:15,502
这个开发工具面板创建 API
需要三个简单的参数

120
00:07:15,536 --> 00:07:18,539
第一个是选项卡的名称

121
00:07:18,572 --> 00:07:21,074
为此 我使用本地化方法来查找

122
00:07:21,108 --> 00:07:23,977
扩展的本地化名称

123
00:07:24,011 --> 00:07:26,947
下一个参数是要拿来使用的图标路径

124
00:07:26,980 --> 00:07:31,018
请注意 如果用户选择
缩放他们的用户界面

125
00:07:31,051 --> 00:07:33,921
这应该是一个矢量图像
以便平滑地缩放到任何大小

126
00:07:33,954 --> 00:07:37,758
但是为了使用这个图标
我需要确保它是我项目的一部分

127
00:07:37,791 --> 00:07:40,827
还有我的扩展需要的所有其他图标

128
00:07:40,861 --> 00:07:44,965
“图像”文件夹中的图标
仍然是项目模板中的默认图标

129
00:07:44,998 --> 00:07:47,534
因此让我们从项目中删除这些内容

130
00:07:50,838 --> 00:07:53,373
用我之前创作的一些图标来代替它们

131
00:07:57,277 --> 00:08:02,115
包括我在创建开发工具选项卡时
尝试使用的 logo.svg

132
00:08:04,751 --> 00:08:08,522
现在 我将返回到开发工具后台脚本

133
00:08:10,624 --> 00:08:14,595
第三个参数是 Web Inspector 中
选项卡使用的 HTML

134
00:08:14,628 --> 00:08:16,496
就像刚才的图片一样

135
00:08:16,530 --> 00:08:19,566
我需要创建这个页面才能使用它

136
00:08:26,740 --> 00:08:29,643
我将此命名为 devtools_tab.html

137
00:08:29,676 --> 00:08:32,179
以匹配我给 API 起的名称

138
00:08:36,450 --> 00:08:39,019
然而 与开发工具背景页不同

139
00:08:39,052 --> 00:08:42,756
这个开发工具选项卡页面
实际上会显示给用户

140
00:08:42,789 --> 00:08:47,194
所以这次我将创建
一个 JavaScript 和 CSS 文件

141
00:08:55,836 --> 00:08:59,640
我将这个 JavaScript 文件
命名为 devtools_tab.js

142
00:09:03,443 --> 00:09:06,947
CSS 文件命名为 devtools_tab.css

143
00:09:08,615 --> 00:09:10,817
很好 我已经设置了这个结构

144
00:09:10,851 --> 00:09:13,787
但现在我只添加常用的 Hello World

145
00:09:13,820 --> 00:09:15,822
来确保一切正常运行

146
00:09:15,856 --> 00:09:18,859
但别担心 我们稍后会
更深入地讨论这个问题

147
00:09:18,892 --> 00:09:22,129
因为首先 我们还有几个图标要替换

148
00:09:22,162 --> 00:09:25,232
以确保此扩展具有一致的外观

149
00:09:25,265 --> 00:09:28,569
首先我们需要替换默认的大图标

150
00:09:31,238 --> 00:09:33,140
删除它

151
00:09:35,275 --> 00:09:37,644
并将我的大图标拖到原来的位置

152
00:09:41,348 --> 00:09:44,017
但是由于这个大图标是 App 的一部分

153
00:09:44,051 --> 00:09:46,520
因此我需要把它添加到正确的目标中

154
00:09:50,557 --> 00:09:53,727
其余图标都是资产目录的一部分

155
00:09:53,760 --> 00:09:56,530
特别是 AppIcon 集

156
00:09:59,900 --> 00:10:03,670
我已经准备好这些图标
所以我将它们粘贴进去

157
00:10:03,704 --> 00:10:07,241
我认为我们已经替换了所有默认图标

158
00:10:07,274 --> 00:10:08,976
所以现在要运行我的扩展程序

159
00:10:09,009 --> 00:10:13,347
请注意 在第一次构建项目时
运行可能需要几秒钟时间

160
00:10:20,354 --> 00:10:21,622
就是这样

161
00:10:21,655 --> 00:10:24,091
这个 UI 的大部分来自 Xcode 模板

162
00:10:24,124 --> 00:10:27,895
但是我确实看到了我的图标
而不是默认图标

163
00:10:27,928 --> 00:10:30,964
只要启动了至少一次
Safari 浏览器扩展应用程序

164
00:10:30,998 --> 00:10:33,233
我们就可以把它关闭

165
00:10:33,267 --> 00:10:34,902
因为 Safari 浏览器不需要
再运行该 App 来启动它

166
00:10:39,373 --> 00:10:41,508
但是在 Safari 浏览器中看到它之前

167
00:10:41,542 --> 00:10:44,611
我必须在 Develop 菜单中
允许未签名的扩展

168
00:10:44,645 --> 00:10:47,514
因为这是一个本地构建的未签名 App

169
00:10:47,548 --> 00:10:49,950
现在
在 Safari 浏览器的扩展首选项中

170
00:10:49,983 --> 00:10:53,520
我可以看到 Open Graph
我把它打开

171
00:10:53,554 --> 00:10:56,790
我将打开一个 Safari 浏览器选项卡
并浏览至 apple.com

172
00:10:56,823 --> 00:10:59,026
这样我就可以尝试我的扩展程序

173
00:10:59,059 --> 00:11:02,596
已经可以看到我的图标在工具栏中

174
00:11:04,031 --> 00:11:06,834
我的扩展选项卡现在在选项卡栏中

175
00:11:06,867 --> 00:11:09,369
切换到这里

176
00:11:09,403 --> 00:11:12,239
我们可以看到跟之前看到的
相同的权限提示

177
00:11:12,272 --> 00:11:14,508
如果扩展需要权限

178
00:11:14,541 --> 00:11:16,944
则会自动显示此权限提示

179
00:11:16,977 --> 00:11:20,414
就像之前一样 我给它一天时间

180
00:11:21,682 --> 00:11:25,219
还有我之前添加到
开发工具标签页的 Hello World

181
00:11:25,252 --> 00:11:30,457
以上就是如何为 Safari 16
创建 Web Inspector 扩展的基础知识

182
00:11:30,490 --> 00:11:31,825
我们来回顾一下

183
00:11:31,859 --> 00:11:36,063
我声明了开发工具的背景页
并将其添加到我的 Xcode 项目中

184
00:11:36,096 --> 00:11:39,733
从那里 我能够在 Web Inspector 中
创建新的选项卡

185
00:11:39,766 --> 00:11:41,335
来显示我的定制工具

186
00:11:41,368 --> 00:11:45,305
最后 我开始考虑扩展所需的权限

187
00:11:45,339 --> 00:11:49,443
对于 Web Inspector 扩展
这通常归结为

188
00:11:49,476 --> 00:11:52,446
评估被检查页面中的代码
通常是提取一些数据

189
00:11:52,479 --> 00:11:54,448
以在 Web Inspector 中显示

190
00:11:54,481 --> 00:11:58,252
Web Extension 已经有许多
评估代码的方法

191
00:11:58,285 --> 00:11:59,987
对于 Web Inspector 扩展

192
00:12:00,020 --> 00:12:02,322
还有另一个 API 是评估

193
00:12:02,356 --> 00:12:05,392
被检查页面内脚本的首选方法

194
00:12:05,425 --> 00:12:10,631
我们来看一下这个 API 看看如何
将它用于我的 OpenGraph 扩展

195
00:12:10,664 --> 00:12:14,735
这个开发工具扩展 API
在被检查的窗口中评估 JavaScript

196
00:12:14,768 --> 00:12:17,171
是快速获得结果的最佳方式

197
00:12:17,204 --> 00:12:20,407
它将自动定位
与运行扩展的 Web Inspector

198
00:12:20,440 --> 00:12:22,476
相关联的页面

199
00:12:22,509 --> 00:12:27,447
记住 用户可以同时检查多个页面

200
00:12:27,481 --> 00:12:30,050
这个 API 还有一些有用的选项

201
00:12:30,083 --> 00:12:32,452
可以帮助你获得正确的结果

202
00:12:32,486 --> 00:12:35,889
默认情况下 这个 API 的表达式

203
00:12:35,923 --> 00:12:39,893
是在被检查页面的主框架的
上下文中计算的

204
00:12:39,927 --> 00:12:42,162
但是你可以使用 frameURL 选项

205
00:12:42,196 --> 00:12:45,465
在不同的框架内指定评估

206
00:12:45,499 --> 00:12:48,035
当你的扩展需要从页面中

207
00:12:48,068 --> 00:12:50,971
许多可能的子框架之一提取数据时
这是必需的

208
00:12:51,004 --> 00:12:54,842
对于我的 OpenGraph 扩展
我只需要担心主框架

209
00:12:54,875 --> 00:12:56,543
但是我建议你在评估

210
00:12:56,577 --> 00:12:59,880
Web Inspector 扩展的脚本时
记住这一点

211
00:12:59,913 --> 00:13:02,983
我们来看看如何在我的扩展中

212
00:13:03,016 --> 00:13:05,853
使用这个函数来获取和显示
被检查页面的数据

213
00:13:05,886 --> 00:13:09,790
我将首先用 HTML 替换
我之前添加的占位符 Hello World

214
00:13:09,823 --> 00:13:14,094
它实际上加载了
我的 CSS 和 JavaScript 文件

215
00:13:18,398 --> 00:13:22,503
然后我将添加一些基本的 CSS 来给
开发工具选项卡一个漂亮的样式

216
00:13:24,071 --> 00:13:27,674
我想确保我的开发工具选项卡
与 Web Inspector 的其余部分相适应

217
00:13:27,708 --> 00:13:31,578
因此我声明了一个“颜色方案”的根属性

218
00:13:31,612 --> 00:13:36,083
该属性使我的开发工具选项卡与
Web Inspector 其余部分外观相匹配

219
00:13:36,116 --> 00:13:41,054
使用系统字体系列并继承字体大小

220
00:13:41,088 --> 00:13:44,725
并匹配更重要文本的颜色

221
00:13:44,758 --> 00:13:48,529
至于功能

222
00:13:48,562 --> 00:13:50,264
我将从添加一些文本开始

223
00:13:50,297 --> 00:13:53,834
以防页面没有任何 opengraph 元数据

224
00:13:53,867 --> 00:13:57,971
请注意 我可以在 Web Inspector 中
使用 Web 扩展本地化字符串

225
00:13:58,005 --> 00:14:00,474
就像我在 Web 扩展的其他地方
可以做到的一样

226
00:14:00,507 --> 00:14:04,478
但为了做到这一点
我需要将相同的本地化字符串标识符

227
00:14:04,511 --> 00:14:06,380
添加到本地化字符串文件中

228
00:14:07,514 --> 00:14:09,783
接下来

229
00:14:09,816 --> 00:14:13,687
我将创建提供给功能强大的开发工具

230
00:14:13,720 --> 00:14:15,789
devtools-inspectedWindow-eval API 的
JavaScript

231
00:14:15,822 --> 00:14:18,192
这让我在检查过的页面中
对其进行评估

232
00:14:18,225 --> 00:14:21,428
在本例中
我想查询被检查页面的 DOM

233
00:14:21,461 --> 00:14:24,097
以查找一些常见的 opengraph 元数据

234
00:14:24,131 --> 00:14:28,836
特别是标题 描述

235
00:14:30,737 --> 00:14:33,607
和图像

236
00:14:33,640 --> 00:14:37,344
以及被检查页面文档的当前就绪状态

237
00:14:37,377 --> 00:14:41,815
将其捆绑在一起
通过返回值发送回开发工具页面

238
00:14:41,849 --> 00:14:45,152
完成后 我可以获取对应于

239
00:14:45,185 --> 00:14:48,488
每个属性的 HTML 元素
并对其进行配置

240
00:14:48,522 --> 00:14:51,992
以便它们显示收集的数据

241
00:14:54,261 --> 00:14:58,699
如果文档还没有准备好
我可以稍等片刻后再试一次

242
00:15:00,434 --> 00:15:03,837
我还想在每次检查页面导航时
重复所有这些操作 因此我将为

243
00:15:03,871 --> 00:15:07,074
开发工具网络 onNavigated
添加一个侦听器

244
00:15:15,916 --> 00:15:19,653
这一切看起来都很棒
所以我将再次构建来测试它

245
00:15:26,126 --> 00:15:30,297
现在每当我打开 Web Inspector 或在
Web Inspector 已经打开的情况下导航时

246
00:15:30,330 --> 00:15:34,968
我都可以看到每个页面的
opengraph 标题 描述和图像

247
00:15:35,002 --> 00:15:38,305
这是一个简单的示例
展示了如何使用许多新的

248
00:15:38,338 --> 00:15:41,275
强大的 Web Inspector 扩展 API

249
00:15:41,308 --> 00:15:44,378
我的 OpenGraph 扩展
进展得很顺利

250
00:15:44,411 --> 00:15:47,414
我的 Web Inspector 扩展的
开发工具标签页

251
00:15:47,447 --> 00:15:50,684
现在可以在被检查的页面中进行评估

252
00:15:50,717 --> 00:15:54,221
我能够获取结果数据并对其进行处理

253
00:15:54,254 --> 00:15:57,491
以用户友好的格式显示出来
以便快速访问

254
00:15:57,524 --> 00:16:00,761
那么在创建 Web Inspector 扩展时

255
00:16:00,794 --> 00:16:02,729
有哪些好方法可以让用户体验更好呢

256
00:16:02,763 --> 00:16:07,301
始终从开发工具后台页面
创建开发工具选项卡页面

257
00:16:07,334 --> 00:16:11,572
这样用户可以看到这些选项卡将
出现在 Web Inspector 中的什么位置

258
00:16:11,605 --> 00:16:15,075
并且任何适当的权限提示
都将内嵌显示

259
00:16:15,108 --> 00:16:17,744
与其要求特定的主机权限

260
00:16:17,778 --> 00:16:19,880
不如尝试使用 activeTab 权限

261
00:16:19,913 --> 00:16:22,816
来尽可能有针对性地
保持 Web Inspector 扩展

262
00:16:22,850 --> 00:16:25,719
并确保使用 CSS 颜色方案属性

263
00:16:25,752 --> 00:16:28,422
或 Web 扩展开发工具主题 API

264
00:16:28,455 --> 00:16:30,657
来匹配 Web Inspector 的整体主题

265
00:16:30,691 --> 00:16:34,161
今天我向你展示了如何使用

266
00:16:34,194 --> 00:16:36,096
Web Inspector 扩展
来创建全新的调试工具

267
00:16:36,129 --> 00:16:39,399
并介绍了一些在这样做时
要牢记的最佳实践

268
00:16:39,433 --> 00:16:42,603
如果你想更深入地了解自己

269
00:16:42,636 --> 00:16:44,271
欢迎你在本讲座的相关资源中

270
00:16:44,304 --> 00:16:46,473
下载 OpenGraph Web Inspector 扩展

271
00:16:48,275 --> 00:16:50,444
我们非常想听听你的想法

272
00:16:50,477 --> 00:16:54,481
所以请使用反馈助手
提交错误和功能请求

273
00:16:54,515 --> 00:16:58,385
或者在 Safari 浏览器开发者论坛上
与我们聊天

274
00:16:58,418 --> 00:17:01,421
甚至可以考虑加入
WebExtensions 社区团体

275
00:17:01,455 --> 00:17:04,057
来帮助塑造网络扩展的未来

276
00:17:05,325 --> 00:17:09,096
此外请务必查看
What's new in Safari Web Extensions

277
00:17:09,129 --> 00:17:13,433
以及在线文档
以了解今年更多的新增功能

278
00:17:13,467 --> 00:17:16,603
我真的希望你喜欢学习
在 Web Inspector 中

279
00:17:16,637 --> 00:17:19,072
创建自定义工具的惊人的新功能

280
00:17:19,106 --> 00:17:22,876
我们迫不及待地想看到你将会创造出
多么棒的 Web Inspector 扩展

281
00:17:22,910 --> 00:17:26,280
并期待你以各种方式突破可能的界限

282
00:17:26,313 --> 00:17:27,748
非常感谢你的收听

283
00:17:27,781 --> 00:17:30,751
希望你余下的 WWDC 之旅精彩无限

