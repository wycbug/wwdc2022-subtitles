1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,710 --> 00:00:11,678
Jake: 大家好 我是 Jake

3
00:00:11,712 --> 00:00:13,313
是 AVKit 团队的一名工程师

4
00:00:13,347 --> 00:00:16,583
欢迎观看
打造出色的视频播放体验

5
00:00:16,617 --> 00:00:21,021
在 iOS 和 iPadOS 16 中
我们从头开始搭建了全新的

6
00:00:21,054 --> 00:00:22,389
媒体播放器

7
00:00:22,422 --> 00:00:24,658
带来全新的外观和感觉

8
00:00:24,691 --> 00:00:27,594
旨在保持对内容的关注

9
00:00:27,628 --> 00:00:30,364
并适合更广泛的 App

10
00:00:30,397 --> 00:00:33,166
我们还构建了许多新颖的交互模型

11
00:00:33,200 --> 00:00:37,905
让使用这款新媒体播放器
有更加直观和无缝的体验

12
00:00:37,938 --> 00:00:40,741
我们认为开发者会爱上它

13
00:00:40,774 --> 00:00:45,379
在本期讲座中 我们将深入探讨
新的系统媒体播放器

14
00:00:45,412 --> 00:00:49,449
我们将学习如何
设计令人惊艳的播放体验

15
00:00:49,483 --> 00:00:51,952
我们将在 macOS 和 iOS 中
看到一些

16
00:00:51,985 --> 00:00:54,655
令人兴奋的新的视觉智能功能

17
00:00:54,688 --> 00:00:56,990
我将介绍全新的
新媒体播放器附带

18
00:00:57,024 --> 00:00:59,092
插页式广告体验

19
00:00:59,126 --> 00:01:02,930
并介绍我们从 tvOS
带来的一些新 API

20
00:01:02,963 --> 00:01:06,133
最后 我们将介绍
AVKit 中的一个新功能

21
00:01:06,166 --> 00:01:08,869
可选播放速度

22
00:01:08,902 --> 00:01:12,940
我们重新设计了
tvOS 15.0 的系统播放器

23
00:01:12,973 --> 00:01:14,608
带来了全新的外观和感觉

24
00:01:14,641 --> 00:01:17,611
以及系统播放器的许多新功能

25
00:01:17,644 --> 00:01:19,513
和可用性改进

26
00:01:19,546 --> 00:01:21,648
好吧 我们听到了大家的需求

27
00:01:21,682 --> 00:01:25,919
很高兴地告诉大家我们也改进了
iOS 系统播放器

28
00:01:25,953 --> 00:01:28,555
我们已经完全重新设计了
原生媒体播放器

29
00:01:28,589 --> 00:01:31,191
采用了 tvOS 播放器的观感

30
00:01:31,225 --> 00:01:35,095
但重新设计了触控优先设备

31
00:01:35,128 --> 00:01:37,631
我们已经删除了面板上的颜色

32
00:01:37,664 --> 00:01:41,268
让界面在更广泛的
App 中具有原生感

33
00:01:41,301 --> 00:01:44,304
并为用户带来更现代的感觉

34
00:01:44,338 --> 00:01:47,307
我们来更深入地了解一下
所做的一些改进

35
00:01:47,341 --> 00:01:51,712
首先 我们将播放 暂停和
跳跃控制放在前面和中间

36
00:01:51,745 --> 00:01:54,681
使它们更容易与之交互

37
00:01:54,715 --> 00:01:58,952
我们还将跳跃间隔从 15 秒
下调至 10 秒

38
00:01:58,986 --> 00:02:03,323
可以更轻松地跟踪
连续跳跃的距离

39
00:02:03,357 --> 00:02:06,193
接下来 我们还对时间轴的可用性

40
00:02:06,226 --> 00:02:08,128
进行了一些重大改进

41
00:02:08,161 --> 00:02:12,566
我们将移除用于标记
时间轴当前位置的滑块旋钮

42
00:02:12,599 --> 00:02:15,269
相反 现在可以从滑块的任意位置

43
00:02:15,302 --> 00:02:17,471
与时间线进行交互

44
00:02:17,504 --> 00:02:20,140
拖动不再需要从当前时间标记开始

45
00:02:20,174 --> 00:02:24,344
这使得大家更容易
准确地找到您想去的位置

46
00:02:24,378 --> 00:02:26,446
我们还用更直观的缩放手势

47
00:02:26,480 --> 00:02:29,016
取代了视频方面的控制

48
00:02:29,049 --> 00:02:30,717
我稍后会展示

49
00:02:30,751 --> 00:02:35,155
当然 新的 UI 对于竖屏内容
看起来也很棒

50
00:02:37,257 --> 00:02:40,861
在 iPadOS 上
播放器无缝集成到系统中

51
00:02:40,894 --> 00:02:43,797
全面支持键盘 触控板

52
00:02:43,830 --> 00:02:47,367
鼠标 游戏控制器等等

53
00:02:47,401 --> 00:02:50,470
我们还添加了一些
与控件交互的新方法

54
00:02:50,504 --> 00:02:53,807
使导航内容和一些常见的交互

55
00:02:53,841 --> 00:02:56,109
更容易和直观

56
00:02:56,143 --> 00:02:58,145
让我们来看看这些

57
00:02:58,178 --> 00:03:01,882
首先 我们添加了一种更改
视频缩放填充的新方法

58
00:03:01,915 --> 00:03:05,886
您现在可以使用捏合手势
在可用缩放级别之间转换

59
00:03:05,919 --> 00:03:09,990
捏合将使视频
位于显示屏的安全区域内

60
00:03:10,023 --> 00:03:13,627
扩展将放大视频以完全填满显示屏

61
00:03:13,660 --> 00:03:17,631
接下来 我们让
最常见的交互之一更流畅

62
00:03:17,664 --> 00:03:19,266
播放或暂停

63
00:03:19,299 --> 00:03:21,468
您现在可以点击显示屏的中心

64
00:03:21,502 --> 00:03:25,138
哪怕播放和暂停视频的控制键
被隐藏了

65
00:03:25,172 --> 00:03:29,376
最后 我们添加了一种通过
媒体时间轴导航的新方法

66
00:03:29,409 --> 00:03:32,880
现在 您可以使用大家都了解
和喜爱的滚动视图中相同的交互

67
00:03:32,913 --> 00:03:37,050
从视频的任何位置滚动时间轴

68
00:03:37,084 --> 00:03:39,253
当您滚动视频帧时

69
00:03:39,286 --> 00:03:43,924
界面消失 只留下最相关的 UI

70
00:03:43,957 --> 00:03:47,160
允许将焦点保留在内容上

71
00:03:47,194 --> 00:03:50,931
我们还带来了 tvOS
播放器的一些新功能

72
00:03:50,964 --> 00:03:54,134
AVPlayerViewController
现在支持在全屏 UI 中

73
00:03:54,168 --> 00:03:58,605
显示内容标题 副标题和描述

74
00:03:59,406 --> 00:04:02,976
您可以通过传递 AVMetadataItems
为每个现有的 AVKit API

75
00:04:03,010 --> 00:04:04,611
提供这些内容的字符串

76
00:04:04,645 --> 00:04:07,314
让我们看看这是如何完成的

77
00:04:07,347 --> 00:04:11,218
默认情况下 标题 副标题和
内容描述将从

78
00:04:11,251 --> 00:04:13,287
媒体的元数据中提取

79
00:04:13,320 --> 00:04:16,757
但是 如果需要
媒体中的值可以通过

80
00:04:16,790 --> 00:04:19,426
AVPlayerItem 上的
externalMetadata API 被重写

81
00:04:20,961 --> 00:04:24,131
可以通过使用标识符
commonIdentifierTitle

82
00:04:24,164 --> 00:04:26,900
创建一个 AVMetadataItem

83
00:04:26,934 --> 00:04:30,838
并将其添加到 playerItems 的
externalMetadata 属性中

84
00:04:30,871 --> 00:04:35,342
标题应简短且具有描述性
以避免使 UI 混乱

85
00:04:35,375 --> 00:04:39,780
同样 这里我们通过创建
带有标识符 .iTunesMetadataTrackSubtitle

86
00:04:39,813 --> 00:04:44,484
的 AVMetadataItem 来添加字幕

87
00:04:44,518 --> 00:04:47,087
字幕将显示在内容标题上方

88
00:04:47,120 --> 00:04:49,790
并且应该用几个词来描述内容

89
00:04:51,358 --> 00:04:53,126
最后 可以使用标识符

90
00:04:53,160 --> 00:04:56,964
.commonIdentifierDescription
来添加描述

91
00:04:56,997 --> 00:05:00,901
这将在标题和副标题的
右侧显示一个 V 形

92
00:05:00,934 --> 00:05:05,973
选择标题将显示
包含内容描述的信息面板

93
00:05:06,006 --> 00:05:11,011
描述应该是几句话
包含有关内容的更多信息

94
00:05:11,044 --> 00:05:13,714
点击任意位置都会关闭信息面板

95
00:05:15,816 --> 00:05:19,219
总结一下 我们对 iOS 系统播放器

96
00:05:19,253 --> 00:05:23,924
进行全新的外观和感觉的提升
使用全新的流线型触控优先交互模型

97
00:05:23,957 --> 00:05:26,827
附带许多其他改进

98
00:05:26,860 --> 00:05:29,429
在您的 App 中使用
AVPlayerViewController

99
00:05:29,463 --> 00:05:32,132
将得到系统播放器的全面支持

100
00:05:32,165 --> 00:05:36,403
支持画中画 SharePlay
视觉分析

101
00:05:36,436 --> 00:05:40,240
原生 Catalyst  支持
新硬件和功能支持

102
00:05:40,274 --> 00:05:42,276
还有很多很多

103
00:05:42,309 --> 00:05:46,780
当然 开发者只需几行代码即可获得
所有的这一切

104
00:05:46,813 --> 00:05:52,653
现在 让我们谈谈如何在开发者的
App 中设计令人惊艳的播放体验

105
00:05:52,686 --> 00:05:55,255
当我们着手重新
设计系统媒体播放器时

106
00:05:55,289 --> 00:05:57,958
我们从过去构建的内容

107
00:05:57,991 --> 00:05:59,826
以及为其他平台构建的内容中
后退一步

108
00:05:59,860 --> 00:06:04,431
问自己
怎样才能创造出优秀的用户体验

109
00:06:04,464 --> 00:06:06,767
我们想与开发者分享这个过程

110
00:06:06,800 --> 00:06:09,503
我们是如何设计新播放器的

111
00:06:09,536 --> 00:06:11,839
为什么要按照我们的方式设计

112
00:06:11,872 --> 00:06:15,909
我们认为定义了
令人惊艳的媒体体验

113
00:06:15,943 --> 00:06:20,314
我们认为有三件事可以让
媒体体验变得很棒

114
00:06:20,347 --> 00:06:23,016
体验应该是直观的

115
00:06:23,050 --> 00:06:26,854
它应该让人感觉轻松 熟悉 自然

116
00:06:26,887 --> 00:06:29,656
即使您从未使用过

117
00:06:29,690 --> 00:06:31,725
它应该与您的 App

118
00:06:31,758 --> 00:06:35,262
和系统紧密结合

119
00:06:35,295 --> 00:06:38,699
最后 它应该以内容优先

120
00:06:38,732 --> 00:06:42,302
说到底 用户是来体验媒体的

121
00:06:42,336 --> 00:06:46,473
您的 App 和设计应该反映这一点

122
00:06:46,507 --> 00:06:48,876
现在让我们深入探究这三个方法

123
00:06:48,909 --> 00:06:52,779
首先让体验更直观

124
00:06:52,813 --> 00:06:55,916
通常情况下
当一款 App 让人感觉很直观时

125
00:06:55,949 --> 00:06:59,453
很难说出原因

126
00:06:59,486 --> 00:07:02,289
当您看到它时就知道了

127
00:07:02,322 --> 00:07:04,157
那么究竟是什么让用户界面

128
00:07:04,191 --> 00:07:06,927
或体验更直观呢

129
00:07:06,960 --> 00:07:10,063
您怎么设计呢

130
00:07:10,097 --> 00:07:12,866
我们认为是熟悉

131
00:07:12,900 --> 00:07:17,704
当您可以利用过去的经验
来帮助理解新事物时

132
00:07:17,738 --> 00:07:19,540
这就是直观

133
00:07:19,573 --> 00:07:22,242
当您不需要解释它的工作原理

134
00:07:22,276 --> 00:07:24,278
甚至不需要思考它是如何工作的

135
00:07:24,311 --> 00:07:28,115
它完全按照您的预期运行

136
00:07:29,483 --> 00:07:35,255
我们每个人都在构建
日常交互技术和现实世界的体验

137
00:07:35,289 --> 00:07:38,759
这两者都是经验熟悉的重要来源

138
00:07:38,792 --> 00:07:43,297
也是我们在设计
新系统媒体播放器时的起点

139
00:07:43,330 --> 00:07:46,266
我们可以从许多类型的经验中
获得直觉

140
00:07:46,300 --> 00:07:48,635
但我想重点谈谈两个方面

141
00:07:48,669 --> 00:07:53,507
这两个是我们在设计
系统媒体播放器时最常依赖的

142
00:07:53,540 --> 00:07:55,542
平台范例

143
00:07:55,576 --> 00:07:57,444
和现实世界

144
00:07:57,477 --> 00:08:02,583
第一个来自我们每天使用技术的经验

145
00:08:02,616 --> 00:08:05,853
多年使用电视遥控器告诉您

146
00:08:05,886 --> 00:08:08,488
方向键左右移动焦点

147
00:08:08,522 --> 00:08:13,694
同样 轻按触控设备上的
音量按钮可以使音频静音

148
00:08:13,727 --> 00:08:17,464
这些交互感觉很直观
因为它们很熟悉

149
00:08:17,497 --> 00:08:20,968
您可以在您的媒体体验中
使用这一类的熟悉的交互

150
00:08:21,001 --> 00:08:23,136
有助于使您的 App 感觉更直观

151
00:08:23,170 --> 00:08:26,273
引人入胜 甚至自然使用

152
00:08:26,306 --> 00:08:30,010
相反 发现不熟悉或意料之外的交互

153
00:08:30,043 --> 00:08:34,648
可能会令人困惑 有时甚至令人沮丧

154
00:08:34,681 --> 00:08:38,752
让我们看一些在系统播放器中

155
00:08:38,785 --> 00:08:41,255
利用这种平台熟悉度的例子

156
00:08:41,288 --> 00:08:44,658
一个很好的例子是
iOS 系统播放器的

157
00:08:44,691 --> 00:08:46,793
展示和关闭模型

158
00:08:46,827 --> 00:08:50,297
播放器从底部动画展现

159
00:08:50,330 --> 00:08:55,335
轻轻一击
播放器可以通过将其推回而消失

160
00:08:55,369 --> 00:08:59,273
我们看到这个模型在
触控优先设备中广泛使用

161
00:08:59,306 --> 00:09:02,142
例如 Music 中正在播放的 UI

162
00:09:02,176 --> 00:09:03,777
从底部的迷你栏中呈现

163
00:09:03,810 --> 00:09:08,048
并且可以通过
向下交互式滑动来关闭

164
00:09:08,081 --> 00:09:11,084
在某些情况下
我们的经验并非来自

165
00:09:11,118 --> 00:09:14,922
对技术的理解 而是来自日常生活

166
00:09:16,323 --> 00:09:20,027
这些类型的体验来自现实世界

167
00:09:20,060 --> 00:09:22,763
数百万年的进化帮助我们

168
00:09:22,796 --> 00:09:26,600
对自然过程形成了一种
深刻的本能理解

169
00:09:26,633 --> 00:09:28,235
您可以利用这种理解

170
00:09:28,268 --> 00:09:32,172
帮助在软件中构建熟悉和直观的体验

171
00:09:32,206 --> 00:09:36,777
一个很好的例子是我们
在 iOS 播放器中的新滚动手势

172
00:09:36,810 --> 00:09:39,413
类似于在桌子上滚动玩具车

173
00:09:39,446 --> 00:09:42,216
视频上的每一次滑动都有动量

174
00:09:42,249 --> 00:09:46,186
在直接交互后继续移动时间轴

175
00:09:46,220 --> 00:09:49,990
直到时间轴慢慢停止

176
00:09:50,023 --> 00:09:52,459
这里的动量本身
就与现实世界中的移动对象

177
00:09:52,492 --> 00:09:54,995
建立了联系

178
00:09:55,028 --> 00:09:59,499
这种联系有助于您
发现互动的微妙深度

179
00:09:59,533 --> 00:10:02,402
就像玩具车一样
我可以通过更加大力地推动

180
00:10:02,436 --> 00:10:04,471
或连续推几次

181
00:10:04,505 --> 00:10:06,773
让它跑得更快

182
00:10:06,807 --> 00:10:10,210
如果我抓住它 就会停止

183
00:10:10,244 --> 00:10:15,148
感觉很自然 因为它很自然

184
00:10:15,182 --> 00:10:16,817
最好的部分是

185
00:10:16,850 --> 00:10:21,121
如果您使用系统播放器
您的 App 会感觉很直观

186
00:10:21,154 --> 00:10:24,892
我们建立并继承对系统播放器的

187
00:10:24,925 --> 00:10:27,995
直观和熟悉的所有自然交互

188
00:10:28,028 --> 00:10:30,597
所有的设计范式都以

189
00:10:30,631 --> 00:10:35,669
tvOS iOS 和 macOS
用户能够自然理解的方式优化

190
00:10:35,702 --> 00:10:39,540
所有这些只需要几行代码就能得到

191
00:10:40,641 --> 00:10:46,313
构建直观的设计
是让您的媒体体验很棒的一个方面

192
00:10:46,346 --> 00:10:50,217
但如果没有人们所期待的
所有功能和整合点

193
00:10:50,250 --> 00:10:55,088
您的 App 可能会
无意中将注意力从内容中移开

194
00:10:55,122 --> 00:11:00,027
这将我们引向了令人惊艳的
媒体体验的第二个关键方面

195
00:11:00,527 --> 00:11:02,329
紧密集成

196
00:11:02,362 --> 00:11:06,600
当体验紧密集成时 人们期望运行的

197
00:11:06,633 --> 00:11:11,271
所有功能 特性和设备都能正常工作

198
00:11:11,305 --> 00:11:16,510
重要的是
他们的工作方式与其期望一致

199
00:11:16,543 --> 00:11:19,213
随着人们使用设备 就习惯于依赖

200
00:11:19,246 --> 00:11:21,782
平台的功能

201
00:11:21,815 --> 00:11:24,918
例如 下拉控制中心

202
00:11:24,952 --> 00:11:30,390
在 Now Playing 媒体控件中
看到您的内容

203
00:11:30,424 --> 00:11:33,894
或者在看电视节目时响应通知

204
00:11:33,927 --> 00:11:38,432
并让视频顺利进入画中画

205
00:11:38,465 --> 00:11:41,268
将这种紧密的系统集成
构建到您的 App 中

206
00:11:41,301 --> 00:11:46,173
是实现无缝体验的关键

207
00:11:46,206 --> 00:11:48,709
您的 App 应该感觉
像是系统的原生部分

208
00:11:48,742 --> 00:11:52,679
我们努力为开发者提供
实现这一目标所需的工具

209
00:11:52,713 --> 00:11:56,350
包括诸如
CoreSpotlight 集成之类的东西

210
00:11:56,383 --> 00:11:58,652
使您的内容可搜索

211
00:11:58,685 --> 00:12:03,257
现在播放信息 以便您的内容
可以出现在系统媒体 UI 中

212
00:12:03,290 --> 00:12:07,160
MediaRemote 命令允许
您的 App 响应诸如

213
00:12:07,194 --> 00:12:10,864
键盘或电视遥控器上按下播放按钮

214
00:12:10,898 --> 00:12:15,636
我们甚至可以将您的媒体
直接集成到电视 App 中

215
00:12:15,669 --> 00:12:19,072
将您的内容提供给更广泛的受众

216
00:12:19,106 --> 00:12:21,975
除了让您的 App 感觉原生化之外

217
00:12:22,009 --> 00:12:26,079
提供用户喜欢的所有功能很重要

218
00:12:26,113 --> 00:12:31,018
AirPlay SharePlay 和画中画等功能

219
00:12:31,051 --> 00:12:33,353
我们认为大家会期待这些功能

220
00:12:33,387 --> 00:12:38,292
并提供它们来增强 App 的使用体验

221
00:12:38,325 --> 00:12:41,161
用户将在许多设备上使用您的 App

222
00:12:41,195 --> 00:12:43,630
甚至更多的输入格式

223
00:12:43,664 --> 00:12:46,266
为所有这些提供支持对于

224
00:12:46,300 --> 00:12:50,237
确保每个人都能获得
您的体验至关重要

225
00:12:50,270 --> 00:12:52,840
这在 tvOS 上尤其重要

226
00:12:52,873 --> 00:12:55,809
因为支持所有可用的远程设备

227
00:12:55,843 --> 00:12:59,012
对确保每个人都能使用
您的 App 至关重要

228
00:12:59,046 --> 00:13:03,917
这是我们始终建议在 tvOS 上
使用系统媒体播放器的原因之一

229
00:13:03,951 --> 00:13:08,555
您的 App 应确保所有电视遥控器 键盘

230
00:13:08,589 --> 00:13:12,659
触控板 游戏控制器和耳机控制

231
00:13:12,693 --> 00:13:15,329
此外 您应该确保您的 App 的 UI 元素

232
00:13:15,362 --> 00:13:17,297
是在屏幕的安全区域内绘制的

233
00:13:17,331 --> 00:13:22,269
以避免与显示屏中的圆角
或凹槽发生冲突

234
00:13:22,302 --> 00:13:25,839
我们认识到为所有
这些集成点建立支持

235
00:13:25,873 --> 00:13:30,577
功能和硬件配置可能令人生畏

236
00:13:30,611 --> 00:13:33,280
这就是我们构建
AVPlayerViewController 的原因

237
00:13:33,313 --> 00:13:35,415
所以只需几行代码

238
00:13:35,449 --> 00:13:39,052
任何使用您 App 的人都可以获得
惊艳的媒体体验

239
00:13:40,621 --> 00:13:42,689
所有这些都将我们引向

240
00:13:42,723 --> 00:13:46,660
设计媒体体验最重要的方面

241
00:13:46,693 --> 00:13:49,329
使内容前置

242
00:13:49,363 --> 00:13:52,132
这应该是您设计的主要目标

243
00:13:52,165 --> 00:13:56,603
这也是我们认为优秀媒体体验的
决定性因素

244
00:13:56,637 --> 00:13:58,605
当您的 App 感觉直观时

245
00:13:58,639 --> 00:14:00,574
当所有的集成点

246
00:14:00,607 --> 00:14:04,845
和人们期望的所有功能
都能正常运行时

247
00:14:04,878 --> 00:14:07,814
您就可以聚焦到内容

248
00:14:07,848 --> 00:14:10,817
而其他所有部分都会淡出背景

249
00:14:12,152 --> 00:14:14,454
有几件事您应该记住

250
00:14:14,488 --> 00:14:17,057
尤其对于设计您的内容

251
00:14:17,090 --> 00:14:20,360
确保在您的界面和系统中

252
00:14:20,394 --> 00:14:23,697
提供所有适当的元数据

253
00:14:23,730 --> 00:14:26,667
提供此信息有助于为您的媒体
提供背景信息

254
00:14:26,700 --> 00:14:29,169
并允许系统在控制中心

255
00:14:29,203 --> 00:14:31,872
和锁屏提供更好的体验

256
00:14:31,905 --> 00:14:35,075
这包括诸如标题和副标题之类的内容

257
00:14:35,108 --> 00:14:39,146
描述 缩略图 季和集信息

258
00:14:39,179 --> 00:14:41,582
或直播的开始和结束日期

259
00:14:41,615 --> 00:14:45,719
始终保持媒体的原始纵横比

260
00:14:45,752 --> 00:14:48,722
这允许系统将您的视频
定位在屏幕上的

261
00:14:48,755 --> 00:14:50,891
正确位置

262
00:14:50,924 --> 00:14:55,762
对您的内容添加黑边
会带来这样的体验

263
00:14:55,796 --> 00:14:57,831
或者这样的体验

264
00:14:57,865 --> 00:15:02,269
确保尽可能支持最新的媒体标准

265
00:15:02,302 --> 00:15:06,240
例如 HDR 和杜比全景声

266
00:15:06,273 --> 00:15:09,910
最后 确保包含音频和字幕轨道

267
00:15:09,943 --> 00:15:11,879
的多语言版本

268
00:15:11,912 --> 00:15:15,315
让尽可能多的人
可以访问您的媒体

269
00:15:17,384 --> 00:15:20,654
如果说这部分演讲
有什么值得注意的话

270
00:15:20,687 --> 00:15:24,291
您应该把注意力集中在内容上

271
00:15:24,324 --> 00:15:28,362
我们已经构建了通过
AVPlayerViewController 来提供

272
00:15:28,395 --> 00:15:32,699
系统媒体播放器 以使开发者
尽可能轻松地实现这一目标

273
00:15:32,733 --> 00:15:36,937
现在 让我们谈一谈添加到
AVPlayerViewController 的一些新功能

274
00:15:36,970 --> 00:15:40,040
从新视觉智能功能开始

275
00:15:40,073 --> 00:15:45,812
在本例中 我们让一个视频
暂停在一个带有代码片段的帧上

276
00:15:45,846 --> 00:15:48,615
长按代码片段可以选中它

277
00:15:48,649 --> 00:15:53,687
然后 您可以将其复制并
直接粘贴到 Playground 中进行试用

278
00:15:53,720 --> 00:15:55,956
这也适用于 macOS

279
00:15:55,989 --> 00:15:59,293
将光标悬停在相同的代码上
将显示光标

280
00:15:59,326 --> 00:16:01,595
表示文本是可选的

281
00:16:01,628 --> 00:16:03,997
然后您可以用光标来使它高亮显示

282
00:16:04,031 --> 00:16:06,767
或使用 CMD+A 全选

283
00:16:06,800 --> 00:16:10,938
我们正在引入一个新的 API
来配合这个功能

284
00:16:10,971 --> 00:16:16,009
iOS 上的 AVPlayerViewController
和 macOS 上的 AVPlayerView 中可用

285
00:16:16,043 --> 00:16:19,913
allowsVideoFrameAnalysis
切换此功能

286
00:16:19,947 --> 00:16:24,151
这将为链接到新 SDK 的
所有 App 启用

287
00:16:24,184 --> 00:16:26,987
当 allowedVideoFrameAnalysis
设置为 true

288
00:16:27,020 --> 00:16:28,755
一旦媒体暂停

289
00:16:28,789 --> 00:16:33,927
AVKit 将在设定的时间段后
开始分析当前视频帧

290
00:16:33,961 --> 00:16:36,597
请注意 出于性能原因

291
00:16:36,630 --> 00:16:38,131
我们不会分析在滚动时的帧

292
00:16:38,165 --> 00:16:40,767
或 FairPlay 受保护的内容

293
00:16:40,801 --> 00:16:46,039
总的来说 我们认为人们
在大多数情况下都会期待这个功能

294
00:16:46,073 --> 00:16:48,242
但是 也有一些情况是

295
00:16:48,275 --> 00:16:50,878
在您的 App 中

296
00:16:50,911 --> 00:16:54,414
可能需要禁用可视分析

297
00:16:54,448 --> 00:16:57,518
例如 在性能关键的 App 中

298
00:16:57,551 --> 00:17:00,120
例如视频的集合视图

299
00:17:00,153 --> 00:17:03,257
或在不期望与视频交互的情况下

300
00:17:03,290 --> 00:17:05,459
如启动屏幕

301
00:17:05,492 --> 00:17:08,495
有关更多如何集成
视觉智能功能集

302
00:17:08,529 --> 00:17:12,866
到您的 App 的信息
请参看我们关于 VisionKit 的相关演讲

303
00:17:12,900 --> 00:17:17,971
接下来 让我们看看我们对
插页式广告所做的一些改进

304
00:17:18,005 --> 00:17:20,807
到目前为止 仅有 tvOS 上的
AVPlayerViewController 中

305
00:17:20,841 --> 00:17:23,677
支持插页式广告

306
00:17:23,710 --> 00:17:28,482
好吧 我很高兴地宣布
我们也将为 iOS 带来相同级别的支持

307
00:17:28,515 --> 00:17:32,186
无论是在流中还是通过
AVPlayerInterstitialEvents

308
00:17:32,219 --> 00:17:33,987
在本地定义的插页式广告

309
00:17:34,021 --> 00:17:36,757
现在将沿时间线标记

310
00:17:36,790 --> 00:17:40,527
当时间轴抵达标记
就会播放插页广告

311
00:17:40,561 --> 00:17:44,698
如果您的插页式广告
已在您的 HLS 播放列表中完全定义

312
00:17:44,731 --> 00:17:46,934
您会自动得到这种行为

313
00:17:46,967 --> 00:17:49,436
无需采用

314
00:17:49,469 --> 00:17:53,373
如果没有 或者您的 App
需要更多自定义行为

315
00:17:53,407 --> 00:17:56,310
我们还引入了一些新的 API

316
00:17:56,343 --> 00:18:01,481
AVInterstitialTimeRange
正在从 tvOS 移植到 iOS

317
00:18:01,515 --> 00:18:05,085
这些将自动填充到
AVPlayerItem 属性

318
00:18:05,118 --> 00:18:07,221
interstitialTimeRanges 中

319
00:18:07,254 --> 00:18:10,657
这也是从 tvOS 带来的

320
00:18:10,691 --> 00:18:13,560
使用 HLS 流时
将为流中的每个插页式广告合成

321
00:18:13,594 --> 00:18:17,097
AVInterstitialTimeRange

322
00:18:17,130 --> 00:18:20,934
AVFoundation API
在本地创建插页式事件时

323
00:18:20,968 --> 00:18:23,103
将为每个 AVInterstitialTimeRange

324
00:18:23,136 --> 00:18:26,740
合成 AVPlayerInterstitialEvent

325
00:18:26,773 --> 00:18:28,842
然而 与 tvOS 不同

326
00:18:28,876 --> 00:18:32,446
interstitialTimeRanges
是一个只读属性

327
00:18:32,479 --> 00:18:35,816
插页式广告需要在 HLS 流中或通过

328
00:18:35,849 --> 00:18:38,385
AVPlayerInterstitialEvents 来定义

329
00:18:38,418 --> 00:18:41,488
对于那些从他们的
tvOS App 迁移支持的人

330
00:18:41,522 --> 00:18:46,827
这就相当于将
translatesPlayerInterstitialEvents 设置为 Yes

331
00:18:47,761 --> 00:18:52,533
我们还从 tvOS 引入了两个委托方法

332
00:18:52,566 --> 00:18:55,068
这些可用于了解插页式广告何时开始

333
00:18:55,102 --> 00:18:57,538
或结束播放

334
00:18:57,571 --> 00:19:00,440
让我们看看如何使用
这些 API 来添加跳过按钮

335
00:19:00,474 --> 00:19:03,043
用于 iOS 上的贴片广告

336
00:19:03,076 --> 00:19:05,979
首先 我们将为主要媒体的播放器
创建一个

337
00:19:06,013 --> 00:19:08,549
AVPlayerInterstitialEventController

338
00:19:08,582 --> 00:19:12,052
接下来 我们将创建一个插页式事件

339
00:19:12,085 --> 00:19:14,288
并且为它定义一些限制

340
00:19:14,321 --> 00:19:17,357
这些限制可防止在插页式广告中搜索

341
00:19:17,391 --> 00:19:20,761
并防止跳过插页式广告

342
00:19:20,794 --> 00:19:24,765
然后我们将插页式广告
添加到事件控制器

343
00:19:24,798 --> 00:19:29,670
最后 我们可以实现
willPresentInterstitial 委托回调

344
00:19:29,703 --> 00:19:33,307
设定的时间间隔后
调出广告跳过按钮

345
00:19:33,340 --> 00:19:36,944
跳过按钮后 我们将取消插页式广告

346
00:19:36,977 --> 00:19:38,979
就这么容易

347
00:19:39,012 --> 00:19:42,950
请注意 将任何 custom UI 元素
添加到 AVPlayerViewController 时

348
00:19:42,983 --> 00:19:45,185
比如这个广告跳过按钮

349
00:19:45,219 --> 00:19:47,421
总是确保将它们添加为

350
00:19:47,454 --> 00:19:49,423
contentOverlayView 的子视图

351
00:19:49,456 --> 00:19:51,892
要详细了解如何整合插页式广告

352
00:19:51,925 --> 00:19:54,061
直接进入您的 HLS 播放列表

353
00:19:54,094 --> 00:19:57,231
或如何使用
AVFoundation interstitials API

354
00:19:57,264 --> 00:20:02,436
查看我们关于探索 HLS
动态片前和片中广告的相关演讲

355
00:20:02,469 --> 00:20:06,940
现在我们看一下
今年在所有平台上添加的一个新功能

356
00:20:06,974 --> 00:20:09,676
原生支持播放速度控制

357
00:20:09,710 --> 00:20:12,079
AVPlayerView 和
AVPlayerViewController

358
00:20:12,112 --> 00:20:16,717
使用我们添加的一些新 API
显示播放速度菜单

359
00:20:18,185 --> 00:20:22,523
我们在 macOS iOS 和 tvOS 上
提供此功能

360
00:20:22,556 --> 00:20:25,058
让我们来看看这是什么样子的

361
00:20:25,092 --> 00:20:29,563
在 tvOS上 您会在传输栏中
看到一个新控件

362
00:20:29,596 --> 00:20:32,599
选择控件将显示可供选择的

363
00:20:32,633 --> 00:20:34,968
可用播放速度列表

364
00:20:35,002 --> 00:20:39,873
在 iOS 上 此菜单将出现
在传输控制悬浮菜单中

365
00:20:39,907 --> 00:20:45,212
同样 在 macOS 上
控件将出现在悬浮菜单中

366
00:20:45,245 --> 00:20:49,816
链接到新的 iOS macOS 和
tvOS SDK 的所有 App

367
00:20:49,850 --> 00:20:52,119
将自动获得此功能

368
00:20:52,152 --> 00:20:55,355
无需额外更改

369
00:20:55,389 --> 00:20:57,891
但是 根据您的场景

370
00:20:57,925 --> 00:21:01,495
某些 App 可能想要修改速度列表

371
00:21:01,528 --> 00:21:05,632
以编程方式选择速度 或完全禁用菜单

372
00:21:05,666 --> 00:21:08,869
为了适应这些场景
我们添加了一些新的 API

373
00:21:08,902 --> 00:21:11,939
到 AVPlayerView 和
AVPlayerViewController

374
00:21:11,972 --> 00:21:13,273
让我们来看看这些

375
00:21:14,875 --> 00:21:20,514
首先 我们在 AVKit 中新增了
一个类 AVPlaybackSpeed

376
00:21:20,547 --> 00:21:23,817
AVPlaybackSpeeds 代表
用户可选择的速度选项

377
00:21:23,851 --> 00:21:27,120
在播放 UI 中 它们具有三个属性

378
00:21:27,154 --> 00:21:30,157
一个速率值 在初始化时定义

379
00:21:30,190 --> 00:21:34,127
选择播放速度时将在播放器上设置

380
00:21:34,161 --> 00:21:37,164
本地化名称 用于表示播放速度

381
00:21:37,197 --> 00:21:39,533
在无障碍系统内

382
00:21:39,566 --> 00:21:42,669
例如 2.5 的速度可能会使用本地化名称

383
00:21:42,703 --> 00:21:45,172
两倍半的速度

384
00:21:45,205 --> 00:21:47,207
和一个本地化的数字名称

385
00:21:47,241 --> 00:21:50,010
这个值是从 rate 属性合成的

386
00:21:50,043 --> 00:21:53,680
并且将是播放速度菜单中
显示的字符串

387
00:21:53,714 --> 00:21:56,016
如果您的 App 需要
自定义播放速度菜单

388
00:21:56,049 --> 00:21:59,653
在播放器外部
使用此字符串表示速度

389
00:22:01,021 --> 00:22:05,025
最后 AVPlaybackSpeed
定义了列表应尽可能使用的

390
00:22:05,058 --> 00:22:08,362
系统默认速度

391
00:22:08,395 --> 00:22:12,799
您可以将 AVPlaybackSpeed
与 AVPlayerView 和

392
00:22:12,833 --> 00:22:17,938
AVPlayerViewController 上的
一些新 API 结合使用 适应您的 App

393
00:22:17,971 --> 00:22:23,076
速度属性允许定义
播放速度的自定义列表

394
00:22:23,110 --> 00:22:26,680
默认情况下
此属性将设置为 AVPlaybackSpeed

395
00:22:26,713 --> 00:22:29,082
systemDefaultSpeeds 列表

396
00:22:29,116 --> 00:22:32,953
将其设置为空列表将会隐藏菜单

397
00:22:32,986 --> 00:22:37,858
selectedSpeed 属性将返回
当前活动的速度

398
00:22:37,891 --> 00:22:41,762
最后是 selectSpeed 函数
允许程序化选择

399
00:22:41,795 --> 00:22:44,231
当前速度

400
00:22:44,264 --> 00:22:46,133
请注意 您应该只使用此功能

401
00:22:46,166 --> 00:22:50,871
响应在播放器 UI 之外显式选择速度

402
00:22:50,904 --> 00:22:54,808
永远不要隐式覆盖选择的播放速度

403
00:22:54,842 --> 00:22:58,145
让我们看一个例子

404
00:22:58,178 --> 00:23:00,647
我们在这里创建一个
AVPlayerViewController

405
00:23:00,681 --> 00:23:02,583
并展示

406
00:23:02,616 --> 00:23:07,287
默认情况下
将使用系统提供的播放速度列表

407
00:23:07,321 --> 00:23:11,625
您可以通过创建 AVPlaybackSpeed
向菜单添加新速度

408
00:23:11,658 --> 00:23:15,829
并将其添加到
AVPlayerViewController 的速度列表中

409
00:23:15,863 --> 00:23:20,601
我们还可以通过设置
一个空的速度列表来禁用菜单

410
00:23:20,634 --> 00:23:23,270
就这么简单

411
00:23:23,303 --> 00:23:27,708
但请注意 您应该始终
调用 AVPlayer play() 开始回放

412
00:23:27,741 --> 00:23:30,744
永远不要通过调用
setRate:1.0 开始播放

413
00:23:30,777 --> 00:23:34,348
因为所选速率可能不是 1.0

414
00:23:34,381 --> 00:23:37,985
至此 我想结束本次演讲

415
00:23:38,018 --> 00:23:41,688
我们看到了新设计的 iOS 系统播放器

416
00:23:41,722 --> 00:23:46,026
我们了解了
如何设计自己的惊艳播放体验

417
00:23:46,059 --> 00:23:49,062
我们看到了一些
很酷的新视觉智能功能

418
00:23:49,096 --> 00:23:53,200
并查看了新的
插页式广告和播放速度 API

419
00:23:53,233 --> 00:23:54,868
我希望您喜欢这个讲座

420
00:23:54,902 --> 00:23:58,338
并期待在开发者的 App 中
看到这些功能

421
00:23:58,372 --> 00:24:00,374
请享受研讨会余下的部分吧

