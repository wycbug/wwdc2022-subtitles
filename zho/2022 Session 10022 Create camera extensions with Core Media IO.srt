1
00:00:00,334 --> 00:00:07,341
♪ ♪

2
00:00:09,676 --> 00:00:11,211
Brad Ford: 欢迎大家

3
00:00:11,245 --> 00:00:15,382
我是来自 Camera Software Engineering
团队的 Brad Ford

4
00:00:15,415 --> 00:00:18,452
在这一讲座中 我将向您介绍

5
00:00:18,485 --> 00:00:22,022
CoreMedia IO 的相机扩展
这是一种用于 macOS 的

6
00:00:22,055 --> 00:00:25,626
现代相机驱动程序架构
是 DAL plug-ins 的替代品

7
00:00:27,094 --> 00:00:30,731
DAL plug-ins 这一技术
允许你为插入 Mac 的硬件

8
00:00:30,764 --> 00:00:35,335
创建相机驱动程序
或者虚拟相机

9
00:00:35,369 --> 00:00:39,540
从 MacOS 10.7 开始问世
已有很长一段时间了

10
00:00:40,707 --> 00:00:45,712
DAL plug-ins 提供了将 macOS
扩展为富媒体平台的能力

11
00:00:45,746 --> 00:00:50,284
为专业人士和消费者
提供第三方相机产品的支持

12
00:00:51,518 --> 00:00:54,254
这也是 Mac 出类拔萃的
原因之一

13
00:00:56,123 --> 00:00:58,859
但 DAL plug-ins
还存在一些问题

14
00:00:58,892 --> 00:01:02,196
它们会将不受信任的代码
直接加载到 App 的进程中

15
00:01:02,229 --> 00:01:05,933
导致 App 会容易因插件漏洞而崩溃

16
00:01:05,966 --> 00:01:08,869
或者受到恶意软件的攻击

17
00:01:08,902 --> 00:01:11,872
因此 它们不能与
FaceTime 通话

18
00:01:11,905 --> 00:01:16,176
QuickTime 播放器和 PhotoBoth 等
Apple App 一起使用

19
00:01:16,210 --> 00:01:19,213
也不能与许多第三方
相机 App 一起使用

20
00:01:19,246 --> 00:01:23,283
除非这些 App 有意
禁用资料库验证

21
00:01:23,317 --> 00:01:26,787
或者用户关闭系统完整性保护

22
00:01:26,820 --> 00:01:29,022
而这两种做法都不推荐

23
00:01:29,056 --> 00:01:33,360
因为会降低系统的安全性和稳定性

24
00:01:33,393 --> 00:01:35,562
同时这种插件也很难开发

25
00:01:35,596 --> 00:01:38,732
它们带一个
大约 2011 年的 C API

26
00:01:38,765 --> 00:01:43,537
和一套繁多的
C++ 辅助类 SDK 需要您学习

27
00:01:43,570 --> 00:01:46,607
最重要的是 它们的文档很少

28
00:01:47,875 --> 00:01:50,043
是升级换代的时候了

29
00:01:50,077 --> 00:01:54,147
macOS 12.3 推出了完全现代化
的 DAL plug-ins 替代品

30
00:01:54,181 --> 00:01:57,851
称为 Camera Extensions (相机扩展)

31
00:01:59,553 --> 00:02:03,524
一个将用户安全性放在首位的架构

32
00:02:03,557 --> 00:02:05,492
我们来了解一下它是如何工作的

33
00:02:05,526 --> 00:02:09,096
首先 我将提供一段技术概述

34
00:02:09,129 --> 00:02:13,734
接下来 我将向您展示
如何从头开始构建相机扩展

35
00:02:13,767 --> 00:02:18,739
然后 介绍 API 的
主要类型和函数

36
00:02:18,772 --> 00:02:23,977
解释如何将 CoreMedia IO 扩展
当作输出设备使用

37
00:02:24,011 --> 00:02:28,882
最后 介绍我们的
DAL plug-in 弃用计划

38
00:02:28,916 --> 00:02:31,652
我们开始吧

39
00:02:31,685 --> 00:02:35,856
相机扩展
也称为 CoreMedia IO 扩展

40
00:02:35,889 --> 00:02:40,060
是一种将相机驱动程序打包
并交付给 Mac app 的新方法

41
00:02:41,061 --> 00:02:42,462
它们很安全

42
00:02:42,496 --> 00:02:46,300
您的扩展代码
被隔离到自己的守护进程中

43
00:02:46,333 --> 00:02:50,037
该进程被沙盒化
并以用户角色运行

44
00:02:50,070 --> 00:02:53,240
您的扩展提供的所有缓冲区

45
00:02:53,273 --> 00:02:56,443
在交付给 App 之前都会经过验证

46
00:02:56,476 --> 00:02:57,911
它们速度快

47
00:02:57,945 --> 00:02:59,947
该框架处理扩展进程

48
00:02:59,980 --> 00:03:02,749
和 App 之间的 IPC 层

49
00:03:02,783 --> 00:03:05,552
以性能为重点

50
00:03:05,586 --> 00:03:08,155
该框架还负责将缓冲区

51
00:03:08,188 --> 00:03:11,525
同时传递给多个客户端

52
00:03:11,558 --> 00:03:12,960
它们很现代

53
00:03:12,993 --> 00:03:17,064
该扩展可以用 Swift
或 Objective-C 书写

54
00:03:18,532 --> 00:03:19,900
它们很简单

55
00:03:19,933 --> 00:03:22,002
只要学习几个类别

56
00:03:22,035 --> 00:03:25,305
实现几个协议就可以启动和运行

57
00:03:25,339 --> 00:03:27,774
该框架会处理样板代码

58
00:03:29,476 --> 00:03:31,278
它们很容易部署

59
00:03:31,311 --> 00:03:34,014
您可以将它们作为 App
在 App Store 商店中发布

60
00:03:36,149 --> 00:03:40,320
相机扩展 100% 向后兼容

61
00:03:40,354 --> 00:03:43,390
现有的 AVFoundation
拍摄 API

62
00:03:45,492 --> 00:03:50,364
相机扩展如内置相机一样
支持所有相机 App

63
00:03:50,397 --> 00:03:52,733
包括 Apple 的 App

64
00:03:52,766 --> 00:03:55,903
下面是如何在 FaceTime 通话的
摄像头选择器中

65
00:03:55,936 --> 00:03:58,205
显示相机扩展的示例

66
00:03:58,238 --> 00:04:02,342
相机扩展可以提供怎样的体验

67
00:04:02,376 --> 00:04:05,812
我们先来研究三种常见的用法

68
00:04:05,846 --> 00:04:08,615
最简单的用途是纯软件相机

69
00:04:08,649 --> 00:04:12,452
例如显示色彩条纹的相机

70
00:04:12,486 --> 00:04:15,923
显示特定的测试图案的相机

71
00:04:15,956 --> 00:04:22,062
以不同的帧率或分辨率
程序化生成图像的相机

72
00:04:22,095 --> 00:04:25,232
或用于流式传输
预渲染内容的相机

73
00:04:25,265 --> 00:04:29,236
如电影中的帧
以测试声画同步

74
00:04:30,871 --> 00:04:34,808
第二个用例是为实际插入 Mac

75
00:04:34,842 --> 00:04:39,379
或以无线方式发现的
相机提供驱动

76
00:04:39,413 --> 00:04:44,017
相机扩展完全支持热插拔

77
00:04:44,051 --> 00:04:47,421
处理硬件有几种选择

78
00:04:47,454 --> 00:04:52,259
首选方法是使用完全
在用户空间运行的

79
00:04:52,292 --> 00:04:55,863
DriverKit 扩展或 DEXT

80
00:04:55,896 --> 00:04:58,932
如硬件必须在内核级进行寻址

81
00:04:58,966 --> 00:05:03,136
则可以使用传统的
IOVideoFamily kext 方式

82
00:05:03,170 --> 00:05:05,806
不鼓励再开发新的 kext 代码

83
00:05:05,839 --> 00:05:11,278
因为 kext 本质上不太安全
且会导致系统不稳定

84
00:05:14,047 --> 00:05:16,783
Apple 为 USB 视频类
或 UVC 摄像头

85
00:05:16,817 --> 00:05:21,588
提供了一个类兼容的扩展

86
00:05:21,622 --> 00:05:25,058
它非常适合符合 UVC 规范的相机

87
00:05:26,193 --> 00:05:29,263
然而 如果您需要支持

88
00:05:29,296 --> 00:05:31,765
使用非标准协议的
USB 摄像头

89
00:05:31,798 --> 00:05:35,035
具有 UVC 规范之外的
附加功能

90
00:05:35,068 --> 00:05:40,107
可以创建一个覆盖 Apple
UVC 扩展的相机扩展

91
00:05:40,140 --> 00:05:44,678
允许您声明特定的产品
和供应商 ID

92
00:05:44,711 --> 00:05:48,382
如果您有兴趣了解更多
这方面的信息

93
00:05:48,415 --> 00:05:51,585
请参考 developer.apple.com 上

94
00:05:51,618 --> 00:05:55,489
标题为 “Overriding the default USB
video class extension” 的文章

95
00:05:55,522 --> 00:05:58,926
这篇文章解释了
如何创建最小的 DEXT bundle

96
00:05:58,959 --> 00:06:04,398
以及需要在 Info.plist 中
覆盖哪些 IOKitPersonalities 键

97
00:06:05,432 --> 00:06:08,535
第三种常见用途是创意相机

98
00:06:08,569 --> 00:06:11,471
一种软件和硬件的混合体

99
00:06:12,673 --> 00:06:16,376
您的扩展从连接在 Mac 上的
另一个物理相机

100
00:06:16,410 --> 00:06:18,178
访问视频流

101
00:06:18,212 --> 00:06:20,547
对这些缓冲区添加效果

102
00:06:20,581 --> 00:06:24,318
并将它们作为一个新的相机流
发送给客户端

103
00:06:26,353 --> 00:06:31,592
或者一个创意相机
从几个相机获取视频流

104
00:06:31,625 --> 00:06:35,128
合成这些视频流
并发送到 App

105
00:06:37,164 --> 00:06:40,534
像这样的创意相机
可能会使用配置 App

106
00:06:40,567 --> 00:06:44,438
来控制合成或参数化滤镜

107
00:06:44,471 --> 00:06:48,075
创意相机的可能性可谓无穷无尽

108
00:06:49,243 --> 00:06:51,879
现在我们已经了解了
主要使用案例

109
00:06:51,912 --> 00:06:56,183
我们来分析一下
CoreMedia IO 扩展

110
00:06:56,216 --> 00:06:59,119
首先是 CoreMedia IO 部分

111
00:07:00,721 --> 00:07:03,824
CoreMedia IO 是用于

112
00:07:03,857 --> 00:07:07,794
发布或发现摄像头驱动程序的
底层框架

113
00:07:07,828 --> 00:07:11,431
您已经知道
它包含了旧版 DAL API

114
00:07:11,465 --> 00:07:15,736
和替代它的新相机扩展 API

115
00:07:15,769 --> 00:07:19,673
但也包含了一组
强大的底层 C API

116
00:07:19,706 --> 00:07:24,244
供 App 开发人员查找和检查
系统上的摄像头

117
00:07:25,612 --> 00:07:28,282
那关于扩展部分是怎样的呢

118
00:07:29,783 --> 00:07:35,088
CoreMedia IO 扩展建立在
macOS Catalina 首次引入的

119
00:07:35,122 --> 00:07:38,525
SystemExtensions 框架之上

120
00:07:38,559 --> 00:07:41,728
避免了一次性安装程序的需要

121
00:07:41,762 --> 00:07:45,799
相反 您可以在 App 中
发布您的扩展

122
00:07:45,832 --> 00:07:49,803
扩展可执行文件
位于 App bundle 中

123
00:07:49,837 --> 00:07:52,973
通过调用
SystemExtensions 框架

124
00:07:53,006 --> 00:07:58,078
您的 App 可以为
系统上的所有用户

125
00:07:58,111 --> 00:08:01,048
安装 升级或降级您的扩展

126
00:08:01,081 --> 00:08:03,717
卸载非常简单

127
00:08:03,750 --> 00:08:06,553
删除该 App
SystemExtensions 框架

128
00:08:06,587 --> 00:08:10,357
就会对所有用户卸载您的相机扩展

129
00:08:10,390 --> 00:08:13,627
这种分发机制允许
在 App Store 商店中使用

130
00:08:13,660 --> 00:08:18,098
让您的相机扩展可轻松部署到
更广泛的受众中

131
00:08:19,900 --> 00:08:22,636
要了解更多关于系统扩展框架的信息

132
00:08:22,669 --> 00:08:26,840
请参阅 developer.apple.com/

133
00:08:26,874 --> 00:08:29,877
documentation/systemextensions 网站

134
00:08:31,745 --> 00:08:36,817
请务必查看 WWDC 2019 中标题为

135
00:08:36,850 --> 00:08:39,520
“System Extensions and DriverKit”
的视频

136
00:08:40,654 --> 00:08:44,224
这是我们对相机扩展的技术概述

137
00:08:44,258 --> 00:08:46,527
现在 我们来实际构建一个扩展

138
00:08:46,560 --> 00:08:50,397
下面是如何在几分钟内启动

139
00:08:50,430 --> 00:08:52,099
并运行相机扩展的快速演示

140
00:08:53,634 --> 00:08:58,906
我已经用 Xcode 创建了一个名为
ExampleCam 的单窗口 MacOS app

141
00:08:58,939 --> 00:09:02,042
至此 我只添加了几行代码

142
00:09:03,844 --> 00:09:07,247
App Delegate 保持不变

143
00:09:07,281 --> 00:09:11,518
在主 storyboard 中
我添加了两个按钮

144
00:09:11,552 --> 00:09:15,055
一个用于安装 一个用于卸载扩展

145
00:09:15,088 --> 00:09:17,991
还有一个用于显示状态的文本字段

146
00:09:19,293 --> 00:09:23,130
在 ViewController 类中
我添加了 IBActions

147
00:09:23,163 --> 00:09:27,100
来连接安装和卸载按钮

148
00:09:28,635 --> 00:09:31,939
这些函数
创建 OSSystemExtensionRequest

149
00:09:31,972 --> 00:09:34,975
来激活

150
00:09:35,008 --> 00:09:39,980
或停用 App bundle 中的扩展

151
00:09:40,013 --> 00:09:43,650
在底部 我添加了记录状态的

152
00:09:43,684 --> 00:09:48,956
OSSystemExtensionRequestDelegate
函数的基础实现

153
00:09:50,591 --> 00:09:56,063
App 的 entitlement 文件包括
App Sandbox = YES

154
00:09:56,096 --> 00:09:58,699
定义了一个 AppGroup

155
00:10:00,734 --> 00:10:05,038
我在这里只添加了一个新的键
即 “System Extension”

156
00:10:05,072 --> 00:10:09,176
只要您的 App 要安装系统扩展
就需要该键值

157
00:10:09,209 --> 00:10:13,714
此时 如果我运行此 App

158
00:10:13,747 --> 00:10:17,417
并点击安装扩展按钮

159
00:10:17,451 --> 00:10:20,287
会出现一个致命错误
因为 App 正在查找

160
00:10:20,320 --> 00:10:23,724
bundle 包中
尚不存在的扩展

161
00:10:27,394 --> 00:10:33,567
为了创建和嵌入系统扩展
我点击 File (文件)

162
00:10:33,600 --> 00:10:37,571
New (新建) Target (目标)

163
00:10:37,604 --> 00:10:41,074
然后在 macOS 下
一直滚动到底部

164
00:10:41,108 --> 00:10:44,211
System Extension (系统扩展) 处

165
00:10:44,244 --> 00:10:48,982
然后选择 “Camera Extension (相机扩展)”
点击下一步

166
00:10:49,016 --> 00:10:53,987
命名 我选择 “Extension”

167
00:10:54,021 --> 00:10:58,559
确保 “Embedded in Application”
已设置

168
00:10:58,592 --> 00:11:01,528
然后点击 “Finish”

169
00:11:01,562 --> 00:11:06,366
在新的扩展文件夹中
我得到了四个新文件

170
00:11:06,400 --> 00:11:10,737
Info.plist 通过定义
它的 MachServiceName

171
00:11:10,771 --> 00:11:13,640
将其标识为 CMIOExtension

172
00:11:15,008 --> 00:11:17,177
这条信息很关键

173
00:11:17,211 --> 00:11:22,549
只有它存在 CoreMedia IO
注册助手才会启动您的扩展

174
00:11:25,285 --> 00:11:29,590
到了这一步 我们给系统扩展提供一个

175
00:11:29,623 --> 00:11:32,292
使用说明

176
00:11:32,326 --> 00:11:36,997
entitlement 文件显示
它是沙盒化 App

177
00:11:37,030 --> 00:11:41,635
我需要确保扩展的 App group

178
00:11:41,668 --> 00:11:45,739
以 MachServiceName 为前缀
以便通过验证

179
00:11:47,140 --> 00:11:51,478
因此 我将其从 App 扩展

180
00:11:51,512 --> 00:11:56,283
复制并粘贴到扩展 entitlement 文件

181
00:11:56,316 --> 00:11:57,651
就是这样

182
00:11:59,152 --> 00:12:03,590
Main.swift 文件作为扩展的入口点

183
00:12:03,624 --> 00:12:05,893
并启动服务

184
00:12:05,926 --> 00:12:09,563
ExtensionProvider.swift 文件

185
00:12:09,596 --> 00:12:12,032
为我们提供了一个功能齐全的相机

186
00:12:12,065 --> 00:12:15,936
它包含一个 DeviceSource

187
00:12:15,969 --> 00:12:19,806
一个 StreamSource
和一个 ProviderSource

188
00:12:19,840 --> 00:12:22,943
所有这些都是
创建纯软件相机所需的

189
00:12:22,976 --> 00:12:25,012
不错的小模板

190
00:12:26,280 --> 00:12:29,683
在这个文件中 我搜索

191
00:12:29,716 --> 00:12:32,953
“SampleCapture”

192
00:12:32,986 --> 00:12:38,392
并将其替换为 “ExampleCam”

193
00:12:38,425 --> 00:12:42,229
这样我的相机名称 型号

194
00:12:42,262 --> 00:12:45,566
和制造商都有了合适的名称

195
00:12:48,535 --> 00:12:51,538
好了 我们可以编译并运行了

196
00:12:57,211 --> 00:13:00,881
当我按下 Install (安装) 按钮时

197
00:13:00,914 --> 00:13:04,051
啊哦 失败了

198
00:13:04,084 --> 00:13:07,387
这是因为系统扩展只能由
驻留在 /Applications 中的

199
00:13:07,421 --> 00:13:09,923
App 安装

200
00:13:09,957 --> 00:13:12,159
我们移动后再试一次

201
00:13:26,507 --> 00:13:30,410
这次成功了

202
00:13:30,444 --> 00:13:33,847
系统提示我通过在
“System Settings  (系统设置)” 中

203
00:13:33,881 --> 00:13:38,385
进行身份验证
来安装被阻止的扩展

204
00:13:38,418 --> 00:13:41,788
在 “System Settings (系统设置)” 中
我找到了 “Privacy & Security (隐私与安全)”

205
00:13:41,822 --> 00:13:43,757
然后单击 “Allow (允许)” 按钮

206
00:13:45,459 --> 00:13:48,462
使用密码进行身份验证

207
00:13:48,495 --> 00:13:53,033
然后看到我的结果已更改为0
表示“no error (无错误)”

208
00:13:53,066 --> 00:13:58,539
如果我使用
systemextensionsctl list 工具

209
00:13:58,572 --> 00:14:03,544
就确认成功了 现在我的系统上

210
00:14:03,577 --> 00:14:05,379
就激活了一个的扩展

211
00:14:05,412 --> 00:14:09,249
现在我可以打开任何相机 App
找到并欣赏我的作品

212
00:14:10,918 --> 00:14:13,654
我们来启动 FaceTime 通话

213
00:14:13,687 --> 00:14:16,924
ExampleCam 出现在
相机选择器中

214
00:14:16,957 --> 00:14:20,127
这有点像 70 年代的
老式乒乓游戏

215
00:14:20,160 --> 00:14:23,664
画一条水平白线
以每秒 60 帧的速度

216
00:14:23,697 --> 00:14:25,265
上下移动

217
00:14:28,836 --> 00:14:32,840
要移除相机 我只需要删除 App

218
00:14:37,244 --> 00:14:41,648
系统会提示我确认
是否连同 App

219
00:14:41,682 --> 00:14:43,517
一起卸载该扩展程序

220
00:14:49,122 --> 00:14:54,228
ExampleCam 演示展示了从头开始
制作软件相机是多么容易

221
00:14:54,261 --> 00:14:58,298
现在我们提升一个档次
把软件相机

222
00:14:58,332 --> 00:15:00,133
变成一个创意相机

223
00:15:02,736 --> 00:15:06,139
我把第二个例子
称为 CIFilterCam

224
00:15:06,173 --> 00:15:09,243
CI 代表 CoreImage

225
00:15:09,276 --> 00:15:11,778
这是一个带有各种滤镜效果的框架

226
00:15:11,812 --> 00:15:14,414
您可以将其应用于静态图片或视频

227
00:15:15,549 --> 00:15:19,553
为了创建 CIFilterCam
我从 ExampleCam 壳程序开始

228
00:15:19,586 --> 00:15:22,456
但决定将该 App 作为配置 App

229
00:15:22,489 --> 00:15:24,925
和安装程序

230
00:15:24,958 --> 00:15:30,097
我添加了一个相机选择器按钮
一个滤镜选择器按钮

231
00:15:30,130 --> 00:15:32,866
和一个忽略效果的按钮

232
00:15:32,900 --> 00:15:36,570
我还添加了一个实时视频预览视图

233
00:15:36,603 --> 00:15:40,274
这是一个
由 AVCaptureVideoPreviewLayer

234
00:15:40,307 --> 00:15:43,610
支持的标准视图
可以显示滤镜相机当前工作

235
00:15:43,644 --> 00:15:46,847
通过取消选中 bypass 按钮

236
00:15:46,880 --> 00:15:50,951
可以看到应用在视频上的各种滤镜

237
00:15:50,984 --> 00:15:56,123
从色彩效果

238
00:15:56,156 --> 00:15:58,325
到变形滤镜

239
00:16:02,563 --> 00:16:05,165
我比较喜欢凹凸变形的效果

240
00:16:06,533 --> 00:16:09,703
我可以将这些应用于内置
FaceTime 通话相机

241
00:16:09,736 --> 00:16:13,273
或连接到 Mac 的
任何物理相机

242
00:16:15,309 --> 00:16:19,446
我把附近的 iPhone
设置为连续互通相机

243
00:16:22,950 --> 00:16:24,618
我们用用看

244
00:16:29,223 --> 00:16:32,726
CIFilterCam App 本身并
没有什么特别之处

245
00:16:32,759 --> 00:16:34,761
只是一个特效相机 App

246
00:16:34,795 --> 00:16:38,065
真正有趣的地方是
这款 App 是一个

247
00:16:38,098 --> 00:16:43,403
所有 App 都可以使用的
虚拟滤镜相机的前端

248
00:16:43,437 --> 00:16:46,406
我启动 FaceTime 通话
和 PhotoBooth

249
00:16:46,440 --> 00:16:50,811
确保它们都对应 CIFilterCam

250
00:16:50,844 --> 00:16:55,048
现在 当在我的配置 App 中
更改滤镜时

251
00:16:55,082 --> 00:16:58,685
每个使用 CIFilterCam 的 App
都会随之更改

252
00:16:59,887 --> 00:17:04,758
如果我选择了不同来源的相机
每个相机 App 都会接受更改

253
00:17:06,059 --> 00:17:09,997
App 中的每一个按钮
都会转化为一个简单的属性调用

254
00:17:10,030 --> 00:17:15,602
通知滤镜相机扩展
告诉它 “嗨 扩展 用这个相机”

255
00:17:15,636 --> 00:17:18,872
或者 “嗨 扩展 使用其它的滤镜”

256
00:17:20,307 --> 00:17:22,342
或者这个滤镜

257
00:17:25,779 --> 00:17:27,281
或者这个滤镜

258
00:17:31,118 --> 00:17:34,321
支持在扩展内运行硬件相机

259
00:17:34,354 --> 00:17:37,357
需要 MacOS Ventura

260
00:17:37,391 --> 00:17:42,863
您还需要将
com.apple.security.device.camera 键值

261
00:17:42,896 --> 00:17:45,132
添加到扩展的 entitlement 文件中

262
00:17:45,165 --> 00:17:49,203
以表明您将使用另一台相机

263
00:17:49,236 --> 00:17:52,639
由于您要使用相机

264
00:17:52,673 --> 00:17:56,343
系统会提示用户授予扩展的权限

265
00:17:56,376 --> 00:18:00,380
因此您必须在 Info.plist 中
提供 NSCameraUsageDescription

266
00:18:01,715 --> 00:18:05,118
这就完成了构建相机扩展的基础

267
00:18:05,152 --> 00:18:07,855
现在我们继续讨论 API

268
00:18:10,157 --> 00:18:13,493
技术栈的底部是守护程序进程

269
00:18:13,527 --> 00:18:17,264
每个守护程序进程对应
一个第一方或第三方相机扩展

270
00:18:18,498 --> 00:18:22,870
在相机 App 进程中
有几个层在起作用

271
00:18:22,903 --> 00:18:25,372
首先是私有框架代码

272
00:18:25,405 --> 00:18:29,343
通过 IPC
与您的相机扩展对话

273
00:18:29,376 --> 00:18:31,845
再上一层是另一个私有层

274
00:18:31,879 --> 00:18:35,082
它将 CoreMedia IO 扩展
调用转换为

275
00:18:35,115 --> 00:18:37,518
传统 DAL plug-in 调用

276
00:18:38,819 --> 00:18:40,187
再往上

277
00:18:40,220 --> 00:18:45,692
我们可以找到发布 DAL plug-ins 的
公共 CoreMedia IO API

278
00:18:45,726 --> 00:18:48,462
对于此接口的客户端来说

279
00:18:48,495 --> 00:18:52,299
CoreMedia IO 扩展
和 DAL plug-ins 之间没有区别

280
00:18:52,332 --> 00:18:55,435
所有东西看起来
都像是 DAL plug-in

281
00:18:55,469 --> 00:18:58,972
最后 位于顶部的
是 AVFoundation

282
00:18:59,006 --> 00:19:01,675
它是 CoreMedia IO 的客户端

283
00:19:01,708 --> 00:19:05,779
它将 DAL plug-ins
重新发布为 AVCaptureDevices

284
00:19:07,848 --> 00:19:12,219
与传统的 DAL plug-in 架构
相比

285
00:19:12,252 --> 00:19:16,290
DAL plug-ins 可能包括
也可能不包括守护进程

286
00:19:16,323 --> 00:19:20,093
但它们都直接在
App 进程中运行

287
00:19:20,127 --> 00:19:22,596
由 CoreMedia IO 框架加载的代码

288
00:19:22,629 --> 00:19:25,732
这使得该 App 易受到
恶意软件的攻击

289
00:19:25,766 --> 00:19:30,838
相机扩展完全消除了这种攻击媒介

290
00:19:30,871 --> 00:19:35,843
您的扩展必须经过沙盒 App 保护
否则不允许运行

291
00:19:36,877 --> 00:19:40,147
Apple 的 RegisterAssistantService
通过它的

292
00:19:40,180 --> 00:19:44,017
CMIOExtensionMachServiceName
来识别

293
00:19:44,051 --> 00:19:49,156
并将其作为一个名为 _cmiodalassistors 的
用户角色帐户启动

294
00:19:50,057 --> 00:19:54,728
Sandboxd 将自定义沙盒配置文件
应用于您的进程中

295
00:19:54,761 --> 00:19:57,431
它是为相机使用量身定制的

296
00:19:59,266 --> 00:20:02,669
自定义沙盒配置文件允许您通过

297
00:20:02,703 --> 00:20:06,006
预期的通用硬件界面进行通信

298
00:20:06,039 --> 00:20:10,744
USB 蓝牙 WiFi

299
00:20:10,777 --> 00:20:15,148
作为客户端而不是开放端口的服务器

300
00:20:15,182 --> 00:20:17,518
甚至 Firewire

301
00:20:17,551 --> 00:20:23,056
它还允许您的扩展从自己的
容器和 tmp 中读取和写入

302
00:20:24,424 --> 00:20:29,563
相机扩展沙盒配置文件
比一般的 App 更加封闭

303
00:20:29,596 --> 00:20:33,367
例如 派生 执行或 POSIX 派生子进程

304
00:20:33,400 --> 00:20:38,505
访问 Windows 服务器

305
00:20:38,539 --> 00:20:41,308
连接到前台用户帐户
或在全局命名空间中

306
00:20:41,341 --> 00:20:44,811
注册您自己的 MACH 服务

307
00:20:44,845 --> 00:20:49,349
这些事情都不被允许

308
00:20:51,118 --> 00:20:54,955
如果在开发扩展的过程中
发现沙盒

309
00:20:54,988 --> 00:20:57,491
对于合法的拍摄案例来说限制太多

310
00:20:57,524 --> 00:21:00,727
请通过反馈助理向我们提供反馈

311
00:21:00,761 --> 00:21:04,064
我们会认真考虑放宽限制

312
00:21:04,097 --> 00:21:06,333
早期的架构图

313
00:21:06,366 --> 00:21:08,836
显示了相机扩展的守护进程

314
00:21:08,869 --> 00:21:12,239
它将缓冲区直接传递到应用层

315
00:21:12,272 --> 00:21:15,175
实际上还有一层安全措施

316
00:21:17,044 --> 00:21:20,681
在守护程序和 App 之间有一个

317
00:21:20,714 --> 00:21:23,851
名为 RegisterAsistantService 的
代理服务

318
00:21:23,884 --> 00:21:29,022
其将强制执行透明 同意和控制策略

319
00:21:29,056 --> 00:21:32,192
当一款 App
第一次尝试使用相机时

320
00:21:32,226 --> 00:21:35,062
系统会询问用户是否可以使用

321
00:21:35,095 --> 00:21:37,865
所有的相机都要获得这种许可

322
00:21:37,898 --> 00:21:40,000
而不仅仅是内置相机

323
00:21:40,033 --> 00:21:43,537
代理服务代表您处理同意操作

324
00:21:43,570 --> 00:21:46,039
如果用户拒绝相机访问

325
00:21:46,073 --> 00:21:50,043
代理将停止将缓冲区传入该 App

326
00:21:50,077 --> 00:21:53,747
它还将处理归因 让系统知道

327
00:21:53,780 --> 00:21:57,551
特定的 App 正在使用特定的相机

328
00:21:57,584 --> 00:22:00,153
因此守护进程消耗的电量

329
00:22:00,187 --> 00:22:03,190
可以归因于使用相机的 App

330
00:22:04,691 --> 00:22:08,495
CoreMedia IO 扩展
有四个主要类别

331
00:22:08,529 --> 00:22:12,499
提供商 设备和流

332
00:22:13,534 --> 00:22:16,970
提供商有设备 设备有流

333
00:22:17,004 --> 00:22:20,374
这三个设备都可以有属性

334
00:22:22,843 --> 00:22:25,345
您可以通过提供源来创建这三个主类

335
00:22:25,379 --> 00:22:27,881
它们分别是

336
00:22:27,915 --> 00:22:33,187
ProviderSource
DeviceSource 和 StreamSource

337
00:22:35,155 --> 00:22:39,026
ExtensionProvider 是
最低级别的对象

338
00:22:39,059 --> 00:22:44,097
允许您根据需要添加和删除设备
例如热插拔事件

339
00:22:45,599 --> 00:22:49,403
当客户端进程尝试连接时
它会得到通知

340
00:22:49,436 --> 00:22:53,006
从而使您有机会将设备发布限制到

341
00:22:53,040 --> 00:22:54,875
某些 App 上

342
00:22:54,908 --> 00:22:59,580
它还会向您的提供程序源对象
查询属性实现

343
00:23:01,882 --> 00:23:05,853
下面是扩展的主要入口点

344
00:23:05,886 --> 00:23:08,822
您可以创建
自己的 ExtensionProviderSource

345
00:23:08,856 --> 00:23:13,193
符合
CMIOExtensionProviderSource 协议

346
00:23:13,227 --> 00:23:16,230
并创建一个 ExtensionProvider

347
00:23:16,263 --> 00:23:19,499
您需要调用提供者类方法以启动服务

348
00:23:19,533 --> 00:23:23,003
startService
并传递您的提供者实例

349
00:23:25,038 --> 00:23:29,209
ExtensionProvider 实现了
两个只读属性

350
00:23:29,243 --> 00:23:32,379
这两个属性在扩展的生命周期内
不会更改

351
00:23:32,412 --> 00:23:36,283
制造商和供应商名称

352
00:23:36,316 --> 00:23:38,185
这两个都是字符串

353
00:23:40,087 --> 00:23:44,191
接下来
是 CMIOExtensionDevice

354
00:23:44,224 --> 00:23:48,762
它可以管理数据流
根据需要添加或删除它们

355
00:23:48,795 --> 00:23:51,331
您的设备可以呈现多个流

356
00:23:51,365 --> 00:23:56,003
但注意 AVFoundation 会忽略
除第一个输入流之外的所有流

357
00:23:57,237 --> 00:24:01,875
创建设备时 您需要提供设备源

358
00:24:01,909 --> 00:24:07,681
本地化名称 UUID 形式的设备 ID

359
00:24:07,714 --> 00:24:11,518
以及可选的 legacyID 字符串

360
00:24:11,552 --> 00:24:14,988
这些属性一直
渗透到 AVFoundation

361
00:24:16,723 --> 00:24:19,726
您的设备的
LocalizedName 将成为

362
00:24:19,760 --> 00:24:23,730
AVCaptureDevice 的
localizedName

363
00:24:23,764 --> 00:24:29,169
除非您还
提供了 legacyDeviceID

364
00:24:29,203 --> 00:24:34,608
否则您指定的 deviceID 将成为
AVCaptureDevice 的唯一标识符

365
00:24:34,641 --> 00:24:38,278
如果您正在更新 DAL plug-in

366
00:24:38,312 --> 00:24:40,647
并且需要保持与以前发布的
uniqueIdentifier 向后兼容性时

367
00:24:40,681 --> 00:24:43,717
才需要提供此功能

368
00:24:44,751 --> 00:24:47,287
如果您提供了 LegacyDeviceID

369
00:24:47,321 --> 00:24:50,891
则 AVCaptureDevice
会将其用作唯一标识

370
00:24:52,659 --> 00:24:59,066
您可用 CMIOExtensionDeviceSource
创建 CMIOExtensionDevice

371
00:24:59,099 --> 00:25:01,969
该 CMIOExtensionDeviceSource
可以选择性地实现其它属性

372
00:25:02,002 --> 00:25:04,471
如 deviceModel

373
00:25:04,505 --> 00:25:08,775
这些属性对于同一型号的所有相机
应该是相同的

374
00:25:08,809 --> 00:25:12,379
如果您的设备可以进入挂起状态

375
00:25:12,412 --> 00:25:16,950
例如如果有隐私虹膜
则应实现 isSuspended

376
00:25:16,984 --> 00:25:20,621
当翻盖合上时
Apple 笔记本电脑上的内置相机

377
00:25:20,654 --> 00:25:24,157
进入暂停状态

378
00:25:24,191 --> 00:25:27,961
设备的传输类型显示其连接方式

379
00:25:27,995 --> 00:25:32,332
例如通过 USB 蓝牙或 Firewire

380
00:25:33,967 --> 00:25:37,838
最后 如果您的相机
与麦克风物理配对

381
00:25:37,871 --> 00:25:40,908
则可以将其作为链接设备公开

382
00:25:40,941 --> 00:25:44,278
所有这些属性都是只读的

383
00:25:44,311 --> 00:25:48,715
接下来是非常
重要的 MIOExtensionStream

384
00:25:48,749 --> 00:25:52,819
它在 CMIOExtension 中
执行繁重的工作

385
00:25:52,853 --> 00:25:58,058
可以发布视频格式
定义有效的帧率

386
00:25:58,091 --> 00:26:01,461
并配置激活的格式

387
00:26:01,495 --> 00:26:04,965
使用标准时钟 如主机时钟

388
00:26:04,998 --> 00:26:07,534
或提供自己的定制时钟

389
00:26:07,568 --> 00:26:11,438
来驱动其产生的每个缓冲区的计时

390
00:26:11,471 --> 00:26:16,043
最重要的是
它可以向客户端发送缓冲区采样

391
00:26:18,445 --> 00:26:21,381
扩展流源

392
00:26:21,415 --> 00:26:24,051
发布
CMIOExtensionStreamFormats

393
00:26:24,084 --> 00:26:28,488
这些成为
AVCaptureDeviceFormats

394
00:26:28,522 --> 00:26:31,758
客户端可以读写活动格式索引

395
00:26:31,792 --> 00:26:33,827
以更改活动格式

396
00:26:35,329 --> 00:26:39,633
帧持续时间 相当于最大帧率

397
00:26:39,666 --> 00:26:44,338
最大帧持续时间 与最小帧率相同

398
00:26:46,273 --> 00:26:51,912
DAL plug-in 方式提供了
名为 DAL 控制的第四个接口

399
00:26:51,945 --> 00:26:55,949
Plug-in 开发人员使用这些
来展示诸如自动曝光

400
00:26:55,983 --> 00:27:00,687
亮度 清晰度 平移和缩放等功能

401
00:27:00,721 --> 00:27:04,591
虽然功能强大
但它们的实现并不一致

402
00:27:04,625 --> 00:27:08,195
因此 App 开发人员很难使用它们

403
00:27:08,228 --> 00:27:13,233
在 CMIOExtension 架构中
我们不提供 DAL 控制替代品

404
00:27:13,267 --> 00:27:15,936
相反 所有东西都是属性

405
00:27:17,471 --> 00:27:21,074
您已经了解了提供程序

406
00:27:21,108 --> 00:27:23,577
设备和流级别的许多标准属性

407
00:27:23,610 --> 00:27:25,746
您还可以创建自定义属性

408
00:27:25,779 --> 00:27:30,784
并将其传播到 App 层 就像我在
CIFilterCam 演示中所做的那样

409
00:27:32,019 --> 00:27:36,423
CoreMedia IO 的 C 属性接口
使用 C 结构

410
00:27:36,456 --> 00:27:41,595
来标识属性的选择符 作用域和元素

411
00:27:41,628 --> 00:27:43,630
这些都被视为其地址

412
00:27:45,132 --> 00:27:49,169
选择符是由四个字符组成的
代码形式的属性名称

413
00:27:49,203 --> 00:27:53,040
例如 CUST 表示自定义

414
00:27:53,073 --> 00:27:56,944
作用域可以是全局的
输入的或输出的

415
00:27:56,977 --> 00:28:00,047
元素可以是您想要的任何数字

416
00:28:00,080 --> 00:28:03,383
主元素始终为零

417
00:28:03,417 --> 00:28:07,621
CMIOExtensions 通过将属性地址元素
编码到一个自定义属性名中

418
00:28:07,654 --> 00:28:12,559
将属性连接到旧世界

419
00:28:12,593 --> 00:28:17,397
首先 字符 4cc_

420
00:28:17,431 --> 00:28:20,234
然后是选择符 作用域和元素

421
00:28:20,267 --> 00:28:24,037
由下划线分隔的四字符代码

422
00:28:24,071 --> 00:28:29,576
使用此方法 您可以将任何字符串
或数据值传递给 App 层

423
00:28:30,644 --> 00:28:33,547
AVFoundation 不能使用
自定义属性

424
00:28:33,580 --> 00:28:37,684
因此如果您的配置 App 需要
使用自定义属性

425
00:28:37,718 --> 00:28:41,722
则必须坚持
使用 CoreMedia IO C API

426
00:28:41,755 --> 00:28:44,691
这是我们对 API 的高级描述

427
00:28:44,725 --> 00:28:47,761
现在我们来谈谈输出设备

428
00:28:49,329 --> 00:28:53,267
DAL plug-ins 一个鲜为人知的功能
是它们能够呈现相机的

429
00:28:53,300 --> 00:28:56,737
对立面 一种输出设备

430
00:28:56,770 --> 00:29:01,675
消费 App 实时产生的视频
而不是提供视频

431
00:29:01,708 --> 00:29:04,611
这是 CoreMedia IO 中
“O” 的部分

432
00:29:04,645 --> 00:29:07,648
输入和输出

433
00:29:07,681 --> 00:29:11,451
输出设备在专业视频领域很常见

434
00:29:11,485 --> 00:29:16,023
一些常见的用途是输出录影带
将视频信号发送到

435
00:29:16,056 --> 00:29:20,427
外部录像机 或实时预览监控

436
00:29:20,460 --> 00:29:23,730
例如在带有 SDI 输入的
专业面板上

437
00:29:25,232 --> 00:29:28,502
需要注意的一点是

438
00:29:28,535 --> 00:29:31,672
输出设备没有对应的
AVFoundation API

439
00:29:31,705 --> 00:29:33,674
要将帧发送到输出设备

440
00:29:33,707 --> 00:29:38,011
必须直接
使用 CoreMedia IO C API

441
00:29:39,313 --> 00:29:43,283
CMIOExtension 流
是以源

442
00:29:43,317 --> 00:29:47,254
或接收器方向创建的

443
00:29:47,287 --> 00:29:50,624
Sink 流使用
来自 App 的数据

444
00:29:50,657 --> 00:29:56,296
客户端通过将样本缓冲区
插入到一个简单的队列产生 sink 流

445
00:29:56,330 --> 00:30:01,235
这将在您的扩展中转换成
consumeSampleBuffer 调用

446
00:30:01,268 --> 00:30:04,404
一旦您使用了该缓冲区 就可

447
00:30:04,438 --> 00:30:07,741
通过 notifyScheduledOutputChanged
通知它们

448
00:30:09,576 --> 00:30:13,847
有一些专门针对输出设备的流属性

449
00:30:13,881 --> 00:30:18,952
它们主要处理队列大小
启动前缓冲多少帧

450
00:30:18,986 --> 00:30:22,055
以及当所有数据都被消耗时
发出信号

451
00:30:23,557 --> 00:30:27,261
现在进入我们今天的第五个
也是最后一个话题

452
00:30:28,929 --> 00:30:31,932
在前面的演示中 我展示了

453
00:30:31,965 --> 00:30:33,867
DAL plug-in 架构的图表

454
00:30:33,901 --> 00:30:36,937
并强调了它的许多安全问题

455
00:30:36,970 --> 00:30:40,140
我们已经用相机扩展功能
解决了这些缺点

456
00:30:40,174 --> 00:30:43,243
并完全致力于其持续发展

457
00:30:43,277 --> 00:30:46,280
它们是今后的路径

458
00:30:46,313 --> 00:30:49,316
那么这对 DAL plug-ins
意味着什么呢

459
00:30:49,349 --> 00:30:51,552
这意味着即将结束

460
00:30:53,253 --> 00:30:58,358
从 macOS 12.3 开始
DAL 插件已经被弃用

461
00:30:58,392 --> 00:31:01,395
所以在构建时会收到编译警告

462
00:31:01,428 --> 00:31:04,498
这是个好的开始 但还不够

463
00:31:04,531 --> 00:31:07,367
只要允许加载传统的 DAL plug-ins

464
00:31:07,401 --> 00:31:09,937
相机 App
仍然处于风险之中

465
00:31:11,872 --> 00:31:15,175
为了全面解决安全漏洞

466
00:31:15,209 --> 00:31:20,581
并使所有用户的系统更加强大
我们计划在 macOS Ventura 之后的

467
00:31:20,614 --> 00:31:24,117
下一个主要版本中完全禁用

468
00:31:26,320 --> 00:31:28,388
这对您意味着什么

469
00:31:28,422 --> 00:31:30,824
我们希望这信息足够清晰了

470
00:31:30,858 --> 00:31:33,060
如果您目前维护的
是 DAL plug-in

471
00:31:33,093 --> 00:31:37,297
那么是时候将您的代码
移植到相机扩展了

472
00:31:38,398 --> 00:31:41,602
另外 请告诉我们您遇到的问题

473
00:31:41,635 --> 00:31:45,939
我们希望能解决这些问题
并提供丰富功能

474
00:31:45,973 --> 00:31:48,509
非常期待与您的合作

475
00:31:48,542 --> 00:31:53,013
今天关于 macOS
相机扩展的介绍就到这里

476
00:31:53,046 --> 00:31:56,617
我们迫不及待地想知道
您会给 Mac 带来

477
00:31:56,650 --> 00:31:58,085
哪些新鲜而有创意的相机体验

478
00:31:58,118 --> 00:32:00,954
并希望您能享受这个过程

