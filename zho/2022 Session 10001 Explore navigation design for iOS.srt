1
00:00:00,067 --> 00:00:03,170
♪ ♪

2
00:00:03,170 --> 00:00:09,676
♪

3
00:00:09,676 --> 00:00:11,378
大家好 我叫
Sarah McClanahan

4
00:00:11,378 --> 00:00:14,882
是布道团队的一名设计师

5
00:00:14,882 --> 00:00:18,085
今天 我要跟大家分享关于

6
00:00:18,085 --> 00:00:21,021
如何改善
iOS 的 App 导航

7
00:00:21,021 --> 00:00:22,890
以及各种改良的技巧与方法

8
00:00:22,890 --> 00:00:26,827
导航做得好的 App 往往
会让大家注意不到导航的存在

9
00:00:26,827 --> 00:00:31,064
因为好的导航能让人把注意力
都集中在内容和体验上

10
00:00:31,064 --> 00:00:33,734
导航会告诉人们
在您的 App 中

11
00:00:33,734 --> 00:00:36,270
如何呈现项目

12
00:00:36,270 --> 00:00:38,238
如何寻找信息

13
00:00:38,238 --> 00:00:40,674
如何实现目的

14
00:00:40,674 --> 00:00:43,544
导航的目的就是

15
00:00:43,544 --> 00:00:46,980
帮助人们尽快熟悉界面

16
00:00:46,980 --> 00:00:50,384
以轻松发现内容
并与 App 进行互动

17
00:00:50,384 --> 00:00:53,587
导航做得太过不符合预期

18
00:00:53,587 --> 00:00:57,291
或是跟用户的自然认知落差太大

19
00:00:57,291 --> 00:00:59,760
就会让用户感到无所适从
并最终感觉这个 App

20
00:00:59,760 --> 00:01:01,228
很不好用

21
00:01:01,228 --> 00:01:05,199
导航要做好
需要注意很多细节

22
00:01:05,199 --> 00:01:08,502
虽然我今天要讲的
一些理念已经是老生常谈

23
00:01:08,502 --> 00:01:10,370
但却是重要的基础

24
00:01:10,370 --> 00:01:14,074
也是一个成功的
iOS App 所必须的

25
00:01:14,074 --> 00:01:16,710
因此 不论您是初学者
还是想进一步寻求

26
00:01:16,710 --> 00:01:20,347
App 体验的改良方案
本讲座都适合您

27
00:01:20,347 --> 00:01:23,016
今天我们要探讨的是底部导航栏

28
00:01:23,016 --> 00:01:27,221
这是 iOS 上
一种常见的导航形式

29
00:01:27,221 --> 00:01:30,691
接下来 我们会探讨
如何通过层级式及

30
00:01:30,691 --> 00:01:34,127
以及模态式呈现

31
00:01:34,127 --> 00:01:36,496
来进行屏幕间的切换

32
00:01:36,496 --> 00:01:39,466
如您所见 这个讲座只能覆盖
导航这一大主题下的

33
00:01:39,466 --> 00:01:42,369
部分内容

34
00:01:42,369 --> 00:01:44,905
不过 这些都属于关键内容

35
00:01:44,905 --> 00:01:49,042
能够反映一定的规律
而这些规律经常被误用

36
00:01:49,042 --> 00:01:51,979
掌握了这些规律
能帮助您的 App

37
00:01:51,979 --> 00:01:56,016
成功升级换代 或是适用于更多设备

38
00:01:56,016 --> 00:01:58,485
首先我们从底部导航栏开始

39
00:01:58,485 --> 00:02:01,121
底部导航栏属于全局性导航

40
00:02:01,121 --> 00:02:02,956
始终位于屏幕底部

41
00:02:02,956 --> 00:02:06,793
将 App 内容进行分区

42
00:02:06,793 --> 00:02:08,896
可以将底部导航栏看作一种

43
00:02:08,896 --> 00:02:12,199
分层展示信息的控制手段

44
00:02:12,199 --> 00:02:14,268
用户控制界面本身

45
00:02:14,268 --> 00:02:17,337
就应当清晰地展示出
您的 App 各区间的

46
00:02:17,337 --> 00:02:20,407
类别与关系

47
00:02:20,407 --> 00:02:23,544
因此 底部导航栏要反映出
您的 App 最高层次的

48
00:02:23,544 --> 00:02:26,446
内容与分类

49
00:02:26,446 --> 00:02:29,783
每个栏目反映的是
您的 App 上可选的菜单

50
00:02:29,783 --> 00:02:33,720
而这些栏目的选择应当
意义明确 一目了然

51
00:02:33,720 --> 00:02:36,156
这么听起来可能很简单

52
00:02:36,156 --> 00:02:39,159
但实际操作中则往往由于各种原因

53
00:02:39,159 --> 00:02:42,996
在设计中会被忽视

54
00:02:42,996 --> 00:02:45,098
下面举几个例子

55
00:02:45,098 --> 00:02:47,968
在不了解 App 内容的情况下

56
00:02:47,968 --> 00:02:51,138
看看这些导航栏能透露出
哪些功能信息

57
00:02:51,138 --> 00:02:53,874
仅仅通过一些简单的标签
我们就能从中看出

58
00:02:53,874 --> 00:02:56,844
该 App 的许多功能了

59
00:02:56,844 --> 00:03:00,881
“马上收听”及“收音机”两项
提示这个 App 支持的是

60
00:03:00,881 --> 00:03:04,084
音频媒体的内容

61
00:03:04,084 --> 00:03:08,789
App 上的“曲库”和“专辑”
暗示该 App 内容丰富

62
00:03:08,789 --> 00:03:13,927
而“个人专属”则提示了
强烈的个人风格

63
00:03:13,927 --> 00:03:17,598
该 App 的导航设计
十分直截了当

64
00:03:17,598 --> 00:03:20,467
其功能一目了然
让我们很清楚自己在

65
00:03:20,467 --> 00:03:23,403
各个分区可以干些什么

66
00:03:23,403 --> 00:03:26,373
常见的操作是
App 最初展示的导航

67
00:03:26,373 --> 00:03:29,409
着重于功能

68
00:03:29,409 --> 00:03:31,311
要注意不同界面间导航栏的功能

69
00:03:31,311 --> 00:03:34,381
分布要平衡

70
00:03:34,381 --> 00:03:36,149
下面我们举些例子

71
00:03:36,149 --> 00:03:39,486
帮助大家明白什么样的
导航栏设计会造成误导

72
00:03:39,486 --> 00:03:41,822
或让人困惑不解

73
00:03:41,822 --> 00:03:45,058
想象我手头有个 App
可以帮助人们计划

74
00:03:45,058 --> 00:03:48,695
城市路线 比如用于骑行

75
00:03:48,695 --> 00:03:51,532
如果您是来旅游的
或是刚搬到一个新地方

76
00:03:51,532 --> 00:03:54,334
又或是刚开始玩骑行
该 App 可以帮助您

77
00:03:54,334 --> 00:03:57,571
轻松保存及创建行程路线

78
00:03:57,571 --> 00:03:58,939
像这样

79
00:03:58,939 --> 00:04:01,708
既然这个 App 的目的是
寻找最佳骑行路线

80
00:04:01,708 --> 00:04:07,247
首先展示的就是
骑行路线的筛选地图

81
00:04:07,247 --> 00:04:10,184
接下来的区域可以交互

82
00:04:10,184 --> 00:04:12,853
可以随着编辑内容或添加好友

83
00:04:12,853 --> 00:04:15,822
而新增备选路线

84
00:04:15,822 --> 00:04:17,558
再下来 是分类展示

85
00:04:17,558 --> 00:04:19,092
各种不同特性的路线

86
00:04:19,092 --> 00:04:22,763
您会忍不住想把
所有功能都挤进一个导航栏里

87
00:04:22,763 --> 00:04:26,366
就像这样 因为这样能一览无余

88
00:04:26,366 --> 00:04:28,669
也有可能随着 App 更新

89
00:04:28,669 --> 00:04:31,205
您导航栏上的路线分组

90
00:04:31,205 --> 00:04:33,574
已经全乱了

91
00:04:33,574 --> 00:04:38,145
今天呢 我想请您
重新考虑这个问题

92
00:04:38,145 --> 00:04:41,148
这样的设计 用户想要找到
自己想看的内容

93
00:04:41,148 --> 00:04:43,817
就需要大量翻页

94
00:04:43,817 --> 00:04:47,688
还要费力地排除各种
无关的散碎功能干扰

95
00:04:47,688 --> 00:04:50,591
用户打开一个 App
在地图界面上进行筛选

96
00:04:50,591 --> 00:04:54,061
与编辑一条路线时
涉及到的功能乃至思维方式

97
00:04:54,061 --> 00:04:56,864
是截然不同的

98
00:04:56,864 --> 00:04:59,967
像这样将不同功能结合
在一起的做法要谨慎使用

99
00:04:59,967 --> 00:05:02,169
尤其不要出于担心 生怕用户不愿意

100
00:05:02,169 --> 00:05:03,904
探索 App 更多界面

101
00:05:03,904 --> 00:05:06,974
毕竟 如果 App 的功能
安排合理

102
00:05:06,974 --> 00:05:11,011
用户才会更容易理解

103
00:05:11,011 --> 00:05:15,015
一种做法 就是反思一下

104
00:05:15,015 --> 00:05:17,417
别人为什么会用您的 App？

105
00:05:17,417 --> 00:05:20,354
要记住 好的 App
往往功能集中

106
00:05:20,354 --> 00:05:22,956
专注于把少数几件事做好

107
00:05:22,956 --> 00:05:25,893
而不是试图
用一个 App 解决所有问题

108
00:05:25,893 --> 00:05:28,962
那我们再回到这个
骑行 App 的导航栏上

109
00:05:28,962 --> 00:05:30,998
用这个 App 的人是
想在自己感兴趣的地方

110
00:05:30,998 --> 00:05:34,034
找到适合自己的路线

111
00:05:34,034 --> 00:05:36,403
这才是设计一个 App 时
最重要的考虑因素

112
00:05:36,403 --> 00:05:39,973
因为这才是人们最关心的内容

113
00:05:39,973 --> 00:05:43,210
带着这个认知 我们再来看看

114
00:05:43,210 --> 00:05:45,846
如何设计导航栏

115
00:05:45,846 --> 00:05:48,415
来帮助用户设计路线

116
00:05:48,415 --> 00:05:51,885
以及如何在 App 上
进行均衡地展示

117
00:05:51,885 --> 00:05:54,421
这是一条路线的内容细节

118
00:05:54,421 --> 00:05:56,590
一般人会喜欢先看整体信息

119
00:05:56,590 --> 00:06:00,027
如距离 海拔变化

120
00:06:00,027 --> 00:06:02,729
以及全程地图及路面状况

121
00:06:02,729 --> 00:06:06,099
如人行道和道路等

122
00:06:06,099 --> 00:06:09,837
而上下陡坡等提醒信息

123
00:06:09,837 --> 00:06:13,473
能帮助我了解该路线
是否适合我的水平

124
00:06:13,473 --> 00:06:15,676
最后 知道沿途是否能
买到食物和水

125
00:06:15,676 --> 00:06:17,845
也会大大有助于计划

126
00:06:17,845 --> 00:06:22,549
好了那么 如何更好地组织这个

127
00:06:22,549 --> 00:06:24,484
路线查询的核心功能呢？

128
00:06:24,484 --> 00:06:29,723
首先 只有知道路线在哪里
这条路线才是有用的

129
00:06:29,723 --> 00:06:32,292
路线与其所属城市

130
00:06:32,292 --> 00:06:35,929
是密不可分的

131
00:06:35,929 --> 00:06:38,265
于是 我们需要一个城市界面

132
00:06:38,265 --> 00:06:41,768
以查询该城市与骑行有关的信息

133
00:06:41,768 --> 00:06:43,203
从该界面往下翻

134
00:06:43,203 --> 00:06:47,007
就能看到该城市中所有的骑行路线

135
00:06:47,007 --> 00:06:50,944
不过这个 App
还支持不同城市的路线

136
00:06:50,944 --> 00:06:56,316
因此从单个城市往上翻
会有所有城市的列表

137
00:06:56,316 --> 00:06:59,186
城市或地方 就可以
作为路线导航的

138
00:06:59,186 --> 00:07:01,455
最高层级

139
00:07:01,455 --> 00:07:04,791
由此可见 单单这一步操作
就涉及到大量信息

140
00:07:04,791 --> 00:07:09,162
而且这些信息还是该 App
所提供的内容里非常关键的部分

141
00:07:09,162 --> 00:07:12,232
这也是底部导航栏设计中
一个很好的例子

142
00:07:12,232 --> 00:07:14,902
再看现在这个设计
是不是就主题分明了

143
00:07:14,902 --> 00:07:17,571
这个导航界面里不应当出现

144
00:07:17,571 --> 00:07:20,674
任何跟城市无关的信息

145
00:07:20,674 --> 00:07:24,878
设计好的底部导航栏要做的
一个工作就是合理组织内容

146
00:07:24,878 --> 00:07:28,081
尽可能按照最自然的关系
来组织不同内容

147
00:07:28,081 --> 00:07:30,851
要做到这一点 可以结合
App 中的其他关键功能

148
00:07:30,851 --> 00:07:34,321
例如“行程” 我可以问自己

149
00:07:34,321 --> 00:07:35,889
“行程”是什么？

150
00:07:35,889 --> 00:07:37,524
大家一般如何使用“行程”？

151
00:07:37,524 --> 00:07:41,128
在我的 App 里面 把这个功能
放在哪里最合适？

152
00:07:41,128 --> 00:07:44,565
哪怕别人
对您的 App 内容并不熟悉

153
00:07:44,565 --> 00:07:47,000
或者说 越是不熟悉

154
00:07:47,000 --> 00:07:49,303
就越要将功能和内容的关系

155
00:07:49,303 --> 00:07:51,004
表达得清楚明白

156
00:07:51,004 --> 00:07:53,207
准确评估它所属的层级

157
00:07:53,207 --> 00:07:55,409
以及分析人们会如何使用

158
00:07:55,409 --> 00:07:58,679
只有这样 才能把一个将所有功能

159
00:07:58,679 --> 00:08:02,349
塞到首页的 App 升级为

160
00:08:02,349 --> 00:08:05,385
有着清晰直观导航的 App

161
00:08:05,385 --> 00:08:09,156
现在 底部导航栏上展示的
核心功能就均衡多了

162
00:08:09,156 --> 00:08:11,892
因为各个栏目都很直观

163
00:08:11,892 --> 00:08:12,826
每个栏目相互联系

164
00:08:12,826 --> 00:08:16,864
却各自有着不同的内容及操作

165
00:08:16,864 --> 00:08:21,001
这样的导航要自然得多

166
00:08:21,001 --> 00:08:24,238
接下来 我想讨论一个
有点关联的主题

167
00:08:24,238 --> 00:08:26,573
虽然表达得不尽相同

168
00:08:26,573 --> 00:08:28,675
要避免在同一个页面

169
00:08:28,675 --> 00:08:32,746
反复强调一个功能

170
00:08:32,746 --> 00:08:34,815
对于像这样内容丰富的 App

171
00:08:34,815 --> 00:08:38,452
似乎很合适用一个“首页”

172
00:08:38,452 --> 00:08:40,954
来一次性展示 App 内部的

173
00:08:40,954 --> 00:08:43,757
所有功能

174
00:08:43,757 --> 00:08:46,860
比如 如果用户似乎对“行程”功能

175
00:08:46,860 --> 00:08:49,763
不太热衷 而您怀疑这是因为

176
00:08:49,763 --> 00:08:52,766
用户没意识到 App 有这个功能

177
00:08:54,434 --> 00:08:57,304
于是 您很自然会想要
通过在页面中反复展示

178
00:08:57,304 --> 00:09:00,741
来强调这个功能的存在

179
00:09:00,741 --> 00:09:04,811
例如在“城市”选项卡上
加上“新行程”

180
00:09:04,811 --> 00:09:07,548
或是将行程面板

181
00:09:07,548 --> 00:09:09,750
跟其他功能一起插入醒目的位置

182
00:09:09,750 --> 00:09:12,486
例如添加好友

183
00:09:12,486 --> 00:09:17,324
或是在站点列表上
加上方便的“添加”选项

184
00:09:17,324 --> 00:09:19,326
如果生怕有些功能会被漏掉

185
00:09:19,326 --> 00:09:23,063
这种做法无疑具有很大的诱惑力

186
00:09:23,063 --> 00:09:27,234
这里要澄清一下
此处反复呈现的并非内容

187
00:09:27,234 --> 00:09:29,303
很多时候 在不同的界面

188
00:09:29,303 --> 00:09:33,407
用不同的方式显示同类型内容
如歌曲或照片

189
00:09:33,407 --> 00:09:36,977
这种做法是合理的

190
00:09:36,977 --> 00:09:38,712
但功能就不一样了

191
00:09:38,712 --> 00:09:41,849
因为功能涉及到人们出于
某种目的所要采取的行动

192
00:09:41,849 --> 00:09:45,786
这种时候重复将
让用户感到困惑

193
00:09:45,786 --> 00:09:49,857
在实际操作中 一个“首页”
往往会破坏一个 App 的层级

194
00:09:49,857 --> 00:09:54,027
如果一个 App 不同导航栏
或分区的功能

195
00:09:54,027 --> 00:09:57,464
被重复添加到同一个页面上

196
00:09:57,464 --> 00:09:59,333
同时缺乏足够的内容支持

197
00:09:59,333 --> 00:10:02,202
会让人感到多余而且杂乱

198
00:10:02,202 --> 00:10:04,771
“首页”将成为一个
让人眼花缭乱的地方

199
00:10:04,771 --> 00:10:07,474
每个功能都在抢地盘

200
00:10:07,474 --> 00:10:10,611
每个栏目都想得到注意

201
00:10:10,611 --> 00:10:13,447
而事实却是 这种做法打断了

202
00:10:13,447 --> 00:10:16,884
内容与相应操作之间的联系

203
00:10:16,884 --> 00:10:18,018
如果这是您的 App

204
00:10:18,018 --> 00:10:20,687
可以考虑把整个“首页”去掉

205
00:10:20,687 --> 00:10:23,123
过多重复的功能将使用户无所适从

206
00:10:23,123 --> 00:10:26,960
弄不清信息在哪里
又为什么被放置到那里

207
00:10:26,960 --> 00:10:28,629
“首页”的另一个问题是

208
00:10:28,629 --> 00:10:30,597
这种功能的重复

209
00:10:30,597 --> 00:10:33,433
可能导致用户因为
在其他地方看到该功能

210
00:10:33,433 --> 00:10:35,836
而直接跳过导航栏操作

211
00:10:35,836 --> 00:10:39,006
像这样因为碰巧看见某个元素
而点击切换页面的做法

212
00:10:39,006 --> 00:10:42,242
会导致用户晕头转向

213
00:10:42,242 --> 00:10:46,747
这样迫使用户自动
换页面的做法一定要避免

214
00:10:46,747 --> 00:10:50,284
接下来 导航栏导航一个最大的好处

215
00:10:50,284 --> 00:10:53,387
就在于它能在多个顶层内容间切换

216
00:10:53,387 --> 00:10:55,656
因此在整个导航过程中都要

217
00:10:55,656 --> 00:10:58,659
保持底部导航栏的存在

218
00:10:58,659 --> 00:11:01,962
保持底部导航栏的存在能帮助用户

219
00:11:01,962 --> 00:11:03,964
在不同层次的信息间

220
00:11:03,964 --> 00:11:05,732
轻松切换

221
00:11:05,732 --> 00:11:08,168
同时各层级间的关系还能保持清晰

222
00:11:08,168 --> 00:11:11,438
比如 我可以在“城市”页面

223
00:11:11,438 --> 00:11:15,509
查看一条新路线

224
00:11:15,509 --> 00:11:17,511
并与我“行程”页面上

225
00:11:17,511 --> 00:11:20,614
正在创建的一条行程中

226
00:11:20,614 --> 00:11:23,383
已储存的路线作比较

227
00:11:23,383 --> 00:11:26,687
后者在我的层级中要低两层

228
00:11:26,687 --> 00:11:30,190
要实现这种比较
不同页面就必须目的明确

229
00:11:30,190 --> 00:11:34,728
内容的区分也要细致

230
00:11:34,728 --> 00:11:36,997
最后 您下了这么多工夫

231
00:11:36,997 --> 00:11:39,199
整理出这么扎实的信息结构

232
00:11:39,199 --> 00:11:42,236
要配以简明的标签

233
00:11:42,236 --> 00:11:43,670
我们参考一个今年在
Apple 设计大奖

234
00:11:43,670 --> 00:11:46,273
“优越互动”类别获奖的

235
00:11:46,273 --> 00:11:48,208
这个 App “Slopes”

236
00:11:48,208 --> 00:11:50,644
它最让我欣赏的一点就是
这个 App 一打开

237
00:11:50,644 --> 00:11:53,013
默认打开的是中间栏 即您的日志栏

238
00:11:53,013 --> 00:11:55,916
上面有季节数据

239
00:11:55,916 --> 00:11:57,818
其他页面的功能更加集中

240
00:11:57,818 --> 00:12:01,255
全部都很直观 一看就知道

241
00:12:01,255 --> 00:12:03,991
这个 App 是干什么的 怎么用

242
00:12:03,991 --> 00:12:07,261
概括地说 这是因为标签的设计

243
00:12:07,261 --> 00:12:08,795
能直观地反映内容

244
00:12:08,795 --> 00:12:11,098
记录滑雪日 浏览场地

245
00:12:11,098 --> 00:12:13,967
与朋友交换数据等 都是用寥寥数语

246
00:12:13,967 --> 00:12:18,438
就把核心功能讲清楚了

247
00:12:18,438 --> 00:12:21,675
底部导航栏是一个强大的导航工具

248
00:12:21,675 --> 00:12:24,311
现在 我们把前面的内容回顾一遍

249
00:12:24,311 --> 00:12:28,749
利用导航栏来反映您的信息层级

250
00:12:28,749 --> 00:12:31,185
在导航栏间将不同功能以均衡的方式

251
00:12:31,185 --> 00:12:33,320
组织起来

252
00:12:33,320 --> 00:12:38,492
避免在同一个页面出现功能的重复

253
00:12:38,492 --> 00:12:42,396
在整个 App 中
始终保持底部导航栏的存在

254
00:12:42,396 --> 00:12:46,934
最后 导航栏的标签要简洁明了

255
00:12:46,934 --> 00:12:49,970
好了 下面我们来讲交互xing

256
00:12:49,970 --> 00:12:52,973
一个 App 在不同屏幕间的
切换方式

257
00:12:52,973 --> 00:12:55,475
主要有两种

258
00:12:55,475 --> 00:12:57,544
一种是在不同层级间切换

259
00:12:57,544 --> 00:13:00,247
我们有时称为
“推送 (push)”

260
00:13:00,247 --> 00:13:02,716
例如推送更多细节

261
00:13:02,716 --> 00:13:06,453
另一种切换则称为
“模态窗 (modal)”

262
00:13:06,453 --> 00:13:09,056
这两种方式我们都很熟悉

263
00:13:09,056 --> 00:13:12,125
可以帮助我们自然地在一个
App 的不同层级或界面间跳跃

264
00:13:12,125 --> 00:13:14,161
下面我给大家举例

265
00:13:14,161 --> 00:13:17,097
在不同层级间切换时

266
00:13:17,097 --> 00:13:19,333
出现“推送”页面 就意味着用户

267
00:13:19,333 --> 00:13:21,835
点击了某个元素 而接下来的页面

268
00:13:21,835 --> 00:13:24,805
会从右往左滑入

269
00:13:24,805 --> 00:13:27,641
“推送”界面默认出现于

270
00:13:27,641 --> 00:13:30,811
由上层往下层信息深入的时候

271
00:13:30,811 --> 00:13:33,280
这种交互方式很方便
因为它能直观体现

272
00:13:33,280 --> 00:13:35,082
信息的层级

273
00:13:35,082 --> 00:13:38,285
能直接告诉用户 您所看到的内容

274
00:13:38,285 --> 00:13:41,421
是从一个较高层级
向下深入所得的细节

275
00:13:41,421 --> 00:13:43,790
另一方面 模态窗则专门用于

276
00:13:43,790 --> 00:13:46,527
展示某个界面中的独立任务

277
00:13:46,527 --> 00:13:49,463
模态窗用于独立操作很方便

278
00:13:49,463 --> 00:13:52,332
它意味着该界面下
要进行某种操作所需的

279
00:13:52,332 --> 00:13:55,169
全部信息都已齐备

280
00:13:55,169 --> 00:13:57,938
模态窗是一种独特的交互方式
因为它能隔绝其余层级的信息

281
00:13:57,938 --> 00:14:01,775
从而帮助用户集中注意

282
00:14:01,775 --> 00:14:04,378
比如 创建新行程

283
00:14:04,378 --> 00:14:07,714
就是通过模态窗来呈现的

284
00:14:07,714 --> 00:14:11,985
用户可以在模态窗里选择
或输入数据 例如标题

285
00:14:11,985 --> 00:14:16,256
城市 日期甚至邀请好友

286
00:14:16,256 --> 00:14:18,859
用模态窗实现这种功能很合适
因为 UI 的设计要求页面在

287
00:14:18,859 --> 00:14:22,429
关闭或切换到其他页面前

288
00:14:22,429 --> 00:14:24,765
完成编辑

289
00:14:24,765 --> 00:14:28,302
因为信息都是由用户输入
并不需要参考

290
00:14:28,302 --> 00:14:31,038
其他页面的信息

291
00:14:31,038 --> 00:14:33,373
现在 熟悉了两种交互方式以后

292
00:14:33,373 --> 00:14:35,275
我们再来分别进行进一步探讨

293
00:14:35,275 --> 00:14:37,811
先从分层导航开始

294
00:14:37,811 --> 00:14:40,480
下面是几条要考虑的操作指南

295
00:14:40,480 --> 00:14:42,649
使用推送
来在 App 的不同层级结构中

296
00:14:42,649 --> 00:14:46,119
进行切换

297
00:14:46,119 --> 00:14:49,690
分层导航能够加强

298
00:14:49,690 --> 00:14:52,826
顶级和下级内容间的关系

299
00:14:52,826 --> 00:14:55,863
顶级内容具有更高等级

300
00:14:55,863 --> 00:14:59,533
想要更多的细节时才需要深入下层

301
00:14:59,533 --> 00:15:03,003
去访问补充界面

302
00:15:03,003 --> 00:15:05,939
这样在做选择时 范围就小了很多

303
00:15:05,939 --> 00:15:09,576
且无需访问其他的无关层级

304
00:15:09,576 --> 00:15:11,578
这就是理想的效果

305
00:15:11,578 --> 00:15:14,081
内容应当越来越具体

306
00:15:14,081 --> 00:15:16,984
且随着细节的推进

307
00:15:16,984 --> 00:15:20,187
选择应当越来越少

308
00:15:20,187 --> 00:15:21,788
使用推送进行切换时

309
00:15:21,788 --> 00:15:23,590
要注意导航栏

310
00:15:23,590 --> 00:15:27,861
必须始终位于屏幕底部

311
00:15:27,861 --> 00:15:29,596
如之前所说

312
00:15:29,596 --> 00:15:31,231
这是导航栏导航

313
00:15:31,231 --> 00:15:32,799
最大的好处

314
00:15:32,799 --> 00:15:34,134
这样才能保持一致性

315
00:15:34,134 --> 00:15:36,603
让用户始终能访问
App 的核心区域

316
00:15:36,603 --> 00:15:38,705
因为从头到尾都能看见

317
00:15:38,705 --> 00:15:40,541
这意味着用户能够探索

318
00:15:40,541 --> 00:15:42,609
不同层级的内容

319
00:15:42,609 --> 00:15:44,978
随着页面的推进

320
00:15:44,978 --> 00:15:48,615
用户想要返回原来页面
很自然地会从左往右扫

321
00:15:48,615 --> 00:15:50,584
同时还不会打乱其他
已保存了状态的页面

322
00:15:50,584 --> 00:15:54,888
及其层级结构

323
00:15:54,888 --> 00:15:57,457
接下来 还可以使用适当的标签

324
00:15:57,457 --> 00:16:00,194
通过屏幕的顶部导航栏

325
00:16:00,194 --> 00:16:02,429
引导用户在层级间切换

326
00:16:02,429 --> 00:16:04,932
举个例子

327
00:16:04,932 --> 00:16:06,533
注意 随着我步步深入

328
00:16:06,533 --> 00:16:08,602
不同层次的信息

329
00:16:08,602 --> 00:16:12,005
返回按钮在导航栏中出现了变化

330
00:16:12,005 --> 00:16:16,376
这些变化反映了上一个页面的标题

331
00:16:16,376 --> 00:16:19,746
这种设计 能帮助我在滚动屏幕

332
00:16:19,746 --> 00:16:22,449
深入 App 内部层级的同时
不发生混乱

333
00:16:22,449 --> 00:16:24,852
让我不用记住自己是从哪里过来的

334
00:16:24,852 --> 00:16:27,454
要怎么回去 因为返回按钮

335
00:16:27,454 --> 00:16:31,959
直接告诉我上一个层级的内容

336
00:16:31,959 --> 00:16:34,795
另一个可以利用分层导航的地方

337
00:16:34,795 --> 00:16:40,033
是当有用到展示指示器的时候

338
00:16:40,033 --> 00:16:41,435
展示指示器

339
00:16:41,435 --> 00:16:43,904
也被称为山形符号

340
00:16:43,904 --> 00:16:47,841
它会指向您要去的地方

341
00:16:47,841 --> 00:16:50,244
山形符号所引发的不同切换

342
00:16:50,244 --> 00:16:52,813
在 UI 表示的内容及相应交互间

343
00:16:52,813 --> 00:16:55,415
存在分离

344
00:16:55,415 --> 00:16:59,887
推送符合我们的认知模式

345
00:16:59,887 --> 00:17:02,990
在西方文化中 阅读习惯是从左往右

346
00:17:02,990 --> 00:17:05,325
因此这个方向表示下一步

347
00:17:05,325 --> 00:17:08,829
然而在从右到左的语言中
如阿拉伯语和希伯来语

348
00:17:08,829 --> 00:17:13,267
表示下一步的方向正好相反

349
00:17:13,267 --> 00:17:15,836
如果您的 App 支持
从右往左的语言

350
00:17:15,836 --> 00:17:17,971
则推送的方向必须相反

351
00:17:17,971 --> 00:17:22,976
才能使内容间自然联动

352
00:17:22,976 --> 00:17:26,547
何时应当使用分层导航
要考虑的最后一条

353
00:17:26,547 --> 00:17:28,749
是操作的背景

354
00:17:28,749 --> 00:17:31,018
比如 当用户频繁地

355
00:17:31,018 --> 00:17:33,754
在内容之间切换时

356
00:17:33,754 --> 00:17:36,156
如果某种操作需要用户

357
00:17:36,156 --> 00:17:40,060
频繁交互 反复切换页面

358
00:17:40,060 --> 00:17:41,929
操作中需要频繁换 App

359
00:17:41,929 --> 00:17:45,899
或是要花大量时间停留在某个页面
则应当使用推送

360
00:17:45,899 --> 00:17:48,268
一个熟悉的例子
就是“信息”App

361
00:17:48,268 --> 00:17:50,637
虽然该 App 的层级相对扁平

362
00:17:50,637 --> 00:17:53,207
但我可以在短信间通过推送

363
00:17:53,207 --> 00:17:55,309
轻松进出

364
00:17:55,309 --> 00:17:58,712
如果不用推送 而用模态窗

365
00:17:58,712 --> 00:18:00,547
在不同的聊天窗间无缝切换

366
00:18:00,547 --> 00:18:02,416
就很难了

367
00:18:02,416 --> 00:18:05,652
聊天要保持连续性
但关闭一个无关的模态窗时

368
00:18:05,652 --> 00:18:08,488
用户会忍不住犹豫
是否要离开该页面

369
00:18:08,488 --> 00:18:11,658
这就增加了没必要的负担

370
00:18:11,658 --> 00:18:13,994
推送则能让用户实现

371
00:18:13,994 --> 00:18:17,264
App 核心区域之间的平滑转换

372
00:18:17,264 --> 00:18:20,434
以上就是分层导航的简单概述

373
00:18:20,434 --> 00:18:21,702
我们复习一下

374
00:18:21,702 --> 00:18:24,438
首先 推送的切换方式

375
00:18:24,438 --> 00:18:26,807
可以用于 App 层级间的转换

376
00:18:26,807 --> 00:18:29,209
底部导航栏应当始终

377
00:18:29,209 --> 00:18:31,912
保持在屏幕底部

378
00:18:31,912 --> 00:18:34,281
每个页面的导航栏
都应当有清晰的标题

379
00:18:34,281 --> 00:18:38,919
和返回标签 以帮助用户
清楚自己所在的层级

380
00:18:38,919 --> 00:18:42,456
有展示指示器存在的时候要用推送

381
00:18:42,456 --> 00:18:44,892
当操作需要在内容间频繁切换时

382
00:18:44,892 --> 00:18:47,327
也要用推送

383
00:18:47,327 --> 00:18:49,696
分层导航是一种非常常见

384
00:18:49,696 --> 00:18:51,798
以及相对简单的交互方式

385
00:18:51,798 --> 00:18:56,637
因此您的 App 中
也可能经常用到

386
00:18:56,637 --> 00:19:00,774
而模态窗则更多用在
存在背景转换的情况下

387
00:19:00,774 --> 00:19:03,810
这种方式重在帮助用户
专心进行某种单一的操作

388
00:19:03,810 --> 00:19:05,712
或是独立任务

389
00:19:05,712 --> 00:19:07,714
在 iOS 上使用模态窗时

390
00:19:07,714 --> 00:19:11,151
应当始终从屏幕底部呈现

391
00:19:11,151 --> 00:19:13,554
因为模态窗会打断信息的层级

392
00:19:13,554 --> 00:19:17,824
从屏幕底部出现
可以盖住底部导航栏

393
00:19:17,824 --> 00:19:20,527
这样用户就无法进一步深入

394
00:19:20,527 --> 00:19:23,263
这种打断操作是故意的

395
00:19:23,263 --> 00:19:27,401
就为了强化注意力

396
00:19:27,401 --> 00:19:30,737
现在您可能会想
那什么叫独立任务？

397
00:19:30,737 --> 00:19:34,074
我们举三个宽泛的例子

398
00:19:34,074 --> 00:19:37,544
模态窗可以用于简单任务

399
00:19:37,544 --> 00:19:41,448
多步骤任务 或者用于全屏内容

400
00:19:41,448 --> 00:19:45,552
下面我会分别举例

401
00:19:45,552 --> 00:19:47,988
第一个 使用模态窗

402
00:19:47,988 --> 00:19:50,524
来完成一项简单的任务

403
00:19:50,524 --> 00:19:53,927
例如创建活动 或设置提醒

404
00:19:53,927 --> 00:19:55,629
创建提醒要求

405
00:19:55,629 --> 00:19:58,565
对输入信息进行编辑和修改

406
00:19:58,565 --> 00:20:00,834
在此过程中锁定注意力可以帮助用户

407
00:20:00,834 --> 00:20:03,670
心无旁骛地完成任务

408
00:20:03,670 --> 00:20:06,373
还可以减少因为不小心点到

409
00:20:06,373 --> 00:20:11,912
其他元素或菜单而报废操作的情况

410
00:20:11,912 --> 00:20:14,882
第二 使用模态窗来辅助进行

411
00:20:14,882 --> 00:20:16,750
复杂任务的操作

412
00:20:16,750 --> 00:20:18,785
这种操作一般涉及多个步骤

413
00:20:18,785 --> 00:20:21,989
比如在“钱包”App 里
添加银行卡

414
00:20:21,989 --> 00:20:24,258
在复杂任务中使用模态窗

415
00:20:24,258 --> 00:20:27,294
似乎违背我们的直觉 但请记住

416
00:20:27,294 --> 00:20:30,764
我们的目的是通过隐藏底部导航栏

417
00:20:30,764 --> 00:20:33,367
来集中注意 并在任务完成或取消前

418
00:20:33,367 --> 00:20:37,337
防止人们在 App 中移动

419
00:20:37,337 --> 00:20:40,974
第三 使用模态窗来
阅读文章 观看视频

420
00:20:40,974 --> 00:20:43,911
或全屏内容这类

421
00:20:43,911 --> 00:20:45,812
无需太多页面切换的操作

422
00:20:45,812 --> 00:20:48,215
一个很好的例子
就是在“健身”App 中

423
00:20:48,215 --> 00:20:50,117
通过打开一个健身视频

424
00:20:50,117 --> 00:20:54,721
来开始锻炼

425
00:20:54,721 --> 00:20:57,457
在层级交互部分 我们谈到了

426
00:20:57,457 --> 00:20:59,993
用导航栏来帮助用户定位的重要性

427
00:20:59,993 --> 00:21:03,997
在模态窗中 这一点同样重要

428
00:21:03,997 --> 00:21:06,099
剖析模态窗的结构时

429
00:21:06,099 --> 00:21:09,703
要想想导航栏是如何帮助定位的

430
00:21:09,703 --> 00:21:13,106
使用标签和交互操作能帮助用户

431
00:21:13,106 --> 00:21:15,909
对于自身位置以及如何访问其他位置

432
00:21:15,909 --> 00:21:19,146
产生信心

433
00:21:19,146 --> 00:21:22,583
标题可以帮助用户
找到页面中的内容

434
00:21:22,583 --> 00:21:25,619
例如如“新行程”

435
00:21:25,619 --> 00:21:28,488
右侧的标签则一般用于首选操作

436
00:21:28,488 --> 00:21:33,227
因此通常用粗体显示以强调重要性

437
00:21:33,227 --> 00:21:36,096
用简单的动词来作标签

438
00:21:36,096 --> 00:21:39,433
可以告诉我点击后会发生什么

439
00:21:39,433 --> 00:21:41,635
首选操作可以关闭模态窗

440
00:21:41,635 --> 00:21:45,572
同时保存上一步的状态

441
00:21:45,572 --> 00:21:48,609
如果模态窗上还没有
输入信息或交互

442
00:21:48,609 --> 00:21:51,378
则首选操作不会激活

443
00:21:51,378 --> 00:21:53,780
这样可以让用户明白

444
00:21:53,780 --> 00:21:57,985
要输入信息才可保存或继续

445
00:21:57,985 --> 00:22:00,787
如果已经作了首选操作
则用左边的“取消”按钮

446
00:22:00,787 --> 00:22:03,323
来关闭模态窗

447
00:22:03,323 --> 00:22:06,026
可以清楚地表明我要放弃操作了

448
00:22:06,026 --> 00:22:08,996
如果在点击取消之前 我输入过信息

449
00:22:08,996 --> 00:22:12,099
这时候就可以出现一个警告

450
00:22:12,099 --> 00:22:14,201
或一个 Action sheet

451
00:22:14,201 --> 00:22:16,737
以提示用户继续取消的话

452
00:22:16,737 --> 00:22:18,805
就会丢失数据

453
00:22:18,805 --> 00:22:21,241
不过 如果我还没有与 UI 交互

454
00:22:21,241 --> 00:22:25,712
点击取消就会直接关闭模态窗

455
00:22:25,712 --> 00:22:29,249
尽量少用“关闭”符号 仅当模态窗

456
00:22:29,249 --> 00:22:33,453
所需的交互很少
无需文本输入时使用

457
00:22:33,453 --> 00:22:36,123
有时候可以在模态窗中
看到一个“X”

458
00:22:36,123 --> 00:22:38,859
作为关闭窗口的首要方式 例如这篇

459
00:22:38,859 --> 00:22:41,361
在 App Store
“Today”标签页的文章

460
00:22:41,361 --> 00:22:44,798
“关闭”符号可以用在这里
是因为这里无需用户输入

461
00:22:44,798 --> 00:22:46,533
因此简单的关闭动作

462
00:22:46,533 --> 00:22:49,136
可以帮助用户
把注意力集中在内容上

463
00:22:49,136 --> 00:22:52,105
下面举个例子 说明“关闭”符号

464
00:22:52,105 --> 00:22:55,742
在需要输入和交互的模态窗里
为何会出问题

465
00:22:55,742 --> 00:22:58,812
当我选择完一个筛选器后
如果我点“关闭”

466
00:22:58,812 --> 00:23:01,615
我刚才的选择会被提交还是取消？

467
00:23:01,615 --> 00:23:04,751
没有一个明确的标签提示
用户就会不确定

468
00:23:04,751 --> 00:23:07,221
“如果我点了‘关闭’会怎样？”

469
00:23:07,221 --> 00:23:10,390
所以要记住 使用导航栏中的标签

470
00:23:10,390 --> 00:23:12,960
通常是首选 因为这样更明确

471
00:23:12,960 --> 00:23:15,996
操作上更明白

472
00:23:15,996 --> 00:23:19,466
最后 要避免模态窗上
再叠加模态窗

473
00:23:19,466 --> 00:23:23,604
因为这样很累赘 且过于复杂

474
00:23:23,604 --> 00:23:25,906
这里我要提醒大家 模态窗界面本身

475
00:23:25,906 --> 00:23:29,376
是支持子视图以及切换相关页面的

476
00:23:29,376 --> 00:23:31,979
我之前提到过 这是一个编辑界面

477
00:23:31,979 --> 00:23:35,315
其文本字段和表格单元格

478
00:23:35,315 --> 00:23:37,417
可以进行选择和输入

479
00:23:37,417 --> 00:23:41,121
因此是可以交互 而不仅仅是阅读的

480
00:23:41,121 --> 00:23:43,724
例如 我可以点击某个
添加在行程上的

481
00:23:43,724 --> 00:23:46,860
好友单元格

482
00:23:46,860 --> 00:23:50,264
点击后会出现一个推送窗
因为这里有山形标记 对吧？

483
00:23:50,264 --> 00:23:53,467
点进去后 这个界面可能
会展示 Kate 的信息

484
00:23:53,467 --> 00:23:57,905
并允许我将她从行程上移除

485
00:23:57,905 --> 00:24:01,241
不过 “加好友”
和“上传照片”的标签

486
00:24:01,241 --> 00:24:05,812
此时都是绿色显示
表示这些操作都允许

487
00:24:05,812 --> 00:24:07,147
这几种情况

488
00:24:07,147 --> 00:24:09,449
都属于操作中的操作

489
00:24:09,449 --> 00:24:11,485
首先我要添加一份行程表

490
00:24:11,485 --> 00:24:15,289
然后要在行程表上的添加照片

491
00:24:15,289 --> 00:24:17,724
上传照片的操作涉及到

492
00:24:17,724 --> 00:24:19,726
相当多的互动

493
00:24:19,726 --> 00:24:23,797
比如要在相册中滚动
并选择一张新照片

494
00:24:23,797 --> 00:24:27,067
这样的操作也属于独立任务

495
00:24:27,067 --> 00:24:30,103
选择好照片后 该模态窗就可以关闭

496
00:24:30,103 --> 00:24:34,074
我又回到了新建行程中
刚开始的模态窗里

497
00:24:34,074 --> 00:24:36,577
要尽量减少多个模态窗的叠加

498
00:24:36,577 --> 00:24:38,212
不过有时候 这也是必要的

499
00:24:38,212 --> 00:24:42,382
可以帮助在子视图中
保持一致性和注意力

500
00:24:42,382 --> 00:24:46,386
以上 就是对 iOS
模态窗展示的概述

501
00:24:46,386 --> 00:24:49,389
模态窗应从屏幕底部呈现

502
00:24:49,389 --> 00:24:51,825
可以用于三种类型的任务：

503
00:24:51,825 --> 00:24:55,262
简单任务 多步骤任务及全屏任务

504
00:24:55,262 --> 00:25:00,133
在导航栏中呈现首选和取消操作

505
00:25:00,133 --> 00:25:04,037
只在交互很少的内容中
使用“关闭”符号

506
00:25:04,037 --> 00:25:06,974
并尽量减少多个模态窗的叠加

507
00:25:06,974 --> 00:25:09,343
希望这次深入剖析对您有帮助

508
00:25:09,343 --> 00:25:12,045
当您为自己的
iOS App 设计导航时

509
00:25:12,045 --> 00:25:14,581
要考虑如何组织内容

510
00:25:14,581 --> 00:25:16,583
思考用户与您的功能如何交互

511
00:25:16,583 --> 00:25:20,187
以及如何将其与您的层级
完美结合 展示出来

512
00:25:20,187 --> 00:25:23,257
这样 用户就可以轻松访问

513
00:25:23,257 --> 00:25:25,692
您的 App 上所有出色的功能
并享受使用的过程了

514
00:25:25,692 --> 00:25:26,793
感谢您的收看

515
00:25:26,793 --> 00:25:30,531
♪

