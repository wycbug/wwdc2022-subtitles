1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,810 --> 00:00:11,912
Kiara Rose: 大家好 我是 Kiara Rose

3
00:00:11,945 --> 00:00:15,148
我是一名 Safari 扩展工程师

4
00:00:15,182 --> 00:00:19,353
我今天非常开心能跟大家聊聊

5
00:00:19,386 --> 00:00:22,823
今年
Safari Web Extensions 的新功能

6
00:00:22,856 --> 00:00:25,259
在我们开始今天的演讲之前

7
00:00:25,292 --> 00:00:27,494
我想花点时间感谢所有向

8
00:00:27,528 --> 00:00:33,634
App Store 提交 iOS iPadOS
和 macOS 扩展的人员

9
00:00:33,667 --> 00:00:38,272
展望未来 我们的目标是
继续实施新功能和 API

10
00:00:38,305 --> 00:00:42,142
以便你们可以为用户提供
更好的使用体验

11
00:00:42,176 --> 00:00:45,812
今天 我将重点介绍我们去年生效的

12
00:00:45,846 --> 00:00:48,515
一些令人兴奋的新功能

13
00:00:48,549 --> 00:00:52,052
例如用于扩展的新 Manifest 版本

14
00:00:52,085 --> 00:00:54,254
更新的 API

15
00:00:54,288 --> 00:00:58,559
以及跨多个设备同步扩展

16
00:00:58,592 --> 00:01:01,261
我们从 Manifest 版本 3 开始讲起

17
00:01:02,062 --> 00:01:06,867
Manifest 版本 3 是 web 扩展平台的
下一个迭代

18
00:01:06,900 --> 00:01:09,736
它进行了性能和安全性提升

19
00:01:09,770 --> 00:01:13,874
并整合了流行的扩展 API

20
00:01:13,907 --> 00:01:18,478
对于那些已经更新你的扩展
到使用版本 3 的用户

21
00:01:18,512 --> 00:01:23,283
则现在可以在 Safari 15.4
及更高版本中运行

22
00:01:23,317 --> 00:01:26,386
对于那些还没有更新的用户
也不必担心

23
00:01:26,420 --> 00:01:29,156
因为我们将继续支持
在 Safari 浏览器中

24
00:01:29,189 --> 00:01:32,559
使用 Manifest 版本 2 的扩展

25
00:01:32,593 --> 00:01:35,362
Manifest 版本 3 的一个关键新功能是

26
00:01:35,395 --> 00:01:39,533
你的扩展可以使用 service worker
而不是后台页面

27
00:01:39,566 --> 00:01:43,470
如果你是 Web 开发人员
那么可能对 service worker 很熟悉

28
00:01:43,504 --> 00:01:46,707
这些是事件驱动的页面
你可以在其中使用

29
00:01:46,740 --> 00:01:50,110
addEventListener API 注册监听

30
00:01:50,143 --> 00:01:52,846
这些页面还与支持
Manifest 版本 3 的

31
00:01:52,880 --> 00:01:55,682
其他浏览器兼容

32
00:01:55,716 --> 00:01:59,353
如果你希望继续使用背景页面

33
00:01:59,386 --> 00:02:03,790
我们非常欢迎你们这样做
但必须是暂时的

34
00:02:03,824 --> 00:02:08,795
版本 3 的另一个改进是
在网页上执行 JavaScript

35
00:02:08,829 --> 00:02:14,301
和样式 API 从标签 API
移到了新的脚本 API

36
00:02:15,269 --> 00:02:18,238
这些方法的大部分功能保持不变

37
00:02:18,272 --> 00:02:22,242
但脚本提供了一些新的附加功能

38
00:02:22,276 --> 00:02:26,313
例如在网页上注入代码的新方法

39
00:02:26,346 --> 00:02:31,218
更多关于代码应该在页面上的
哪些框架中执行的选项

40
00:02:31,251 --> 00:02:36,924
以及决定代码应该
在哪个执行环境中运行的能力

41
00:02:36,957 --> 00:02:39,860
让我们看一下新脚本 API 的代码

42
00:02:39,893 --> 00:02:42,629
与选项卡 API 有何不同

43
00:02:42,663 --> 00:02:46,733
在此代码片段中
我使用 tabs.executeScript API

44
00:02:46,767 --> 00:02:51,138
将网页的背景色改为蓝色

45
00:02:51,171 --> 00:02:55,576
有了这个 API
我只能通过传递“代码”属性

46
00:02:55,609 --> 00:02:58,278
来注入包含在字符串中的代码

47
00:02:58,312 --> 00:03:01,515
但现在 使用新的脚本 API

48
00:03:01,548 --> 00:03:05,519
我可以传递包含此代码的函数对象

49
00:03:05,552 --> 00:03:07,487
和任何其他函数一样

50
00:03:07,521 --> 00:03:10,390
它可以包含可以传入的参数

51
00:03:10,424 --> 00:03:13,293
这是一种更好的执行脚本方式

52
00:03:13,327 --> 00:03:17,931
因为你们不局限于
用字符串编写代码

53
00:03:17,965 --> 00:03:22,369
注意 在编写脚本时
有一个名为目标的新属性

54
00:03:22,402 --> 00:03:26,540
此属性用于指定脚本应该在何处运行

55
00:03:26,573 --> 00:03:28,509
为了执行脚本

56
00:03:28,542 --> 00:03:33,347
必须指定要在其中执行脚本的
选项卡 ID

57
00:03:33,380 --> 00:03:37,651
如果未指定选项卡 ID
此 API 将返回错误

58
00:03:37,684 --> 00:03:41,321
然后 如果你想选择
注入代码的网页框架

59
00:03:41,355 --> 00:03:45,726
就可以指定框架 ID

60
00:03:45,759 --> 00:03:50,264
请注意 使用选项卡 API
你只能指定一个 ID

61
00:03:50,297 --> 00:03:55,035
但是使用脚本 可以指定多个 ID

62
00:03:55,068 --> 00:03:57,337
但假设我有更多的代码

63
00:03:57,371 --> 00:04:02,543
如果我能把它包含在多个文件中
就会看起来更简洁

64
00:04:02,576 --> 00:04:05,379
在 tabs.executeScript API 中

65
00:04:05,412 --> 00:04:08,348
我只能指定一个文件

66
00:04:08,382 --> 00:04:13,654
但在 scripting.executeScript 中
我可以指定多个文件

67
00:04:13,687 --> 00:04:17,224
同样 该方法也可以用于 insertCSS

68
00:04:17,257 --> 00:04:20,594
你可以在网页上注入样式

69
00:04:20,627 --> 00:04:24,531
removeCSS 也适用可以从网页上

70
00:04:24,565 --> 00:04:26,066
移除注入的样式

71
00:04:26,099 --> 00:04:31,004
这些 API
可用于 Manifest 版本 2 和 3

72
00:04:31,038 --> 00:04:37,044
但是 tabs.executeScript API
不适用于版本 3

73
00:04:37,077 --> 00:04:39,513
除了新的脚本 API

74
00:04:39,546 --> 00:04:43,717
对其他 API 也进行了
一些细微的改进

75
00:04:43,750 --> 00:04:47,521
其中一项就是针对
web_accessible_resources

76
00:04:48,755 --> 00:04:52,893
在 Manifest 版本 2 中
如果你想要包含资源

77
00:04:52,926 --> 00:04:55,996
可以通过传递你想要

78
00:04:56,029 --> 00:04:58,599
网页访问的文件数组来实现

79
00:04:58,632 --> 00:05:02,536
但这可能会有问题
因为它会让任何网页

80
00:05:02,569 --> 00:05:06,139
访问你在清单中指定的所有资源

81
00:05:07,374 --> 00:05:09,977
使用版本 3 中的新格式

82
00:05:10,010 --> 00:05:14,948
你可以控制任何
给定站点上的可用资源

83
00:05:14,982 --> 00:05:17,451
我们看一个例子

84
00:05:17,484 --> 00:05:20,654
以前 cookie 和 pie 图像

85
00:05:20,687 --> 00:05:23,757
每个扩展的网站上都可以访问

86
00:05:23,790 --> 00:05:26,126
但是现在 使用版本 3

87
00:05:26,159 --> 00:05:30,397
我可以使 pie image
仅在 apple.com URL 上可用

88
00:05:30,430 --> 00:05:34,501
而 cookie 图像
仅在 webkit.org 页面上可用

89
00:05:34,535 --> 00:05:37,104
现在让我们看看

90
00:05:37,137 --> 00:05:40,274
对 browser_action
和 page_action API 的改进

91
00:05:41,608 --> 00:05:46,713
在 Manifest 版本 2 中
明确地指定这样操作

92
00:05:46,747 --> 00:05:49,750
但由于这些 API 功能相似

93
00:05:49,783 --> 00:05:54,855
因此它们在版本 3 中
被合并为仅使用一个 API 即操作

94
00:05:56,256 --> 00:05:59,860
我们还更新了你为扩展声明

95
00:05:59,893 --> 00:06:01,962
内容安全策略的方式

96
00:06:01,995 --> 00:06:06,900
在版本 2 中 扩展的策略
是使用字符串定义的

97
00:06:06,934 --> 00:06:10,838
但是 在版本 3 中 策略是

98
00:06:10,871 --> 00:06:15,242
使用带有键 extension_pages 的
对象定义的

99
00:06:15,275 --> 00:06:18,412
请务必注意 版本 3

100
00:06:18,445 --> 00:06:21,381
不再支持远程脚本源

101
00:06:21,415 --> 00:06:24,518
最后的 API 更改是已弃用的

102
00:06:24,551 --> 00:06:28,388
browser.extension.getURL API

103
00:06:28,422 --> 00:06:31,658
版本 3 不再支持此 API

104
00:06:31,692 --> 00:06:35,929
相反 请使用
browser.runtime 中的等效 API

105
00:06:35,963 --> 00:06:40,133
所以我已经谈到了
Manifest 版本 3 中推出的新功能

106
00:06:40,167 --> 00:06:43,670
现在让我们逐步完成更新扩展的过程

107
00:06:43,704 --> 00:06:46,173
以方便你们使用这些新功能

108
00:06:47,774 --> 00:06:51,178
我将从去年的演示中
更新 Sea Creator 扩展

109
00:06:51,211 --> 00:06:54,815
以使用 Manifest 版本 3

110
00:06:54,848 --> 00:07:00,020
这个扩展用表情符号替换了
所有出现的单词 fish

111
00:07:00,053 --> 00:07:04,491
我要做的第一件事是将版本号
从 2 更改为 3

112
00:07:06,660 --> 00:07:10,163
尽管我仍然可以在版本 3 中
使用暂时性背景页面

113
00:07:10,197 --> 00:07:13,967
但我将对其进行更新
以使用 service worker

114
00:07:14,001 --> 00:07:17,104
这样我的扩展就可以
与 Chrome 兼容了

115
00:07:19,406 --> 00:07:23,510
最后 我会将 browser_action
更改为 action

116
00:07:25,712 --> 00:07:28,315
而就 Manifest 的结构而言

117
00:07:28,348 --> 00:07:31,185
这些是关键的变化
我需要使这个扩展

118
00:07:31,218 --> 00:07:34,521
与版本 3 中的新规范兼容

119
00:07:34,555 --> 00:07:40,360
所以为了测试这个 我将构建扩展

120
00:07:40,394 --> 00:07:42,763
并在 Safari 浏览器中启用

121
00:07:47,835 --> 00:07:51,505
然后 导航到 webkit.org 博客页面

122
00:07:51,538 --> 00:07:55,175
在该页面中 我将使用此扩展程序
将单词 fish 的每个实例

123
00:07:55,209 --> 00:07:57,511
替换为鱼表情符号

124
00:07:59,213 --> 00:08:01,548
但似乎出了点问题

125
00:08:01,582 --> 00:08:05,686
如你所见 此页面上的所有单词
都没有被表情符号替换

126
00:08:05,719 --> 00:08:08,822
我们检查一下弹出框
看看是否有任何错误消息

127
00:08:15,429 --> 00:08:18,398
在控制台选项卡中
我看到有一条错误消息

128
00:08:18,432 --> 00:08:22,836
指出 browser.tabs.executeScript
未定义

129
00:08:22,870 --> 00:08:26,907
这是因为版本 3 中
不再支持此 API

130
00:08:26,940 --> 00:08:31,879
所以我应该更新扩展
以使用新的脚本 API

131
00:08:31,912 --> 00:08:35,983
在 Xcode 中
我会回到 popup.js 文件

132
00:08:36,016 --> 00:08:39,453
然后将这一行改为使用脚本

133
00:08:42,256 --> 00:08:44,291
我会添加目标属性

134
00:08:44,324 --> 00:08:48,328
用于指定脚本应注入的位置

135
00:08:50,230 --> 00:08:52,232
使用新的脚本 API

136
00:08:52,266 --> 00:08:54,735
我必须指定选项卡的 ID

137
00:08:54,768 --> 00:08:57,838
可以通过使用 tabs.getCurrent API

138
00:08:57,871 --> 00:09:01,308
来获取包含当前选项卡信息的对象
来做到这一点

139
00:09:08,048 --> 00:09:12,319
然后我可以使用该对象
来检索选项卡 ID

140
00:09:15,556 --> 00:09:18,892
接下来
添加包含要运行的脚本的文件

141
00:09:21,094 --> 00:09:24,565
最后 我要做的最后一个更改
是在 Manifest 中

142
00:09:24,598 --> 00:09:26,466
添加脚本权限

143
00:09:29,803 --> 00:09:34,608
我将继续构建扩展

144
00:09:34,641 --> 00:09:38,278
并在 Safari 浏览器中使用这些更改

145
00:09:38,312 --> 00:09:41,682
如你所见 此扩展现在
可以在 Safari 浏览器中使用

146
00:09:41,715 --> 00:09:44,318
使用 Manifest 版本 3 中的新功能

147
00:09:44,351 --> 00:09:47,221
这就是升级你的扩展是多么简单

148
00:09:47,254 --> 00:09:49,990
但是 如果你对这些新变化还不满意

149
00:09:50,023 --> 00:09:53,193
那么许多功能 例如脚本
和 services workers

150
00:09:53,227 --> 00:09:56,230
也可以在版本 2 中使用

151
00:09:56,263 --> 00:10:00,834
现在让我们看看今年更新的一些 API

152
00:10:00,868 --> 00:10:03,437
从 declarative net request 开始

153
00:10:03,470 --> 00:10:06,607
declarative net request
是一种内容阻止 API

154
00:10:06,640 --> 00:10:10,878
它为 web 扩展提供了一种
快速且保护隐私的方式

155
00:10:10,911 --> 00:10:15,182
以使用规则集阻止或修改网络请求

156
00:10:15,215 --> 00:10:18,819
此 API 允许你将拦截
和修改请求的所有工作

157
00:10:18,852 --> 00:10:22,723
委托给 Safari 浏览器
你所要做的就是

158
00:10:22,756 --> 00:10:26,293
指定该应用的内容屏蔽规则

159
00:10:26,326 --> 00:10:29,396
你可以在 Manifest 中指定规则集

160
00:10:30,831 --> 00:10:34,468
我在这里添加了
declarative net request 权限

161
00:10:34,501 --> 00:10:37,204
并使用 declarative_net_request 键
添加了

162
00:10:37,237 --> 00:10:40,541
一个应该应用于所有页面的规则集

163
00:10:40,574 --> 00:10:45,245
以前 我最多只能在 Manifest 中
声明 10 个规则集

164
00:10:45,279 --> 00:10:48,282
但是现在有了对该功能的更新

165
00:10:48,315 --> 00:10:50,617
你可以声明多达 50 个规则集

166
00:10:50,651 --> 00:10:54,488
这意味着你的扩展
可自定义程度更高

167
00:10:54,521 --> 00:10:59,760
但是请记住 一次只能启用
其中的 10 个规则集

168
00:10:59,793 --> 00:11:03,297
关于如何创建规则集的更多信息

169
00:11:03,330 --> 00:11:06,700
请查看去年关于
Safari Web Extensions 的演讲

170
00:11:06,733 --> 00:11:09,703
我们对这个 API 进行了
更深入的介绍

171
00:11:09,736 --> 00:11:13,841
让我们继续讨论
declarative net request 的一些新功能

172
00:11:13,874 --> 00:11:17,778
以前 你只能在 Manifest 中
声明规则集

173
00:11:17,811 --> 00:11:21,515
但现在我们实现了以下两个 API

174
00:11:21,548 --> 00:11:25,118
可让你动态更新规则

175
00:11:25,152 --> 00:11:28,322
第一个 API 是 updateSessionRules

176
00:11:28,355 --> 00:11:31,959
它允许你为扩展添加或删除规则

177
00:11:31,992 --> 00:11:35,195
但是需要注意的是 这些规则不会在

178
00:11:35,229 --> 00:11:39,266
浏览器会话或扩展更新中持续存在

179
00:11:39,299 --> 00:11:41,902
如果你想更新持久化的规则

180
00:11:41,935 --> 00:11:45,839
请使用 updateDynamicRules API

181
00:11:45,873 --> 00:11:48,141
这将允许你在不更新
整个扩展程序的情况下

182
00:11:48,175 --> 00:11:50,777
更新阻止规则

183
00:11:50,811 --> 00:11:53,547
让我们看看如何使用这些 API 之一

184
00:11:53,580 --> 00:11:56,984
来修改我们的规则集

185
00:11:57,017 --> 00:12:01,788
我将使用 sea creator 扩展
来阻止网页上的一些内容

186
00:12:01,822 --> 00:12:06,827
然后 我将使用新的 API 来
解除对选定页面上内容的阻止

187
00:12:06,860 --> 00:12:09,563
在扩展 Manifest 中
我要做的第一件事

188
00:12:09,596 --> 00:12:11,932
是添加
declarative net request 权限

189
00:12:15,235 --> 00:12:20,040
然后 我将使用 declarative net request 键
来添加一个规则集

190
00:12:24,912 --> 00:12:30,517
正在应用的规则位于
rules.json 文件中

191
00:12:30,551 --> 00:12:36,356
在这个文件中 我声明了一个规则
它阻止所有 URL 上的所有图像

192
00:12:36,390 --> 00:12:40,394
我们构建这个扩展
看看如何在 Safari 浏览器中应用此规则

193
00:12:43,664 --> 00:12:47,267
如你所见 此页面上的图像已经消失

194
00:12:47,301 --> 00:12:49,736
这正是我们所期望的

195
00:12:49,770 --> 00:12:54,608
这表明 Safari 浏览器已经成功地
应用了我们的内容屏蔽规则

196
00:12:54,641 --> 00:12:58,178
如果我浏览维基百科关于鱼的页面

197
00:12:58,212 --> 00:13:01,682
我会看到这个网站上的图片
也被阻止了

198
00:13:01,715 --> 00:13:05,352
但是假设我们想要更新我们的规则
来阻止除 webkit.org 博客

199
00:13:05,385 --> 00:13:09,022
页面外的所有页面上的图像

200
00:13:09,056 --> 00:13:12,993
使用 declarative net request 的
更新 API 之一

201
00:13:13,026 --> 00:13:16,496
我们可以做到这一点

202
00:13:16,530 --> 00:13:20,067
让我们回到 Xcode 并进行一些调整

203
00:13:20,100 --> 00:13:22,002
在 popup.js 文件中

204
00:13:22,035 --> 00:13:25,806
我将声明一个函数来更新
我们的内容阻止规则

205
00:13:28,275 --> 00:13:33,547
我将把规则设置为允许在
webkit.org/blog-files 页面上显示图像

206
00:13:33,580 --> 00:13:39,987
然后 我将使用 updateSessionRules API
将此规则添加到我们的规则集

207
00:13:40,020 --> 00:13:44,725
最后 我将构建扩展并在
Safari 浏览器中测试所做的更改

208
00:13:48,462 --> 00:13:52,099
如你所见
此博客文章中的图片已加载

209
00:13:52,132 --> 00:13:56,370
表明我们允许此站点上
显示图片的新规则已生效

210
00:13:56,403 --> 00:13:58,605
如果我去维基百科网站

211
00:13:58,639 --> 00:14:01,942
我们会看到这个页面上的
图像仍然被屏蔽

212
00:14:01,975 --> 00:14:05,579
这表明新规则没有应用到这个页面

213
00:14:05,612 --> 00:14:08,549
以上就是使用新的
eclarative net request API

214
00:14:08,582 --> 00:14:11,018
来更新内容阻止规则的方法

215
00:14:12,219 --> 00:14:17,024
现在 我们看看你的扩展
如何与网页进行通信

216
00:14:17,057 --> 00:14:20,994
如果用户启用了你的扩展程序

217
00:14:21,028 --> 00:14:24,431
这个很棒的功能允许网站
创建自定义行为

218
00:14:24,464 --> 00:14:28,535
该 API 称为外部可连接

219
00:14:28,569 --> 00:14:32,940
要想使用它
你需要在 Manifest 中声明匹配模式

220
00:14:32,973 --> 00:14:37,344
这些匹配模式决定哪些页面
可以与你的扩展通信

221
00:14:39,313 --> 00:14:43,250
需要注意的重要一点是
该功能仅在

222
00:14:43,283 --> 00:14:45,986
使用浏览器名称空间时有效

223
00:14:46,019 --> 00:14:50,324
最后 用户必须授予你对页面的
扩展访问权限

224
00:14:50,357 --> 00:14:54,628
然后才能发送或接收消息

225
00:14:54,661 --> 00:14:59,433
让我们来看看为了使用这个功能
而在 web 页面中添加的代码

226
00:14:59,466 --> 00:15:02,703
首先 你需要获取 extensionID

227
00:15:02,736 --> 00:15:04,905
它是此格式的扩展包标识符

228
00:15:04,938 --> 00:15:08,175
和团队标识符

229
00:15:08,208 --> 00:15:11,979
你可以在 developer.apple.com 上的
帐户设置的

230
00:15:12,012 --> 00:15:14,982
会员选项中找到你的团队标识符

231
00:15:15,015 --> 00:15:21,455
然后 你将使用发送消息 API
将消息发布到扩展程序

232
00:15:21,488 --> 00:15:24,391
你可以通过传递函数来处理

233
00:15:24,424 --> 00:15:27,294
从扩展接收到的响应

234
00:15:27,327 --> 00:15:30,063
现在让我们看一下你的扩展程序

235
00:15:30,097 --> 00:15:32,199
必须接收消息的代码

236
00:15:32,232 --> 00:15:34,768
你的扩展可以通过监听
onMessageExternal 事件

237
00:15:34,801 --> 00:15:38,672
接收来自网页的消息

238
00:15:38,705 --> 00:15:41,675
扩展可以使用传递给
事件监听器的方法

239
00:15:41,708 --> 00:15:45,045
将消息发送回网页

240
00:15:45,078 --> 00:15:49,383
因为不同的浏览器有
不同的扩展 web 存储

241
00:15:49,416 --> 00:15:52,252
扩展可以有许多不同的标识符

242
00:15:52,286 --> 00:15:55,622
因此 你需要确定要使用

243
00:15:55,656 --> 00:15:58,692
正确的 以确保正在
向 Safari 浏览器网络扩展发送消息

244
00:15:58,725 --> 00:16:01,528
而不是 Chrome 或 Edge 扩展

245
00:16:01,562 --> 00:16:07,167
为此 你可以使用
browser.runtime.sendMessage API

246
00:16:07,201 --> 00:16:10,704
并调用 Promise.all

247
00:16:10,737 --> 00:16:16,143
接下来 让我们看一些示例代码
来帮助你执行此操作

248
00:16:16,176 --> 00:16:19,379
在网页上 你可以通过多个扩展名

249
00:16:19,413 --> 00:16:21,715
广播多条消息

250
00:16:21,748 --> 00:16:24,751
会从扩展中得到确切的响应

251
00:16:24,785 --> 00:16:30,791
这会让你知道使用哪个
扩展 ID 来进行进一步的通信

252
00:16:30,824 --> 00:16:36,363
在这里 我有一个名为
determineExtensionID 的函数

253
00:16:36,396 --> 00:16:39,066
此函数向扩展发送消息

254
00:16:39,099 --> 00:16:43,370
通过使用
browser.runtime.sendMessage API

255
00:16:43,403 --> 00:16:46,173
如果你有多个 ID 并且想确定

256
00:16:46,206 --> 00:16:50,077
要使用的正确 ID
则可以使用 Promise.all

257
00:16:50,110 --> 00:16:55,249
进行多次调用
使用确定扩展 ID 函数

258
00:16:55,282 --> 00:16:59,386
Promise.all 接受一个 Promise 数组
然后返回一个

259
00:16:59,419 --> 00:17:03,223
带有所有已解析值数组的 Promise

260
00:17:03,257 --> 00:17:08,195
你可以使用此数组
来查找用户已安装的扩展

261
00:17:08,228 --> 00:17:10,364
在扩展程序的后台页面中

262
00:17:10,397 --> 00:17:14,334
你需要收听来自网页的消息

263
00:17:14,368 --> 00:17:17,304
当你收到消息时
需要发回一条消息

264
00:17:17,337 --> 00:17:20,874
告诉网页你的扩展程序已安装

265
00:17:20,908 --> 00:17:24,244
这就是使用新的
externally_connectable API

266
00:17:24,278 --> 00:17:28,081
来允许你的扩展程序
与网页通信的方式

267
00:17:28,115 --> 00:17:31,251
我们更新的下一个功能
是我个人最喜欢的

268
00:17:31,285 --> 00:17:33,420
无限存储

269
00:17:33,453 --> 00:17:37,824
我很高兴地宣布
unlimitedStorage 实际上是无限的

270
00:17:37,858 --> 00:17:41,328
鉴于你们对这个功能的要求很高

271
00:17:41,361 --> 00:17:46,567
我们很高兴地分享你的扩展程序
将不再有 10 MB 的配额

272
00:17:46,600 --> 00:17:50,404
而是可以随意使用尽可能多的数据

273
00:17:50,437 --> 00:17:52,773
虽然 重要的是要注意

274
00:17:52,806 --> 00:17:55,976
用户可以在任何给定的时间

275
00:17:56,009 --> 00:17:59,313
清除数据正在使用的扩展

276
00:17:59,346 --> 00:18:02,616
因此 请确保只存储严格必要的数据

277
00:18:02,649 --> 00:18:06,386
这样用户就不会倾向于
清除你的数据

278
00:18:06,420 --> 00:18:10,557
只需 storage
和 unlimitedStorage 权限

279
00:18:10,591 --> 00:18:14,361
在 Manifest 中声明就可以了

280
00:18:14,394 --> 00:18:18,999
以上就是我们去年
为 Web 扩展更新的所有 API

281
00:18:19,032 --> 00:18:23,470
最后 让我们谈谈一个新功能
它可以让你的用户

282
00:18:23,504 --> 00:18:27,274
轻松地在他们的所有设备上
获取你的扩展程序

283
00:18:27,307 --> 00:18:33,480
在 Safari 16 中 我们创造了
使用扩展程序更加无缝的体验

284
00:18:33,514 --> 00:18:37,184
如果用户在他们的
一台设备上打开你的扩展程序

285
00:18:37,217 --> 00:18:40,821
它将在他们的所有设备上打开

286
00:18:40,854 --> 00:18:46,927
最重要的是 我们使
下载扩展程序的过程变得更加简单

287
00:18:46,960 --> 00:18:49,129
让我们看看这是如何工作的

288
00:18:49,162 --> 00:18:53,901
假设用户在他们的 Mac 上
启用了你的扩展之一

289
00:18:53,934 --> 00:18:57,404
在他们任何其他设备上的
Extension Setting 中

290
00:18:57,437 --> 00:19:00,440
可以选择下载你的扩展程序

291
00:19:00,474 --> 00:19:03,510
下载后 在它们的设备上

292
00:19:03,544 --> 00:19:07,781
会自动启用
从而改善它们的用户体验

293
00:19:07,814 --> 00:19:10,851
现在 让我们深入了解
如何为 Web 扩展

294
00:19:10,884 --> 00:19:13,487
和内容拦截器进行设置

295
00:19:13,520 --> 00:19:17,925
首先 我们建议你提交到 App Store 时
列出适用于 iOS

296
00:19:17,958 --> 00:19:22,329
iPadOS 和 macOS 的扩展程序

297
00:19:22,362 --> 00:19:28,001
这样 你的扩展程序
将可在所有用户的设备上使用

298
00:19:28,035 --> 00:19:31,839
然后 为了让你的扩展程序
在他们的设备上同步

299
00:19:31,872 --> 00:19:35,375
你需要使用以下两种方法之一

300
00:19:35,409 --> 00:19:37,945
最简单和推荐的方法

301
00:19:37,978 --> 00:19:41,782
就是采用通用购买

302
00:19:41,815 --> 00:19:46,653
通用购买允许用户
在所有平台上享受你的扩展

303
00:19:46,687 --> 00:19:49,690
只需购买一次

304
00:19:49,723 --> 00:19:52,826
如果使用此方法 则一切就绪

305
00:19:52,860 --> 00:19:55,128
你的用户将在
下载你的扩展程序一次后

306
00:19:55,162 --> 00:19:58,999
获得我展示的所有功能

307
00:19:59,032 --> 00:20:00,934
要设置通用购买

308
00:20:00,968 --> 00:20:03,704
你需要在扩展程序中
使用单个捆绑标识符

309
00:20:03,737 --> 00:20:08,242
以便它可以关联
App Store Connect 中的

310
00:20:08,275 --> 00:20:11,411
同一个应用记录

311
00:20:11,445 --> 00:20:14,014
有关如何执行此操作的更多信息

312
00:20:14,047 --> 00:20:17,551
查看我们的文档
了解如何为你的扩展

313
00:20:17,584 --> 00:20:19,353
设置通用购买

314
00:20:19,386 --> 00:20:22,022
但如果你选择不设置通用购买

315
00:20:22,055 --> 00:20:24,491
可以手动链接你的 App

316
00:20:24,525 --> 00:20:29,162
为此 你将使用 Xcode 在信息列表中

317
00:20:29,196 --> 00:20:32,432
为你想要同步的 App
和扩展添加捆绑标识符

318
00:20:32,466 --> 00:20:36,503
要将你的 iOS app
和扩展程序与 macOS 同步

319
00:20:36,537 --> 00:20:40,407
你需要使用信息列表中的特定键

320
00:20:40,440 --> 00:20:44,178
你将把这个密钥
放在你的 macOS app 列表中

321
00:20:44,211 --> 00:20:48,215
以及 macOS 扩展列表中的这个密钥

322
00:20:48,248 --> 00:20:53,720
同样 你将遵循相同的过程
来同步 macOS app

323
00:20:53,754 --> 00:20:58,125
通过将此密钥添加到 iOS app 列表

324
00:20:58,158 --> 00:21:01,962
并将此密钥添加到 iOS 扩展列表

325
00:21:01,995 --> 00:21:04,364
让我们看看在 Xcode 中是如何工作的

326
00:21:04,398 --> 00:21:09,670
在 Xcode 中 我们需要做的第一件事
是更新每个目标的设置

327
00:21:09,703 --> 00:21:14,341
以包括我们想要同步的扩展
和 App 的包标识符

328
00:21:14,374 --> 00:21:18,712
我将首先在 iOS app 的信息列表中
添加相应的

329
00:21:18,745 --> 00:21:21,715
macOS app 的包标识符

330
00:21:24,051 --> 00:21:28,021
可以看到
我对 macOS app 做了相同的处理

331
00:21:28,055 --> 00:21:30,991
添加了 iOS app 包标识符

332
00:21:31,024 --> 00:21:37,497
同样 iOS 扩展也可以
添加 macOS 扩展包标识符

333
00:21:37,531 --> 00:21:40,133
最后 为 macOS 扩展

334
00:21:40,167 --> 00:21:43,871
添加 iOS 扩展包标识符

335
00:21:43,904 --> 00:21:46,874
这就是将你的应用
和扩展连接的简单之处

336
00:21:46,907 --> 00:21:50,043
这样你的用户
就可以在任何地方使用它们

337
00:21:50,077 --> 00:21:54,314
总而言之 你可以让用户使用此功能

338
00:21:54,348 --> 00:21:57,384
通过设置通用购买

339
00:21:57,417 --> 00:22:04,491
或者在 Xcode 中为每 个iOS
和 macOS 应用和扩展添加捆绑标识符

340
00:22:04,525 --> 00:22:08,896
今天 我们讨论了 Manifest 版本 3

341
00:22:08,929 --> 00:22:10,664
我们更新的 API

342
00:22:10,697 --> 00:22:14,434
和跨多个设备同步扩展

343
00:22:14,468 --> 00:22:17,838
我希望你和我一样
对所有这些新功能感到兴奋

344
00:22:17,871 --> 00:22:20,174
用于 Safari Web 扩展

345
00:22:20,207 --> 00:22:24,244
敬请下载今天讲座的
示例代码项目

346
00:22:24,278 --> 00:22:28,315
并使用我们提供的这些 API

347
00:22:28,348 --> 00:22:30,951
接下来 我们很想知道你们的想法

348
00:22:30,984 --> 00:22:34,021
在 Safari Developer Forums 上
使用反馈助手提交错误

349
00:22:34,054 --> 00:22:37,057
或与我们聊天 以提供

350
00:22:37,090 --> 00:22:40,928
有关我们如何更好地
为你们开发扩展的反馈

351
00:22:40,961 --> 00:22:43,397
不 真的 我们想知道你们的想法

352
00:22:43,430 --> 00:22:46,400
考虑一下加入 WebExtensions 社区组

353
00:22:46,433 --> 00:22:49,236
来塑造 web 扩展的未来

354
00:22:49,269 --> 00:22:55,108
最后 看看我们在 WWDC 上
关于创建 web 检查器扩展的演示

355
00:22:55,142 --> 00:22:59,913
感谢收看本期讲座
祝你余下的 WWDC 之旅一切顺利

