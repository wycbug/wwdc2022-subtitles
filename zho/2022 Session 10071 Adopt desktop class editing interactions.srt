1
00:00:00,334 --> 00:00:06,340
[欢快的音乐]

2
00:00:12,112 --> 00:00:13,180
Andy: 大家好

3
00:00:13,213 --> 00:00:17,117
欢迎来到“Adopt desktop class
editing interactions”

4
00:00:17,150 --> 00:00:20,654
我是 Andy 一名 UIKit 框架工程师

5
00:00:20,687 --> 00:00:24,491
稍后我的同事 James 也会加入

6
00:00:24,525 --> 00:00:27,027
iPad 一直在不断优化

7
00:00:27,060 --> 00:00:32,366
但不会影响使其简单易用的交互

8
00:00:32,399 --> 00:00:36,670
在本视频中 大家将了解令人兴奋的
全新编辑交互工具

9
00:00:36,703 --> 00:00:41,642
使你们的应用程序变得桌面类

10
00:00:41,675 --> 00:00:48,282
首先 我将介绍一下新的编辑菜单
它在 iOS 16 中有了重大改进

11
00:00:49,283 --> 00:00:55,322
稍后 James 将深入探讨新系统的
查找和替换经验

12
00:00:55,355 --> 00:00:59,860
在iOS 16 中 编辑菜单
采用了一种全新的设计

13
00:00:59,893 --> 00:01:03,063
这种设计既熟悉又更具交互性

14
00:01:03,096 --> 00:01:05,799
并且更容易发现操作

15
00:01:06,733 --> 00:01:09,503
编辑菜单现在具有

16
00:01:09,536 --> 00:01:12,673
基于所有输入法的替代显示

17
00:01:12,706 --> 00:01:13,974
对于触摸交互

18
00:01:14,007 --> 00:01:17,811
编辑菜单仍然具有熟悉的紧凑外观

19
00:01:17,845 --> 00:01:20,013
但改进了调页行为

20
00:01:20,047 --> 00:01:23,483
使操作比以前更容易被发现

21
00:01:26,486 --> 00:01:29,423
通过妙控键盘或触控板

22
00:01:29,456 --> 00:01:33,160
在二次点击或右击时
会显示上下文菜单

23
00:01:33,193 --> 00:01:38,966
以获得更多桌面类体验

24
00:01:38,999 --> 00:01:45,072
同样 iPhone 上的触摸交互
也会显示新的编辑菜单

25
00:01:46,707 --> 00:01:48,809
对于 Mac Catalyst 应用程序

26
00:01:48,842 --> 00:01:53,647
它会提供 Mac 用户
熟悉的上下文菜单

27
00:01:53,680 --> 00:01:59,019
在 iOS 16 中 文本编辑菜单
集成新的数据探测器

28
00:01:59,052 --> 00:02:02,022
获得了重大提升

29
00:02:02,055 --> 00:02:06,126
这包括内联单元和货币转换

30
00:02:06,159 --> 00:02:07,728
以及根据

31
00:02:07,761 --> 00:02:13,467
所选文本显示上下文操作的
智能查找

32
00:02:13,500 --> 00:02:14,868
例如

33
00:02:14,902 --> 00:02:17,404
如果你在 Safari 浏览器中
选择一个地址

34
00:02:17,437 --> 00:02:19,406
那么你就会在
现有的编辑菜单操作之上

35
00:02:19,439 --> 00:02:22,843
获得基于地图的操作

36
00:02:22,876 --> 00:02:27,114
比如 Get Directions
或 Open in Maps

37
00:02:27,147 --> 00:02:31,118
最棒的是 不需要采用

38
00:02:31,151 --> 00:02:34,955
这些功能在每个
文本编辑菜单中都可用

39
00:02:34,988 --> 00:02:40,794
包括文本交互视图 WebKit
和 Safari 以及 PDFKit

40
00:02:42,996 --> 00:02:48,302
要在文本视图的菜单中插入操作
执行新的 TextViewDelegate 方法

41
00:02:48,335 --> 00:02:51,705
用系统提供的操作
为给定范围内的文本

42
00:02:51,738 --> 00:02:55,008
自定义显示菜单

43
00:02:55,042 --> 00:02:57,244
如果你不需要自定义任何内容

44
00:02:57,277 --> 00:03:01,415
请返回 nil 以获取标准系统菜单

45
00:03:01,448 --> 00:03:06,119
UITextFieldDelegate 和 UITextInput

46
00:03:06,153 --> 00:03:08,655
也有类似的方法来自定义菜单

47
00:03:08,689 --> 00:03:13,026
请注意 现在在 iOS 16 中已不支持

48
00:03:13,060 --> 00:03:15,896
使用 UIMenuController
来插入菜单项

49
00:03:15,929 --> 00:03:18,365
你们应该使用新方法将菜单元素

50
00:03:18,398 --> 00:03:21,802
添加到你的文本编辑菜单中

51
00:03:21,835 --> 00:03:26,673
因为我们的目标是
不再需要 menu controller

52
00:03:27,574 --> 00:03:31,979
这是一个带有一些自定义操作的
文本视图示例

53
00:03:32,012 --> 00:03:35,182
当在某些文本选择上显示菜单时

54
00:03:35,215 --> 00:03:38,452
系统建议的操作后面会显示自定义的

55
00:03:38,485 --> 00:03:41,622
高亮和插入图片

56
00:03:41,655 --> 00:03:47,661
选择高亮显示操作
将按预期对文本执行高亮显示

57
00:03:47,694 --> 00:03:52,332
接下来 当菜单没有任何文本选择

58
00:03:52,366 --> 00:03:54,568
而没有突出显示任何内容时

59
00:03:54,601 --> 00:03:57,404
菜单只会在系统建议的操作之后

60
00:03:57,437 --> 00:04:01,008
显示插入照片操作

61
00:04:01,041 --> 00:04:05,612
我将向你们展示如何
使用新的 API 添加这些操作

62
00:04:05,646 --> 00:04:09,616
要将操作插入到动态菜单中

63
00:04:09,650 --> 00:04:12,753
执行 UITextViewDelegate 方法

64
00:04:12,786 --> 00:04:17,758
textView editMenuForTextInRange:
suggestedActions

65
00:04:17,791 --> 00:04:21,228
在这个例子中
我只想在有选中文本时

66
00:04:21,261 --> 00:04:23,363
添加高亮显示动作

67
00:04:23,397 --> 00:04:27,467
所以我可以
通过这个方法动态添加动作

68
00:04:29,803 --> 00:04:32,906
Insert Photo 操作始终有效

69
00:04:32,940 --> 00:04:39,847
所以我可以将它添加到数组中
总是在菜单中显示

70
00:04:39,880 --> 00:04:44,551
最后 我将把我的操作
添加到系统建议的操作中

71
00:04:44,585 --> 00:04:49,990
其中包括剪切 复制和粘贴等项
然后返回菜单

72
00:04:50,023 --> 00:04:54,361
就是这样

73
00:04:54,394 --> 00:05:01,001
UIEditMenuInteraction 是支持
新编辑菜单的 UIInteraction API

74
00:05:02,002 --> 00:05:04,471
此交互允许你们以编程方式
基于自己的手势

75
00:05:04,505 --> 00:05:07,541
在文本视图之外

76
00:05:07,574 --> 00:05:09,977
显示轻量级编辑菜单

77
00:05:10,010 --> 00:05:15,782
并支持在二次单击时
显示上下文菜单

78
00:05:15,816 --> 00:05:20,821
在 iOS 16 中 UIMenuController
及其所有相关 API

79
00:05:20,854 --> 00:05:24,124
都被新的编辑菜单交互所取代

80
00:05:25,425 --> 00:05:28,095
要从头开始呈现编辑菜单

81
00:05:28,128 --> 00:05:33,700
首先 创建交互 并将其添加到视图中

82
00:05:33,734 --> 00:05:39,006
接下来 配置一个手势识别器
来显示菜单

83
00:05:39,039 --> 00:05:42,009
为确保菜单仅在直接触控

84
00:05:42,042 --> 00:05:44,678
而不是间接光标单击时出现

85
00:05:44,711 --> 00:05:46,947
请确保将手势识别器的
allowedTouchTypes 属性

86
00:05:46,980 --> 00:05:50,784
设置为仅支持直接触控

87
00:05:50,817 --> 00:05:56,290
然后 将手势识别器添加到视图中

88
00:05:56,323 --> 00:05:59,626
最后 当手势识别器触发时

89
00:05:59,660 --> 00:06:02,796
确定手势所在的位置

90
00:06:02,829 --> 00:06:06,066
是否有可以显示菜单的内容

91
00:06:06,099 --> 00:06:08,936
然后 在手势位置创建一个

92
00:06:08,969 --> 00:06:12,773
带有源点的编辑菜单配置

93
00:06:12,806 --> 00:06:16,009
源点用于确定交互视图中

94
00:06:16,043 --> 00:06:20,180
要显示在菜单中的可执行操作

95
00:06:22,316 --> 00:06:26,453
配置完成后 调用
presentEditMenuWithConfiguration

96
00:06:26,486 --> 00:06:28,789
来显示菜单

97
00:06:30,891 --> 00:06:35,295
当我右键单击所选的
Jello there 视图中的任意位置时

98
00:06:35,329 --> 00:06:38,832
上下文菜单显示了 App 内容的

99
00:06:38,866 --> 00:06:41,535
可执行系统操作

100
00:06:41,568 --> 00:06:44,838
甚至 当我点击选中的视图时

101
00:06:44,872 --> 00:06:48,041
编辑菜单就会出现在我的触控位置

102
00:06:48,075 --> 00:06:52,012
显示与上下文菜单相同的操作

103
00:06:52,045 --> 00:06:55,682
这很好 但还能更好

104
00:06:55,716 --> 00:06:58,752
虽然菜单出现在触控的地方很好

105
00:06:58,785 --> 00:07:02,422
但它实际上阻止了所选视图的内容

106
00:07:02,456 --> 00:07:07,127
此外 我想在菜单中插入
一个新的 Duplicate 操作

107
00:07:07,160 --> 00:07:10,397
这不是系统默认操作

108
00:07:10,430 --> 00:07:12,900
我们返回修改一下

109
00:07:12,933 --> 00:07:15,836
要在选定的视图周围显示菜单

110
00:07:15,869 --> 00:07:17,571
实施委托方法

111
00:07:17,604 --> 00:07:22,176
editMenuInteraction:
targetRectForConfiguration:

112
00:07:22,209 --> 00:07:27,014
这个方法返回一个 CGRect
用于确定从哪里显示菜单

113
00:07:27,047 --> 00:07:32,819
并且位于交互视图的坐标空间中

114
00:07:32,853 --> 00:07:37,958
如果没有实施该方法
或提供了一个空的 CGRect

115
00:07:37,991 --> 00:07:42,896
则菜单将从配置的源点显示

116
00:07:42,930 --> 00:07:46,867
在这种情况下
为防止菜单遮挡所选视图

117
00:07:46,900 --> 00:07:49,403
返回它的参照系

118
00:07:49,436 --> 00:07:52,272
接下来 要添加 Duplicate 操作

119
00:07:52,306 --> 00:07:57,578
执行 editMenuInteraction:
menuForConfiguration:suggestedActions:

120
00:07:57,611 --> 00:08:01,515
并在系统建议的操作之后
添加自定义操作

121
00:08:01,548 --> 00:08:06,587
类似于之前将操作插入
文本视图菜单的方式

122
00:08:07,588 --> 00:08:10,791
现在 当我再次点击所选视图时

123
00:08:10,824 --> 00:08:15,562
菜单不再遮挡 Jello there
而是围绕它显示

124
00:08:15,596 --> 00:08:19,900
出现菜单时还包括新的
Duplicate 操作

125
00:08:19,933 --> 00:08:22,669
只需要几行代码

126
00:08:22,703 --> 00:08:23,871
棒极了

127
00:08:25,906 --> 00:08:27,574
对于 Mac Catalyst 应用程序

128
00:08:27,608 --> 00:08:30,644
编辑菜单连接到熟悉的上下文菜单

129
00:08:30,677 --> 00:08:32,479
用户在 Mac 上

130
00:08:32,513 --> 00:08:36,216
右键单击交互视图时就会看到

131
00:08:36,250 --> 00:08:38,719
对于 iPad 惯用的
Mac Catalyst 应用程序

132
00:08:38,752 --> 00:08:44,291
以编程方式呈现的编辑菜单
也可连接到上下文菜单

133
00:08:44,324 --> 00:08:48,262
请注意 Mac idiom 应用程序
不支持编辑菜单的

134
00:08:48,295 --> 00:08:53,734
程序化显示

135
00:08:53,767 --> 00:08:57,437
为了在不同的演示风格之间
提供无缝衔接

136
00:08:57,471 --> 00:09:02,976
UIEditMenuInteraction 构建在
UIMenuElement 系列 API 之上

137
00:09:03,010 --> 00:09:07,014
它们提供了比之前更大的灵活性
和可定制性

138
00:09:07,047 --> 00:09:10,651
包括对子菜单和图像的支持

139
00:09:10,684 --> 00:09:13,086
如果这是你们第一次使用 UIMenus

140
00:09:13,120 --> 00:09:19,993
请观看“Modernizing Your UI for iOS 13”
以了解有关菜单和操作的更多信息

141
00:09:20,027 --> 00:09:22,930
建立在 UIMenuElement 之上
还意味着

142
00:09:22,963 --> 00:09:26,633
编辑菜单可访问已经支持它的

143
00:09:26,667 --> 00:09:31,238
各种 API 比如 UIMenuSystem

144
00:09:31,271 --> 00:09:36,176
编辑菜单使用现有的
UIMenuSystem.context 系统

145
00:09:36,210 --> 00:09:38,445
来构建其菜单

146
00:09:38,478 --> 00:09:40,614
要了解更多关于菜单生成器的信息

147
00:09:40,647 --> 00:09:45,219
以及更深入地了解
响应链遍历和命令验证

148
00:09:45,252 --> 00:09:50,290
请观看“Taking your iPad apps
to the next level”

149
00:09:51,892 --> 00:09:57,598
说到菜单 iOS 16 中的 UIMenu
做了几项新的改进

150
00:09:57,631 --> 00:10:00,701
UIMenu 现在有一个首选元素大小属性

151
00:10:00,734 --> 00:10:06,106
可以在上下文菜单的
不同布局之间进行选择

152
00:10:06,139 --> 00:10:10,811
较小的尺寸使菜单具有
更紧凑的并排外观

153
00:10:10,844 --> 00:10:15,148
在一行中可容纳更多操作

154
00:10:15,182 --> 00:10:19,086
中等大小也以并排的外观显示操作

155
00:10:19,119 --> 00:10:21,388
但有更多的细节

156
00:10:21,421 --> 00:10:26,894
文本编辑菜单用它来
显示标准编辑菜单

157
00:10:26,927 --> 00:10:30,764
最后 大单元尺寸为菜单提供了默认的

158
00:10:30,797 --> 00:10:34,334
全屏宽度外观

159
00:10:34,368 --> 00:10:38,005
此外 UIMenuElement 上
有一个新的

160
00:10:38,038 --> 00:10:41,074
keepMenuPresented 属性
以在执行操作后

161
00:10:41,108 --> 00:10:44,211
保持显示菜单

162
00:10:44,244 --> 00:10:48,048
使用此属性可允许多次执行操作

163
00:10:48,081 --> 00:10:50,984
而无需重新显示菜单

164
00:10:51,018 --> 00:10:55,189
这些只是新编辑菜单的冰山一角

165
00:10:55,222 --> 00:11:00,627
通过自定义文本编辑菜单
扩展文本编辑功能

166
00:11:00,661 --> 00:11:03,463
确保你们的操作具有标题和图像

167
00:11:03,497 --> 00:11:08,468
以便菜单在不同的显示样式中
看起来是完整的

168
00:11:08,502 --> 00:11:12,472
最重要的是 采用新的
UIEditMenuInteraction

169
00:11:12,506 --> 00:11:16,710
来获得更好的可定制性
并提高跨平台

170
00:11:16,743 --> 00:11:19,046
以及不同输入法的一致性

171
00:11:19,079 --> 00:11:24,084
第一步添加
对新编辑菜单的支持是不错的

172
00:11:24,117 --> 00:11:27,154
为了完成桌面类编辑体验

173
00:11:27,187 --> 00:11:29,289
我将让 James 来谈谈

174
00:11:29,323 --> 00:11:32,492
新系统的查找和替换体验

175
00:11:34,194 --> 00:11:37,197
James Magahern: 啊 它在那儿

176
00:11:37,231 --> 00:11:41,201
大家好 我是 James Magahern
一名 UIKit 工程师

177
00:11:41,235 --> 00:11:44,905
我今天要讲的是查找和替换

178
00:11:44,938 --> 00:11:46,707
在 iOS 16 中

179
00:11:46,740 --> 00:11:51,912
我们推出了一个新的 UI 组件
以查找和替换应用程序中的文本

180
00:11:51,945 --> 00:11:53,881
它是整个系统的标准配置

181
00:11:53,914 --> 00:11:56,283
包含在许多内置应用程序中

182
00:11:56,316 --> 00:11:58,552
允许用户使用更常用的编辑快捷方式

183
00:11:58,585 --> 00:12:02,322
来锻炼他们的肌肉记忆

184
00:12:02,356 --> 00:12:06,493
这是在 iPad 上运行的新发现面板

185
00:12:06,527 --> 00:12:10,464
当连接了硬件键盘时 我们将自动从

186
00:12:10,497 --> 00:12:12,766
与快捷栏的浮动内联

187
00:12:12,799 --> 00:12:19,206
过渡到没有硬件键盘时
静止于软件键盘顶部

188
00:12:19,239 --> 00:12:22,543
在 iPhone 上
我们将使用更紧凑的布局

189
00:12:22,576 --> 00:12:25,779
来适应更小的屏幕尺寸

190
00:12:25,812 --> 00:12:29,316
自动退出
最小化和 keyboard avoidance

191
00:12:29,349 --> 00:12:33,387
均由系统负责

192
00:12:33,420 --> 00:12:35,222
在 Mac 上运行 App 时

193
00:12:35,255 --> 00:12:38,192
我们将显示与内容内联的查找面板

194
00:12:38,225 --> 00:12:41,128
就像 AppKit 的查找栏一样

195
00:12:41,161 --> 00:12:44,965
并使用用户期望在 Mac 上的熟悉布局

196
00:12:46,466 --> 00:12:51,471
如果你们使用 UITextView
WKWebView 或 PDFViews

197
00:12:51,505 --> 00:12:54,408
在应用程序中显示文本内容

198
00:12:54,441 --> 00:12:59,847
你们所需要做的就是在
内置查找交互中

199
00:12:59,880 --> 00:13:02,182
将 isFindInteractionEnabled
设置为真

200
00:13:02,216 --> 00:13:04,551
很简单吧

201
00:13:04,585 --> 00:13:08,922
另外 如果你们想要使用 QuickLook
来显示文本内容

202
00:13:08,956 --> 00:13:12,626
这将无需你的任何操作就可用

203
00:13:14,795 --> 00:13:16,597
使用硬件键盘

204
00:13:16,630 --> 00:13:20,534
所有标准系统快捷方式
例如 command+F 用于查找

205
00:13:20,567 --> 00:13:22,269
command+G 用于查找下一个

206
00:13:22,302 --> 00:13:28,442
command+shift+G 用于查找上一个等
都可以正常运行

207
00:13:28,475 --> 00:13:33,213
当在 Mac 上运行时
可以通过菜单栏访问这些命令

208
00:13:33,247 --> 00:13:36,850
你所需要做的就是确保
显示内容的视图

209
00:13:36,884 --> 00:13:40,521
能够并且确实成为第一响应者

210
00:13:40,554 --> 00:13:43,190
对于不使用硬件键盘的用户

211
00:13:43,223 --> 00:13:46,293
可以通过 presentFindNavigator

212
00:13:46,326 --> 00:13:51,732
在包含的查找交互属性上
以编程方式调用查找交互

213
00:13:51,765 --> 00:13:53,667
例如 通过导航条项目使用

214
00:13:53,700 --> 00:13:56,703
可能是个不错的方法

215
00:13:58,172 --> 00:14:02,176
在 Mac 上运行时
还有几件事需要记住

216
00:14:02,209 --> 00:14:05,379
例如 在 iOS 上 查找面板

217
00:14:05,412 --> 00:14:09,316
显示为软件键盘或快捷栏的一部分

218
00:14:09,349 --> 00:14:13,554
在 Mac 上
我们会将其显示在你的内容中

219
00:14:13,587 --> 00:14:16,590
如果你们在滚动视图上安装查找交互

220
00:14:16,623 --> 00:14:21,195
我们将自动调整内容插入
以适应查找面板

221
00:14:21,228 --> 00:14:25,866
并自动适应特征集合的更改

222
00:14:25,899 --> 00:14:28,202
否则 你应该确保在
macOS 上的 UI 中

223
00:14:28,235 --> 00:14:31,805
有足够的空间来存储查找面板

224
00:14:33,140 --> 00:14:38,679
此外 点击放大镜图标时
会显示一个包含一组

225
00:14:38,712 --> 00:14:41,915
标准查找选项的菜单

226
00:14:41,949 --> 00:14:44,451
你可以使用 UIFindInteraction 上的

227
00:14:44,484 --> 00:14:49,857
optionsMenuProvider 属性
来定制该菜单的内容

228
00:14:49,890 --> 00:14:53,594
这对于实现自定义更为重要

229
00:14:53,627 --> 00:14:55,863
如果你在使用的是我之前提到的

230
00:14:55,896 --> 00:14:59,633
一个内建视图 那么就是这些了

231
00:14:59,666 --> 00:15:02,870
如果你的 App 通过其他方式
显示文本内容

232
00:15:02,903 --> 00:15:08,075
比如完全自定义视图或列表视图
如这里所示

233
00:15:08,108 --> 00:15:11,478
那么你仍然可以
将查找交互添加到应用中

234
00:15:11,512 --> 00:15:12,946
我来展示一下怎么添加

235
00:15:14,515 --> 00:15:16,717
关于查找交互的好消息是

236
00:15:16,750 --> 00:15:21,021
你可以将其安装在任意视图上

237
00:15:21,054 --> 00:15:24,892
如果你的 App 中
有现成的查找和替换实现

238
00:15:24,925 --> 00:15:28,061
则可以快速过渡到 UIFindInteraction

239
00:15:28,095 --> 00:15:32,266
并利用系统的 UI

240
00:15:32,299 --> 00:15:37,037
如果你们还没有现成的
用于自定义视图的查找实现

241
00:15:37,070 --> 00:15:39,339
那么上手仍然非常容易

242
00:15:39,373 --> 00:15:43,677
特别是如果你们已经实现了
UITextInput 协议

243
00:15:43,710 --> 00:15:46,246
以便与系统键盘一起工作

244
00:15:46,280 --> 00:15:51,084
以下是 UIFindInteraction
如何与自定义视图一起使用

245
00:15:51,118 --> 00:15:55,355
在自定义视图上安装
UIFindInteraction 后

246
00:15:55,389 --> 00:15:58,892
设置查找交互委托

247
00:15:58,926 --> 00:16:01,995
查找交互委托 除了接收通知

248
00:16:02,029 --> 00:16:05,499
查找讲座何时开始或结束

249
00:16:05,532 --> 00:16:10,537
还负责处理 UIFindSession

250
00:16:10,571 --> 00:16:14,107
UIFindSession 是一个抽象基类

251
00:16:14,141 --> 00:16:17,811
它压缩了给定讲座的所有状态

252
00:16:17,845 --> 00:16:21,582
如当前高亮显示的结果

253
00:16:21,615 --> 00:16:25,352
它还为从 UI 请求的所有操作提供服务

254
00:16:25,385 --> 00:16:30,090
例如“go to the next result”
或 “search for this string”

255
00:16:30,123 --> 00:16:32,826
如果你想自己管理所有这些状态

256
00:16:32,860 --> 00:16:37,164
那么你可以从查找交互委托中选择

257
00:16:37,197 --> 00:16:39,032
提供 UIFindSession 的子类

258
00:16:40,601 --> 00:16:43,770
如果你的 App 中已经有了一个

259
00:16:43,804 --> 00:16:46,573
现成的查找和替换实现

260
00:16:46,607 --> 00:16:50,043
并且希望将其连接到系统 UI
这是个不错的选择

261
00:16:50,077 --> 00:16:52,513
另外 让系统为你处理状态

262
00:16:52,546 --> 00:16:55,482
将是个更好的主意

263
00:16:55,516 --> 00:16:59,186
而不是在
任何封装显示文档内容的类上

264
00:16:59,219 --> 00:17:05,259
采用 UITextSearching 协议

265
00:17:05,292 --> 00:17:09,897
为此 你将返回一个
UITextSearchingFindSession

266
00:17:09,930 --> 00:17:12,733
并将它与你的文档类连接

267
00:17:13,534 --> 00:17:16,403
如果你还没有
自定义视图的查找实现

268
00:17:16,436 --> 00:17:19,640
这是最好的选择

269
00:17:19,673 --> 00:17:21,475
以下是如何在代码中执行此操作

270
00:17:22,709 --> 00:17:25,546
这个例子有一个自定义文档类

271
00:17:25,579 --> 00:17:30,584
和一个显示该文档的自定义视图

272
00:17:30,617 --> 00:17:34,421
UIFindInteraction
将安装在这个视图上

273
00:17:34,454 --> 00:17:38,458
UITextSearchingFindSession
将作为 searchable object

274
00:17:38,492 --> 00:17:41,995
随该文档一起提供

275
00:17:42,029 --> 00:17:45,299
确保你的视图控制器或自定义视图

276
00:17:45,332 --> 00:17:50,537
可以成为第一响应者
这样键盘快捷方式就能正常工作

277
00:17:51,872 --> 00:17:55,042
创建查找交互 并提供讲座委托

278
00:17:55,075 --> 00:17:57,311
来处理查找讲座

279
00:17:57,344 --> 00:18:01,181
这里 视图控制器就是讲座委托

280
00:18:01,215 --> 00:18:04,718
然后 当交互询问查找讲座时

281
00:18:04,751 --> 00:18:08,088
只需返回一个新的
UITextSearchingFindSession

282
00:18:08,121 --> 00:18:12,426
将你的文档提供为可搜索对象

283
00:18:12,459 --> 00:18:15,062
当然 你需要确保自己的文档类

284
00:18:15,095 --> 00:18:17,898
符合 UITextSearching 协议

285
00:18:19,867 --> 00:18:23,237
实现 UITextSearching 协议的类

286
00:18:23,270 --> 00:18:27,975
负责在文档中实际查找文本

287
00:18:28,008 --> 00:18:31,111
系统将调用 performTextSearch

288
00:18:31,144 --> 00:18:36,750
并为你提供一个聚合器对象
你可以向其提供结果

289
00:18:36,783 --> 00:18:42,823
聚合器与 UITextRange 一起使用
以表示文档中的结果

290
00:18:42,856 --> 00:18:46,293
这是另一个抽象类 你可以用它

291
00:18:46,326 --> 00:18:51,765
来封装任何对你如何
存储文本有意义的数据

292
00:18:51,798 --> 00:18:54,535
例如 这可以代表
使用 WebKit 呈现文本的

293
00:18:54,568 --> 00:18:58,405
客户端的 DOM 范围

294
00:18:58,438 --> 00:19:00,507
聚合器也是线程安全的

295
00:19:00,541 --> 00:19:04,545
因此你们可以在后台线程上
为它提供结果

296
00:19:04,578 --> 00:19:06,780
最后 由于发现交互

297
00:19:06,813 --> 00:19:11,018
不知道如何使用自定义视图显示结果

298
00:19:11,051 --> 00:19:16,490
因此你还需要在调用 decorate 时
为给定样式装饰结果

299
00:19:16,523 --> 00:19:19,393
UITextSearching 查找讲座和协议

300
00:19:19,426 --> 00:19:23,830
还支持使用相同的交互
跨多个可见文档

301
00:19:23,864 --> 00:19:25,699
进行多路复用

302
00:19:26,567 --> 00:19:28,936
换句话说 如果你的 App

303
00:19:28,969 --> 00:19:32,439
以类似于 Mail 的对话视图的方式
显示内容

304
00:19:32,472 --> 00:19:36,343
在这种情况下
每个 document 都是一个邮件消息

305
00:19:36,376 --> 00:19:41,381
你可以在根级集合视图上
安装单个查找交互

306
00:19:41,415 --> 00:19:45,719
同时在所有文档中执行查找

307
00:19:45,752 --> 00:19:52,059
从而使你的用户可以轻松地
在不同文档结果之间跳转

308
00:19:52,092 --> 00:19:57,331
这就是开始使用 iOS 16 中
新的查找交互所需的全部内容

309
00:19:57,364 --> 00:20:00,334
对于显示大量文本内容的系统视图

310
00:20:00,367 --> 00:20:04,371
请确保启用
isFindInteractionEnabled

311
00:20:04,404 --> 00:20:08,709
将现有的查找实现移动到
UIFindInteraction

312
00:20:08,742 --> 00:20:13,080
如果你的 App 中还没有文本搜索

313
00:20:13,113 --> 00:20:16,383
请执行 UITextSearching
并使用 UITextSearchingFindSession

314
00:20:16,416 --> 00:20:19,286
最后 检查并确保你的 App 中

315
00:20:19,319 --> 00:20:22,723
没有任何冲突的键盘快捷键

316
00:20:22,756 --> 00:20:27,761
这就是为 iOS 16 刷新你的
App 的编辑交互

317
00:20:27,794 --> 00:20:30,764
并使它们成为
真正的桌面类所需要做的

318
00:20:31,498 --> 00:20:34,535
在你的 App 中尝试新的文本编辑菜单

319
00:20:34,568 --> 00:20:38,272
并采用自定义 UI 的编辑菜单交互

320
00:20:38,305 --> 00:20:42,843
通过使你的 App 的文本内容可搜索
来提高工作效率

321
00:20:42,876 --> 00:20:47,714
我期待着在你的 App 中
发现这些很棒的新功能

322
00:20:47,748 --> 00:20:52,286
感谢收看 一定要点赞 评论并订阅哦

323
00:20:52,319 --> 00:20:55,322
[欢快的音乐]

