1
00:00:00,334 --> 00:00:07,341
♪ ♪

2
00:00:09,309 --> 00:00:12,112
Eric Liang: 大家好 我是 Eric

3
00:00:12,145 --> 00:00:17,050
我很高兴可以为大家分享
如何为您的 Unity 游戏添加辅助功能

4
00:00:18,085 --> 00:00:22,723
辅助功能是为了让每个人都可以
使用我们的产品

5
00:00:22,756 --> 00:00:27,361
今天我们为 Unity 开发者们
提供的 Apple Accessibility 插件

6
00:00:27,394 --> 00:00:31,398
标志着我们向着无障碍游戏
又前进了一大步

7
00:00:31,431 --> 00:00:36,637
为了让游戏支持辅助功能
我们主要专注于三个 Apple 技术

8
00:00:37,738 --> 00:00:43,210
旁白 是一个帮助失明
或低视力用户的屏幕阅读器

9
00:00:43,243 --> 00:00:47,581
它可以朗读屏幕上的内容
用户也可以用自定义手势

10
00:00:47,614 --> 00:00:50,617
来与控件交互

11
00:00:51,985 --> 00:00:55,522
切换控制 让运动控制能力较弱的用户

12
00:00:55,556 --> 00:00:59,593
使用外部切换控制器来与设备交互

13
00:00:59,626 --> 00:01:03,397
还有动态字体 让用户可以

14
00:01:03,430 --> 00:01:06,800
根据自身的阅读能力
来设置字体大小

15
00:01:07,801 --> 00:01:10,904
首先 克隆代码库

16
00:01:10,938 --> 00:01:13,407
运用代码库根目录下的构建脚本

17
00:01:13,440 --> 00:01:17,344
来构建所有 Apple 插件

18
00:01:17,377 --> 00:01:20,914
接着 这样会生成一个 Build 文件夹
可以将其整合到

19
00:01:20,948 --> 00:01:23,784
您的 Unity 项目中

20
00:01:23,817 --> 00:01:27,888
最后 用 Unity Package Manager

21
00:01:27,921 --> 00:01:30,924
将 Apple Accessibility 插件添加
到您的项目中

22
00:01:30,958 --> 00:01:35,362
您还可以查看代码库中的文档

23
00:01:35,395 --> 00:01:39,166
以及观看介绍所有 Apple 的
Unity 插件的视频课程

24
00:01:39,199 --> 00:01:44,671
“Plug-in and play: Add Apple frameworks
to your Unity game projects” 以获取更多细节

25
00:01:45,539 --> 00:01:50,410
现在您已经准备好了插件
我将会从以下三个方面为大家讲解

26
00:01:50,444 --> 00:01:53,313
第一个是辅助功能元素

27
00:01:53,347 --> 00:01:56,683
这让您可以在游戏中
增加辅助技术的支持

28
00:01:56,717 --> 00:02:00,954
如 旁白 或 切换控制

29
00:02:00,988 --> 00:02:03,857
接下来是 动态字体

30
00:02:03,891 --> 00:02:08,095
我们创建了这个易于使用的工具
帮助您根据用户偏好设置

31
00:02:08,128 --> 00:02:10,964
来缩放字体

32
00:02:10,998 --> 00:02:13,600
还有 UI 适应性设置

33
00:02:13,634 --> 00:02:18,772
这些实用工具可以帮助您
读取其它的用户偏好设置

34
00:02:18,805 --> 00:02:21,775
我们先来看下辅助功能元素

35
00:02:22,876 --> 00:02:27,548
我创建了一个简易的卡牌游戏
来帮助解释这个概念

36
00:02:27,581 --> 00:02:30,551
您可以看到 您要点击
“Flip”按钮

37
00:02:30,584 --> 00:02:33,654
来随机抽取两张卡牌

38
00:02:33,687 --> 00:02:36,957
然而 旁白 不会朗读
屏幕上的文本

39
00:02:36,990 --> 00:02:40,561
而外部切换控制器也不会点击按钮

40
00:02:40,594 --> 00:02:44,097
因为现在屏幕上只有像素

41
00:02:44,131 --> 00:02:49,136
我们要帮助系统理解
哪些是可以进行交互的

42
00:02:49,169 --> 00:02:52,039
辅助功能元素定义了辅助技术

43
00:02:52,072 --> 00:02:55,542
可以交互的部分

44
00:02:57,244 --> 00:03:00,781
文本 卡牌和屏幕上的按钮

45
00:03:00,814 --> 00:03:03,750
都应该是辅助功能元素

46
00:03:03,784 --> 00:03:07,221
我们可以用标签来描述
每个元素

47
00:03:07,254 --> 00:03:12,693
旁白 会朗读标签
这样用户能理解屏幕上的内容

48
00:03:14,261 --> 00:03:17,064
如果游戏支持多语言

49
00:03:17,097 --> 00:03:19,466
我们也应该对标签进行本地化

50
00:03:21,535 --> 00:03:24,538
现在 旁白 可以描述
屏幕上的内容了

51
00:03:24,571 --> 00:03:29,576
但是它还不知道屏幕上
还有一个可点击的按钮

52
00:03:29,610 --> 00:03:32,346
我们可以使用另一个属性
称为“Traits”

53
00:03:32,379 --> 00:03:36,183
来告知系统该元素的类型

54
00:03:36,216 --> 00:03:39,186
我们在这里添加
“Button”的特性

55
00:03:39,219 --> 00:03:43,156
现在 旁白 会朗读
“翻转 按钮”

56
00:03:43,190 --> 00:03:46,393
然后外部切换控制器可以控制该按钮

57
00:03:48,428 --> 00:03:53,800
我们也可以添加在文本元素上
添加“Static Text”特性

58
00:03:53,834 --> 00:03:59,173
“Static Text”特性通常是
赋予标签和文本区域的

59
00:03:59,206 --> 00:04:03,443
这样 旁白 可以提供
更好的文本交互体验

60
00:04:04,878 --> 00:04:07,581
除了“Button”和“Static Text”外
还有很多特性

61
00:04:07,614 --> 00:04:10,317
是您可以探索的

62
00:04:11,919 --> 00:04:15,422
那卡牌应该用什么特性呢

63
00:04:15,455 --> 00:04:21,094
我们不需要给每个
辅助功能元素都运用特性

64
00:04:21,128 --> 00:04:24,464
卡牌就不需要任何特性

65
00:04:25,098 --> 00:04:28,168
然而 卡牌上还有一个部分

66
00:04:28,202 --> 00:04:31,071
是 旁白 没有识别的

67
00:04:31,104 --> 00:04:33,473
那就是卡面值

68
00:04:33,507 --> 00:04:38,078
这里我们可以使用另一个属性
称为“Value”

69
00:04:39,680 --> 00:04:44,184
我们为每张卡牌添加了一个“Value”后
旁白 现在可以朗读

70
00:04:44,218 --> 00:04:47,654
“卡牌 1 梅花 3”

71
00:04:47,688 --> 00:04:51,458
“卡牌 2 梅花 A”

72
00:04:51,491 --> 00:04:53,260
就是这样

73
00:04:54,194 --> 00:04:58,065
现在您已经理解了基本原理
我们打开 Unity

74
00:04:58,098 --> 00:05:00,934
来看下可以如何将其
添加到我们的项目中

75
00:05:02,336 --> 00:05:05,906
现在我进入了游戏的
Unity 编辑器环境下

76
00:05:05,939 --> 00:05:08,275
我已经为这个项目中

77
00:05:08,308 --> 00:05:09,843
添加了 Apple Accessibility 插件

78
00:05:11,311 --> 00:05:15,649
首先 我们有常规的场景对象
如相机

79
00:05:15,682 --> 00:05:19,386
定向光和 UI 画布

80
00:05:19,419 --> 00:05:22,756
在 画布 下面
有两个文本元素

81
00:05:22,789 --> 00:05:24,925
和一个按钮

82
00:05:24,958 --> 00:05:28,428
然后 我们有两个卡牌游戏对象

83
00:05:31,798 --> 00:05:35,235
每个都由两个网格组件组成

84
00:05:35,269 --> 00:05:39,806
卡牌的每一面都渲染了对应的正反面纹理

85
00:05:39,840 --> 00:05:44,311
我们从定义辅助功能元素开始吧

86
00:05:44,344 --> 00:05:49,416
这需要插件中的
Accessibility Node 组件

87
00:05:50,851 --> 00:05:55,055
选中层级结构中应该设置辅助功能的
所有对象

88
00:05:57,925 --> 00:06:02,763
添加 Accessibility Node 组件
让它们成为辅助功能元素

89
00:06:06,366 --> 00:06:08,502
接下来 添加标签

90
00:06:09,236 --> 00:06:12,072
选择卡牌对象

91
00:06:12,105 --> 00:06:15,676
到右边的
“Accessibility Node”组件

92
00:06:15,709 --> 00:06:18,045
找到“Label”字段

93
00:06:19,213 --> 00:06:24,251
确保 label 字段的复选框已选中
以创建自定义标签

94
00:06:26,186 --> 00:06:28,388
然后输入“Card 1”

95
00:06:31,859 --> 00:06:35,329
对于 Card 2 也做同样的操作

96
00:06:40,434 --> 00:06:43,604
文本和按钮也需要标签

97
00:06:43,637 --> 00:06:47,975
但如果我们用的是 Unity UI 的
标准控件

98
00:06:48,008 --> 00:06:52,546
则不需要为它们提供一个显式的
辅助功能标签

99
00:06:52,579 --> 00:06:56,083
插件 已经默认实现了

100
00:06:57,384 --> 00:07:00,354
接下来 我们要为按钮添加
一个特性

101
00:07:02,422 --> 00:07:05,492
选择 Flip 按钮

102
00:07:05,526 --> 00:07:09,229
将“Traits”从“None”
修改为“Button”

103
00:07:13,567 --> 00:07:15,802
选择两个文本元素

104
00:07:18,138 --> 00:07:21,241
将“Traits”修改为“Static Text”

105
00:07:23,911 --> 00:07:25,312
好了

106
00:07:25,345 --> 00:07:29,950
最后 我们要为卡面值
设置对应辅助功能数值

107
00:07:29,983 --> 00:07:33,954
由于卡牌是随机抽取的
我需要添加脚本

108
00:07:33,987 --> 00:07:36,023
来动态设置卡面值

109
00:07:37,424 --> 00:07:42,396
选择两张卡牌 添加一个
AccessibleCard 的新脚本

110
00:07:44,831 --> 00:07:48,101
首先 在我另一个
C# 文件中

111
00:07:48,135 --> 00:07:53,607
所有卡牌正面都已经有了
一个枚举称为 Playing Card

112
00:07:53,640 --> 00:07:57,578
在我新的 AccessibleCard 这个
Mono Behaviour 脚本中

113
00:07:57,611 --> 00:07:59,847
设置了一个关于卡牌类型的变量

114
00:07:59,880 --> 00:08:03,350
和一个关于卡面上下朝向的布尔值

115
00:08:05,552 --> 00:08:10,457
现在我们为这些卡牌
添加 accessibilityValue

116
00:08:10,490 --> 00:08:15,762
首先 获取附属于这个 gameObject 的
accessibilityNode 组件

117
00:08:17,064 --> 00:08:21,401
接下来
将 accessibilityValue 代理设置为

118
00:08:21,435 --> 00:08:23,837
动态返回卡面值的函数

119
00:08:25,339 --> 00:08:28,809
在函数中 如果卡面朝下

120
00:08:28,842 --> 00:08:32,713
会在 accessibilityValue 中
返回“covered”

121
00:08:32,746 --> 00:08:36,817
如果卡面朝上 我们会枚举
所有卡面

122
00:08:36,850 --> 00:08:41,822
返回每张卡牌的描述
如“黑桃 A”

123
00:08:41,855 --> 00:08:44,191
就是这样

124
00:08:44,224 --> 00:08:48,395
现在我们来构建项目
看下其实际运行情况

125
00:08:48,428 --> 00:08:51,532
这就是我们的游戏
我们打开 旁白

126
00:08:55,335 --> 00:08:57,804
【自动语音: 旁白】 开启
Eric 的游戏

127
00:08:57,838 --> 00:08:59,740
卡牌 2 面朝下

128
00:08:59,773 --> 00:09:03,076
【Eric】 我可以向右滑动
来移动到下一个元素

129
00:09:03,744 --> 00:09:05,546
【自动语音】 卡牌 1 面朝下

130
00:09:07,314 --> 00:09:08,982
Eric 的卡牌游戏

131
00:09:10,884 --> 00:09:12,386
翻牌

132
00:09:14,087 --> 00:09:16,256
Flip 按钮

133
00:09:16,290 --> 00:09:20,661
【Eric】 您看现在所有五个对象
都可以用 旁白 来访问

134
00:09:20,694 --> 00:09:23,163
太赞了

135
00:09:23,197 --> 00:09:27,568
当 旁白 开启时
对这个要点击的按钮进行双击

136
00:09:28,335 --> 00:09:30,504
【自动语音】 翻牌

137
00:09:30,537 --> 00:09:32,339
【Eric】 我们再来看下卡牌

138
00:09:34,441 --> 00:09:36,743
【自动语音】 卡牌 1 梅花 2

139
00:09:38,378 --> 00:09:40,681
卡牌 2 梅花 A

140
00:09:40,714 --> 00:09:45,352
【Eric】 旁白 现在可以正确
朗读更新后的卡面值

141
00:09:45,385 --> 00:09:46,386
这样很酷

142
00:09:46,420 --> 00:09:50,357
我们现在可以为数百万的
旁白 用户制作无障碍游戏了

143
00:09:50,390 --> 00:09:52,326
他们一定会很喜欢的

144
00:09:52,359 --> 00:09:57,097
还有使用外部切换控制器的用户
也会玩我们的游戏

145
00:09:57,130 --> 00:10:00,367
这就是辅助功能元素

146
00:10:00,400 --> 00:10:03,504
接下来 我们来看下动态字体

147
00:10:04,838 --> 00:10:07,975
由于文本太小看不清

148
00:10:08,008 --> 00:10:10,978
对很多人来说
玩游戏可能并不容易

149
00:10:11,011 --> 00:10:14,748
在 iOS 和 tvOS 中 每个人可以

150
00:10:14,781 --> 00:10:17,985
根据自身阅读能力
在设置中调整合适的字体大小

151
00:10:20,120 --> 00:10:23,423
通过 Accessibility 插件
您也可以读取该设置

152
00:10:23,457 --> 00:10:28,095
确保游戏的文本能
按预期字体大小来显示

153
00:10:30,264 --> 00:10:35,169
我们根据游戏示例来看下
动态字体是如何使用的

154
00:10:36,370 --> 00:10:41,441
创建一个 DynamicTextSize.cs 的
Mono Behaviour脚本

155
00:10:41,475 --> 00:10:46,213
在开始函数中 首先将默认
文本大小存储为变量

156
00:10:47,181 --> 00:10:51,852
然后在 OnEnable 函数中
使用 AccessibilitySettings.onPreferredTextSizesChanged

157
00:10:51,885 --> 00:10:57,057
来订阅 settingsChanged 事件

158
00:10:57,891 --> 00:11:02,429
这样用户在改变字体设置时
我们可以马上更改 UI

159
00:11:03,830 --> 00:11:07,334
接下来
在 settingsChanged 函数中

160
00:11:07,367 --> 00:11:11,205
首先读取
PreferredContentSizeMultiplier

161
00:11:11,238 --> 00:11:14,541
然后乘以您的原始字体大小

162
00:11:14,575 --> 00:11:17,544
然后分配回 Text 元素

163
00:11:18,512 --> 00:11:21,949
在 Unity 编辑器中
选择有 Text 元素的

164
00:11:21,982 --> 00:11:25,052
所有游戏对象

165
00:11:25,085 --> 00:11:28,956
添加我们刚刚创建的
DynamicTextSize 组件

166
00:11:32,492 --> 00:11:36,730
现在我们的游戏都设置好
动态字体支持了

167
00:11:37,397 --> 00:11:41,168
我们看实际的运行效果前
我先给大家演示下

168
00:11:41,201 --> 00:11:45,205
一个快速测试游戏中
动态字体的方法

169
00:11:45,239 --> 00:11:49,376
打开设置 找到控制中心

170
00:11:54,214 --> 00:11:58,986
向下滚动 直到看见字体大小
将其添加到控制中心

171
00:12:02,422 --> 00:12:06,827
现在我们通过打开控制中心
改变字体大小选项

172
00:12:06,860 --> 00:12:08,996
就能快速调整字体大小了

173
00:12:17,905 --> 00:12:23,744
很好 我改变字体大小时
游戏也会实时改变字体大小

174
00:12:24,811 --> 00:12:27,648
控制中心中显示的
字体百分比值

175
00:12:27,681 --> 00:12:30,817
正是我们从乘数读取的

176
00:12:30,851 --> 00:12:35,689
您也可以将这个设置
应用到非文本对象中

177
00:12:35,722 --> 00:12:39,226
例如 在字体大小增加时
我可以将卡牌正面素材

178
00:12:39,259 --> 00:12:42,496
替换为 Large Print

179
00:12:45,265 --> 00:12:50,137
首先 我创建一个
DynamicCardFaces 脚本

180
00:12:50,170 --> 00:12:54,741
然后和之前一样
订阅 TextSizeChanged 事件

181
00:12:55,809 --> 00:13:01,481
这次不是读取乘数
而是读取一个字体大小类别的枚举

182
00:13:01,515 --> 00:13:05,619
它被映射到控制中心滑块的刻度上

183
00:13:05,652 --> 00:13:10,624
有人选择大号字体的时候
我就可以替换素材

184
00:13:11,825 --> 00:13:14,728
我只要在常规材质

185
00:13:14,761 --> 00:13:16,563
和大号印刷体材质之间选择即可

186
00:13:17,464 --> 00:13:20,734
现在 如果我们选择了
非常大的字体

187
00:13:26,273 --> 00:13:30,010
用户可能会看到大号印刷体的卡牌

188
00:13:30,043 --> 00:13:35,282
对于低视力的用户来说
这种卡牌正面的易读性很强

189
00:13:36,783 --> 00:13:40,754
最后 我跟大家分享下
您可以用这个插件访问

190
00:13:40,787 --> 00:13:43,223
UI 适应性设置

191
00:13:44,224 --> 00:13:48,662
第一个设置是 Reduce Transparency

192
00:13:48,695 --> 00:13:52,933
开启这个设置后 背景变成不透明

193
00:13:52,966 --> 00:13:56,670
而不是模糊或透明效果

194
00:13:56,703 --> 00:14:01,108
文本在这些效果下难以识别时
该设置可以提高易读性

195
00:14:02,042 --> 00:14:04,344
调用 AccessibilitySettings.
IsReduceTransparencyEnabled

196
00:14:04,378 --> 00:14:08,482
来查看这个偏好设置

197
00:14:10,284 --> 00:14:13,887
接下来是
Increase Contrast 设置

198
00:14:13,921 --> 00:14:18,926
深灰色的开关会更显眼

199
00:14:18,959 --> 00:14:23,230
在整个设备中也会更易于识别

200
00:14:24,464 --> 00:14:28,802
您可以使用
AccessibilitySettings.IsIncreaseContrastEnabled

201
00:14:28,836 --> 00:14:31,405
来查看这一设置

202
00:14:31,438 --> 00:14:35,442
启用后即可增加 UI 对比度

203
00:14:37,144 --> 00:14:40,614
接下来是 Reduce Motion 设置

204
00:14:40,647 --> 00:14:45,586
有些人对手势很敏感
正如我们在这个翻牌动画中一样

205
00:14:46,854 --> 00:14:50,791
Reduce Motion 启用时
我们应该移除该动画

206
00:14:51,892 --> 00:14:54,061
我们看下实现的代码

207
00:14:55,362 --> 00:15:00,701
在我们的 CardController 脚本中
有这个 Flip 函数

208
00:15:00,734 --> 00:15:05,539
首先我们看下用户的
Reduce Motion 设置是否开启

209
00:15:05,572 --> 00:15:11,211
如果没有开启 我们应通过
Coroutine 调用动画来翻牌

210
00:15:12,145 --> 00:15:16,283
否则就只是设置单纯旋转 而不带动画

211
00:15:16,316 --> 00:15:17,851
就这样

212
00:15:17,885 --> 00:15:22,422
现在对手势比较敏感的用户
也能享受我们的游戏了

213
00:15:23,357 --> 00:15:27,494
回顾一下 首先通过克隆
这个讲座资源关联的

214
00:15:27,528 --> 00:15:31,932
GitHub 数据库来
开启 Apple 辅助功能插件

215
00:15:33,000 --> 00:15:36,603
添加辅助功能元素
这样用户可以在游戏中

216
00:15:36,637 --> 00:15:38,805
使用 旁白
和 切换控制

217
00:15:40,007 --> 00:15:42,943
用动态字体来调整字体大小

218
00:15:44,478 --> 00:15:46,947
检查 UI 适应性设置

219
00:15:46,980 --> 00:15:50,250
这样每个人都能对游戏
有绝佳的体验

220
00:15:51,385 --> 00:15:53,620
感谢大家的参与

221
00:15:53,654 --> 00:15:57,624
我们很期待能看到您的游戏

222
00:15:57,658 --> 00:16:00,961
有完美的无障碍体验

