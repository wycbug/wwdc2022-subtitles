1
00:00:00,000 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:09,610
♪

3
00:00:09,610 --> 00:00:13,080
您好 欢迎来到 WWDC

4
00:00:13,080 --> 00:00:16,850
我是 Karim
一名 HealthKit 工程师

5
00:00:16,850 --> 00:00:19,753
HealthKit 框架为提供

6
00:00:19,753 --> 00:00:22,322
良好的健康体验打下基础

7
00:00:22,322 --> 00:00:24,124
而 Apple Watch 拥有

8
00:00:24,124 --> 00:00:26,860
许多健康和安全功能

9
00:00:26,860 --> 00:00:29,429
为您监测数据 保驾护航

10
00:00:29,429 --> 00:00:33,567
睡眠跟踪是广受欢迎的功能之一

11
00:00:33,567 --> 00:00:35,235
我们升级了睡眠跟踪

12
00:00:35,235 --> 00:00:38,839
以捕捉更细致的睡眠数据

13
00:00:38,839 --> 00:00:41,875
今年
HealthKit 还新增了

14
00:00:41,875 --> 00:00:44,478
许多出色功能

15
00:00:44,478 --> 00:00:47,281
我们优化了 API

16
00:00:47,281 --> 00:00:51,885
使用 Swift async 查询数据
更为便捷

17
00:00:51,885 --> 00:00:57,558
我们提升了体能训练功能
呈现出更多元的体能训练

18
00:00:57,558 --> 00:01:02,029
我们完善了保存
视力处方的方法

19
00:01:02,029 --> 00:01:07,668
其中包括保存纸质处方的数字副本

20
00:01:07,668 --> 00:01:10,971
我很高兴能向您介绍
更多有关升级的信息

21
00:01:10,971 --> 00:01:14,041
以及在您的 App
中运用它们的方法

22
00:01:14,041 --> 00:01:17,244
让我们开始吧

23
00:01:17,244 --> 00:01:20,080
睡眠起着

24
00:01:20,080 --> 00:01:23,884
放松身心的重要作用

25
00:01:23,884 --> 00:01:27,955
我个人喜欢用 Apple Watch
来记录我的睡眠时间

26
00:01:27,955 --> 00:01:30,757
然后获取建议

27
00:01:30,757 --> 00:01:33,393
用以理解和改善睡眠质量

28
00:01:33,393 --> 00:01:37,397
今年我们再次优化睡眠追踪

29
00:01:37,397 --> 00:01:41,001
引入睡眠阶段的分析记录

30
00:01:41,001 --> 00:01:43,704
Apple Watch 会自动追踪

31
00:01:43,704 --> 00:01:46,173
您入睡后的

32
00:01:46,173 --> 00:01:47,574
各个睡眠阶段

33
00:01:47,574 --> 00:01:51,478
这些数据可以在
健康 App 中查看

34
00:01:51,478 --> 00:01:53,947
数据也会存到
HealthKit 里

35
00:01:53,947 --> 00:01:57,417
当然 您的 App 也能够读取

36
00:01:57,417 --> 00:02:01,455
并保存睡眠阶段数据

37
00:02:01,455 --> 00:02:04,691
通过 Apple Watch 或您的 App
存储的睡眠数据

38
00:02:04,691 --> 00:02:08,262
在 HealthKit 中
以 sleepAnalysis 标识符

39
00:02:08,262 --> 00:02:12,833
存储为类别样本

40
00:02:12,833 --> 00:02:15,802
我们将睡眠阶段分成三类

41
00:02:15,802 --> 00:02:20,374
快速眼动睡眠 (REM)
核心睡眠和深度睡眠

42
00:02:20,374 --> 00:02:22,576
将睡眠数据
保存到 HealthKit 时

43
00:02:22,576 --> 00:02:25,546
您应当给

44
00:02:25,546 --> 00:02:31,752
目标睡眠阶段的每一段
持续时间创建样本

45
00:02:31,752 --> 00:02:35,522
这是睡眠样本值枚举的示例

46
00:02:35,522 --> 00:02:41,128
我们添加了三个枚举值
来代表睡眠阶段

47
00:02:41,128 --> 00:02:43,730
第一个是 asleepCore

48
00:02:43,730 --> 00:02:48,268
这对应
美国睡眠医学会 (AASM)

49
00:02:48,268 --> 00:02:54,708
评分模型的第一和第二阶段

50
00:02:54,708 --> 00:02:58,712
然后是 asleepDeep
对应的是

51
00:02:58,712 --> 00:03:02,349
AASM 评分模型第三阶段

52
00:03:02,349 --> 00:03:04,785
最后是 asleepREM

53
00:03:04,785 --> 00:03:09,556
这对应的是快速眼动期

54
00:03:09,556 --> 00:03:11,825
因为添加了睡眠阶段

55
00:03:11,825 --> 00:03:14,761
我们废弃了原 asleep 枚举值

56
00:03:14,761 --> 00:03:18,265
添加了 asleepUnspecified 枚举值

57
00:03:18,265 --> 00:03:21,134
用于表明

58
00:03:21,134 --> 00:03:24,071
睡着但未指定的睡眠阶段

59
00:03:24,071 --> 00:03:26,707
有了更新好的睡眠样本枚举

60
00:03:26,707 --> 00:03:30,511
现在可以保存和读取 HealthKit

61
00:03:30,511 --> 00:03:32,045
里的睡眠阶段数据了

62
00:03:32,045 --> 00:03:36,416
我们添加了一个新谓词
使得读取指定睡眠阶段的样本

63
00:03:36,416 --> 00:03:38,685
更为方便

64
00:03:38,685 --> 00:03:42,022
比如我想读取快速眼动睡眠
阶段 (REM) 的

65
00:03:42,022 --> 00:03:44,191
睡眠样本

66
00:03:44,191 --> 00:03:46,260
首先 我用新的
predicateForSamples 方法

67
00:03:46,260 --> 00:03:49,530
传入 asleepREM

68
00:03:49,530 --> 00:03:52,533
创建一个谓词

69
00:03:52,533 --> 00:03:55,769
现在 我可以开始
创建查询了

70
00:03:55,769 --> 00:03:57,871
我为我的查询创建一个谓词

71
00:03:57,871 --> 00:04:00,340
把 sleepAnalysis
作为样本类型

72
00:04:00,340 --> 00:04:02,643
再传入睡眠阶段的谓词

73
00:04:02,643 --> 00:04:07,381
有了这个查询谓词
我现在可以创建查询了

74
00:04:07,381 --> 00:04:09,616
运行查询就会得到

75
00:04:09,616 --> 00:04:13,554
快速眼动睡眠阶段 (REM)
的睡眠样本数组

76
00:04:13,554 --> 00:04:16,857
但是 如果您想读取
所有睡眠阶段的样本

77
00:04:16,857 --> 00:04:20,827
包括未指定的

78
00:04:20,827 --> 00:04:23,163
请务必更新您的 App

79
00:04:23,163 --> 00:04:28,669
在构建谓词时使用全新的
.allAsleepValues

80
00:04:28,669 --> 00:04:31,805
如果您在去年之后
没有关注过 HealthKit

81
00:04:31,805 --> 00:04:36,877
可能不熟悉这种较短的查询语法

82
00:04:36,877 --> 00:04:39,179
自 iOS 15.4 起

83
00:04:39,179 --> 00:04:44,518
我们就更新了查询 API
以支持 Swift async

84
00:04:44,518 --> 00:04:47,888
查询是 HealthKit
的重要组成部分

85
00:04:47,888 --> 00:04:51,124
有了 Swift async 的支持

86
00:04:51,124 --> 00:04:54,161
查询的语法更简洁 使用更方便

87
00:04:54,161 --> 00:04:57,464
查询能让您从
HealthKit 读取各种数据

88
00:04:57,464 --> 00:04:59,933
使用谓词筛选结果

89
00:04:59,933 --> 00:05:03,871
还能监测到新进来的数据

90
00:05:03,871 --> 00:05:08,442
所有查询都是
HKQuery 的子类

91
00:05:08,442 --> 00:05:12,045
如果我想知道某个时期

92
00:05:12,045 --> 00:05:14,014
消耗的卡路里总额

93
00:05:14,014 --> 00:05:17,217
用 HKStatisticsCollectionQuery

94
00:05:17,217 --> 00:05:20,554
进行查询以获取计算
好的统计数据是个好办法

95
00:05:20,554 --> 00:05:23,223
要想获得初始查询结果

96
00:05:23,223 --> 00:05:27,895
需要设置
initialResultsHandler 闭包

97
00:05:27,895 --> 00:05:31,398
如果想获取之后的更新

98
00:05:31,398 --> 00:05:33,100
另外设置

99
00:05:33,100 --> 00:05:36,403
statisticsUpdateHandler 闭包

100
00:05:36,403 --> 00:05:38,105
开始查询后

101
00:05:38,105 --> 00:05:41,842
闭包会被调用
带有查询结果

102
00:05:41,842 --> 00:05:46,313
有了 Swift async
查询起来更加方便

103
00:05:46,313 --> 00:05:49,883
每个查询都有
相匹配的查询描述符

104
00:05:49,883 --> 00:05:53,187
HKStatisticsCollectionQuery 有

105
00:05:53,187 --> 00:05:56,990
HKStatisticsCollectionQueryDescriptor

106
00:05:56,990 --> 00:05:58,425
要得到初始查询结果

107
00:05:58,425 --> 00:06:02,696
只需调用
async result(for:) 方法

108
00:06:02,696 --> 00:06:06,333
如果您想获取初始查询结果及后续更新

109
00:06:06,333 --> 00:06:10,270
可以调用
results(for:) 方法

110
00:06:10,270 --> 00:06:14,341
得到 AsyncSequence

111
00:06:14,341 --> 00:06:16,677
使用循环来读取结果

112
00:06:16,677 --> 00:06:20,214
HealthKit 很适合跟踪体能训练

113
00:06:20,214 --> 00:06:24,318
以及相关指标
例如消耗的卡路里

114
00:06:24,318 --> 00:06:28,021
要想知道我这周消耗了多少卡路里

115
00:06:28,021 --> 00:06:32,125
我可以使用
统计数据收集查询描述符

116
00:06:32,125 --> 00:06:35,028
首先 我创建查询描述符

117
00:06:35,028 --> 00:06:38,732
传入匹配卡路里样本的谓词

118
00:06:38,732 --> 00:06:44,404
传入 cumulativeSum 选项
因为我想要得到总和

119
00:06:44,404 --> 00:06:46,507
我想知道这周的数据

120
00:06:46,507 --> 00:06:50,844
所以我用 thisSunday
作为 anchorDate

121
00:06:50,844 --> 00:06:54,114
最后 我想要计算一周时间的

122
00:06:54,114 --> 00:06:58,685
卡路里消耗总和

123
00:06:58,685 --> 00:07:00,988
查询描述符创建后

124
00:07:00,988 --> 00:07:04,224
要做的就是调用
result(for:) 方法

125
00:07:04,224 --> 00:07:07,127
传入 healthStore 对象

126
00:07:07,127 --> 00:07:09,563
返回的 statisticsCollection 对象

127
00:07:09,563 --> 00:07:13,400
会给我当前数据的快照

128
00:07:13,400 --> 00:07:16,770
如果想要在卡路里变化时
获取到更新

129
00:07:16,770 --> 00:07:20,474
只要调用
results(for:)

130
00:07:20,474 --> 00:07:23,043
在返回的异步序列中

131
00:07:23,043 --> 00:07:25,879
循环读取结果就可以了

132
00:07:25,879 --> 00:07:28,048
当我不再需要获取更新时

133
00:07:28,048 --> 00:07:32,986
只要跳出循环 就能结束查询

134
00:07:32,986 --> 00:07:36,590
接下来 让我们谈谈体能训练功能

135
00:07:36,590 --> 00:07:40,227
HealthKit 是
保存体能训练数据

136
00:07:40,227 --> 00:07:42,496
及所有相关指标的好地方

137
00:07:42,496 --> 00:07:45,332
无论您是要悠闲地骑个自行车

138
00:07:45,332 --> 00:07:48,702
还是在比赛中挑战突破自身极限
都能很好地记录下来

139
00:07:48,702 --> 00:07:49,970
通常来说

140
00:07:49,970 --> 00:07:53,874
体能训练一般不限于单个活动

141
00:07:53,874 --> 00:07:58,378
您可能会在间歇训练中
重复相同的活动

142
00:07:58,378 --> 00:08:01,181
也有可能参加铁人三项比赛

143
00:08:01,181 --> 00:08:05,686
铁人三项包括游泳自行车和跑步

144
00:08:05,686 --> 00:08:10,657
在 iOS 16 和 watchOS 9 中
我们更新了体能训练 API

145
00:08:10,657 --> 00:08:14,361
能够捕获这类体能训练

146
00:08:14,361 --> 00:08:19,266
以及关联的每个活动的统计数据

147
00:08:19,266 --> 00:08:22,836
这是我最近一次做的

148
00:08:22,836 --> 00:08:24,771
游泳-自行车-跑步
体能训练时间轴

149
00:08:24,771 --> 00:08:26,607
我先游泳

150
00:08:26,607 --> 00:08:28,976
然后花些许时间准备

151
00:08:28,976 --> 00:08:32,246
才开始自行车部分

152
00:08:32,246 --> 00:08:34,147
最后再跑步

153
00:08:34,147 --> 00:08:41,154
每项活动都由一个
HKWorkoutActivity 对象表示

154
00:08:41,154 --> 00:08:42,756
创建每项体能训练活动

155
00:08:42,756 --> 00:08:45,959
都带有各自的体能训练配置

156
00:08:45,959 --> 00:08:49,730
其中涵盖活动类型

157
00:08:49,730 --> 00:08:52,866
一个体能训练活动包含期间

158
00:08:52,866 --> 00:08:56,937
发生的所有事件

159
00:08:56,937 --> 00:09:01,275
您能够读取每一项活动的统计数据

160
00:09:01,275 --> 00:09:03,944
在您只想要

161
00:09:03,944 --> 00:09:08,949
分析某一项活动时
很有帮助

162
00:09:08,949 --> 00:09:10,751
说回我的时间轴

163
00:09:10,751 --> 00:09:12,853
我的三项活动都配置了

164
00:09:12,853 --> 00:09:16,590
对应的活动类型

165
00:09:16,590 --> 00:09:19,693
活动在时间上不能重叠

166
00:09:19,693 --> 00:09:22,296
而且因为每次活动之间

167
00:09:22,296 --> 00:09:24,264
可能会有过渡期

168
00:09:24,264 --> 00:09:27,835
它们不需要紧连在一起

169
00:09:27,835 --> 00:09:30,337
如果我想分析过渡时期

170
00:09:30,337 --> 00:09:32,539
发生了什么

171
00:09:32,539 --> 00:09:35,676
我可以给每一个过渡期创建
HKWorkoutActivity

172
00:09:35,676 --> 00:09:39,613
活动类型是过渡期

173
00:09:39,613 --> 00:09:44,451
所有活动都将存到
HKWorkout 对象下的

174
00:09:44,451 --> 00:09:47,721
workoutActivities 属性中

175
00:09:47,721 --> 00:09:52,092
如果您用 HKWorkoutBuilder
把体能训练添加到 HealthKit 中

176
00:09:52,092 --> 00:09:55,696
添加活动只要创建
HKWorkoutActivity 对象

177
00:09:55,696 --> 00:10:00,634
传入 workoutConfiguration

178
00:10:00,634 --> 00:10:04,171
开始和结束日期 以及
可选的元数据

179
00:10:04,171 --> 00:10:08,141
然后 您只需在体能训练构建器上

180
00:10:08,141 --> 00:10:10,477
调用 addWorkoutActivity
添加即可

181
00:10:10,477 --> 00:10:14,214
在 Apple Watch 上
您可以使用体能训练会话

182
00:10:14,214 --> 00:10:16,617
来跟踪 游泳-自行车-跑步 体能训练

183
00:10:16,617 --> 00:10:18,652
及相关的体能训练构建器

184
00:10:18,652 --> 00:10:21,455
把体能训练保存到 HealthKit 中

185
00:10:21,455 --> 00:10:23,524
我们继续回到体能训练时间轴

186
00:10:23,524 --> 00:10:26,593
要在 Apple Watch 上
跟踪这次体能训练

187
00:10:26,593 --> 00:10:31,598
我需要设置一个
体能训练会话和构建器

188
00:10:31,598 --> 00:10:35,102
我首先创建一个体能训练配置

189
00:10:35,102 --> 00:10:38,172
类型为
swimBikeRun

190
00:10:38,172 --> 00:10:41,475
然后用我的配置创建一个

191
00:10:41,475 --> 00:10:43,944
HKWorkoutSession

192
00:10:43,944 --> 00:10:45,812
在体能训练的起始点

193
00:10:45,812 --> 00:10:48,982
我只是简单地在会话中
调用 startActivity

194
00:10:48,982 --> 00:10:53,287
并在相关的体能训练构建器上
调用 beginCollection

195
00:10:53,287 --> 00:10:55,923
会话和构建器准备就绪后

196
00:10:55,923 --> 00:10:58,458
我可以使用
beginNewActivity 方法

197
00:10:58,458 --> 00:11:01,128
添加我的第一个活动

198
00:11:01,128 --> 00:11:05,766
第一个是游泳体能训练配置
并附上开始日期

199
00:11:05,766 --> 00:11:08,368
每项活动开始前

200
00:11:08,368 --> 00:11:11,438
请确保您更新体能训练
构建器数据源

201
00:11:11,438 --> 00:11:15,676
只收集您想要的数据类型

202
00:11:15,676 --> 00:11:17,978
由于这是个游泳活动

203
00:11:17,978 --> 00:11:21,181
我想收集游泳里程

204
00:11:21,181 --> 00:11:22,983
活动结束后

205
00:11:22,983 --> 00:11:28,589
我调用 endCurrentActivity
加上结束日期

206
00:11:28,589 --> 00:11:32,092
因为我想要分析

207
00:11:32,092 --> 00:11:34,394
游泳和骑行之间的过渡期

208
00:11:34,394 --> 00:11:37,064
我会在游泳结束后马上

209
00:11:37,064 --> 00:11:40,667
开始一个新的过渡活动

210
00:11:40,667 --> 00:11:44,705
然后 由于这也是一个活动的始点

211
00:11:44,705 --> 00:11:46,540
我会更新构建器数据源

212
00:11:46,540 --> 00:11:49,676
来停止游泳里程的收集

213
00:11:49,676 --> 00:11:53,680
因为游泳不再相关了

214
00:11:53,680 --> 00:11:58,385
在骑行开始前
结束过渡活动

215
00:11:58,385 --> 00:12:01,154
跟踪其余的活动

216
00:12:01,154 --> 00:12:03,857
也是用同样的方式

217
00:12:03,857 --> 00:12:05,459
在体能训练结束时

218
00:12:05,459 --> 00:12:10,130
结束会话也会结束
任何进行中的活动

219
00:12:10,130 --> 00:12:12,432
然后我就完成体能训练构建器

220
00:12:12,432 --> 00:12:16,803
这会保存并返回一个
HKWorkout 对象

221
00:12:16,803 --> 00:12:19,039
我可以从返回的体能训练数据

222
00:12:19,039 --> 00:12:21,675
读取一些相关的指标

223
00:12:21,675 --> 00:12:25,312
例如 totalEnergyBurned
和 totalDistance

224
00:12:25,312 --> 00:12:29,950
然后在我的 App 中
显示体能训练总结

225
00:12:29,950 --> 00:12:32,920
但是 这一小部分属性

226
00:12:32,920 --> 00:12:35,122
已经不够用了

227
00:12:35,122 --> 00:12:39,426
totalSwimmingStrokeCount
并不是跟所有体能训练都有关

228
00:12:39,426 --> 00:12:43,163
个别体能训练可能会收集更多指标

229
00:12:43,163 --> 00:12:45,732
为了所以种类的体能训练指标

230
00:12:45,732 --> 00:12:47,501
读取都起来更方便

231
00:12:47,501 --> 00:12:49,803
我们弃用了这些属性

232
00:12:49,803 --> 00:12:53,874
新增了对指定的数量类型

233
00:12:53,874 --> 00:12:56,643
返回统计数据的方法

234
00:12:56,643 --> 00:12:59,847
顺便说下 新方法也可在

235
00:12:59,847 --> 00:13:03,750
HKWorkoutActivity 上使用

236
00:13:03,750 --> 00:13:08,188
这个方法能让您专注于
活动期间发生的数据

237
00:13:08,188 --> 00:13:11,758
这些统计数据会被自动计算

238
00:13:11,758 --> 00:13:14,328
根据体能训练中收集的所有样本

239
00:13:14,328 --> 00:13:20,033
但前提是用了 HKWorkoutBuilder 或
HKLiveWorkoutBuilder

240
00:13:20,033 --> 00:13:23,103
除了更丰富的体能训练
数据呈现以外

241
00:13:23,103 --> 00:13:26,273
我们还新增了一组谓词

242
00:13:26,273 --> 00:13:28,876
在您进行分析或可视化时

243
00:13:28,876 --> 00:13:32,980
用于只查询您感兴趣的
体能训练

244
00:13:32,980 --> 00:13:34,848
举个例子

245
00:13:34,848 --> 00:13:38,452
这是我最近的体能训练

246
00:13:38,452 --> 00:13:42,623
每个活动都带有平均心率

247
00:13:42,623 --> 00:13:47,060
我想找出体能训练中平均心率

248
00:13:47,060 --> 00:13:50,931
高于 150 的高强度活动

249
00:13:50,931 --> 00:13:54,568
首先 我用新的
predicateForWorkoutActivity

250
00:13:54,568 --> 00:13:57,171
方法创建一个谓词

251
00:13:57,171 --> 00:14:00,574
作用于体能训练活动

252
00:14:00,574 --> 00:14:02,109
我要找平均心率

253
00:14:02,109 --> 00:14:05,579
高于每分钟 150 次

254
00:14:05,579 --> 00:14:08,582
接下来 因为我想查询体能训练

255
00:14:08,582 --> 00:14:13,287
所以我把心率谓词放在
体能训练谓词里

256
00:14:13,287 --> 00:14:17,391
然后 我用该谓词创建查询

257
00:14:17,391 --> 00:14:20,060
我调用了查询描述符上的

258
00:14:20,060 --> 00:14:23,397
result(for: healthStore) 方法

259
00:14:23,397 --> 00:14:26,099
以获取符合我谓词的体能训练列表

260
00:14:26,099 --> 00:14:27,935
通过这种方式

261
00:14:27,935 --> 00:14:31,271
我可以只查询我感兴趣的体能训练

262
00:14:31,271 --> 00:14:33,073
我最近的一个体能训练

263
00:14:33,073 --> 00:14:36,476
包含四个跑步区间

264
00:14:36,476 --> 00:14:40,247
用 HKWorkoutActivity

265
00:14:40,247 --> 00:14:42,616
是捕捉这些区间的好方法

266
00:14:42,616 --> 00:14:45,419
您只要确保
间歇性体能训练里的

267
00:14:45,419 --> 00:14:49,022
所有活动的活动类型

268
00:14:49,022 --> 00:14:50,858
跟体能训练的类型相同

269
00:14:50,858 --> 00:14:54,461
因此 就跑步体能训练来说
所有活动要配置

270
00:14:54,461 --> 00:14:57,064
.running 类型

271
00:14:57,064 --> 00:15:01,034
使用体能训练活动来跟踪
间歇性体能训练的好处

272
00:15:01,034 --> 00:15:04,972
是您可以获得每个区间的统计数据

273
00:15:04,972 --> 00:15:07,741
有了这些更新

274
00:15:07,741 --> 00:15:11,545
体能训练更丰富地呈现了

275
00:15:11,545 --> 00:15:14,615
活动以及活动前后的情况

276
00:15:14,615 --> 00:15:18,051
为了提供更丰富的信息

277
00:15:18,051 --> 00:15:21,188
我们引入了新的跑步指标

278
00:15:21,188 --> 00:15:23,390
在 Apple Watch Series 6
SE 及更新机型上

279
00:15:23,390 --> 00:15:28,061
会自动收集

280
00:15:28,061 --> 00:15:33,700
包括跑步步幅 步长
或以瓦特为单位的功率等指标

281
00:15:33,700 --> 00:15:37,604
对于游泳体能训练
我们添加了 SWOLF 分数

282
00:15:37,604 --> 00:15:40,374
SWOLF 通过给定距离下的划水数

283
00:15:40,374 --> 00:15:42,509
和所用时间

284
00:15:42,509 --> 00:15:45,812
来计算

285
00:15:45,812 --> 00:15:49,550
将为在 Apple Watch 上

286
00:15:49,550 --> 00:15:52,219
采集的游泳体能训练数据中的

287
00:15:52,219 --> 00:15:55,589
每一圈和每个分区
都进行计算

288
00:15:55,589 --> 00:15:58,759
虽然这些指标
丰富了您的体能训练数据

289
00:15:58,759 --> 00:16:02,696
并让您更好地了解您的表现

290
00:16:02,696 --> 00:16:05,299
但是记录体能训练结束后的

291
00:16:05,299 --> 00:16:09,403
另一个指标也很重要
那就是心率恢复

292
00:16:09,403 --> 00:16:13,473
该指标是对您运动后
心率降低速度的估计

293
00:16:13,473 --> 00:16:17,878
可以用来了解

294
00:16:17,878 --> 00:16:20,214
心脏负荷后的恢复情况

295
00:16:20,214 --> 00:16:23,283
并揭示可能潜在的健康问题

296
00:16:23,283 --> 00:16:28,722
在 iOS 16 我们引入了一种
新的 Cardio Recovery 数据类型

297
00:16:28,722 --> 00:16:31,325
可在健康 App 访问

298
00:16:31,325 --> 00:16:34,761
您的 App 将能够从 HealthKit 中

299
00:16:34,761 --> 00:16:37,364
读取和保存该数据

300
00:16:37,364 --> 00:16:41,068
心率恢复是数量类型

301
00:16:41,068 --> 00:16:46,173
标识符为
.heartRateRecoveryOneMinute

302
00:16:46,173 --> 00:16:48,275
有关每个心率恢复样本的

303
00:16:48,275 --> 00:16:50,711
附加上下文信息

304
00:16:50,711 --> 00:16:54,114
可以添加为元数据

305
00:16:54,114 --> 00:16:56,650
在我最近的
游泳-自行车-跑步体能训练中

306
00:16:56,650 --> 00:16:59,152
我达到了运动极限

307
00:16:59,152 --> 00:17:03,056
然后观察我的心率恢复速率

308
00:17:03,056 --> 00:17:05,492
我花了大约三个半小时

309
00:17:05,492 --> 00:17:08,295
来完成体能训练

310
00:17:08,295 --> 00:17:12,733
当我跑步时我达到了
每分钟 184 次的

311
00:17:12,733 --> 00:17:14,535
最大心率

312
00:17:14,535 --> 00:17:16,803
体能训练后的一分钟里

313
00:17:16,803 --> 00:17:20,507
我的心率下降了 50 次

314
00:17:20,507 --> 00:17:24,178
在 Apple Watch 上使用
HKLiveWorkoutBuilder 时

315
00:17:24,178 --> 00:17:26,280
心率恢复样本

316
00:17:26,280 --> 00:17:28,749
连同其上下文信息

317
00:17:28,749 --> 00:17:33,320
在体能训练后会
自动保存在 HealthKit 中

318
00:17:33,320 --> 00:17:37,024
除此之外 要保存心率恢复样本

319
00:17:37,024 --> 00:17:39,426
我使用
.heartRateRecoveryOneMinute 类型

320
00:17:39,426 --> 00:17:42,729
创建了一个数量样本

321
00:17:42,729 --> 00:17:44,531
我的心率在体能训练后的一分钟里

322
00:17:44,531 --> 00:17:46,333
下降了 50 次

323
00:17:46,333 --> 00:17:50,504
所以我将其设置为我的样本数量

324
00:17:50,504 --> 00:17:54,074
我还为样本设置了开始和结束日期

325
00:17:54,074 --> 00:17:57,945
然后 我将附加上下文信息添加到了

326
00:17:57,945 --> 00:18:00,614
元数据字典中

327
00:18:00,614 --> 00:18:03,450
以恢复测试类型开始

328
00:18:03,450 --> 00:18:06,186
由于我的体能训练达到了极限

329
00:18:06,186 --> 00:18:09,723
所以测试类型为
.maxExercise

330
00:18:09,723 --> 00:18:12,259
我的体能训练
是 swimBikeRun

331
00:18:12,259 --> 00:18:15,996
所以我将其设置为活动类型

332
00:18:15,996 --> 00:18:19,233
我还可以使用
HeartRateRecoveryActivityDuration 键

333
00:18:19,233 --> 00:18:23,170
添加体能训练持续时间

334
00:18:23,170 --> 00:18:27,307
最后 我添加体能训练期间

335
00:18:27,307 --> 00:18:32,846
观察到的最大心率
为每分钟 184 次

336
00:18:32,846 --> 00:18:35,916
有了这些更新 现在将更加容易

337
00:18:35,916 --> 00:18:39,953
跟踪游泳-自行车-跑步和
间歇性体能训练

338
00:18:39,953 --> 00:18:43,457
此外 新指标的引入

339
00:18:43,457 --> 00:18:47,427
为您的体能训练提供了更全面的信息

340
00:18:47,427 --> 00:18:52,432
以及评估过程的新方法

341
00:18:52,432 --> 00:18:57,070
虽然活动和健身会影响到每一个人

342
00:18:57,070 --> 00:18:59,473
还有其他方面的健康问题会

343
00:18:59,473 --> 00:19:03,277
涉及到我们许多人 比如视觉

344
00:19:03,277 --> 00:19:07,047
实际上 根据美国视力协会表示

345
00:19:07,047 --> 00:19:11,952
美国大约 75% 的成年人

346
00:19:11,952 --> 00:19:15,322
依靠处方眼镜或隐形眼镜

347
00:19:15,322 --> 00:19:17,724
矫正视力

348
00:19:17,724 --> 00:19:20,961
但是 这些处方很容易丢失

349
00:19:20,961 --> 00:19:23,630
而且 在订购处方眼镜或隐形眼镜时

350
00:19:23,630 --> 00:19:27,968
要随身携带处方 显得十分累赘

351
00:19:27,968 --> 00:19:31,104
所以让我们将其放在我们的手机里

352
00:19:31,104 --> 00:19:34,141
从 iOS 16 开始
您的 App 现在可以将

353
00:19:34,141 --> 00:19:39,713
眼镜和隐形眼镜处方
保存到 HealthKit 中

354
00:19:39,713 --> 00:19:42,349
视力处方是一个带有

355
00:19:42,349 --> 00:19:45,686
visionPrescriptionType 类型的样本

356
00:19:45,686 --> 00:19:47,721
样本的开始日期对应

357
00:19:47,721 --> 00:19:50,424
处方的发放日期

358
00:19:50,424 --> 00:19:54,661
而结束日期对应于处方的到期日期

359
00:19:54,661 --> 00:19:59,066
实体处方的数字副本

360
00:19:59,066 --> 00:20:02,836
可以选择性地附在样本上

361
00:20:02,836 --> 00:20:06,006
眼镜或隐形眼镜处方样本

362
00:20:06,006 --> 00:20:10,711
是 HKVisionPrescription 的子类

363
00:20:10,711 --> 00:20:15,349
对于眼镜
您使用 HKGlassesPrescription 子类

364
00:20:15,349 --> 00:20:20,454
对于隐形眼镜
使用 HKContactsPrescription 子类

365
00:20:20,454 --> 00:20:22,756
使用两个眼镜镜片规格对象

366
00:20:22,756 --> 00:20:26,560
创建每个眼镜处方

367
00:20:26,560 --> 00:20:29,396
每只眼睛一个

368
00:20:29,396 --> 00:20:32,766
同样 隐形眼镜处方由

369
00:20:32,766 --> 00:20:36,770
两个隐形眼镜镜片规格对象创建

370
00:20:36,770 --> 00:20:40,240
现在 我们将阅读眼镜处方

371
00:20:40,240 --> 00:20:42,276
保存到 HealthKit

372
00:20:42,276 --> 00:20:46,580
第一步是对每只眼睛创建一个

373
00:20:46,580 --> 00:20:48,682
HKGlassesLensSpecification

374
00:20:48,682 --> 00:20:52,619
像顶点距离和棱镜等参数

375
00:20:52,619 --> 00:20:54,821
是可选的

376
00:20:54,821 --> 00:21:00,928
我可以用同样的方法
创建右眼镜片规格

377
00:21:00,928 --> 00:21:04,565
接下来 我用右眼和左眼的镜片规格

378
00:21:04,565 --> 00:21:09,169
创建了一个眼镜处方样本

379
00:21:09,169 --> 00:21:12,206
该处方是为我的阅读眼镜创建的

380
00:21:12,206 --> 00:21:16,310
所以我在描述中添加了备注

381
00:21:16,310 --> 00:21:18,946
然后 我只需在 healthStore 上

382
00:21:18,946 --> 00:21:20,881
调用保存方法
来保存处方

383
00:21:20,881 --> 00:21:25,819
这样 我的处方已
保存到 HealthKit 中

384
00:21:25,819 --> 00:21:27,688
同时 我给处方拍了张照

385
00:21:27,688 --> 00:21:31,892
想将其附加到我刚刚保存的样本中

386
00:21:31,892 --> 00:21:37,898
文件附件由 HKAttachment 对象表示

387
00:21:37,898 --> 00:21:43,904
使用 HKAttachmentStore 来
保存和读取文件附件

388
00:21:43,904 --> 00:21:47,074
仅静态图像或 PDF 文件

389
00:21:47,074 --> 00:21:50,911
可以附在处方上

390
00:21:50,911 --> 00:21:55,415
要将我图片附在处方样本上

391
00:21:55,415 --> 00:21:59,453
我首先使用
healthStore 创建一个

392
00:21:59,453 --> 00:22:01,722
HKAttachmentStore 对象

393
00:22:01,722 --> 00:22:07,127
然后调用 addAttachment(to:)
传入处方样本

394
00:22:07,127 --> 00:22:09,963
我为附件设置了一个名称

395
00:22:09,963 --> 00:22:13,333
在这里 我附上了
一个 PNG 文件

396
00:22:13,333 --> 00:22:17,871
最后 传递文件的 URL

397
00:22:17,871 --> 00:22:22,709
我刚刚附上的处方包含更多信息

398
00:22:22,709 --> 00:22:25,512
不只是镜头规格

399
00:22:25,512 --> 00:22:30,784
还包括敏感信息
例如我的全名和出生日期

400
00:22:30,784 --> 00:22:33,020
HealthKit 的
核心原则之一

401
00:22:33,020 --> 00:22:36,356
是为了保护您的隐私并确保

402
00:22:36,356 --> 00:22:40,494
您可以始终掌控您分享的数据

403
00:22:40,494 --> 00:22:44,498
因为在分享包含附件的处方时

404
00:22:44,498 --> 00:22:47,100
很容易无心分享出更多的数据

405
00:22:47,100 --> 00:22:50,304
我们为处方引入了一种

406
00:22:50,304 --> 00:22:52,406
新的授权模式

407
00:22:52,406 --> 00:22:54,641
每个处方对象的读取权限

408
00:22:54,641 --> 00:22:57,945
是单独授权的

409
00:22:57,945 --> 00:23:00,714
用户可以授权 App

410
00:23:00,714 --> 00:23:03,550
读取特定的处方

411
00:23:03,550 --> 00:23:07,254
并可随时更新这些授权

412
00:23:07,254 --> 00:23:10,924
对于视力处方对象

413
00:23:10,924 --> 00:23:14,161
我们有新的 API
用于请求授权

414
00:23:14,161 --> 00:23:16,196
就像其他数据类型一样

415
00:23:16,196 --> 00:23:19,166
您可以使用查询来读取

416
00:23:19,166 --> 00:23:22,035
您的 App 有权访问的处方

417
00:23:22,035 --> 00:23:25,539
如果您只对某些处方感兴趣

418
00:23:25,539 --> 00:23:27,875
您可以使用谓词

419
00:23:27,875 --> 00:23:31,011
要请求授权
只需调用 healthStore 的

420
00:23:31,011 --> 00:23:34,248
requestPerObjectRead 授权方法

421
00:23:34,248 --> 00:23:37,885
传入 visionType

422
00:23:37,885 --> 00:23:42,890
这样将始终在您的 App 中显示

423
00:23:42,890 --> 00:23:45,559
处方授权弹出窗口

424
00:23:45,559 --> 00:23:48,595
展示所有与您的谓词
相匹配的处方列表

425
00:23:48,595 --> 00:23:51,365
确保您在适当的环境中请求授权

426
00:23:51,365 --> 00:23:56,370
以确保最佳的用户体验

427
00:23:56,370 --> 00:24:00,574
以上只是我们添加到
HealthKit 的一些新内容

428
00:24:00,574 --> 00:24:03,510
使您的 App 能够提供更好的

429
00:24:03,510 --> 00:24:05,979
健康和健身体验

430
00:24:05,979 --> 00:24:09,950
非常期待看到您接下来的创造

431
00:24:09,950 --> 00:24:13,754
祝您有一个愉快的 WWDC
如果您有任何问题

432
00:24:13,754 --> 00:24:17,357
我们很乐意在
开发者论坛中为您提供帮助

433
00:24:17,357 --> 00:24:21,461
♪

