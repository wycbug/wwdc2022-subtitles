1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,576 --> 00:00:14,314
Owen: 大家好 欢迎参加
将 iOS app 带到 Mac 上

3
00:00:14,348 --> 00:00:17,784
我叫 Owen
是一名 Mac Catalyst 工程师

4
00:00:19,286 --> 00:00:24,291
无论您是在 M1 Mac 上
原封不动地发布您的 iOS app

5
00:00:24,324 --> 00:00:28,395
还是已经开始考虑用
Mac Catalyst 更进一步

6
00:00:28,428 --> 00:00:33,033
或者已经发布 Catalyst app
并希望做得更好

7
00:00:33,066 --> 00:00:36,203
我都很高兴分享新的 API 和技术

8
00:00:36,236 --> 00:00:39,773
让您的 App 在 Mac 上做到最好

9
00:00:39,806 --> 00:00:43,610
但首先 我想通过一些
由开发者完成的令人惊叹的工作

10
00:00:43,644 --> 00:00:49,249
展示 Mac Catalyst 的可能性

11
00:00:49,283 --> 00:00:52,719
Craft 是一款令人难以置信的 App

12
00:00:52,753 --> 00:00:56,023
可以毫不费力地开始
编写和制作漂亮的文档

13
00:00:56,056 --> 00:01:00,327
也入选了 App Store
2021 年度 Mac App

14
00:01:00,360 --> 00:01:01,995
多亏了 Mac Catalyst

15
00:01:02,029 --> 00:01:05,933
我们可以在各种设备上
获得这种出色的体验

16
00:01:05,966 --> 00:01:10,671
当您的下一个想法出现时
它随时准备就绪

17
00:01:10,704 --> 00:01:15,909
Darkroom 的智能 AI 编辑工具
简化了您的摄影工作流程

18
00:01:15,943 --> 00:01:20,080
您可以在 iPhone 或 iPad 上
开始现场编辑

19
00:01:20,113 --> 00:01:23,851
并在家里用他们的
Mac Catalyst app 完成之后的编辑

20
00:01:23,884 --> 00:01:27,421
它因出色的设计 创新和独创性

21
00:01:27,454 --> 00:01:30,023
获得了 Apple 设计奖

22
00:01:30,057 --> 00:01:34,761
并自 2018 年以来一直是
App Store 编辑推荐的 app

23
00:01:36,330 --> 00:01:42,035
Night Sky 是直接从您的计算机
探索宇宙的绝佳方式

24
00:01:42,069 --> 00:01:44,204
您可以了解星座

25
00:01:44,238 --> 00:01:48,842
并通过详细的
月球 行星和卫星 3D 模型

26
00:01:48,876 --> 00:01:51,712
近距离观察这些星球

27
00:01:51,745 --> 00:01:57,284
它因其设计和令人惊叹的视觉效果
赢得了多个威比奖和洛维奖

28
00:01:59,319 --> 00:02:04,358
狂野飙车 9 竞速传奇是是一款
令人振奋的高辛烷值赛车模拟游戏

29
00:02:04,391 --> 00:02:08,428
也是唯一赢得
Apple 设计奖的赛车游戏

30
00:02:08,462 --> 00:02:11,532
而在 Mac Catalyst 版本中

31
00:02:11,565 --> 00:02:13,667
大屏幕上的动作更令人兴奋

32
00:02:15,135 --> 00:02:19,840
现在 我将介绍可以在 Mac 上
为您的 App 创建良好体验的

33
00:02:19,873 --> 00:02:23,043
所有方法

34
00:02:23,076 --> 00:02:25,979
我将从几个新选项开始

35
00:02:26,013 --> 00:02:29,550
来讲一下在 M1 上原生运行iOS app

36
00:02:29,583 --> 00:02:33,954
这些是将现有 iOS app
发布到 Mac 上最简单的方法

37
00:02:35,389 --> 00:02:40,527
然后 我将介绍如何在 Xcode 中
添加一个 Mac Catalyst 运行目标

38
00:02:40,561 --> 00:02:42,763
并介绍做出的更改

39
00:02:44,031 --> 00:02:48,268
我将展示当您采用新的
桌面级 iPad API 时

40
00:02:48,302 --> 00:02:52,039
您的 Catalyst app
可以免费获得的新行为

41
00:02:53,607 --> 00:02:56,376
然后深入研究 Mac 特有的改进

42
00:02:56,410 --> 00:02:59,980
新的 Mac Catalyst API 使之成为可能

43
00:03:01,849 --> 00:03:07,321
我将从 M1 的 Mac 为原生 iOS app
提供的一些新选项开始

44
00:03:09,323 --> 00:03:14,895
您的 iOS app 已经可以在 M1 Mac 上的
Mac App Store 中下载了

45
00:03:14,928 --> 00:03:17,231
只要您没有选择退出

46
00:03:17,264 --> 00:03:22,870
您的 App 就会在搜索中出现在
iPhone and iPad Apps 标签下

47
00:03:22,903 --> 00:03:25,439
我们还增加了几个新功能

48
00:03:25,472 --> 00:03:28,976
可以改善您在 Mac 上的应用体验

49
00:03:29,009 --> 00:03:33,080
您可以将两个新的键值
添加到您的 Info.plist 中

50
00:03:33,113 --> 00:03:38,385
这可以让您指定 iOS app
在 Mac 上的启动方式

51
00:03:38,418 --> 00:03:41,688
这些键值不绑定任何 SDK 版本

52
00:03:41,722 --> 00:03:47,127
在 iOS 和 macOS 12.1 之前的
Mac 上都是被忽略的

53
00:03:47,160 --> 00:03:50,330
所以它们可以安全添加到
任何会受益的 App 中

54
00:03:51,865 --> 00:03:55,769
第一个键值
“UISupportsTrueScreenSizeOnMac”

55
00:03:55,802 --> 00:03:58,138
表明您的 App 已经为

56
00:03:58,172 --> 00:04:03,143
它可能遇到的各种显示配置
做好了准备

57
00:04:03,177 --> 00:04:05,879
通过这种方式
您的 App 可以获得真实的屏幕尺寸

58
00:04:05,913 --> 00:04:10,250
和像素密度
而不是兼容的 iPad 尺寸

59
00:04:13,387 --> 00:04:18,025
第二个键值
“UILaunchToFullScreenByDefaultOnMac”

60
00:04:18,058 --> 00:04:21,695
告诉系统您的 App 希望在启动后

61
00:04:21,728 --> 00:04:23,997
立即进入全屏模式

62
00:04:24,031 --> 00:04:26,200
这两个键值可以很好地协同工作

63
00:04:26,233 --> 00:04:29,102
特别是对于游戏和多媒体应用程序

64
00:04:29,136 --> 00:04:34,007
提供像素完美 无边框的全屏体验

65
00:04:35,609 --> 00:04:36,977
这些键值已被获奖的

66
00:04:37,010 --> 00:04:40,314
Sky: Children of the Light 采用

67
00:04:40,347 --> 00:04:43,784
可以立即提供沉浸的体验

68
00:04:43,817 --> 00:04:47,855
游戏一启动
屏幕上就充满了丰富的细节

69
00:04:47,888 --> 00:04:51,992
把您拉进美丽的探索世界

70
00:04:52,025 --> 00:04:57,130
在 Mac 上改善应用体验的
另一种方法是使用触控替代

71
00:04:57,164 --> 00:05:01,869
它可以自动将键盘 鼠标
和触控板输入

72
00:05:01,902 --> 00:05:07,074
转换为 App 期望的
iOS 多点触摸手势和设备运动

73
00:05:08,008 --> 00:05:11,245
我们已经为 app store 上

74
00:05:11,278 --> 00:05:14,982
许多流行的游戏添加了
内置的触摸替代支持

75
00:05:15,015 --> 00:05:18,418
启动后 它们会自动显示一个教程

76
00:05:18,452 --> 00:05:22,189
解释其触摸控制如何转换为
键盘 鼠标

77
00:05:22,222 --> 00:05:24,157
或触控板

78
00:05:24,191 --> 00:05:28,295
例如 箭头键可用于模拟从窗口中心

79
00:05:28,328 --> 00:05:30,163
进行的滑动

80
00:05:30,197 --> 00:05:33,000
空格键可用于执行轻触

81
00:05:35,202 --> 00:05:38,138
要选择自动开启触控替代

82
00:05:38,172 --> 00:05:41,041
请在您的 App 中创建一个名为

83
00:05:41,074 --> 00:05:46,847
com.apple.uikit.inputalternatives.plist 的
新 plist 文件

84
00:05:48,649 --> 00:05:52,186
首先 添加一个名为
defaultEnablement 的键值

85
00:05:52,219 --> 00:05:54,454
该键值的字符串值为 enabled

86
00:05:54,488 --> 00:05:58,992
它告诉系统立即打开触摸替代

87
00:06:01,028 --> 00:06:05,232
在那下面 添加另一个名为
requiredOnboarding 的键值

88
00:06:05,265 --> 00:06:08,735
这是一个数组 其中包含您认为

89
00:06:08,769 --> 00:06:11,638
最适合您的 App 的控制列表

90
00:06:14,074 --> 00:06:16,109
您可以选择展示

91
00:06:16,143 --> 00:06:18,879
五种不同的控制选项

92
00:06:18,912 --> 00:06:23,183
从触控板上点击 倾斜 拖动 滑动

93
00:06:23,217 --> 00:06:25,953
和来自触控板的直接触控输入

94
00:06:27,454 --> 00:06:30,257
请注意
当启用触控替代时

95
00:06:30,290 --> 00:06:32,659
所有这些控制都将处于开启状态

96
00:06:32,693 --> 00:06:36,430
但您仍应决定哪些
对您的 App 最有意义

97
00:06:36,463 --> 00:06:41,802
并且仅将您想要突出显示的控制方式
添加到您的 onboarding plist

98
00:06:41,835 --> 00:06:44,705
当您的 App 在 Mac 上运行时
会检测到这一选项

99
00:06:44,738 --> 00:06:50,744
并且在首次启动时会显示引导页面
突出显示这些控制方式

100
00:06:50,777 --> 00:06:54,147
在您的 App 设置中
人们可以在显示

101
00:06:54,181 --> 00:06:58,585
plist 中指定的首选控制方式
和所有控制方式之间

102
00:06:58,619 --> 00:07:00,721
进行切换

103
00:07:02,289 --> 00:07:06,960
当然 最好的选择是在您的 App 中

104
00:07:06,994 --> 00:07:09,530
直接实现键盘和光标支持

105
00:07:09,563 --> 00:07:14,001
通过该操作 您可以确保您的 App
在所有设备上都运行良好

106
00:07:14,034 --> 00:07:18,572
包括带有键盘的 iPad 和 Mac

107
00:07:19,973 --> 00:07:22,609
若想了解更多有关信息 请观看视频

108
00:07:22,643 --> 00:07:25,145
“Support hardware keyboards
in your app”

109
00:07:25,179 --> 00:07:28,215
和 “Handle trackpad
and mouse input”

110
00:07:28,248 --> 00:07:34,521
现在我将快速介绍成为
Mac Catalyst app 的过程

111
00:07:35,556 --> 00:07:39,726
通过在您的项目设置中
添加 Mac Catalyst 目标

112
00:07:39,760 --> 00:07:44,231
您的 App 将自动转换为
能够在每个 Mac 上运行的

113
00:07:44,264 --> 00:07:46,667
完整 Mac Catalyst app

114
00:07:46,700 --> 00:07:52,005
并允许您使用 Mac Catalyst API
对其进行进一步自定义

115
00:07:52,039 --> 00:07:56,043
您还可以选择为 Mac 优化界面

116
00:07:56,076 --> 00:07:59,279
为您提供原生的 AppKit 样式控件

117
00:07:59,313 --> 00:08:02,883
并确保您的 App 内容
以原生规模呈现

118
00:08:04,918 --> 00:08:08,722
我将使用 Markdown demo app

119
00:08:08,755 --> 00:08:11,525
团队一直致力于突出其 iPad 的新功能

120
00:08:11,558 --> 00:08:16,430
当我第一次将它移植到 Mac 上时
它是以 “Scaled to Match iPad” 模式运行的

121
00:08:18,198 --> 00:08:20,734
当我切换到 Optimize for Mac 时

122
00:08:20,767 --> 00:08:23,437
许多更改会自动发生

123
00:08:25,239 --> 00:08:27,241
并排比较时

124
00:08:27,274 --> 00:08:29,877
差异是显而易见的

125
00:08:29,910 --> 00:08:32,012
当该 App 针对 Mac 进行优化时

126
00:08:32,045 --> 00:08:34,781
UINavigationBar 被转换为

127
00:08:34,815 --> 00:08:36,884
丰富的 NSToolbar

128
00:08:36,917 --> 00:08:39,887
提供原生 AppKit 控件

129
00:08:39,920 --> 00:08:43,824
其他控件也会发生这种转换

130
00:08:43,857 --> 00:08:47,394
文本大小也会随之调整

131
00:08:47,427 --> 00:08:50,931
iPad 惯用法中的文本
以 iPad 大小呈现

132
00:08:50,964 --> 00:08:56,303
然后缩小到原始大小的 77%

133
00:08:56,336 --> 00:09:00,841
Mac 惯用法中的文本
通过本地 Mac 字体渲染来处理

134
00:09:00,874 --> 00:09:04,244
这种渲染以像素级进行

135
00:09:04,278 --> 00:09:06,246
这对我们的 App 来说很理想

136
00:09:06,280 --> 00:09:10,484
因为它能确保文本看起来总是清晰的

137
00:09:10,517 --> 00:09:13,387
当 App 选择加入 Mac Catalyst 后

138
00:09:13,420 --> 00:09:15,956
我想检查一下它的工作情况

139
00:09:15,989 --> 00:09:19,960
并深入了解由 iPadOS 16 的新 API

140
00:09:19,993 --> 00:09:24,231
提供的新的自适配 Mac 行为

141
00:09:24,264 --> 00:09:27,601
如果您已经看过
“Meet desktop-class iPad”

142
00:09:27,634 --> 00:09:30,370
和 “Build a desktop-class
iPad app”

143
00:09:30,404 --> 00:09:32,639
那您已经了解了许多

144
00:09:32,673 --> 00:09:37,044
使用 iPadOS 16 增强 App 的新工具

145
00:09:37,077 --> 00:09:39,780
这些新的 API 完美地转换成了

146
00:09:39,813 --> 00:09:43,183
原生 Mac 表现形式

147
00:09:43,217 --> 00:09:45,552
我将浏览一下 markdown app

148
00:09:45,586 --> 00:09:48,288
并重点介绍其中的一些新行为

149
00:09:49,623 --> 00:09:55,963
控件和导航从 UINavigationBar
转换为 NSToolbar

150
00:09:55,996 --> 00:09:58,699
如果您还没有创建工具栏

151
00:09:58,732 --> 00:10:01,668
我们会自动为您提供一个

152
00:10:01,702 --> 00:10:05,105
如果您已经在 Catalyst 中
管理了自己的 NSToolbar

153
00:10:05,138 --> 00:10:07,207
我们会为您保留原样

154
00:10:09,009 --> 00:10:13,180
中心项目控件变成 NSToolbarItem

155
00:10:15,082 --> 00:10:16,750
对于基于文稿的应用程序

156
00:10:16,783 --> 00:10:19,987
您的窗口标题会显示文稿名称

157
00:10:20,020 --> 00:10:25,058
如果在辅助功能系统设置中
启用了显示窗口标题图标

158
00:10:25,092 --> 00:10:27,895
那么文件代理图标也会显示出来

159
00:10:27,928 --> 00:10:30,864
就像您在 Mac 上看到的那样

160
00:10:32,432 --> 00:10:35,202
如果您使用导航控制器

161
00:10:35,235 --> 00:10:38,105
后退按钮和其他导航控件

162
00:10:38,138 --> 00:10:42,142
也会出现在工具栏中

163
00:10:42,176 --> 00:10:45,579
此外 您还可以在文件菜单中
获得新的以文档为中心的

164
00:10:45,612 --> 00:10:47,347
菜单项

165
00:10:47,381 --> 00:10:51,885
复制 移到 重新命名 和 导出为

166
00:10:53,887 --> 00:10:55,856
要启用这些菜单项

167
00:10:55,889 --> 00:11:01,862
请确保响应链中的某个对象
重载了 UIResponder 的 duplicate

168
00:11:01,895 --> 00:11:05,299
move rename 和 export 这些函数

169
00:11:07,067 --> 00:11:10,003
如果您的 App
不需要这些文件菜单项

170
00:11:10,037 --> 00:11:13,440
可以用 UIMenuBuilder 把它们去掉

171
00:11:13,473 --> 00:11:18,779
在 App delegate 上实现
buildMenu 方法来控制 App 菜单

172
00:11:20,247 --> 00:11:26,887
新文档菜单项的 UIMenuIdentifier
值为 .document

173
00:11:28,188 --> 00:11:30,257
如果您的 App 包括搜索栏

174
00:11:30,290 --> 00:11:34,461
它也会被自动加入 NSToolbar

175
00:11:34,494 --> 00:11:38,298
首先显示为一个搜索按钮

176
00:11:38,332 --> 00:11:42,069
单击会扩展为搜索栏

177
00:11:42,102 --> 00:11:47,774
支持它的 UISearchTextField
驻留在 NSToolbarItem 内部

178
00:11:47,808 --> 00:11:51,545
这也可用于自定义视图

179
00:11:51,578 --> 00:11:54,781
搜索建议菜单和搜索范围栏

180
00:11:54,815 --> 00:11:58,285
也被转换成原生 AppKit 控件

181
00:12:00,153 --> 00:12:04,124
除了通过采用桌面级 iPad 功能

182
00:12:04,157 --> 00:12:07,394
免费获得的所有新 Mac 行为

183
00:12:07,427 --> 00:12:12,199
我们还添加了
几个新的 Catalyst-specific API

184
00:12:12,232 --> 00:12:15,903
来改进多窗口和工具栏行为

185
00:12:15,936 --> 00:12:19,306
我将再次浏览我们的 Markdown app

186
00:12:19,339 --> 00:12:25,012
并混合使用新旧 API 添加
这些特定于 Mac 的功能

187
00:12:25,045 --> 00:12:27,848
从现有的 Mac Catalyst API 中

188
00:12:27,881 --> 00:12:31,185
我选择了几个真正能增强
我们的 App 的

189
00:12:33,187 --> 00:12:36,490
我采用了 Mac 惯用法来获得

190
00:12:36,523 --> 00:12:39,459
原生控件和自动 NSToolbar

191
00:12:39,493 --> 00:12:43,897
我添加了一个自定义指针
因此当鼠标移动到

192
00:12:43,931 --> 00:12:47,768
自定义拆分视图中间的滑块柄上
指针将切换为

193
00:12:47,801 --> 00:12:50,070
水平双箭头

194
00:12:50,103 --> 00:12:52,706
指示拆分可以调整大小

195
00:12:53,841 --> 00:12:55,742
我还用
UIApplicationSupportsPrintCommand plist 键值

196
00:12:55,776 --> 00:12:59,880
添加了打印支持

197
00:13:02,316 --> 00:13:04,251
当考虑到您的 App 时

198
00:13:04,284 --> 00:13:08,422
不用觉得您需要添加
这里面的每一项功能

199
00:13:08,455 --> 00:13:11,725
相反 请考虑您创建的 App 类型

200
00:13:11,758 --> 00:13:14,361
以及哪些功能最适合它

201
00:13:14,394 --> 00:13:18,599
查看 Mac 和 Mac Catalyst
Human Interface Guidelines

202
00:13:18,632 --> 00:13:22,135
并在您使用的其他 App 中寻找灵感

203
00:13:23,303 --> 00:13:25,339
实现了这些功能后

204
00:13:25,372 --> 00:13:28,642
该 App 已经非常出色了

205
00:13:28,675 --> 00:13:34,014
现在有了一些新的 Mac Catalyst API
我可以做的更多

206
00:13:34,047 --> 00:13:38,785
我们添加了新的选项
来定制 App 窗口框和控件

207
00:13:38,819 --> 00:13:42,756
在 NSToolbar 中显示 UIView 内容

208
00:13:42,789 --> 00:13:46,527
以及从工具栏项目中显示弹出窗口

209
00:13:46,560 --> 00:13:52,699
我将继续使用这些新的 API
在 Mac 上进一步改进我们的 App

210
00:13:52,733 --> 00:13:54,701
从窗口开始

211
00:13:56,436 --> 00:14:02,910
Catalyst app 使用现有的
UIWindowScene API 支持多个窗口

212
00:14:02,943 --> 00:14:05,045
在 macOS Ventura 中

213
00:14:05,078 --> 00:14:09,716
我们新增了 API 让您
可以进一步自定义 App 窗口

214
00:14:09,750 --> 00:14:13,187
设置交通灯窗口控件的样式

215
00:14:13,220 --> 00:14:17,124
以编程方式调整窗口大小和位置

216
00:14:17,157 --> 00:14:20,827
以及针对特定窗口禁用全屏

217
00:14:22,663 --> 00:14:25,899
我将使用这些工具
向 markdown app 添加一个功能

218
00:14:25,933 --> 00:14:30,604
通过一个有用的辅助面板
显示markdown 语法

219
00:14:30,637 --> 00:14:35,642
使用新的几何属性请求 API
此面板将变小

220
00:14:35,676 --> 00:14:39,246
并禁用其最小化和缩放按钮

221
00:14:41,782 --> 00:14:47,020
在窗口创建时 在我的 Scene Delegate 的
sceneWillConnectToSession 方法中

222
00:14:47,054 --> 00:14:49,456
我创建了我想要的 frame

223
00:14:49,489 --> 00:14:55,562
最好总是从 effectiveGeometry
直接获取当前 frame 开始

224
00:14:55,596 --> 00:15:00,267
在创建窗口之前
它被初始化为 CGRectNull

225
00:15:00,300 --> 00:15:05,639
系统知道在初始窗口创建时
要忽略它的值

226
00:15:05,672 --> 00:15:09,643
我修改了大小
然后通过创建一个

227
00:15:09,676 --> 00:15:13,814
UIWindowScene
.macGeometryPreferences 对象

228
00:15:13,847 --> 00:15:18,352
通过 systemFrame 参数
给窗口设置一个新的 frame

229
00:15:20,354 --> 00:15:25,859
然后我使用
scene.requestGeometryUpdate 方法提交更新

230
00:15:25,893 --> 00:15:27,828
因为这是一个请求

231
00:15:27,861 --> 00:15:31,698
系统保留拒绝新几何属性的权利

232
00:15:31,732 --> 00:15:36,270
在这种情况下 它将调用
错误处理回调并提供详细信息

233
00:15:36,303 --> 00:15:40,374
在此处所示的窗口
willConnectToSession 方法中完成时

234
00:15:40,407 --> 00:15:43,911
该请求将应用于
您的 App 的首次启动

235
00:15:43,944 --> 00:15:48,148
但是会被系统在以后启动时

236
00:15:48,182 --> 00:15:51,151
执行的任何适用状态恢复所取代

237
00:15:52,920 --> 00:15:55,589
由于这是一个小的辅助面板

238
00:15:55,622 --> 00:15:57,724
我还从新的 windowScene
windowingBehaviors 对象中

239
00:15:57,758 --> 00:16:01,395
禁用了最小化按钮

240
00:16:01,428 --> 00:16:04,398
并从 sizeRestrictions 的新属性中

241
00:16:04,431 --> 00:16:07,601
禁用了全屏显示窗口的功能

242
00:16:09,603 --> 00:16:12,372
当这个新的
Markdown Hints 窗口出现时

243
00:16:12,406 --> 00:16:16,276
它会以我们要求的大小出现

244
00:16:16,310 --> 00:16:21,315
黄色的最小化
和绿色的缩放窗口控制按钮被禁用

245
00:16:21,348 --> 00:16:23,951
只留下红色的关闭按钮

246
00:16:26,520 --> 00:16:30,524
这些选项不仅仅是为窗口创建保留的

247
00:16:30,557 --> 00:16:32,960
在窗口生命周期中的任何时候

248
00:16:32,993 --> 00:16:34,828
您都可以从

249
00:16:34,862 --> 00:16:38,131
只读 resolvedGeometry 属性
检查其当前 frame

250
00:16:38,165 --> 00:16:40,367
根据需要进行修改

251
00:16:40,400 --> 00:16:44,438
并请求新的几何属性更新

252
00:16:44,471 --> 00:16:48,675
下面是另一个例子
展示了如何修改窗口的原点

253
00:16:48,709 --> 00:16:51,211
保持其大小不变

254
00:16:53,146 --> 00:16:57,751
几何属性有两个重要方面需要记住

255
00:16:57,784 --> 00:17:01,655
首先 因为 systemFrame
决定了 Mac 桌面上

256
00:17:01,688 --> 00:17:03,557
窗口的 frame

257
00:17:03,590 --> 00:17:06,827
所以 systemFrame 属性的
一个点的大小

258
00:17:06,860 --> 00:17:10,531
始终是一个 AppKit 点的大小

259
00:17:10,564 --> 00:17:13,200
如果您的 App 针对 Mac 进行了优化

260
00:17:13,233 --> 00:17:16,803
那这与您的 UI 元素的比例相同

261
00:17:16,837 --> 00:17:19,973
然而 如果您的 App 按比例
缩放到与 iPad 匹配

262
00:17:20,007 --> 00:17:24,578
则其比例因子将相差 77%

263
00:17:24,611 --> 00:17:27,481
其次 坐标空间的原点

264
00:17:27,514 --> 00:17:31,051
是主显示器的左上角

265
00:17:31,084 --> 00:17:33,187
如果您有多台显示器

266
00:17:33,220 --> 00:17:36,557
主显示是在系统显示设置中

267
00:17:36,590 --> 00:17:39,459
显示菜单栏的那个

268
00:17:41,128 --> 00:17:43,630
使用新的 Mac Catalyst API

269
00:17:43,664 --> 00:17:45,599
您可以控制三个窗口控制按钮中

270
00:17:45,632 --> 00:17:48,702
每个按钮的状态

271
00:17:48,735 --> 00:17:53,907
UIWindowScene 上新的
windowingBehaviors 对象

272
00:17:53,941 --> 00:17:56,677
有 closable
和 miniaturizable 两个属性

273
00:17:56,710 --> 00:17:59,680
这两个属性
将调整这些相应的窗口行为

274
00:17:59,713 --> 00:18:03,450
并启用或禁用红色

275
00:18:03,483 --> 00:18:06,553
和黄色窗口按钮

276
00:18:07,521 --> 00:18:12,292
绿色窗口按钮既可以
在桌面上调整窗口大小

277
00:18:12,326 --> 00:18:15,829
也可以全屏显示窗口

278
00:18:15,863 --> 00:18:19,700
您可以使用 sizeRestrictions 上的
新属性 allowsFullscreen

279
00:18:19,733 --> 00:18:22,936
来禁用全屏

280
00:18:22,970 --> 00:18:27,074
或者通过使用大小限制

281
00:18:27,107 --> 00:18:31,912
并将最小和最大尺寸设置为
相同的大小来禁用调整大小

282
00:18:31,945 --> 00:18:37,284
通过这两种方式 绿色按钮也被禁用

283
00:18:38,919 --> 00:18:42,456
您可以使用新的 isFullScreen 属性

284
00:18:42,489 --> 00:18:46,426
检查您的窗口当前是否是全屏的

285
00:18:46,460 --> 00:18:50,764
现在我将把重点放在
改进 Mac 的工具栏上

286
00:18:50,797 --> 00:18:54,168
我们为自定义工具栏添加了新选项

287
00:18:54,201 --> 00:18:58,438
无论您是依赖
UINavigationBar 的自动转换

288
00:18:58,472 --> 00:19:02,142
还是在 App 代码中管理
自己的 NSToolbar 都可以用这些选项

289
00:19:04,077 --> 00:19:05,579
Mac Catalyst 中新增了

290
00:19:05,612 --> 00:19:10,317
可以将 UIView 作为项目
添加到 NSToolbar 中

291
00:19:10,350 --> 00:19:13,620
我为我们的 App 设计了
一个自定义 UIView

292
00:19:13,654 --> 00:19:16,156
以显示当前的字数

293
00:19:16,190 --> 00:19:19,059
单击后 它会显示一个弹出窗口

294
00:19:19,092 --> 00:19:22,930
提供额外的详细信息
如段落和章节数

295
00:19:22,963 --> 00:19:26,300
阅读时间和翻译

296
00:19:26,333 --> 00:19:29,670
由于我使用的是新的桌面级别 iPad API

297
00:19:29,703 --> 00:19:33,307
我的 UIBarButton 项目上的
customView 属性

298
00:19:33,340 --> 00:19:36,977
会被自动包装并添加到工具栏中

299
00:19:37,010 --> 00:19:40,480
但是如果您自行管理 NSToolbar

300
00:19:40,514 --> 00:19:44,051
我们还添加了
一个新的 NSToolbarItem 子类

301
00:19:44,084 --> 00:19:47,454
叫做 NSUIViewToolbarItem

302
00:19:48,222 --> 00:19:53,694
您可以像使用任何
其他 NSToolbarItem 一样

303
00:19:53,727 --> 00:19:55,696
使用 NSUIViewToolbarItem

304
00:19:55,729 --> 00:20:00,567
从 NSToolbarDelegate 的
itemForIdentifier 方法实例化工具栏项

305
00:20:00,601 --> 00:20:03,504
初始化通过打包一个 UIView

306
00:20:03,537 --> 00:20:06,673
然后将其插入 NSToolbar

307
00:20:09,776 --> 00:20:13,580
NSToolbar 要求
在工具栏自定义模式下

308
00:20:13,614 --> 00:20:16,383
工具栏项实例都是唯一的

309
00:20:16,416 --> 00:20:21,388
如果您从 UINavigationBar
使用自动 NSToolbar 托管

310
00:20:21,421 --> 00:20:26,660
系统会自动克隆视图
以进行工具栏自定义

311
00:20:26,693 --> 00:20:29,897
但是 如果您管理自己的 NSToolbar

312
00:20:29,930 --> 00:20:32,699
那么您的代理就需要为
每个 NSUIViewToolbarItem 实例

313
00:20:32,733 --> 00:20:37,804
创建唯一的 UIView 实例

314
00:20:37,838 --> 00:20:41,842
而不是重复使用相同的 UIView 实例

315
00:20:43,744 --> 00:20:45,846
使用工具栏中的新项目

316
00:20:45,879 --> 00:20:48,549
我将添加 popover 行为

317
00:20:48,582 --> 00:20:50,651
在工具栏项的操作中

318
00:20:50,684 --> 00:20:53,187
我创建了 popover 视图控制器

319
00:20:53,220 --> 00:20:57,124
并将其 sourceItem
设置为我的工具栏项

320
00:20:57,157 --> 00:20:59,426
然后我来展示 popover

321
00:21:01,595 --> 00:21:03,664
有了 popover 代码后

322
00:21:03,697 --> 00:21:06,800
单击工具栏项会在
锚定在工具栏项上的

323
00:21:06,834 --> 00:21:11,104
popover 展示中显示更多详细信息

324
00:21:12,806 --> 00:21:15,142
与 Mac Catalyst 中的其他控件一样

325
00:21:15,175 --> 00:21:19,813
您可以通过使用
UINavigationBar 上的新属性

326
00:21:19,847 --> 00:21:23,984
preferredBehavioralStyle 来选择
是否使用导航栏转换

327
00:21:24,017 --> 00:21:28,088
它的默认值是自动的
但您可以将其设置为 .mac

328
00:21:28,121 --> 00:21:31,959
以显式请求转换

329
00:21:31,992 --> 00:21:33,760
通过将其设置为 .pad

330
00:21:33,794 --> 00:21:37,731
您的导航栏将不再自动转换

331
00:21:39,833 --> 00:21:43,770
使用这些选项
您可以向 App 的工具栏

332
00:21:43,804 --> 00:21:45,639
添加新的自定义层

333
00:21:46,974 --> 00:21:50,844
我们会很高兴看到您使用这些新工具

334
00:21:50,878 --> 00:21:53,881
使您的 App 变得更好

335
00:21:53,914 --> 00:21:57,684
当您的 iPad app 自动出现
在 Mac app store 中

336
00:21:57,718 --> 00:22:00,954
它可供全新的受众使用

337
00:22:00,988 --> 00:22:03,123
当您上传您的 iPad app 时

338
00:22:03,156 --> 00:22:06,426
请在 Mac 上运行它并亲自尝试

339
00:22:06,460 --> 00:22:11,298
或者通过转成 Mac Catalyst app
将其提升到新的水平

340
00:22:11,331 --> 00:22:16,103
并使用 iOS 16 和
macOS Ventura 中的新 API

341
00:22:16,136 --> 00:22:18,205
使您的 App 达到最佳状态

342
00:22:19,339 --> 00:22:22,075
将您的 App 带到 Mac 上很容易

343
00:22:22,109 --> 00:22:24,311
我们很愿意展示您的辛勤工作

344
00:22:24,344 --> 00:22:28,282
并迫不及待地想要尝试
您接下来要构建的内容了

345
00:22:28,315 --> 00:22:30,217
谢谢大家

