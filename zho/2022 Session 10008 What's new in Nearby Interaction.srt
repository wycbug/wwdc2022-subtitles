1
00:00:00,033 --> 00:00:03,003
♪ 柔和乐器演奏的嘻哈音乐 ♪

2
00:00:03,003 --> 00:00:09,910
♪

3
00:00:09,910 --> 00:00:12,713
嗨 我是 Jon Schoenberg
是一名工程师

4
00:00:12,713 --> 00:00:15,082
就职于 Apple 的
定位技术团队

5
00:00:15,082 --> 00:00:18,018
本期讲座 我将介绍
Nearby Interaction 中的

6
00:00:18,018 --> 00:00:20,721
一项新功能这项功能会为您

7
00:00:20,721 --> 00:00:23,123
打造更丰富 更多样化

8
00:00:23,123 --> 00:00:25,259
且具有空间感知效果的体验

9
00:00:25,259 --> 00:00:27,928
Nearby Interaction 框架使得

10
00:00:27,928 --> 00:00:31,398
充分利用 U1 的能力更加容易

11
00:00:31,398 --> 00:00:34,935
U1 是 Apple 的
超宽带技术芯片

12
00:00:34,935 --> 00:00:39,139
这一框架能够
在附近的 Apple 设备

13
00:00:39,139 --> 00:00:42,276
或与 U1 超宽带芯片
兼容的配件之间

14
00:00:42,276 --> 00:00:47,014
创建精确的空间感知交互

15
00:00:47,014 --> 00:00:48,749
我们先快速回顾一下

16
00:00:48,749 --> 00:00:52,519
过去两年来为您提供的功能

17
00:00:52,519 --> 00:00:56,190
当 Nearby Interaction
在 WWDC 2020 上首次亮相时

18
00:00:56,190 --> 00:00:58,258
这项功能专注于的是利用 U1

19
00:00:58,258 --> 00:01:02,462
在两台 iPhone 之间
创造并运行会话

20
00:01:02,462 --> 00:01:06,333
在 WWDC 2021 上
这项功能得到了扩展

21
00:01:06,333 --> 00:01:09,570
支持与 Apple Watch
和第三方超宽带兼容配件

22
00:01:09,570 --> 00:01:13,240
运行会话

23
00:01:13,240 --> 00:01:14,875
如果您有兴趣深入了解

24
00:01:14,875 --> 00:01:17,511
Nearby Interaction 框架的 API

25
00:01:17,511 --> 00:01:20,848
请查看 WWDC 2020 年

26
00:01:20,848 --> 00:01:22,082
“了解 Nearby Interaction”演讲

27
00:01:22,082 --> 00:01:25,285
和 2021 年的

28
00:01:25,285 --> 00:01:27,354
“探索与第三方配件的
Nearby Interaction”

29
00:01:27,354 --> 00:01:29,489
用户社区对 Nearby Interaction
的反响 令我们非常兴奋

30
00:01:29,489 --> 00:01:31,992
在本期讲座中

31
00:01:31,992 --> 00:01:34,228
我很高兴能为您介绍新功能

32
00:01:34,228 --> 00:01:36,530
和新功能改进

33
00:01:36,530 --> 00:01:39,099
我将围绕两个主题展开

34
00:01:39,099 --> 00:01:42,135
使用 ARKit 增强
Nearby Interaction

35
00:01:42,135 --> 00:01:44,404
和后台会话

36
00:01:44,404 --> 00:01:46,573
同时 我将分享一些

37
00:01:46,573 --> 00:01:50,611
能简化 Nearby Interaction
框架使用的改进

38
00:01:50,611 --> 00:01:54,314
而作为总结
我会聊一聊对去年宣布的

39
00:01:54,314 --> 00:01:56,450
第三方硬件支持的更新

40
00:01:56,450 --> 00:01:58,018
我们兴奋地期待着

41
00:01:58,018 --> 00:01:59,520
您会如何使用这些新功能

42
00:01:59,520 --> 00:02:02,556
那我们来深入了解一下细节吧

43
00:02:02,556 --> 00:02:04,992
我先从令人振奋的新功能开始说起

44
00:02:04,992 --> 00:02:09,062
这项新功能将 ARKit 与
Nearby Interaction 紧密集成

45
00:02:09,062 --> 00:02:12,533
这项新功能
通过利用 ARKit 计算的设备轨迹

46
00:02:12,533 --> 00:02:17,371
增强了 Nearby Interaction

47
00:02:17,371 --> 00:02:19,406
有 ARKit 增强的
Nearby Interaction 利用了

48
00:02:19,406 --> 00:02:22,109
与实现 AirTag 的
Precision Finding

49
00:02:22,109 --> 00:02:25,345
相同的底层技术

50
00:02:25,345 --> 00:02:29,783
而我们通过 Nearby Interaction
将这种技术提供给您

51
00:02:29,783 --> 00:02:32,619
最佳用例是引导用户

52
00:02:32,619 --> 00:02:36,190
找到附近特定对象的体验
例如放错地方的物品

53
00:02:36,190 --> 00:02:37,524
感兴趣的对象

54
00:02:37,524 --> 00:02:41,461
或用户想要与之交互的对象

55
00:02:41,461 --> 00:02:44,231
通过集成 ARKit 和
Nearby Interaction

56
00:02:44,231 --> 00:02:46,366
距离和方向的信息

57
00:02:46,366 --> 00:02:48,235
比单独使用 Nearby Interaction

58
00:02:48,235 --> 00:02:50,537
更稳定可用

59
00:02:50,537 --> 00:02:55,342
能有效拓宽超宽带视场

60
00:02:55,342 --> 00:02:58,245
最后 这个新功能

61
00:02:58,245 --> 00:03:02,049
最适合于与固定设备交互之用

62
00:03:02,049 --> 00:03:04,384
我们现在就演示一下

63
00:03:04,384 --> 00:03:07,688
ARKit 和
Nearby Interaction 的新集成

64
00:03:07,688 --> 00:03:11,358
在您 App 中的可能性

65
00:03:11,358 --> 00:03:14,428
我手头有一个用于
喷气发动机博物馆的 App

66
00:03:14,428 --> 00:03:16,430
博物馆中具有超宽带配件

67
00:03:16,430 --> 00:03:18,532
帮助引导用户参观展品

68
00:03:18,532 --> 00:03:21,969
我们去找下一个喷气发动机吧

69
00:03:21,969 --> 00:03:24,271
当用户选择前往下一个展览时

70
00:03:24,271 --> 00:03:27,307
App 发现超宽带配件

71
00:03:27,307 --> 00:03:29,142
并进行必要的信息交换

72
00:03:29,142 --> 00:03:31,645
从而开始使用 Nearby Interaction

73
00:03:31,645 --> 00:03:33,914
然后 App 指示用户

74
00:03:33,914 --> 00:03:37,584
将手机左右移动 通过 ARKit

75
00:03:37,584 --> 00:03:40,387
使用增强的 Nearby Interaction 模式

76
00:03:40,387 --> 00:03:45,058
App 开始寻找
下一个展览的物理位置

77
00:03:45,058 --> 00:03:47,728
现在 App 确定了

78
00:03:47,728 --> 00:03:49,997
下一个展览的方向

79
00:03:49,997 --> 00:03:52,499
一个简单的箭头图标告诉用户

80
00:03:52,499 --> 00:03:55,869
去查看箭头指向位置出现的东西

81
00:03:55,869 --> 00:03:58,505
这种丰富的空间感知信息

82
00:03:58,505 --> 00:04:02,576
利用 ARKit 和
Nearby Interaction 的结合

83
00:04:02,576 --> 00:04:06,313
甚至可以指向
与用户行进方向相反的

84
00:04:06,313 --> 00:04:10,250
在用户背后的展品

85
00:04:10,250 --> 00:04:12,719
最后  App 会在

86
00:04:12,719 --> 00:04:16,690
AR 世界中
显示下一个展览位置的叠加层

87
00:04:16,690 --> 00:04:19,159
而 App 会提示用户
稍微上下移动 iPhone

88
00:04:19,159 --> 00:04:22,262
从而在 AR 世界中

89
00:04:22,262 --> 00:04:23,964
找到展品的位置

90
00:04:23,964 --> 00:04:26,567
将 AR 内容放入场景中后

91
00:04:26,567 --> 00:04:29,770
Nearby Interaction
超宽带测量值

92
00:04:29,770 --> 00:04:31,705
与 ARKit 的强大组合

93
00:04:31,705 --> 00:04:35,642
能让用户轻松地前往

94
00:04:35,642 --> 00:04:38,111
下一个喷气发动机的位置

95
00:04:38,111 --> 00:04:42,349
我虽然没有找到喷气发动机
但我找到了皇后

96
00:04:42,349 --> 00:04:44,818
现在我们再看看

97
00:04:44,818 --> 00:04:47,287
如何启用这种增强的
Nearby Interaction 模式

98
00:04:47,287 --> 00:04:50,757
使用 ARKit 启用增强模式很简单
在 iOS 15 中 您可以通过在您的 App 中

99
00:04:50,757 --> 00:04:52,559
从附近的对等点
接受 NIDiscoveryToken

100
00:04:52,559 --> 00:04:55,829
创建一个会话配置

101
00:04:55,829 --> 00:04:57,965
并运行 NISession

102
00:04:57,965 --> 00:05:01,068
在新的和现有的
Nearby Interaction 用例上

103
00:05:01,068 --> 00:05:04,938
只需启用新的
isCameraAssistanceEnabled 属性

104
00:05:04,938 --> 00:05:08,375
这一属性位于
NIConfiguration 子类下

105
00:05:08,375 --> 00:05:11,245
就可以很轻松地
用 ARKit 启用增强模式

106
00:05:11,245 --> 00:05:13,080
若要使用 ARKit 的增强模式

107
00:05:13,080 --> 00:05:16,650
只需要设置

108
00:05:16,650 --> 00:05:18,452
isCameraAssistanceEnabled 属性

109
00:05:18,452 --> 00:05:20,354
当两台 Apple 设备交互时

110
00:05:20,354 --> 00:05:23,724
或一台 Apple 设备
与第三方超宽带配件交互时

111
00:05:23,724 --> 00:05:27,694
相机辅助是可用的

112
00:05:27,694 --> 00:05:30,063
我们来看看
当 NISession 在启用

113
00:05:30,063 --> 00:05:34,401
相机辅助的情况下运行时
会发生什么

114
00:05:34,401 --> 00:05:35,903
启用相机辅助功能后

115
00:05:35,903 --> 00:05:38,872
会在 Nearby Interaction 框架内

116
00:05:38,872 --> 00:05:41,808
自动创建一个 ARSessionan

117
00:05:41,808 --> 00:05:46,413
您不需要手动创建此 ARSession

118
00:05:46,413 --> 00:05:49,082
在启用了相机辅助的情况下
运行 NISession

119
00:05:49,082 --> 00:05:52,819
也会在 Nearby Interaction 框架中
自动创建 ARSession

120
00:05:52,819 --> 00:05:56,423
并运行 ARSession 框架

121
00:05:56,423 --> 00:06:00,394
ARSession 在 App 进程中运行

122
00:06:00,394 --> 00:06:01,795
因此

123
00:06:01,795 --> 00:06:06,200
App 必须
在它的 Info.plist 中

124
00:06:06,200 --> 00:06:09,336
提供 CameraUsageDescription
目的字符串

125
00:06:09,336 --> 00:06:13,674
确保字符串要有用
从而告诉你的用户

126
00:06:13,674 --> 00:06:19,379
为什么想要获得良好使用体验
必须要使用相机

127
00:06:19,379 --> 00:06:23,717
对于给定的 App
只能运行一个 ARSession

128
00:06:23,717 --> 00:06:26,620
也就是说 如果您的 App 中

129
00:06:26,620 --> 00:06:31,425
已经拥有 ARKit
就需要向 NISession 共享

130
00:06:31,425 --> 00:06:34,161
您创建的 ARSession

131
00:06:34,161 --> 00:06:36,430
要向 NISession
共享 ARSession

132
00:06:36,430 --> 00:06:39,466
可以使用 NISession 类上

133
00:06:39,466 --> 00:06:41,602
的一个新的 setARSession 方法

134
00:06:41,602 --> 00:06:46,306
在 NISession 上运行之前

135
00:06:46,306 --> 00:06:49,943
调用 setARSession 时

136
00:06:49,943 --> 00:06:51,979
在 Nearby Interaction 框架内

137
00:06:51,979 --> 00:06:54,248
不会自动创建 ARSessionan

138
00:06:54,248 --> 00:06:57,284
这确保了可以在 App 中

139
00:06:57,284 --> 00:07:00,554
在拥有 ARKit 体验的同时
能够获得

140
00:07:00,554 --> 00:07:02,723
Nearby Interaction 中的
相机辅助

141
00:07:02,723 --> 00:07:06,894
在这个 SwiftUI 示例中
作为 makeUIView 函数的一部分

142
00:07:06,894 --> 00:07:09,997
ARView 中的底层 ARSession

143
00:07:09,997 --> 00:07:16,303
通过新的 setARSession 方法
向 NISession 共享

144
00:07:16,303 --> 00:07:19,072
如果您直接使用 ARSession

145
00:07:19,072 --> 00:07:22,476
那么就需要
在 ARSession 上调用运行

146
00:07:22,476 --> 00:07:26,313
ARWorldTrackingConfiguration

147
00:07:26,313 --> 00:07:29,449
此外 还必须在
这个 ARConfiguration 中

148
00:07:29,449 --> 00:07:32,953
以特定的方式配置几个属性

149
00:07:32,953 --> 00:07:35,189
以确保相机辅助的

150
00:07:35,189 --> 00:07:37,925
高质量性能

151
00:07:37,925 --> 00:07:41,128
把 worldAlignment
设置为 .gravity

152
00:07:41,128 --> 00:07:44,698
禁用协作和 userFaceTracking

153
00:07:44,698 --> 00:07:47,768
initialWorldMap 为 nil
还有一个委托

154
00:07:47,768 --> 00:07:50,671
其
sessionShouldAttemptRelocalization 方法

155
00:07:50,671 --> 00:07:52,673
返回值应为 false

156
00:07:52,673 --> 00:07:54,241
我们再来看一些

157
00:07:54,241 --> 00:07:57,277
共享您创建的
ARSession 时的最优方法

158
00:07:57,277 --> 00:08:01,014
在您的 NISessionDelegate
didInvalidateWith 错误方法中

159
00:08:01,014 --> 00:08:04,785
请一直检查错误代码

160
00:08:04,785 --> 00:08:08,856
如果用于运行共享 ARSession
的 ARConfiguration

161
00:08:08,856 --> 00:08:11,725
不符合概要属性

162
00:08:11,725 --> 00:08:14,695
NISession 将会失效

163
00:08:14,695 --> 00:08:18,665
将会返回一个新的 NIError 码

164
00:08:18,665 --> 00:08:21,535
invalidARConfiguration

165
00:08:21,535 --> 00:08:24,471
若要在 App 中
接收附近的对象更新

166
00:08:24,471 --> 00:08:28,141
请继续在您的
NISessionDelegate 中

167
00:08:28,141 --> 00:08:30,577
使用
didUpdateNearbyObjects 方法

168
00:08:30,577 --> 00:08:32,946
在您的
didUpdateNearbyObjects 方法中

169
00:08:32,946 --> 00:08:36,617
您可能会检查附近的对象
以找到所需的对等方

170
00:08:36,617 --> 00:08:38,852
并根据 NINearbyObject 的

171
00:08:38,852 --> 00:08:43,323
距离和方向属性更新 UI

172
00:08:43,323 --> 00:08:47,461
调用它的时候要时刻小心
因为可能是 nil

173
00:08:47,461 --> 00:08:49,496
启用相机辅助功能后

174
00:08:49,496 --> 00:08:54,401
NINearbyObject 中
有两个新属性可用

175
00:08:54,401 --> 00:08:57,704
第一个是 horizontalAngle

176
00:08:57,704 --> 00:08:59,640
这是以弧度表示的一维角

177
00:08:59,640 --> 00:09:03,377
指示到附近物体的方位角方向

178
00:09:03,377 --> 00:09:07,447
当不可用时 这个值将为 nil

179
00:09:07,447 --> 00:09:10,017
第二 verticalDirectionEstimate

180
00:09:10,017 --> 00:09:13,220
是垂直维度中

181
00:09:13,220 --> 00:09:14,955
与邻近对象的位置关系

182
00:09:14,955 --> 00:09:19,526
这是一个新的
VerticalDirectionEstimate 类型

183
00:09:19,526 --> 00:09:23,497
距离和方向表示用户设备

184
00:09:23,497 --> 00:09:27,067
和附近物体之间的关键空间关系

185
00:09:27,067 --> 00:09:31,305
距离以米为单位 方向是从您的设备

186
00:09:31,305 --> 00:09:34,975
到附近物体的一个三维矢量

187
00:09:34,975 --> 00:09:38,478
水平角是指

188
00:09:38,478 --> 00:09:41,215
运行 NISession
的设备与附近物体

189
00:09:41,215 --> 00:09:44,251
在局部水平面上的夹角

190
00:09:44,251 --> 00:09:46,420
水平角包括了两个设备之间的

191
00:09:46,420 --> 00:09:50,591
任何垂直位移偏移 和设备本身的

192
00:09:50,591 --> 00:09:52,926
任何水平旋转

193
00:09:52,926 --> 00:09:55,963
尽管物体方向是三维

194
00:09:55,963 --> 00:10:02,469
水平角是用一维的方式
表示了两个设备之间的朝向

195
00:10:02,469 --> 00:10:04,471
这个水平角属性

196
00:10:04,471 --> 00:10:07,574
与方向属性互补

197
00:10:07,574 --> 00:10:09,710
而如果方向无法识别

198
00:10:09,710 --> 00:10:12,212
水平角可以帮助您

199
00:10:12,212 --> 00:10:16,717
将用户引导至附近的对象

200
00:10:16,717 --> 00:10:20,254
垂直方向估计

201
00:10:20,254 --> 00:10:22,823
是对垂直位置信息的定性评估

202
00:10:22,823 --> 00:10:27,160
您可以利用它 引导用户前往不同层

203
00:10:27,160 --> 00:10:32,599
我们再来看看新的
VerticalDirectionEstimate 类型

204
00:10:32,599 --> 00:10:35,702
VerticalDirectionEstimate 是

205
00:10:35,702 --> 00:10:38,705
NINearbyObject 内嵌套的枚举

206
00:10:38,705 --> 00:10:41,808
表示与附近对象

207
00:10:41,808 --> 00:10:44,611
垂直关系的定性评估

208
00:10:44,611 --> 00:10:47,147
在使用
VerticalDirectionEstimate 前

209
00:10:47,147 --> 00:10:50,517
请确保检查
这项属性的值为 unknown

210
00:10:50,517 --> 00:10:55,756
垂直关系可以是
相同 (same) 上 (above) 下 (below)

211
00:10:55,756 --> 00:10:58,926
还有上或
下 (aboveOrBelow) 这样的特殊值

212
00:10:58,926 --> 00:11:02,996
这一特殊值表示
附近物体不在同一水平面上

213
00:11:02,996 --> 00:11:07,968
但位置不明显
可能在设备上方或下方

214
00:11:07,968 --> 00:11:11,071
超宽带测量值受

215
00:11:11,071 --> 00:11:12,506
视场和障碍物的影响

216
00:11:12,506 --> 00:11:14,575
用于方向信息的视场

217
00:11:14,575 --> 00:11:19,746
对应于从设备后部投射的锥形

218
00:11:19,746 --> 00:11:22,316
当启用相机辅助时

219
00:11:22,316 --> 00:11:26,086
从 ARKit 计算出的设备轨迹

220
00:11:26,086 --> 00:11:30,390
可以在更多场景中提供

221
00:11:30,390 --> 00:11:35,495
距离 方向 水平角度
和垂直方向估计

222
00:11:35,495 --> 00:11:39,099
有效扩展超宽带传感器的视场

223
00:11:39,099 --> 00:11:42,936
我们再来看利用
ARKit 和 Nearby Interaction 的集成

224
00:11:42,936 --> 00:11:48,475
在场景中放置 AR 对象

225
00:11:48,475 --> 00:11:52,579
为了让您更容易地将

226
00:11:52,579 --> 00:11:54,548
表示附近物体的三维虚拟内容

227
00:11:54,548 --> 00:11:56,783
覆盖到摄像头源可视化上

228
00:11:56,783 --> 00:12:02,389
我们添加了一个辅助方法
NISession 上的 worldTransform

229
00:12:02,389 --> 00:12:05,058
这个方法在 ARKit 的坐标空间中

230
00:12:05,058 --> 00:12:07,861
会返回一个 worldTransform

231
00:12:07,861 --> 00:12:10,330
它表示给定的附近物体

232
00:12:10,330 --> 00:12:13,467
在物理环境中可用的位置

233
00:12:13,467 --> 00:12:18,272
当不可用时
这种方法会返回 nil

234
00:12:18,272 --> 00:12:20,174
我们在演示视频中使用了这种方法

235
00:12:20,174 --> 00:12:23,844
将浮动的球体置于
下一个展品的上方

236
00:12:23,844 --> 00:12:26,513
我们想让您尽可能容易地

237
00:12:26,513 --> 00:12:29,917
利用 Nearby Interaction 位置输出

238
00:12:29,917 --> 00:12:34,221
用您的应用来操纵
AR 世界中的内容

239
00:12:34,221 --> 00:12:38,859
iOS 中
两个强大的系统结合在一起

240
00:12:38,859 --> 00:12:42,429
您的用户必须在垂直和水平方向

241
00:12:42,429 --> 00:12:46,033
充分扫动设备 从而让相机辅助

242
00:12:46,033 --> 00:12:49,403
充分计算周围世界变换

243
00:12:49,403 --> 00:12:52,472
当用户扫动设备不充分时

244
00:12:52,472 --> 00:12:55,542
相机辅助无法完全覆盖到

245
00:12:55,542 --> 00:12:59,947
ARKit 世界变换
这个方法就会返回 nil

246
00:12:59,947 --> 00:13:04,251
如果世界变换对您的
App 体验很重要

247
00:13:04,251 --> 00:13:07,888
就要注意引导用户充分扫动设备

248
00:13:07,888 --> 00:13:11,291
从而生成这种变换

249
00:13:11,291 --> 00:13:14,027
再来看看我们对

250
00:13:14,027 --> 00:13:17,064
NISessionDelegate
所做的一些补充

251
00:13:17,064 --> 00:13:20,400
以使您能够像在演示中看到的那样

252
00:13:20,400 --> 00:13:22,035
指导用户

253
00:13:22,035 --> 00:13:24,505
要帮助引导用户朝向指定对象

254
00:13:24,505 --> 00:13:27,441
一个 NISessionDelegate
回调函数

255
00:13:27,441 --> 00:13:30,978
会通过新的
didUpdateAlgorithmConvergence 委托方法

256
00:13:30,978 --> 00:13:33,881
提供关于 Nearby Interaction

257
00:13:33,881 --> 00:13:36,149
算法收敛的信息

258
00:13:36,149 --> 00:13:39,286
算法收敛可以帮助你理解为什么

259
00:13:39,286 --> 00:13:42,389
水平角度 垂直方向估计

260
00:13:42,389 --> 00:13:45,025
和 worldTransform 是不可用的

261
00:13:45,025 --> 00:13:47,728
以及用户可以做些什么

262
00:13:47,728 --> 00:13:50,130
来解决这些属性

263
00:13:50,130 --> 00:13:51,231
委托会提供

264
00:13:51,231 --> 00:13:54,735
一个新的
NIAlgorithmConvergence 对象

265
00:13:54,735 --> 00:13:58,605
和一个可选的 NINearbyObject

266
00:13:58,605 --> 00:14:02,976
只有当您在 NIConfiguration 中
启用相机辅助时

267
00:14:02,976 --> 00:14:07,047
才会调用此委托方法

268
00:14:07,047 --> 00:14:11,518
让我们看看新的
NIAlgorithmConvergence 类型

269
00:14:11,518 --> 00:14:15,055
NIAlgorithmConvergence
具有单一状态属性

270
00:14:15,055 --> 00:14:18,792
这种属性是
NIAlgorithmConvergenceStatus 类型

271
00:14:18,792 --> 00:14:22,796
NIAlgorithmConvergenceStatus
是一个枚举类型

272
00:14:22,796 --> 00:14:26,233
表示算法是否收敛

273
00:14:26,233 --> 00:14:28,435
如果算法不收敛

274
00:14:28,435 --> 00:14:30,270
关联值的数组

275
00:14:30,270 --> 00:14:36,109
就会提供
NIAlgorithmConvergenceStatus.Reasons

276
00:14:36,109 --> 00:14:38,178
我们回到新的委托方法

277
00:14:38,178 --> 00:14:39,413
假如您要给用户更新

278
00:14:39,413 --> 00:14:43,016
相机辅助状态

279
00:14:43,016 --> 00:14:44,985
您可以打开收敛状态

280
00:14:44,985 --> 00:14:46,520
如果未知或收敛

281
00:14:46,520 --> 00:14:49,857
将该信息显示给用户

282
00:14:49,857 --> 00:14:53,460
请务必检查 NINearbyObject

283
00:14:53,460 --> 00:14:54,895
当对象为 nil 时

284
00:14:54,895 --> 00:14:59,733
NIAlgorithmConvergence 状态
适用于会话本身

285
00:14:59,733 --> 00:15:04,271
而不是特定的 NINearbyObject

286
00:15:04,271 --> 00:15:06,473
当状态未收敛时

287
00:15:06,473 --> 00:15:10,611
它会还包含一个相关值

288
00:15:10,611 --> 00:15:13,113
描述算法不收敛的原因

289
00:15:13,113 --> 00:15:16,016
因此 可以使用本地化的描述

290
00:15:16,016 --> 00:15:19,620
来帮助您更好地与用户进行交流

291
00:15:19,620 --> 00:15:23,390
接下来让我们看看如何使用这些值

292
00:15:23,390 --> 00:15:26,126
一定要仔细检查
notConverged 这个 case

293
00:15:26,126 --> 00:15:28,028
和相关的 reason 值

294
00:15:28,028 --> 00:15:31,265
这样可以引导用户采取

295
00:15:31,265 --> 00:15:33,767
有助于生成关于附近对象

296
00:15:33,767 --> 00:15:36,537
所需信息的操作

297
00:15:36,537 --> 00:15:38,906
关联值是一个

298
00:15:38,906 --> 00:15:41,942
NIAlgorithmConvergence
StatusReasons 数组

299
00:15:41,942 --> 00:15:45,345
reason 值可以表明总体运动不足

300
00:15:45,345 --> 00:15:48,649
水平或垂直扫动中的运动不足

301
00:15:48,649 --> 00:15:51,051
和照明不足

302
00:15:51,051 --> 00:15:56,089
请注意 可能同时存在多种原因

303
00:15:56,089 --> 00:15:59,593
请根据对 App 中
最重要的操作顺序

304
00:15:59,593 --> 00:16:03,764
指导用户完成每个操作

305
00:16:03,764 --> 00:16:06,767
回想一下我在演示中
是如何移动手机的

306
00:16:06,767 --> 00:16:09,469
需要在水平和垂直方向上进行扫动

307
00:16:09,469 --> 00:16:13,407
以解析世界变换

308
00:16:13,407 --> 00:16:15,175
这是带有相机辅助的

309
00:16:15,175 --> 00:16:18,712
增强的 Nearby Interaction 模式
最重要的一点

310
00:16:18,712 --> 00:16:20,380
我们做了一些额外的改变

311
00:16:20,380 --> 00:16:23,317
来帮助您更好地利用此模式

312
00:16:23,317 --> 00:16:27,955
以前 NISession 上的
单个 isSupported 类变量

313
00:16:27,955 --> 00:16:31,391
就可以用来检查给定设备上

314
00:16:31,391 --> 00:16:33,827
是否支持 Nearby Interaction

315
00:16:33,827 --> 00:16:36,196
现在这种方式已弃用

316
00:16:36,196 --> 00:16:38,165
随着相机辅助功能的增加

317
00:16:38,165 --> 00:16:40,100
我们通过在 NISession 中

318
00:16:40,100 --> 00:16:43,670
能返回一个新的
NIDeviceCapability 对象的

319
00:16:43,670 --> 00:16:48,041
新的 deviceCapabilities 类成员

320
00:16:48,041 --> 00:16:52,880
使 Nearby Interaction
支持的设备功能更加具有描述性

321
00:16:52,880 --> 00:16:54,581
检查

322
00:16:54,581 --> 00:16:57,451
supportsPreciseDistanceMeasurement 属性

323
00:16:57,451 --> 00:16:59,987
在最低程度上相当于现在已弃用的

324
00:16:59,987 --> 00:17:03,223
isSupported 类变量

325
00:17:03,223 --> 00:17:05,893
当您确定了设备支持

326
00:17:05,893 --> 00:17:07,961
精确的距离测量

327
00:17:07,961 --> 00:17:10,397
你应该使用 NIDeviceCapability

328
00:17:10,397 --> 00:17:13,567
来充分了解设备 App 中

329
00:17:13,567 --> 00:17:18,505
Nearby Interaction 的可用功能

330
00:17:18,505 --> 00:17:22,075
建议您通过检查
NIDeviceCapability 对象的

331
00:17:22,075 --> 00:17:23,977
附加 supportsDirectionMeasurement

332
00:17:23,977 --> 00:17:27,881
和 supportsCameraAssistance 属性

333
00:17:27,881 --> 00:17:30,350
来定制您的 App 体验

334
00:17:30,350 --> 00:17:33,987
以适应设备的功能

335
00:17:33,987 --> 00:17:36,924
并不是所有的设备都支持方向测量

336
00:17:36,924 --> 00:17:39,092
或相机辅助

337
00:17:39,092 --> 00:17:41,962
所以请确应用体验

338
00:17:41,962 --> 00:17:45,132
适合设备功能

339
00:17:45,132 --> 00:17:48,368
特别要注意的是

340
00:17:48,368 --> 00:17:50,637
为了更好地支持 Apple Watch

341
00:17:50,637 --> 00:17:53,807
要加入仅限距离的体验

342
00:17:53,807 --> 00:17:56,476
以上就是将相机辅助作为

343
00:17:56,476 --> 00:18:00,581
通过 Nearby Interaction 增强 ARKit 的方式
现在让我们把注意力转向

344
00:18:00,581 --> 00:18:03,650
辅助后台会话

345
00:18:03,650 --> 00:18:07,187
现在您可以在 App 中
使用 Nearby Interaction

346
00:18:07,187 --> 00:18:11,325
让用户指向其他设备 寻找朋友

347
00:18:11,325 --> 00:18:13,360
并根据距离和方向

348
00:18:13,360 --> 00:18:16,830
显示控件或其他 UI

349
00:18:16,830 --> 00:18:20,300
然而 当 App 切换到后台

350
00:18:20,300 --> 00:18:24,238
或者当用户在 iOS
和 watchOS 上锁定屏幕时

351
00:18:24,238 --> 00:18:27,074
所有正在运行的
NISession 都会被暂停

352
00:18:27,074 --> 00:18:30,444
直到 App 返回前台运行

353
00:18:30,444 --> 00:18:34,715
这意味着当你与你的配件交互时

354
00:18:34,715 --> 00:18:38,018
需要专注于实际的用户体验

355
00:18:38,018 --> 00:18:43,423
从 iOS 16 开始
Nearby Interaction 已经实现免手持

356
00:18:43,423 --> 00:18:45,659
现在 当您走进有智能音箱的房间时

357
00:18:45,659 --> 00:18:47,861
你可以使用
Nearby Interaction 来播放音乐

358
00:18:47,861 --> 00:18:51,732
Nearby Interaction
能帮您打开电动自行车

359
00:18:51,732 --> 00:18:56,170
或触发其他配件上的免手持操作

360
00:18:56,170 --> 00:18:58,372
即使用户没有通过辅助后台会话

361
00:18:58,372 --> 00:19:00,607
积极使用您的 App

362
00:19:00,607 --> 00:19:03,911
Nearby Interaction 也能使用

363
00:19:03,911 --> 00:19:05,946
让我们看看如何实现这个

364
00:19:05,946 --> 00:19:09,616
振奋人心的的新功能

365
00:19:09,616 --> 00:19:11,885
我们先来回顾一下这个序列

366
00:19:11,885 --> 00:19:15,923
如何配置和运行
一个带有配件的 NISession

367
00:19:15,923 --> 00:19:17,591
你可能认出了这个序列

368
00:19:17,591 --> 00:19:20,894
去年的 WWDC 演讲中出现过

369
00:19:20,894 --> 00:19:23,063
配件通过数据通道

370
00:19:23,063 --> 00:19:26,400
发送其超宽带配件配置数据
到您的 App

371
00:19:26,400 --> 00:19:29,169
用这个数据 您可以创建一个

372
00:19:29,169 --> 00:19:33,106
NINearbyAccessoryConfiguration

373
00:19:33,106 --> 00:19:36,877
创建一个 NISession
设置一个 NISessionDelegate

374
00:19:36,877 --> 00:19:40,280
从配件获得超宽带测量值

375
00:19:40,280 --> 00:19:43,050
使用您的配置运行 NISession

376
00:19:43,050 --> 00:19:46,687
会话将返回
可共享的配置数据来设置配件

377
00:19:46,687 --> 00:19:48,922
以便与 App

378
00:19:48,922 --> 00:19:51,024
进行互操作

379
00:19:51,024 --> 00:19:53,560
将此共享配置数据

380
00:19:53,560 --> 00:19:55,195
发送回配件后

381
00:19:55,195 --> 00:19:58,265
就可以在 App 和配件中

382
00:19:58,265 --> 00:20:01,902
接收超宽带测量数据

383
00:20:01,902 --> 00:20:04,037
有关配置和运行的所有详细信息

384
00:20:04,037 --> 00:20:06,874
与第三方配件的
Nearby Interaction

385
00:20:06,874 --> 00:20:10,511
请回顾去年的 WWDC 讲座

386
00:20:10,511 --> 00:20:14,515
接下来看看如何设置新的后台会话

387
00:20:14,515 --> 00:20:17,584
前面的序列图显示了

388
00:20:17,584 --> 00:20:21,154
App 和配件之间的数据流

389
00:20:21,154 --> 00:20:24,091
在配件和 App 之间
使用低功耗蓝牙

390
00:20:24,091 --> 00:20:29,263
建立通信通道是很常见的做法

391
00:20:29,263 --> 00:20:32,299
当使用低功耗蓝牙与配件配对时

392
00:20:32,299 --> 00:20:34,067
您可以启用 Nearby Interaction

393
00:20:34,067 --> 00:20:37,905
在后台启动和继续会话

394
00:20:37,905 --> 00:20:40,574
让我们仔细看看这是怎么做到的

395
00:20:40,574 --> 00:20:43,977
现在 您可以配置 App

396
00:20:43,977 --> 00:20:46,780
来使用 Core Bluetooth
在后台时就能

397
00:20:46,780 --> 00:20:48,682
发现 连接到低功耗蓝牙配件

398
00:20:48,682 --> 00:20:51,418
并与低功耗蓝牙交换数据

399
00:20:51,418 --> 00:20:54,388
欲了解更多详情 请查看现有的
《Core Bluetooth 编程指南》

400
00:20:54,388 --> 00:20:59,426
或 2017 年的 WWDC 讲座

401
00:20:59,426 --> 00:21:02,296
利用强大的后台操作从

402
00:21:02,296 --> 00:21:05,432
从 CoreBluetooth 高效发现配件

403
00:21:05,432 --> 00:21:08,869
并在后台运行您的 App

404
00:21:08,869 --> 00:21:12,306
您的 App
可以启动一个 NISession

405
00:21:12,306 --> 00:21:14,074
与低功耗蓝牙配件

406
00:21:14,074 --> 00:21:18,345
在后台也支持超宽带

407
00:21:18,345 --> 00:21:21,381
现在让我们看看序列图是如何更新

408
00:21:21,381 --> 00:21:24,284
以反映这种新模式

409
00:21:24,284 --> 00:21:25,953
要与这个配件交互

410
00:21:25,953 --> 00:21:29,890
首先 确保它与低功耗蓝牙配对

411
00:21:29,890 --> 00:21:32,693
然后 连接到配件

412
00:21:32,693 --> 00:21:34,261
当配件生成

413
00:21:34,261 --> 00:21:37,831
配件超宽带配置数据时

414
00:21:37,831 --> 00:21:40,801
应该能既发送到您的 App

415
00:21:40,801 --> 00:21:44,271
又能执行
Nearby Interaction GATT 服务

416
00:21:44,271 --> 00:21:46,073
接下来我会详细介绍

417
00:21:46,073 --> 00:21:48,175
最后 当您的 App 收到

418
00:21:48,175 --> 00:21:51,078
配件的配置数据时

419
00:21:51,078 --> 00:21:55,682
使用一个新的初始化器构造一个
NINearbyAccessoryConfiguration 对象

420
00:21:55,682 --> 00:21:59,453
该初始化器
同时提供 UWB 配置数据

421
00:21:59,453 --> 00:22:02,155
及它的蓝牙对等标识符

422
00:22:02,155 --> 00:22:04,658
使用这项配置运行您的 NISession

423
00:22:04,658 --> 00:22:07,294
通过在 NISessionDelegate 中

424
00:22:07,294 --> 00:22:11,164
接收共享配置 来确保你完成了设置

425
00:22:11,164 --> 00:22:15,502
并将可共享的配置发送到配件

426
00:22:15,502 --> 00:22:18,639
为了让你的配件在它的蓝牙标识符

427
00:22:18,639 --> 00:22:20,774
和超宽带配置之间

428
00:22:20,774 --> 00:22:23,277
创建关系

429
00:22:23,277 --> 00:22:27,781
它必须实现新的
Nearby Interaction GATT 服务

430
00:22:27,781 --> 00:22:31,285
Nearby Interaction 服务
包含单个加密特性

431
00:22:31,285 --> 00:22:35,289
叫做配件配置数据

432
00:22:35,289 --> 00:22:38,492
它包含用于初始化
NINearbyAccessoryConfiguration 对象

433
00:22:38,492 --> 00:22:42,396
相同 UWB 配置

434
00:22:42,396 --> 00:22:43,697
数据

435
00:22:43,697 --> 00:22:48,869
iOS 使用这个特性来验证

436
00:22:48,869 --> 00:22:53,473
在您的蓝牙对等标识符
和您的 NISession 之间的关联

437
00:22:53,473 --> 00:22:57,845
您的应用无法直接读取此特征

438
00:22:57,845 --> 00:23:00,113
您可以在
developer.apple.com/nearby-interaction 上

439
00:23:00,113 --> 00:23:02,883
找到更多关于

440
00:23:02,883 --> 00:23:07,788
Nearby Interaction GATT 服务的细节

441
00:23:07,788 --> 00:23:11,592
如果您的配件同时
支持多个 NISession

442
00:23:11,592 --> 00:23:15,662
创建配件配置数据的多个实例

443
00:23:15,662 --> 00:23:20,167
每个 NISession 的
UWB 配置都不同

444
00:23:20,167 --> 00:23:23,203
这一点是配件所必需的

445
00:23:23,203 --> 00:23:27,207
让我们深入研究一些代码
来讨论一下

446
00:23:27,207 --> 00:23:30,277
App 中需要实现什么

447
00:23:30,277 --> 00:23:33,714
配件后台会话要求配件

448
00:23:33,714 --> 00:23:37,017
与用户的 iPhone
进行 LE 配对

449
00:23:37,017 --> 00:23:40,954
您的应用负责触发这个过程

450
00:23:40,954 --> 00:23:44,958
要触发它 实施扫描配件的方法

451
00:23:44,958 --> 00:23:50,364
连接到配件并发现它的服务和特性

452
00:23:50,364 --> 00:23:53,000
然后 实施一个方法来读取

453
00:23:53,000 --> 00:23:56,303
配件的加密特征之一

454
00:23:56,303 --> 00:23:59,273
您只需执行一次

455
00:23:59,273 --> 00:24:03,844
它将向用户显示接受配对的提示

456
00:24:03,844 --> 00:24:06,480
辅助后台会话也需要

457
00:24:06,480 --> 00:24:09,550
与配件进行蓝牙连接

458
00:24:09,550 --> 00:24:12,386
即使您的应用在后台 也必须要

459
00:24:12,386 --> 00:24:15,055
能够形成这种连接

460
00:24:15,055 --> 00:24:18,825
那么就要实施一种方法来发起到

461
00:24:18,825 --> 00:24:20,427
配件的连接尝试

462
00:24:20,427 --> 00:24:22,829
即使配件不在蓝牙范围内

463
00:24:22,829 --> 00:24:26,500
您也应该这样做

464
00:24:26,500 --> 00:24:29,636
然后 当你的应用
由 Core Bluetooth 重新启动后

465
00:24:29,636 --> 00:24:35,175
实施 CBManagerDelegate 方法

466
00:24:35,175 --> 00:24:38,512
并在建立连接时进行处理

467
00:24:38,512 --> 00:24:42,850
现在您就可以运行配件后台会话了

468
00:24:42,850 --> 00:24:45,352
通过提供配件的 UWB 配置数据

469
00:24:45,352 --> 00:24:48,355
和来自
CBPeripheral 标识符的

470
00:24:48,355 --> 00:24:53,060
蓝牙对等标识符

471
00:24:53,060 --> 00:24:55,896
来创建
NINearbyAccessoryConfiguration 对象

472
00:24:55,896 --> 00:24:58,699
使用该配置
运行 NISession

473
00:24:58,699 --> 00:25:02,102
它会在您的 App 在后台时运行

474
00:25:02,102 --> 00:25:03,403
内容就这么多了

475
00:25:03,403 --> 00:25:05,873
不过 Xcode 中还有一个设置

476
00:25:05,873 --> 00:25:09,443
需要更新

477
00:25:09,443 --> 00:25:13,080
这个后台模式需要
Nearby Interaction 字符串

478
00:25:13,080 --> 00:25:17,618
位置在应用的 Info.plist 中
UIBackgroundModes 数组里

479
00:25:17,618 --> 00:25:20,721
您还可以使用
Xcode 功能编辑器

480
00:25:20,721 --> 00:25:23,156
添加这个后台模式

481
00:25:23,156 --> 00:25:25,192
您还需要保证

482
00:25:25,192 --> 00:25:29,263
启用了“使用低功耗蓝牙配件”
以确保您的 App

483
00:25:29,263 --> 00:25:33,734
可以在后台连接配件

484
00:25:33,734 --> 00:25:35,502
关于这个新的配件后台会话

485
00:25:35,502 --> 00:25:38,539
有一个重要的注意事项

486
00:25:38,539 --> 00:25:41,208
当您的 App 在后台时

487
00:25:41,208 --> 00:25:45,379
NISession 将继续运行
并且不会被暂停

488
00:25:45,379 --> 00:25:49,616
因此配件上可以获取超宽带测量值

489
00:25:49,616 --> 00:25:53,253
您必须在配件上的超宽带测量值上

490
00:25:53,253 --> 00:25:54,988
使用并进行操作

491
00:25:54,988 --> 00:25:58,192
您的 App 不会收到运行时间

492
00:25:58,192 --> 00:26:00,928
您也不会收到
didUpdateNearbyObjectand

493
00:26:00,928 --> 00:26:02,262
委托回调

494
00:26:02,262 --> 00:26:06,066
直到 App 返回到前台才会收到

495
00:26:06,066 --> 00:26:08,202
使用这种新的后台模式时

496
00:26:08,202 --> 00:26:11,371
我们来回顾一下以下的最优方法

497
00:26:11,371 --> 00:26:13,974
触发与您的配件的 LE 配对

498
00:26:13,974 --> 00:26:17,344
将提示用户接受配对

499
00:26:17,344 --> 00:26:20,314
这样做的时候 用户能直观地明白

500
00:26:20,314 --> 00:26:23,283
他们为什么要配对配件

501
00:26:23,283 --> 00:26:26,153
可能是在创建
与配件关系的设置流中

502
00:26:26,153 --> 00:26:29,156
也可能是用户明确表示

503
00:26:29,156 --> 00:26:32,759
希望与配件交互时触发

504
00:26:32,759 --> 00:26:34,928
当您的 App 处于后台时

505
00:26:34,928 --> 00:26:37,865
您的 NISession
不会被暂停

506
00:26:37,865 --> 00:26:40,467
但它不会收到
didUpdateNearbyObject

507
00:26:40,467 --> 00:26:42,369
委托回调

508
00:26:42,369 --> 00:26:45,539
但是 您的配件将收到

509
00:26:45,539 --> 00:26:47,541
超宽带测量值

510
00:26:47,541 --> 00:26:50,677
直接在您的配件上处理这些测量值

511
00:26:50,677 --> 00:26:54,515
以确定用户应该采取什么操作

512
00:26:54,515 --> 00:26:56,884
最后 通过在重要的用户交互过程中

513
00:26:56,884 --> 00:27:00,420
仅从配件发送数据到 App

514
00:27:00,420 --> 00:27:02,823
从而来管理电池使用

515
00:27:02,823 --> 00:27:06,460
例如 向用户显示通知

516
00:27:06,460 --> 00:27:09,396
以上就是您在后台会话中
需要了解的全部内容

517
00:27:09,396 --> 00:27:14,334
接下来 最后一个主题是
关于第三方硬件支持

518
00:27:14,334 --> 00:27:17,838
今天 我很高兴地向您宣布

519
00:27:17,838 --> 00:27:20,908
之前与 U1 兼容的
Beta 版开发工具包

520
00:27:20,908 --> 00:27:26,046
现在已经结束 Beta 版测试
可以更广泛地使用

521
00:27:26,046 --> 00:27:29,616
请访问
developer.apple.com/nearby-interaction

522
00:27:29,616 --> 00:27:31,084
了解更多关于

523
00:27:31,084 --> 00:27:35,055
兼容的超宽带开发套件

524
00:27:35,055 --> 00:27:36,857
我们还更新了

525
00:27:36,857 --> 00:27:39,259
配件制造商的规范

526
00:27:39,259 --> 00:27:41,795
以支持新的配件后台会话

527
00:27:41,795 --> 00:27:44,698
包括 Nearby Interaction GATT 服务

528
00:27:44,698 --> 00:27:47,701
内容也在刚才的网站中

529
00:27:47,701 --> 00:27:52,639
那么 让我们总结一下
本次讲座中讨论的内容

530
00:27:52,639 --> 00:27:56,877
现在 Nearby Interaction 包含了
新的相机辅助模式

531
00:27:56,877 --> 00:28:00,380
紧密地集成了 ARKit
和 Nearby Interaction

532
00:28:00,380 --> 00:28:02,549
为您提供无缝体验

533
00:28:02,549 --> 00:28:05,919
以创造出空间感知体验

534
00:28:05,919 --> 00:28:09,823
引导用户到附近的对象

535
00:28:09,823 --> 00:28:13,293
配件后台会话使您能够发起会话

536
00:28:13,293 --> 00:28:16,063
并将会话扩展到后台

537
00:28:16,063 --> 00:28:19,199
让您为用户打造更加轻松

538
00:28:19,199 --> 00:28:21,768
无需手持的体验

539
00:28:21,768 --> 00:28:23,737
我们宣布了第三方兼容

540
00:28:23,737 --> 00:28:28,509
超宽带硬件支持的更新 令人振奋

541
00:28:28,509 --> 00:28:31,845
以上就是今年的
Nearby Interaction 更新内容

542
00:28:31,845 --> 00:28:33,447
请下载演示视频

543
00:28:33,447 --> 00:28:36,416
请对更新的功能提供反馈

544
00:28:36,416 --> 00:28:39,219
请查看更新的第三方规范

545
00:28:39,219 --> 00:28:43,190
并去创造具有空间体验的
神奇 App 吧

546
00:28:43,190 --> 00:28:44,892
谢谢

547
00:28:44,892 --> 00:28:48,929
♪

