1
00:00:01,335 --> 00:00:07,341
[古怪的音乐]

2
00:00:09,910 --> 00:00:13,714
Stella: 大家好
欢迎参加今年的 WWDC

3
00:00:13,747 --> 00:00:15,916
我是 Stella

4
00:00:15,949 --> 00:00:16,984
Alex: 我是 Alex

5
00:00:17,017 --> 00:00:20,420
Stella 和我一起在 Apple
进行了很多和 USD 有关的工作

6
00:00:20,454 --> 00:00:23,891
今天 我们将和您一起探索
USD 工具的新升级和渲染

7
00:00:23,924 --> 00:00:24,992
开始吧 Stella

8
00:00:27,160 --> 00:00:29,530
Stella: USD是一种基础技术

9
00:00:29,563 --> 00:00:34,835
它随着与内容创造工具的
不断发展和深入融合

10
00:00:34,868 --> 00:00:40,641
使创造 asset 和内容的方式越来越多

11
00:00:40,674 --> 00:00:45,045
为游戏 AR 电影和网页进行渲染

12
00:00:45,078 --> 00:00:47,147
所有这些技术都以 USD 为中心

13
00:00:48,015 --> 00:00:53,787
今天 我们将专注于生态的
两个部分 工具和渲染

14
00:00:54,688 --> 00:00:58,325
让我们从 USD 工具的更新开始吧

15
00:00:59,693 --> 00:01:02,930
然后 我们将向您展示
AR 快速查看里新的照明 如何使您的 asset

16
00:01:02,963 --> 00:01:07,134
看起来更棒

17
00:01:07,167 --> 00:01:12,072
深入探索 USD 渲染

18
00:01:12,105 --> 00:01:16,476
最后 我们会向您展示
如何集成 Hydra

19
00:01:19,580 --> 00:01:23,450
让我们先从 Apple 生态的
USD 工具开始吧

20
00:01:24,818 --> 00:01:28,922
我们将谈及 USDZTools
Reality Converter

21
00:01:28,956 --> 00:01:33,427
然后跟进可以帮助您
创建 USDZ 内容的

22
00:01:33,460 --> 00:01:35,095
额外的工具和框架

23
00:01:37,965 --> 00:01:40,167
USDZ Tools 是一个

24
00:01:40,200 --> 00:01:43,971
包含必要的命令行
USD Python 工具

25
00:01:44,004 --> 00:01:50,477
以帮助您生成 验证
和检查 USDZ 文件的包

26
00:01:50,511 --> 00:01:55,182
该包还包括一个
名为 uszconvert 的转换器

27
00:01:55,215 --> 00:02:00,053
它可以把其他主要的 3D 文件格式
创建为 USDZ 文件

28
00:02:01,121 --> 00:02:07,227
Python 脚本为自动化和
成批处理提供了强大的工具

29
00:02:07,261 --> 00:02:11,698
此外 它们是您探索 USD
及学习如何使用 API 的

30
00:02:11,732 --> 00:02:13,333
很好的方式

31
00:02:14,268 --> 00:02:19,673
今年 我们将为您带来支持
Python 3 和 Apple 芯片的产品

32
00:02:19,706 --> 00:02:23,977
我们还升级了 USD 版本
便于您使用

33
00:02:24,011 --> 00:02:27,681
新的 USD 功能和性能改进

34
00:02:30,117 --> 00:02:35,055
除此之外 我们还为 usdzconvert
添加了很棒的新功能

35
00:02:35,088 --> 00:02:39,826
您现在可以使用 useObjMtl 标记
将有纹理的 OBJ 文件

36
00:02:39,860 --> 00:02:44,298
转换为 USDZ 了

37
00:02:44,331 --> 00:02:50,304
我们还为 GLTF 文件
添加了对点和线的支持

38
00:02:50,337 --> 00:02:55,776
为 FBX 文件添加了
对动画的场景时间的支持

39
00:02:55,809 --> 00:03:01,882
要想展示全部 usdzconvert 选项
及自定义您的转换方式

40
00:03:01,915 --> 00:03:06,320
只要在终端键入
“usdzconvert --help” 即可

41
00:03:08,388 --> 00:03:13,193
这会为您显示所有可用的
usdzconvert 选项

42
00:03:13,227 --> 00:03:14,394
如添加版权信息

43
00:03:16,897 --> 00:03:23,103
或为您的 3D 模型提供
diffuseColor 或 normalMap

44
00:03:23,136 --> 00:03:25,272
以及更多

45
00:03:25,305 --> 00:03:28,475
此外 如果您更倾向于在您的
工作流中使用 UI 编辑器

46
00:03:29,910 --> 00:03:32,145
而非使用命令行

47
00:03:32,179 --> 00:03:38,652
我们也有用 USDZ 工具搭建的
Reality Converter

48
00:03:38,685 --> 00:03:43,390
并能提供和 usdzconvert 一样的功能

49
00:03:43,423 --> 00:03:46,293
不过是在编辑窗口中展现

50
00:03:46,326 --> 00:03:52,633
使在 MacOS 上转换
查看及自定义 USD 内容更加方便

51
00:03:53,634 --> 00:03:56,637
只需导入常见的 3D 文件格式

52
00:03:56,670 --> 00:04:00,841
如 OBJ 或 GLTF 或 FBX

53
00:04:00,874 --> 00:04:05,245
即可查看转换后的 USDZ 结果

54
00:04:05,279 --> 00:04:09,983
近几年 我们还优化了 UI
以简化您的工作流

55
00:04:10,817 --> 00:04:14,221
您可以选择材质来查看更多信息

56
00:04:19,760 --> 00:04:23,564
用您自己的纹理自定义材料性质

57
00:04:31,939 --> 00:04:35,509
添加版权或编辑文件元数据

58
00:04:41,915 --> 00:04:47,454
以及选择经典或新光照
这一点我们之后会在讲座中

59
00:04:47,487 --> 00:04:48,856
详细讲到

60
00:04:50,791 --> 00:04:54,127
您甚至可以通过内置选项
预览您的 USDZ 对象

61
00:04:54,161 --> 00:04:59,166
在各种照明条件下的情况

62
00:04:59,199 --> 00:05:00,501
并相应地调整曝光

63
00:05:02,870 --> 00:05:06,206
在 asset 方面 我们添加了一个新功能

64
00:05:06,240 --> 00:05:12,045
让您选择纹理质量
同时导出一个 USDZ 文件

65
00:05:12,079 --> 00:05:17,818
默认情况下 纹理会被导出为
原始 未压缩的大小

66
00:05:17,851 --> 00:05:22,956
但是 如果您倾向于
减小您的 USDZ 文件大小

67
00:05:22,990 --> 00:05:26,927
您现在可以选择压缩纹理到
JPEG 格式

68
00:05:29,096 --> 00:05:31,832
在本例中 我们使用对象捕获
以高分辨率扫描了

69
00:05:33,667 --> 00:05:35,702
这个棋子

70
00:05:35,736 --> 00:05:40,073
为了减少文件大小
而不丢失网格细节

71
00:05:40,107 --> 00:05:46,180
我们使用了 RealityConverter
导出带有压缩纹理的模型

72
00:05:46,213 --> 00:05:49,416
视觉上的差异很难被注意到

73
00:05:49,449 --> 00:05:54,354
而我们得到了缩小了 80% 的文件

74
00:05:56,290 --> 00:05:58,458
下面是更令人兴奋的消息

75
00:05:58,492 --> 00:06:04,164
RealityConverter 现在可以自动修复
您的 USD asset 的问题了

76
00:06:04,198 --> 00:06:09,870
它将纠正不匹配的属性和连接类型

77
00:06:09,903 --> 00:06:15,976
修复具有多个顶级 prim
和一个缺失的默认 prim 的 stage

78
00:06:16,009 --> 00:06:22,683
更新已弃用的属性
并添加缺失的 stage 元数据

79
00:06:22,716 --> 00:06:29,189
我们还添加了通用二进制支持
所以现在它在 Apple 芯片上原生运行

80
00:06:30,924 --> 00:06:34,561
现在 如果您想从头
开始创建 3D 模型呢

81
00:06:35,963 --> 00:06:41,969
去年 我们推出了 Object Capture
作为 macOS 上的 RealityKit API

82
00:06:42,002 --> 00:06:47,307
它提供了一种创新的方式
来创建 USDZ asset

83
00:06:47,341 --> 00:06:52,713
然后 您就可以使用 Reality Composer
构成一个具有多个 asset 的场景

84
00:06:52,746 --> 00:06:56,884
今年 我们为您带来了 RoomPlan API

85
00:06:56,917 --> 00:07:00,921
它可以让您创建
您房间的参数化 3D 扫描

86
00:07:01,889 --> 00:07:05,826
我强烈推荐您去看看这三个讲座

87
00:07:05,859 --> 00:07:10,097
这些技术一起运作
使所有人都比以往任何时候

88
00:07:10,130 --> 00:07:13,867
更容易创造沉浸式的 AR 体验

89
00:07:14,601 --> 00:07:16,537
我们今天介绍的

90
00:07:16,570 --> 00:07:19,706
所有这些工具都可以在
Apple 开发者网站上的

91
00:07:19,740 --> 00:07:24,511
AR Creation Tools 页面上下载

92
00:07:24,545 --> 00:07:26,346
快去看看吧

93
00:07:26,914 --> 00:07:31,718
接下来 让我们看看
AR 快速查看的新照明吧

94
00:07:32,586 --> 00:07:38,158
AR 快速查看是 iOS 上内置的
系统范围的 AR 查看器

95
00:07:38,192 --> 00:07:43,697
它允许您在物理空间中
如桌子 墙壁或地板上

96
00:07:43,730 --> 00:07:47,134
放置 3D USDZ 对象

97
00:07:47,167 --> 00:07:51,972
并通过简单的触摸手势与它们交互

98
00:07:52,005 --> 00:07:56,109
您甚至可以用 Reality Composer
制作交互式场景

99
00:07:56,143 --> 00:07:58,812
并将它们保存到 USDZ 文件中

100
00:07:58,846 --> 00:08:05,052
这样您就可以用 iMessage
邮件 备忘录 和其它方式与他人分享

101
00:08:05,085 --> 00:08:09,489
我们不断努力使 AR 快速查看

102
00:08:09,523 --> 00:08:13,393
渲染更逼真 今年

103
00:08:13,427 --> 00:08:18,065
我们在 AR 快速查看中引入了
改进照明

104
00:08:18,098 --> 00:08:23,770
它更明亮 有增强的对比度
和改善过的形状定义

105
00:08:23,804 --> 00:08:26,206
会使您的 asset 看起来更好

106
00:08:27,407 --> 00:08:31,044
下面是一个 AirPods Pro
在物体模式下的

107
00:08:31,078 --> 00:08:33,580
经典和新照明的例子

108
00:08:33,614 --> 00:08:37,518
AirPods Pro 在两种照明条件下
看起来都很棒

109
00:08:37,551 --> 00:08:40,320
您会注意到新的照明选项

110
00:08:40,354 --> 00:08:42,422
提供了更明亮的颜色

111
00:08:42,456 --> 00:08:45,425
更高的对比度和更多的亮点

112
00:08:47,895 --> 00:08:52,599
现在让我们把 AirPods Max
放在桌子上 用新的灯光在 AR 模式下

113
00:08:52,633 --> 00:08:53,700
查看它

114
00:08:54,668 --> 00:08:56,937
很惊人 不是吗

115
00:08:57,938 --> 00:09:02,476
所以您该如何在 asset 中
应用新的照明呢

116
00:09:02,509 --> 00:09:04,278
这很简单

117
00:09:04,311 --> 00:09:08,949
您只需要通过在您的 USDZ 文件中
设置新的 preferredIblVersion 元数据

118
00:09:08,982 --> 00:09:14,521
来选择最适合您的内容的照明

119
00:09:15,956 --> 00:09:19,960
在这里 我们已经将
preferredIblVersion 的值设置为 2

120
00:09:19,993 --> 00:09:23,797
这将指示 AR 快速查看
使用新的照明系统

121
00:09:24,998 --> 00:09:28,936
让我们从更细节处理解它

122
00:09:28,969 --> 00:09:31,405
preferredIBLVersion 元数据

123
00:09:31,438 --> 00:09:34,274
可以包含 0 1 和 2 的值

124
00:09:36,143 --> 00:09:38,645
当 asset 的 preferredIblVersion

125
00:09:38,679 --> 00:09:42,049
设置为 0 时 将使用系统默认照明

126
00:09:43,016 --> 00:09:46,787
如果设置为 1
它将继续使用经典照明

127
00:09:48,255 --> 00:09:51,058
如果值为 2 将会使用新照明

128
00:09:52,059 --> 00:09:56,797
这意味着您也可以轻松地
将您的当前 asset 更新到

129
00:09:56,830 --> 00:09:57,664
新的照明

130
00:09:58,198 --> 00:10:02,970
我们建议您做出明确的选择
并在所有 asset 中

131
00:10:03,003 --> 00:10:05,339
设置此元数据

132
00:10:05,372 --> 00:10:07,608
为此 您可以使用带有

133
00:10:07,641 --> 00:10:12,546
preferrediblversion 标志的 usdzconvert

134
00:10:12,579 --> 00:10:15,849
例如 下面是如何使用标志

135
00:10:15,883 --> 00:10:20,087
将消防栓 OBJ 文件转换为
用新照明的 USDZ

136
00:10:20,921 --> 00:10:24,625
或者您可以使用 Reality Converter

137
00:10:24,658 --> 00:10:27,194
它现在默认使用新照明

138
00:10:28,161 --> 00:10:31,465
但是如果您想使用经典照明

139
00:10:31,498 --> 00:10:34,201
在属性面板中有一个新的选项

140
00:10:35,836 --> 00:10:40,774
在这里 我们能预览经典和
新照明下的 AirPods Max asset

141
00:10:42,242 --> 00:10:45,546
这提供了一种比较差异的简单方法

142
00:10:47,247 --> 00:10:50,250
通过点击照明图标 应用的照明也会

143
00:10:50,284 --> 00:10:52,986
被突出显示 供您参考

144
00:10:54,821 --> 00:10:59,159
最后 对于没有此元数据的 asset

145
00:10:59,193 --> 00:11:02,729
AR 快速查看将根据文件的

146
00:11:02,763 --> 00:11:05,566
日期-时间戳自动确定照明版本

147
00:11:06,900 --> 00:11:13,507
如果该 asset 是在 2022 年 7 月 1 日
之后创建的 它将使用新照明

148
00:11:14,808 --> 00:11:18,345
更早的 asset 将继续使用经典照明

149
00:11:18,378 --> 00:11:20,113
这样它们的外观就不会改变

150
00:11:21,148 --> 00:11:24,718
现在 我会把话题交给 Alex
聊一聊 USD 渲染

151
00:11:24,751 --> 00:11:26,053
谢谢您 Stella

152
00:11:26,086 --> 00:11:29,022
我们今天已经看到了很多
渲染过的 USD

153
00:11:29,056 --> 00:11:33,460
现在 我们将探索是什么
使 USD 渲染和 Hydra 成为了

154
00:11:33,493 --> 00:11:35,495
您 3D 内容创建途径的
一个绝佳选择

155
00:11:35,529 --> 00:11:38,298
以及您该如何将它
集成到您自己的 App 中

156
00:11:39,399 --> 00:11:43,303
首先 让我们后退一步
总体讨论一下渲染

157
00:11:44,371 --> 00:11:51,011
渲染器会将 3D 模型
相机和灯光的集合作为输入

158
00:11:51,044 --> 00:11:53,847
并使用它们生成图像

159
00:11:53,881 --> 00:11:56,416
渲染器有许多 它们中的每一个

160
00:11:56,450 --> 00:12:00,254
都是为特定目的而构建的
并针对不同的用例进行了优化

161
00:12:01,321 --> 00:12:04,324
有些渲染器是为
实时 App 设计的

162
00:12:04,358 --> 00:12:07,794
比如渲染游戏中的角色
或 AR 场景

163
00:12:08,662 --> 00:12:12,966
另一些则需要更长的时间
但能产生更逼真的图像

164
00:12:13,000 --> 00:12:16,537
例如 为好莱坞电影制作视觉效果

165
00:12:17,804 --> 00:12:21,208
所有渲染器都会对其功能做出选择
并且都是独一无二的

166
00:12:22,276 --> 00:12:24,678
Apple 平台上
也存在针对不同用例的

167
00:12:24,711 --> 00:12:26,713
不同 USD 渲染器

168
00:12:27,414 --> 00:12:30,117
我们在 developer.apple.com 上
添加了关于这些

169
00:12:30,150 --> 00:12:31,985
不同渲染器的文档

170
00:12:32,953 --> 00:12:36,223
它将帮助您理解它们之间的差异

171
00:12:36,256 --> 00:12:39,126
解释它们支持哪些 USD 功能

172
00:12:39,159 --> 00:12:43,230
并为您提供如何编写最适合您的
USD 的指导

173
00:12:44,364 --> 00:12:48,168
Apple 平台上的渲染器之一
是 RealityKit

174
00:12:48,202 --> 00:12:51,171
它具有逼真的渲染系统

175
00:12:51,205 --> 00:12:55,008
为交互式增强现实体验进行了优化

176
00:12:55,042 --> 00:12:57,110
并被用于 AR 快速查看

177
00:12:57,144 --> 00:12:59,880
它是 USDZ 文件的主要渲染器

178
00:13:00,814 --> 00:13:07,588
在 macOS 上使用 USD 渲染的
另一个选择是皮克斯的开源渲染器 Storm

179
00:13:07,621 --> 00:13:10,190
它针对生产级 asset 进行优化设计

180
00:13:10,224 --> 00:13:13,627
被用于大型场景的实时预览

181
00:13:14,661 --> 00:13:18,699
这是一种很好的技术
可以让您在内容创建途径中

182
00:13:18,732 --> 00:13:21,435
可视化和迭代 asset

183
00:13:22,402 --> 00:13:25,005
Storm 使用了一种叫做 Hydra 的技术

184
00:13:25,939 --> 00:13:30,978
Hydra 是 USD 开源项目的核心方面

185
00:13:31,011 --> 00:13:34,815
接下来 让我们来了解一下
Hydra 和 Storm 之间的联系

186
00:13:35,649 --> 00:13:38,519
我们从之前的这个图表开始

187
00:13:38,552 --> 00:13:40,988
这里 我们使用 Storm 作为渲染器

188
00:13:42,189 --> 00:13:46,527
输入通常被称为 “场景图”

189
00:13:46,560 --> 00:13:49,162
Storm 会生成它的渲染预览

190
00:13:50,364 --> 00:13:55,068
但是 如果您想使用不同的渲染器

191
00:13:55,102 --> 00:13:56,537
生成相同场景的逼真图像呢

192
00:13:57,538 --> 00:14:00,307
这正是 Hydra 存在的意义

193
00:14:00,340 --> 00:14:03,944
Hydra 并没有将场景与渲染器
紧密耦合

194
00:14:03,977 --> 00:14:07,714
而是充当了
场景与渲染器之间的抽象层

195
00:14:07,748 --> 00:14:10,551
将数据从场景传输到渲染器

196
00:14:11,752 --> 00:14:14,488
这允许您在任何时候
根据您的需要

197
00:14:14,521 --> 00:14:19,393
轻松切换渲染器
而不需要改变您的场景图

198
00:14:19,426 --> 00:14:23,297
例如 您可以使用 Storm
和皮克斯的 RenderMan

199
00:14:24,431 --> 00:14:28,235
在您的内容创建途径中
您可以使用 Storm 快速渲染

200
00:14:28,268 --> 00:14:29,736
快速迭代

201
00:14:29,770 --> 00:14:32,039
然后在准备好后

202
00:14:32,072 --> 00:14:34,208
切换到 RenderMan
来生成最终的图像

203
00:14:35,142 --> 00:14:38,212
对场景图也是如此

204
00:14:38,245 --> 00:14:42,916
您对 Hydra 的输入可以是
USD 场景图 也可以是不同的

205
00:14:43,951 --> 00:14:48,288
这允许您在多个 App 中
使用相同的渲染器

206
00:14:48,322 --> 00:14:53,627
即使每个 App
都有自己完全不同的场景图

207
00:14:53,660 --> 00:14:57,731
连接 Hydra 与场景图
和渲染器的接口

208
00:14:57,764 --> 00:14:59,900
被称为委托

209
00:14:59,933 --> 00:15:04,137
场景图通过场景委托
连接到 Hydra

210
00:15:04,171 --> 00:15:07,875
渲染器通过渲染委托
连接到 Hydra

211
00:15:08,542 --> 00:15:10,477
这就是您的 Hydra

212
00:15:11,245 --> 00:15:15,816
Foundry's Nuke 13
已经在用 Hydra 渲染视口了

213
00:15:15,849 --> 00:15:19,486
这使 macOS 上的 Nuke 设计师
有更高质的体验

214
00:15:19,520 --> 00:15:22,589
并与用 Nuke 的 3D 系统的设计师
有互动体验

215
00:15:23,657 --> 00:15:27,060
这是通过使用 Hydra
与自定义场景委托

216
00:15:27,094 --> 00:15:28,862
和 Metal-accelerated Storm 实现的

217
00:15:30,063 --> 00:15:33,767
我们要很高兴地告诉大家
我们已经与皮克斯动画工作室合作

218
00:15:33,800 --> 00:15:38,972
公开发行
Metal accelerated Storm 的开源版本

219
00:15:39,006 --> 00:15:42,442
您可以在 USD 22.05 中使用它

220
00:15:43,243 --> 00:15:45,579
现在我们已经看到了 Hydra 的力量

221
00:15:45,612 --> 00:15:47,781
让我们看一个有着
USD 场景图 用 Storm 作为渲染器的

222
00:15:47,814 --> 00:15:51,051
典型用例的

223
00:15:51,084 --> 00:15:53,487
Hydra 示例 App

224
00:15:53,520 --> 00:15:57,291
它将让您能开始使用 Hydra
构建内容创建工具

225
00:15:57,324 --> 00:15:59,560
和 3D 工作流 App

226
00:16:00,427 --> 00:16:05,899
我们的示例 App HydraPlayer
非常简单但功能强大

227
00:16:05,933 --> 00:16:10,771
它用 Storm 渲染了一个 USD 文件
让我们能在它周围移动相机

228
00:16:12,172 --> 00:16:14,241
我们很高兴能让 HydraPlayer

229
00:16:14,274 --> 00:16:18,378
成为一个公共样本项目
让您马上开始使用

230
00:16:18,412 --> 00:16:21,315
它可以在会话资源中找到

231
00:16:21,348 --> 00:16:23,183
并在自述文件中提供了完整的说明

232
00:16:24,384 --> 00:16:27,221
我鼓励开发者现在暂停这个视频

233
00:16:27,254 --> 00:16:31,058
下载这个项目 然后跟着我们一起看

234
00:16:32,326 --> 00:16:35,896
在您的 Xcode 项目中
您会发现 4 个类

235
00:16:35,929 --> 00:16:41,068
AppDelegate 相机 渲染器
和 View Controller

236
00:16:41,101 --> 00:16:44,071
AppDelegate 基本上
就是您的根对象

237
00:16:44,104 --> 00:16:46,273
会管理与系统的交互

238
00:16:47,040 --> 00:16:49,776
相机类是 USD 场景摄像机的

239
00:16:49,810 --> 00:16:51,545
一个简单表示

240
00:16:51,578 --> 00:16:53,947
以便于转换用户输入

241
00:16:54,882 --> 00:16:58,886
渲染器类将处理我们
与 USD 和 Hydra 的所有交互

242
00:16:59,920 --> 00:17:04,124
最后 ViewController
会处理我们的用户输入

243
00:17:05,092 --> 00:17:08,795
在我们构建 启动 HydraPlayer 之前
有三件事要做

244
00:17:09,897 --> 00:17:14,434
准备环境 在搭载 Apple 芯片的
Mac 上使用 Rosetta

245
00:17:14,468 --> 00:17:16,870
以及下载并构建 USD & Hydra

246
00:17:16,904 --> 00:17:18,372
那么就让我们开始吧

247
00:17:20,007 --> 00:17:23,010
首先 我们要准备开发环境

248
00:17:23,043 --> 00:17:27,247
确保您已经安装了 Xcode
Python 和 CMake

249
00:17:29,716 --> 00:17:32,553
现在 让我们打开一个终端
来进行其他两个步骤

250
00:17:34,087 --> 00:17:38,292
如果您使用的是搭载 Apple 芯片的 Mac
那么您需要在 Rosetta 下运行

251
00:17:38,325 --> 00:17:42,496
而 USD 正在过渡到完全支持 arm64

252
00:17:42,529 --> 00:17:45,065
为此 使用 arch 命令

253
00:17:46,600 --> 00:17:49,937
一旦您的环境准备好了
我们就必须下载 USD

254
00:17:49,970 --> 00:17:52,005
和 Hydra 源代码

255
00:17:52,039 --> 00:17:57,110
两者都在同一个 GitHub 存储库
PixarAnimationStudios/USD 中

256
00:17:57,978 --> 00:18:01,148
现在我们有了代码
就可以构建它了

257
00:18:01,181 --> 00:18:04,818
USD 自带一个方便的
Python 构建脚本

258
00:18:04,852 --> 00:18:09,323
我们添加标志 “generator Xcode”
和 “no-python”

259
00:18:09,356 --> 00:18:12,226
并指定我们想要安装 USD 的位置

260
00:18:13,160 --> 00:18:16,997
让我们把它放在源代码
“USDInstall” 旁边

261
00:18:17,030 --> 00:18:21,201
一旦 USD 完成建设
我们就准备好建立 HydraPlayer 了

262
00:18:22,169 --> 00:18:26,507
让我们再次回到这个图表
并使用它来确定 HydraPlayer 的

263
00:18:26,540 --> 00:18:29,443
关键部分 以详细检查

264
00:18:30,344 --> 00:18:36,183
我们要看看如何加载 3D 模型
如何设置相机

265
00:18:36,216 --> 00:18:38,552
以及设置场景灯光

266
00:18:38,585 --> 00:18:42,389
然后我们将学习
如何得到我们的场景图传到 Storm

267
00:18:42,422 --> 00:18:46,126
最后 如何制作一个应用窗口的图像

268
00:18:47,160 --> 00:18:50,964
所以让我们从由 USD
加载我们的 3D 模型开始

269
00:18:50,998 --> 00:18:56,170
在 ViewController 的 viewDidAppear 中
当视图第一次出现时

270
00:18:56,203 --> 00:18:59,806
我们要用一个 NSOpenPanel
创建一个文件选择器

271
00:19:01,875 --> 00:19:04,645
一旦选择了一个文件

272
00:19:04,678 --> 00:19:07,981
渲染器就可以开始
设置我们的场景并加载 USD 文件

273
00:19:09,049 --> 00:19:12,786
使用 USD API 加载文件非常简单

274
00:19:12,819 --> 00:19:15,956
我们只需在文件路径上打开 USD 阶段

275
00:19:17,824 --> 00:19:19,793
就是这样 我们的文件加载完成了

276
00:19:20,961 --> 00:19:26,466
接下来 我们要设置相机
在我们的代码中 这很直接

277
00:19:26,500 --> 00:19:30,237
我们首先要在 setupCamera 中
创建一个新的场景摄像机

278
00:19:31,738 --> 00:19:36,543
然后 我们要根据场景
计算世界的大小和中心

279
00:19:37,377 --> 00:19:43,550
接下来 移动我们的相机
至一个良好的距离 然后聚焦在中心

280
00:19:43,584 --> 00:19:46,787
这样 我们的相机
就能捕捉到整个场景

281
00:19:47,988 --> 00:19:50,324
太好了 现在我们的相机就设置好了

282
00:19:50,357 --> 00:19:54,061
接下来 灯光

283
00:19:54,094 --> 00:19:59,266
我们让它保持简单
创建一个简单的环境光

284
00:19:59,299 --> 00:20:03,971
并将它的位置设置成与相机匹配
就这样

285
00:20:04,004 --> 00:20:09,910
这样 我们就有了 有着3D 模型
相机和灯光的完整场景

286
00:20:09,943 --> 00:20:13,947
现在我们可以把场景交给 Storm 了

287
00:20:13,981 --> 00:20:17,951
首先 我们需要初始化渲染引擎

288
00:20:17,985 --> 00:20:24,892
在这里 我们创建了一个新的
UsdImagingGLEngine 它是 Storm 的类名

289
00:20:24,925 --> 00:20:28,762
这里最重要的参数是 rootPath

290
00:20:28,795 --> 00:20:33,100
它将引擎指向我们
包含 3D 模型的 USD stage

291
00:20:33,133 --> 00:20:37,171
要深入了解其他参数和
UsdImagingGLEngine

292
00:20:37,204 --> 00:20:40,440
请查看皮克斯的 USD API 文档

293
00:20:41,575 --> 00:20:45,779
接下来 要在引擎中设置
我们的摄像机

294
00:20:45,812 --> 00:20:48,849
并设置光线设置

295
00:20:48,882 --> 00:20:53,053
最后 我们要通过设置渲染参数

296
00:20:53,086 --> 00:20:55,155
来定义我们想要 Storm 渲染的方式

297
00:20:55,856 --> 00:20:59,126
例如 当我们想要
渲染一个透明的背景

298
00:20:59,159 --> 00:21:03,030
以便渲染后的图像
与我们应用的配色方案好好配合时

299
00:21:03,730 --> 00:21:05,966
这对于带有动画的场景很重要

300
00:21:05,999 --> 00:21:08,535
因为这也是我们指定时间代码的地方

301
00:21:10,337 --> 00:21:12,472
现在我们准备好渲染图像了

302
00:21:13,740 --> 00:21:16,510
我们已经完成了所有必要的设置

303
00:21:16,543 --> 00:21:19,813
因此渲染命令只有一行代码

304
00:21:20,614 --> 00:21:26,086
我们获得结果并将其显示在窗口中
然后就完成了

305
00:21:26,119 --> 00:21:28,689
我们正在渲染 USD 玩具飞机

306
00:21:28,722 --> 00:21:31,825
实际上 我们在渲染的
不仅仅是一个飞机

307
00:21:31,859 --> 00:21:35,929
HydraPlayer 可以轻松地
用数千万个三角形

308
00:21:35,963 --> 00:21:37,998
渲染数千个动画 asset

309
00:21:39,166 --> 00:21:42,636
如果您还没有这么做
请查看本讲座的资源

310
00:21:42,669 --> 00:21:45,806
下载示例项目
并享受进一步探索它的乐趣

311
00:21:47,074 --> 00:21:50,511
我们一起探索了 Apple 的
USD 工具的更新

312
00:21:50,544 --> 00:21:54,581
它们使这些工具更强大
也使您的 asset 看起来更棒

313
00:21:54,615 --> 00:21:56,717
Stella: 我们了解了 Hydra 的功能

314
00:21:56,750 --> 00:21:59,820
并浏览了 HydraPlayer 示例项目

315
00:21:59,853 --> 00:22:03,223
看到了如何将其集成到
自己的 App 中

316
00:22:04,525 --> 00:22:08,128
要了解更多关于 USD 的重要概念

317
00:22:08,161 --> 00:22:11,698
请查看讲座
“Understand USD fundamentals”

318
00:22:12,866 --> 00:22:14,468
谢谢

319
00:22:14,501 --> 00:22:16,436
[古怪的音乐]

