1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,877 --> 00:00:13,747
Adam: 大家好 我是 Adam
同播共享团队的工程师

3
00:00:13,780 --> 00:00:16,316
很高兴能有机会
与大家分享同播共享的更新内容

4
00:00:16,350 --> 00:00:18,485
以及您如何将其
应用到 App 中

5
00:00:18,519 --> 00:00:24,091
我们先来看下从您的 App
启动同播共享的几个新 API

6
00:00:24,124 --> 00:00:28,595
接下来 我们来看一些激动人心的
GroupSessionMessenger 更新

7
00:00:28,629 --> 00:00:34,201
最后是关于实现同播共享体验的
一些最佳实践

8
00:00:34,234 --> 00:00:36,303
从您的 App 中
启动同播共享

9
00:00:36,336 --> 00:00:38,805
我们有求必应

10
00:00:38,839 --> 00:00:44,211
从 iOS 15.4 开始 您可以用新 API
在 App 中启动同播共享

11
00:00:44,244 --> 00:00:46,813
而无需进行 FaceTime 通话

12
00:00:46,847 --> 00:00:48,782
我们来看下是怎样的

13
00:00:48,815 --> 00:00:52,386
现在只需要找到
我们最爱的同播共享 App

14
00:00:52,419 --> 00:00:54,621
比如说音乐 App

15
00:00:54,655 --> 00:00:56,723
找到要同播共享的歌曲

16
00:00:56,757 --> 00:01:00,227
如 Viral Hits 长按

17
00:01:00,260 --> 00:01:01,728
在快捷菜单中

18
00:01:01,762 --> 00:01:03,730
您会看到现在有了一个
新的同播共享按钮

19
00:01:03,764 --> 00:01:05,899
我点击选择

20
00:01:05,933 --> 00:01:07,634
然后跳转到了人物选择器

21
00:01:07,668 --> 00:01:11,238
我们可以选择 Sue
开启一个 FaceTime 通话

22
00:01:13,507 --> 00:01:16,076
如您所见 这里有一个小窗口

23
00:01:16,109 --> 00:01:17,511
显示分阶段活动

24
00:01:17,544 --> 00:01:20,480
如果 Sue 加入了
我们就可以开始

25
00:01:20,514 --> 00:01:22,216
进行群组会话

26
00:01:24,151 --> 00:01:26,520
我认为这是一个很强大的功能

27
00:01:26,553 --> 00:01:29,189
但我们将其分解成更详细的细节

28
00:01:30,257 --> 00:01:34,094
这里 用户可以从分享面板
开启同播共享

29
00:01:34,127 --> 00:01:37,898
您可能会想知道
这个功能需要怎么启用

30
00:01:37,931 --> 00:01:41,602
答案就是 如果您的 App
授权了同播共享

31
00:01:41,635 --> 00:01:44,972
无需额外工作即可
免费获得此按钮

32
00:01:45,005 --> 00:01:47,774
但这并不是最佳的用户体验

33
00:01:47,808 --> 00:01:52,312
因为用户无法通过系统 UI
开启 GroupActivity

34
00:01:52,346 --> 00:01:55,449
相反 还需要重新回到
您 App 的交互界面

35
00:01:55,482 --> 00:01:58,352
选择需要同播共享的功能

36
00:01:58,385 --> 00:02:03,023
那我们来看看您的 App
可以如何应用我们的新 API

37
00:02:03,056 --> 00:02:06,360
答案就是 您只需要在
NSItemProvider 上

38
00:02:06,393 --> 00:02:08,061
注册您的 GroupActivity

39
00:02:08,095 --> 00:02:11,698
然后将 ItemProvider
提供到分享面板

40
00:02:13,500 --> 00:02:15,202
想要保留同播共享按钮

41
00:02:15,235 --> 00:02:17,204
但却不放在显眼位置吗

42
00:02:17,237 --> 00:02:18,539
没问题

43
00:02:18,572 --> 00:02:21,441
您可以用
UIActivityViewController 上的

44
00:02:21,475 --> 00:02:23,911
allowsProminentActivity 来调整行为

45
00:02:23,944 --> 00:02:26,747
只要将 allowsProminentActivity
设置为 false

46
00:02:27,981 --> 00:02:31,785
如果您 App 中有一部分内容
不支持同播共享怎么办呢

47
00:02:31,818 --> 00:02:35,022
虽然我们很希望所有内容
都支持同播共享

48
00:02:35,055 --> 00:02:37,791
您可以通过提示 UIActivityViewController
排除同播共享类型活动

49
00:02:37,824 --> 00:02:42,229
来在分享面板中
隐藏同播共享选项

50
00:02:44,164 --> 00:02:46,733
如果您想直接在您的 App 内
放置一个按钮

51
00:02:46,767 --> 00:02:50,304
那就可以使用我们
新的 API - GroupActivitySharingController

52
00:02:50,337 --> 00:02:54,208
来创建我们的 UIViewController
然后就可以显示了

53
00:02:55,909 --> 00:02:58,011
一旦有人在您的
App 内开启了这种体验

54
00:02:58,045 --> 00:03:00,314
开始了 FaceTime 通话
或者同播共享会话

55
00:03:00,347 --> 00:03:05,252
就会有提示可以激活
分阶段 GroupActivity

56
00:03:05,285 --> 00:03:08,355
激活后 您的 App 就可以
收到 GroupSession 了

57
00:03:08,388 --> 00:03:10,591
如果您在想“等下 Adam
您刚刚说的是”

58
00:03:10,624 --> 00:03:12,726
“分阶段 GroupActivity 吗”
不用担心

59
00:03:12,759 --> 00:03:14,628
为什么呢 是的 我确实这么说了

60
00:03:14,661 --> 00:03:17,898
这个想法先放一边
我们稍后讲到最佳实践的时候

61
00:03:17,931 --> 00:03:20,367
再进一步深入讨论

62
00:03:20,400 --> 00:03:24,605
现在 我们先看下在
DrawTogether App 中如何使用

63
00:03:25,706 --> 00:03:27,274
这是我们的 DrawTogether App

64
00:03:27,307 --> 00:03:31,211
也是与之前在 WWDC 2021
“Build custom experiences with Group Activities”讲座里

65
00:03:31,245 --> 00:03:34,014
介绍的 App 是一样的

66
00:03:34,047 --> 00:03:39,219
如果您还没有看过那个讲座
我强烈建议您去看下

67
00:03:39,253 --> 00:03:41,321
如果您已经看过了

68
00:03:41,355 --> 00:03:44,124
就会记得我们的 App 中
是没有任何共享按钮的

69
00:03:44,157 --> 00:03:46,159
但如果您可以发起群组会话

70
00:03:46,193 --> 00:03:48,762
就会有一个同播共享按钮

71
00:03:48,795 --> 00:03:51,098
我们来调整这一行为

72
00:03:51,131 --> 00:03:54,268
这样即使 isEligibleForGroupSession
为 false

73
00:03:54,301 --> 00:03:58,539
现在 也会显示这一按钮来
让用户开启同播共享会话

74
00:04:00,040 --> 00:04:02,876
现在我们可以看下
它是如何运行的了

75
00:04:02,910 --> 00:04:05,712
我们跳转到 ControlBar 代码

76
00:04:05,746 --> 00:04:07,848
现在 如您所见
我们有一个 if 语句

77
00:04:07,881 --> 00:04:10,050
确保没有群组会话

78
00:04:10,083 --> 00:04:13,053
以及我们可以发起群组会话

79
00:04:13,086 --> 00:04:16,990
我们把后面的语句移除

80
00:04:17,024 --> 00:04:18,859
放到下面

81
00:04:24,865 --> 00:04:27,234
现在我们要做的是
注册一个新的变量

82
00:04:27,267 --> 00:04:30,404
这样就知道何时需要显示
我们的 GroupActivitySharingController

83
00:04:30,437 --> 00:04:34,942
所以我们在这里添加一个新的变量

84
00:04:34,975 --> 00:04:39,513
现在我们来处理该变量
变为 true 时的情况

85
00:04:43,150 --> 00:04:45,452
并且我们还需要一个 wrapper

86
00:04:45,485 --> 00:04:49,389
这样可以在 SwiftUI 中
展示 GroupActivitySharingController

87
00:04:55,562 --> 00:04:59,700
最后 我们只需要加入一个
else 语句

88
00:04:59,733 --> 00:05:02,603
如果不能发起群组会话

89
00:05:02,636 --> 00:05:05,005
就将 isSharingControllerPresented
设置为 true

90
00:05:08,008 --> 00:05:10,177
让我们来看看代码的
实际运行效果

91
00:05:10,210 --> 00:05:12,546
我们到 DrawTogether App 中

92
00:05:12,579 --> 00:05:14,681
您可以看到 这里有
同播共享按钮

93
00:05:14,715 --> 00:05:17,751
我们可以点击 出现人物选择器

94
00:05:19,920 --> 00:05:24,157
现在就可以在您的 App 中
体验强大的同播共享功能了

95
00:05:24,191 --> 00:05:26,660
但这并不是我们唯一的更新

96
00:05:26,693 --> 00:05:30,864
现在我们再来看下
GroupSessionMessenger 方面的更新

97
00:05:30,898 --> 00:05:34,768
在 GroupSessionMessenger 中
我们有两个激动人心的更新内容

98
00:05:34,801 --> 00:05:38,839
第一个更新内容
您可能遇到过这个神奇的数字

99
00:05:38,872 --> 00:05:43,310
这是您可通过 GroupSessionMessenger
发送的有效载荷

100
00:05:43,343 --> 00:05:45,646
而这已成往事

101
00:05:45,679 --> 00:05:51,885
我们现在将其提升了四倍
高达 256KB

102
00:05:51,919 --> 00:05:53,887
在这个改变下
您的 App 无需担心

103
00:05:53,921 --> 00:05:57,024
需要把消息拆分成更小的消息

104
00:05:57,057 --> 00:06:01,795
您只用简单地发送消息
专注于搭建完美的体验即可

105
00:06:01,828 --> 00:06:03,497
如果这还不足以让您兴奋

106
00:06:03,530 --> 00:06:06,066
那我们下一个更新内容肯定可以

107
00:06:06,099 --> 00:06:08,202
就是 Unreliable messaging

108
00:06:08,235 --> 00:06:10,003
作为 GroupSessionMessenger
的一部分

109
00:06:10,037 --> 00:06:13,006
您现在可以选择消息的可靠性

110
00:06:13,040 --> 00:06:16,810
这让您可以根据所需的体验
在 reliable 或

111
00:06:16,844 --> 00:06:19,513
unreliable messaging 中进行选择

112
00:06:20,948 --> 00:06:23,617
我们只需要利用
GroupSessionMessenger 中

113
00:06:23,650 --> 00:06:25,085
新的初始化器

114
00:06:25,118 --> 00:06:28,488
允许我们
指定 message reliability

115
00:06:30,524 --> 00:06:32,960
现在我们知道了
应如何使用 API

116
00:06:32,993 --> 00:06:35,429
那体验方面呢

117
00:06:35,462 --> 00:06:38,398
我们什么时候要使用
unreliable messaging 呢

118
00:06:38,432 --> 00:06:40,634
这是一个很好的问题

119
00:06:41,802 --> 00:06:46,240
人们通过 FaceTime 通话
和同播共享来进行实时操作

120
00:06:46,273 --> 00:06:48,909
我们想象下有三个人

121
00:06:48,942 --> 00:06:51,912
Amy Brian 和 Chris

122
00:06:51,945 --> 00:06:54,348
他们加入了一个会话并同步

123
00:06:54,381 --> 00:06:58,485
随着时间的流逝 电影也在进行

124
00:06:58,519 --> 00:07:00,787
但如果 Amy 想要做一些
与他们当下的指定时间内

125
00:07:00,821 --> 00:07:04,925
相关的一些事情怎么办呢

126
00:07:04,958 --> 00:07:07,094
如果您使用 reliable messaging

127
00:07:07,127 --> 00:07:11,131
我们可确保该消息
可在所有设备上收到

128
00:07:11,164 --> 00:07:13,333
但这并不意味着会在他们

129
00:07:13,367 --> 00:07:16,003
预期的时间内收到

130
00:07:16,036 --> 00:07:18,572
例如 Chris 收到了消息

131
00:07:18,605 --> 00:07:21,041
但 Brian 第一次错过了消息

132
00:07:21,074 --> 00:07:23,377
随后也适时收到了

133
00:07:23,410 --> 00:07:26,947
但记住 电影仍在播放

134
00:07:26,980 --> 00:07:30,484
所以现在我们到了 Amy
预期消息能被收到

135
00:07:30,517 --> 00:07:32,085
而 Brian 并未收到的位置

136
00:07:32,119 --> 00:07:35,756
他是在后续的时间收到的
但那时已经太晚了

137
00:07:35,789 --> 00:07:39,493
这是 unreliable 网络的
一个完美例子

138
00:07:39,526 --> 00:07:42,429
它可以告知开发者
什么消息需要在另一端

139
00:07:42,462 --> 00:07:44,965
以可靠的方式收到

140
00:07:44,998 --> 00:07:46,733
而什么消息不需要

141
00:07:46,767 --> 00:07:50,204
在延迟会极大影响用户体验的
情况下 设计协议时

142
00:07:50,237 --> 00:07:53,707
理解这一概念是非常重要的

143
00:07:53,740 --> 00:07:56,043
Unreliable messages
使用的是 UDP

144
00:07:56,076 --> 00:07:59,713
每条消息的延迟和成本更少

145
00:07:59,746 --> 00:08:02,616
这样的话 通过这一方式发送消息

146
00:08:02,649 --> 00:08:05,185
您能获得更即时的体验

147
00:08:05,219 --> 00:08:08,889
现在我们来看下如何在我们的
DrawTogether App 中使用它

148
00:08:08,922 --> 00:08:12,693
您可能还记得 WWDC '21 的
这个屏幕界面

149
00:08:12,726 --> 00:08:15,963
尤其是我画技精湛的笑脸

150
00:08:15,996 --> 00:08:18,632
我们看看您在屏幕上
画这个笑脸的时候

151
00:08:18,665 --> 00:08:20,534
发生了什么事

152
00:08:22,769 --> 00:08:26,673
在我们的 App 中 我们有一些代码
是听从 GestureRecognizer 的

153
00:08:26,707 --> 00:08:30,777
然后每次发送消息的时候
都会有变化

154
00:08:30,811 --> 00:08:33,647
这意味着我们画笑脸的时候

155
00:08:33,680 --> 00:08:35,682
GestureRecognizer 给我们的每个点

156
00:08:35,716 --> 00:08:38,719
都会持续发送新消息

157
00:08:38,752 --> 00:08:40,787
这就太多消息了

158
00:08:40,821 --> 00:08:44,491
现在我们将协议改为
使用 unreliable messaging

159
00:08:44,525 --> 00:08:47,027
获得更无缝衔接的绘画体验

160
00:08:48,562 --> 00:08:51,698
我们在这里所做的是每次从
GestureRecognizer 中

161
00:08:51,732 --> 00:08:53,133
收到一条更新时

162
00:08:53,166 --> 00:08:57,504
就会用 unreliable messaging
发送我们新增的点

163
00:08:57,538 --> 00:09:00,674
一旦手势完成
我们使用 reliable messaging

164
00:09:00,707 --> 00:09:05,779
提供所有点 这样用户可以看到
他们错过的每个点

165
00:09:05,812 --> 00:09:08,482
这让我们可以利用较低的延迟

166
00:09:08,515 --> 00:09:13,353
通过 unreliable messaging
获得更即时的绘制体验

167
00:09:13,387 --> 00:09:16,089
我们看看如何用代码来实现

168
00:09:16,123 --> 00:09:19,059
首先跳转到
我们的 messages 文件

169
00:09:20,427 --> 00:09:24,331
然后定义我们新的
message 类型

170
00:09:25,132 --> 00:09:28,302
如您所见 这个新的 message 类型
和旧的几乎一样

171
00:09:28,335 --> 00:09:32,573
但这次会包含我们笔画的所有点

172
00:09:32,606 --> 00:09:35,609
现在我们跳转到 canvas 文件

173
00:09:40,514 --> 00:09:42,683
我们要设置
一个 handler 函数

174
00:09:42,716 --> 00:09:45,385
来处理即将收到的新消息

175
00:09:50,791 --> 00:09:54,294
然后创建 unreliable messenger

176
00:09:54,328 --> 00:09:56,897
首先 创建一个变量

177
00:09:59,833 --> 00:10:02,102
现在将其初始化

178
00:10:06,006 --> 00:10:08,742
我们会听取结束笔画的消息

179
00:10:12,846 --> 00:10:16,650
将前一条消息
也标记为 unreliable messenger

180
00:10:19,720 --> 00:10:21,522
但我们需要一个发送消息的方式

181
00:10:21,555 --> 00:10:24,291
所以我们上去 finishedStroke

182
00:10:26,360 --> 00:10:29,296
然后开始发送我们的
新消息类型

183
00:10:31,365 --> 00:10:34,635
我们将旧的函数改为
用 unreliable messenger

184
00:10:34,668 --> 00:10:37,104
来发送所有点

185
00:10:39,039 --> 00:10:41,575
现在可以看下代码的运行情况了

186
00:10:41,608 --> 00:10:43,744
跳转到 DrawTogether App

187
00:10:43,777 --> 00:10:47,080
可以看到它是如何无缝衔接的

188
00:10:47,114 --> 00:10:48,415
好了

189
00:10:49,816 --> 00:10:53,320
如我之前所说 我们来讨论下
实现同播共享的

190
00:10:53,353 --> 00:10:55,956
一些最佳实践

191
00:10:55,989 --> 00:10:58,425
您可以记得刚刚我提到一个术语

192
00:10:58,458 --> 00:11:00,460
就是 Staged GroupActivity

193
00:11:00,494 --> 00:11:02,930
这个术语对您的 App 来说
意味着什么呢

194
00:11:02,963 --> 00:11:05,132
让我们来看一个示例场景

195
00:11:07,100 --> 00:11:09,636
假如左边的设备 Adam

196
00:11:09,670 --> 00:11:12,806
和右边的设备 Brian
开启了同播共享

197
00:11:12,840 --> 00:11:15,475
但 Adam 想要继续他们
之前看的节目

198
00:11:15,509 --> 00:11:18,078
所以当有人激活了
staged GroupActivity 时

199
00:11:18,111 --> 00:11:21,982
我们想要跳转到之前节目的
具体时间点

200
00:11:22,015 --> 00:11:24,117
而不是从头开始

201
00:11:24,151 --> 00:11:27,855
这就会带来一个问题 因为
Adam 知道我们的节目

202
00:11:27,888 --> 00:11:31,024
还有 11 分钟未看
但 Brian 的设备不知道

203
00:11:31,058 --> 00:11:35,295
这意味着如果 Brian 的设备
激活 staged GroupActivity

204
00:11:35,329 --> 00:11:37,631
这个节目可能会从头播放

205
00:11:37,664 --> 00:11:39,366
那我们可以怎么办呢

206
00:11:39,399 --> 00:11:42,202
这就要取决于
您的 App 和体验了

207
00:11:43,203 --> 00:11:45,305
我们来看几个想法

208
00:11:45,339 --> 00:11:46,640
在播放的情况下

209
00:11:46,673 --> 00:11:49,977
我们想要每个设备继续其
初始播放状态

210
00:11:50,010 --> 00:11:52,613
其它设备也同样赶上进度

211
00:11:52,646 --> 00:11:57,317
这意味着由于 Adam 的设备
知道播放状态是在 23 秒处

212
00:11:57,351 --> 00:12:00,087
他加入会话时
会告诉其它所有设备

213
00:12:00,120 --> 00:12:02,222
他的预期播放状态

214
00:12:02,256 --> 00:12:05,359
他们会将其作为事实来源

215
00:12:05,392 --> 00:12:09,830
您使用同播共享创建的
所有体验都是同样的原则

216
00:12:09,863 --> 00:12:12,499
每个加入会话的人都应向
其他人提供

217
00:12:12,533 --> 00:12:15,602
他们对会话的理解

218
00:12:15,636 --> 00:12:18,805
因为会话是对等的 无主的

219
00:12:18,839 --> 00:12:21,375
我们再深入看下这一点

220
00:12:21,408 --> 00:12:24,711
无主会话这个概念不好理解

221
00:12:24,745 --> 00:12:29,583
但在设计适宜的同播共享体验时
是非常重要的

222
00:12:29,616 --> 00:12:31,752
在这个情况下
Adam 左边的设备

223
00:12:31,785 --> 00:12:34,721
想要将会话切换到
Apple TV 上

224
00:12:34,755 --> 00:12:39,860
这样他的手机会离开群组会话
而 TV 加入会话

225
00:12:39,893 --> 00:12:42,429
但如果我们应用了所有权
会发生什么呢

226
00:12:42,462 --> 00:12:46,600
所有人离线 所以

227
00:12:46,633 --> 00:12:49,636
记住 这不仅仅是对 TV 而言

228
00:12:50,771 --> 00:12:53,874
在 iOS 16 中 我们现在有了
FaceTime 通话接力

229
00:12:53,907 --> 00:12:56,810
这样 Adam 可以
用 iPad 来接力

230
00:12:56,844 --> 00:12:59,046
是一样的

231
00:12:59,079 --> 00:13:00,180
嘣

232
00:13:00,214 --> 00:13:01,682
这还不是全部

233
00:13:01,715 --> 00:13:04,418
我们只提到了用户流中

234
00:13:04,451 --> 00:13:08,322
将会话从一台设备切换到
另一台设备的案例

235
00:13:08,355 --> 00:13:10,891
但是还有很多其它的案例

236
00:13:10,924 --> 00:13:14,895
好吧 别担心 我们长话短说
只是再多分析一个案例

237
00:13:14,928 --> 00:13:17,664
大家应该很熟悉这个屏幕

238
00:13:17,698 --> 00:13:19,366
这是 FaceTime HUD

239
00:13:19,399 --> 00:13:22,202
但如果我们点击同播共享按钮
会发生什么呢

240
00:13:23,437 --> 00:13:25,973
我们现在能看到一个按钮
End SharePlay

241
00:13:26,006 --> 00:13:30,410
可以让您 … 对的
结束同播共享

242
00:13:30,444 --> 00:13:32,779
这让您可以为所有人
结束同播共享

243
00:13:32,813 --> 00:13:35,549
基本上系统会以
您的 App 的名义

244
00:13:35,582 --> 00:13:38,018
在群组会话中调用 .end()

245
00:13:38,051 --> 00:13:41,288
这意味着不管您多谨慎想着
不要调用 .end()

246
00:13:41,321 --> 00:13:44,691
除非设备是所有者
系统还是会以您的名义

247
00:13:44,725 --> 00:13:47,895
在群组会话中调用 .end()

248
00:13:47,928 --> 00:13:50,931
所以要记住 尽管这个概念
不太好理解

249
00:13:50,964 --> 00:13:54,301
要确保您的 App
没有所有权的概念

250
00:13:54,334 --> 00:13:58,672
这意味着会有更好的使用体验

251
00:13:58,705 --> 00:14:00,507
以上就是讲座的所有内容

252
00:14:00,541 --> 00:14:04,444
您可以在 App 中用新的 API
开启同播共享功能

253
00:14:04,478 --> 00:14:06,847
为您的 App 探索全新的

254
00:14:06,880 --> 00:14:10,717
低延迟的 使用 unreliable messaging 的
通讯方式了

255
00:14:11,952 --> 00:14:14,955
我们很希望能听到大家的声音
所以记得用 Feedback assistant

256
00:14:14,988 --> 00:14:16,690
向我们提出反馈

257
00:14:16,723 --> 00:14:19,426
希望您喜欢我们所做的这些更新

258
00:14:19,459 --> 00:14:22,829
非常期待看到大家搭建的
不可思议的体验

259
00:14:22,863 --> 00:14:25,999
如果您还没有看 记得要查看
我们另一个 WWDC 讲座

260
00:14:26,033 --> 00:14:28,635
“Make a great SharePlay experience”

261
00:14:28,669 --> 00:14:31,471
如果您想看下
我们在媒体播放方面

262
00:14:31,505 --> 00:14:32,873
所做的增强功能

263
00:14:32,906 --> 00:14:36,777
也可以查看
“Display ads and other interstitials in SharePlay”

264
00:14:36,810 --> 00:14:39,980
有任何问题 您可在 GroupActivities labs

265
00:14:40,013 --> 00:14:41,315
and challenges 中联系我们

266
00:14:41,348 --> 00:14:44,985
感谢大家的观看
祝大家有一个美好的 WWDC 旅程

267
00:14:45,018 --> 00:14:46,987
我们迫不及待看大家的成果了

