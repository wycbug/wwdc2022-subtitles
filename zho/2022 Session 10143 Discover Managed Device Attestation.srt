1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,309 --> 00:00:11,178
Bob: 大家好 我是 Bob Whiteman

3
00:00:11,211 --> 00:00:13,747
iOS 设备管理高级工程师

4
00:00:13,780 --> 00:00:17,651
我很高兴与大家分享企业和教育环境中

5
00:00:17,684 --> 00:00:22,623
设备管理的一个重要的安全新功能

6
00:00:22,656 --> 00:00:26,593
我们首先回顾一下设备安全现状

7
00:00:26,627 --> 00:00:29,596
用户需要访问组织资源

8
00:00:29,630 --> 00:00:34,067
如网站 应用服务器和数据库

9
00:00:34,101 --> 00:00:39,006
还有一些攻击者也想访问这些资源

10
00:00:39,039 --> 00:00:43,277
保护资源的经典模型是
边界安全模型

11
00:00:43,310 --> 00:00:46,413
您在内网周围划出安全边界

12
00:00:46,446 --> 00:00:49,216
设置防火墙或 VPN

13
00:00:49,249 --> 00:00:53,020
以允许合法客户端访问并拒绝威胁

14
00:00:53,053 --> 00:00:59,259
但这种模式并没有跟上
人们与现代组织的互动方式

15
00:00:59,293 --> 00:01:04,331
云服务提供商将资源置于边界之外

16
00:01:04,364 --> 00:01:07,501
威胁可以从外围开始

17
00:01:08,902 --> 00:01:13,707
威胁可以通过冒用合法客户端
来渗透防线

18
00:01:15,442 --> 00:01:20,080
更现代的安全模型不信任网络边界

19
00:01:20,113 --> 00:01:24,451
相反 每个资源执行自己的信任评估

20
00:01:24,484 --> 00:01:28,188
这是零信任架构的核心原则

21
00:01:29,623 --> 00:01:33,193
您可以将信任评估视为一个函数

22
00:01:33,227 --> 00:01:36,864
输入是关于客户端的状态信息

23
00:01:36,897 --> 00:01:41,502
输出是授予或拒绝访问的决定

24
00:01:41,535 --> 00:01:45,873
正确的信任评估至关重要

25
00:01:45,906 --> 00:01:49,643
误报会妨碍用户活动

26
00:01:49,676 --> 00:01:55,682
或者更糟糕的是
误报允许攻击者访问您的资源

27
00:01:55,716 --> 00:02:00,521
这意味着
掌握准确的状态信息也很重要

28
00:02:00,554 --> 00:02:03,824
我们来研究一下状态的常见组成部分

29
00:02:03,857 --> 00:02:08,161
您使用有关客户端及其请求的
所有可用信息

30
00:02:08,195 --> 00:02:09,897
提出请求的人

31
00:02:09,930 --> 00:02:13,667
他们使用的设备 他们的位置等等

32
00:02:13,700 --> 00:02:16,103
信任评估可能在访问

33
00:02:16,136 --> 00:02:20,240
不同资源的状态中使用不同的细节

34
00:02:20,274 --> 00:02:25,245
访问低安全性的资源
可能只需要用户的身份

35
00:02:25,279 --> 00:02:30,684
但访问关键的基础设施
可能需要评估所有状态项

36
00:02:30,717 --> 00:02:34,555
由组织决定哪些细节是相关的

37
00:02:36,190 --> 00:02:40,093
状态的一个核心元素是用户的身份

38
00:02:40,127 --> 00:02:42,896
这表明谁在提出请求

39
00:02:44,364 --> 00:02:48,435
Apple 设备提供了几种
支持验证用户身份的技术

40
00:02:48,468 --> 00:02:51,605
比如 Extensible Single Sign On 功能

41
00:02:51,638 --> 00:02:54,208
包括内置的 Kerberos 扩展

42
00:02:54,241 --> 00:02:59,146
以方便对 App 网站和
帐户进行用户身份验证

43
00:02:59,179 --> 00:03:02,015
新的
Enrollment Single Sign On feature

44
00:03:02,049 --> 00:03:05,853
能让 App 在用户注册过程中

45
00:03:05,886 --> 00:03:09,323
及之后便于认证

46
00:03:09,356 --> 00:03:12,359
但本期讲座不是关于用户身份

47
00:03:12,392 --> 00:03:15,262
而是关于设备身份的

48
00:03:15,295 --> 00:03:20,434
此状态元素指示哪个设备
正在发出请求

49
00:03:22,102 --> 00:03:26,406
设备在每次 MDM 通信中
报告的 UDID

50
00:03:26,440 --> 00:03:31,945
是您的 MDM 服务器知道它
正在管理哪个设备的主要方式

51
00:03:31,979 --> 00:03:35,582
DeviceInformation 查询
还提供设备的

52
00:03:35,616 --> 00:03:39,887
MDM 服务器属性 包括序列号

53
00:03:39,920 --> 00:03:44,625
除 MDM 服务器外
受管理设备经常与组织内的

54
00:03:44,658 --> 00:03:47,528
其他系统通信

55
00:03:47,561 --> 00:03:52,766
因此 MDM 服务器经常使用
客户端证书配置设备

56
00:03:52,799 --> 00:03:57,504
此证书向其他系统声明设备的身份

57
00:03:57,538 --> 00:04:01,041
这些识别设备的方法对我们很有帮助

58
00:04:01,074 --> 00:04:06,980
但它们等于相信
这款设备就是它自称的那个样子

59
00:04:07,014 --> 00:04:08,982
随着形势的变化

60
00:04:09,016 --> 00:04:11,818
设备比以往任何时候都更加分散

61
00:04:11,852 --> 00:04:14,488
我们的安全需求也在不断变化

62
00:04:14,521 --> 00:04:18,225
为了解决该问题 我很高兴分享一个
用于认证设备身份的

63
00:04:18,258 --> 00:04:21,094
强大新方法

64
00:04:21,128 --> 00:04:24,598
Managed Device Attestation

65
00:04:24,631 --> 00:04:30,237
有了 Managed Device Attestation
设备将在发出请求时

66
00:04:30,270 --> 00:04:32,039
提供关于自身的有力证据

67
00:04:32,072 --> 00:04:34,908
它改进了状态信息

68
00:04:34,942 --> 00:04:39,012
因此 建立在这个基础上的
信任评估更准确

69
00:04:39,046 --> 00:04:43,283
简言之 Managed Device Attestation
是指合法设备

70
00:04:43,317 --> 00:04:48,889
能够可靠地访问资源并阻止攻击者

71
00:04:48,922 --> 00:04:53,360
这个发布为 iOS 16 iPadOS 16
和 tvOS 16 带来了

72
00:04:53,393 --> 00:04:58,031
Managed Device Attestation

73
00:04:58,065 --> 00:05:02,803
本期讲座中
我们将首先概述新的认证功能

74
00:05:02,836 --> 00:05:06,673
解释使用认证的好处

75
00:05:06,707 --> 00:05:10,644
然后深入到实现细节

76
00:05:10,677 --> 00:05:14,648
首先 什么是认证

77
00:05:14,681 --> 00:05:18,185
认证是对事实的声明

78
00:05:18,218 --> 00:05:21,788
如果您信任提出请求的实体

79
00:05:21,822 --> 00:05:25,092
您就接受了这是真实的事实

80
00:05:25,125 --> 00:05:30,297
在软件中
认证是经过加密签名的事实

81
00:05:30,330 --> 00:05:33,400
通常是 X.509 证书

82
00:05:33,433 --> 00:05:38,105
如果您信任签名者
那么您就会接受事实是真实的

83
00:05:38,138 --> 00:05:40,674
对于 Managed Device Attestation

84
00:05:40,707 --> 00:05:45,012
事实是设备的身份和其他属性

85
00:05:45,045 --> 00:05:47,648
签名者是 Apple

86
00:05:47,681 --> 00:05:51,885
接受这些设备事实的准确性
需要信任 Apple

87
00:05:51,919 --> 00:05:57,658
但是 不需要信任
Apple 编写的每一行代码

88
00:05:58,525 --> 00:06:01,795
只需信任 Secure Enclave

89
00:06:01,828 --> 00:06:03,997
和 Apple 的认证服务器

90
00:06:04,031 --> 00:06:08,635
这些服务器可以访问 Apple 的
生产记录和操作系统目录

91
00:06:08,669 --> 00:06:11,939
如果您将数据保存在 Apple 设备上

92
00:06:11,972 --> 00:06:15,309
就是在毫无保留地信任这些设备

93
00:06:15,342 --> 00:06:20,747
以下是我们如何将认证的力量
带到被管理的设备上

94
00:06:20,781 --> 00:06:26,119
Managed Device Attestation
提供了两种使用认证证书的方法

95
00:06:26,153 --> 00:06:29,623
我们增强了
DeviceInformation MDM 命令

96
00:06:29,656 --> 00:06:34,661
使 MDM 服务器可以
使用认证的好处

97
00:06:34,695 --> 00:06:39,366
我们还增加了对 AutomaticCertificate
Management Environment 协议的支持

98
00:06:39,399 --> 00:06:44,004
这是通过添加 ACME 配置文件
有效载荷实现的

99
00:06:44,037 --> 00:06:46,306
它使认证的好处在整个组织的

100
00:06:46,340 --> 00:06:49,543
基础设施中都可用

101
00:06:50,711 --> 00:06:53,046
对于 DeviceInformation 认证

102
00:06:53,080 --> 00:06:58,919
MDM 服务器发出
DeviceInformationquery 并指定一些新密钥

103
00:06:58,952 --> 00:07:02,489
Apple 服务器将获取认证

104
00:07:02,523 --> 00:07:05,225
并将它返回给 MDM 服务器

105
00:07:05,259 --> 00:07:08,462
然后 MDM 服务器评估认证

106
00:07:10,297 --> 00:07:11,965
但注意

107
00:07:11,999 --> 00:07:16,036
DeviceInformation 认证
向 MDM 服务器声明

108
00:07:16,069 --> 00:07:18,972
“A device exists with these properties”

109
00:07:19,006 --> 00:07:23,510
但不能认证 MDMserver
当前正在与之通信的设备

110
00:07:23,544 --> 00:07:25,712
是同一个设备

111
00:07:25,746 --> 00:07:28,815
为此 您需要 ACME 有效载荷认证

112
00:07:31,151 --> 00:07:34,721
ACME 有效载荷认证
为设备的身份提供了

113
00:07:34,755 --> 00:07:37,090
最强有力的认证

114
00:07:37,124 --> 00:07:40,427
当您安装包含 ACME
有效载荷的配置文件时

115
00:07:40,460 --> 00:07:45,299
设备会从组织 ACME 服务器
请求证书

116
00:07:45,332 --> 00:07:49,503
这与安装 SCEP 有效载荷非常相似

117
00:07:49,536 --> 00:07:53,440
设备向 ACME 服务器提供认证

118
00:07:53,473 --> 00:07:57,244
基于对设备身份的有力认证

119
00:07:57,277 --> 00:08:00,447
ACME 服务器颁发组织的

120
00:08:00,480 --> 00:08:04,017
其他服务器信任的新客户端证书

121
00:08:04,051 --> 00:08:06,820
这两个新功能使用认证证书

122
00:08:06,854 --> 00:08:08,689
来证明几件事

123
00:08:08,722 --> 00:08:11,792
该设备是正品 Apple 硬件

124
00:08:11,825 --> 00:08:15,495
该设备是特定装置

125
00:08:15,529 --> 00:08:18,832
该设备具有某种属性

126
00:08:18,866 --> 00:08:22,836
并且私钥已绑定到设备

127
00:08:22,870 --> 00:08:26,573
它向不同的服务器证明 它们正在

128
00:08:26,607 --> 00:08:28,642
与同一设备通信

129
00:08:28,675 --> 00:08:32,079
这些证书对您有什么好处

130
00:08:32,112 --> 00:08:34,982
认证主要是一种安全功能

131
00:08:35,015 --> 00:08:39,419
所以我将描述一些威胁
以及认证如何降低威胁

132
00:08:40,420 --> 00:08:45,125
首先 一款被泄露的设备
会谎报其属性

133
00:08:45,158 --> 00:08:47,895
所以 Apple 会认证其属性

134
00:08:47,928 --> 00:08:49,596
即使操作系统受到威胁

135
00:08:49,630 --> 00:08:52,766
这也不会影响认证的可靠性

136
00:08:52,799 --> 00:08:56,703
只需要 Secure Enclave 完好无损

137
00:08:56,737 --> 00:09:01,441
或者受损设备提供了过时的属性认证

138
00:09:01,475 --> 00:09:03,744
而这些属性已经发生了变化

139
00:09:03,777 --> 00:09:09,116
证明文件中的临时文件可确保
事实是最新的

140
00:09:09,149 --> 00:09:12,953
ACME 有效载荷认证
可以减轻其他威胁

141
00:09:12,986 --> 00:09:16,990
受损设备
在与 MDM 服务器通信时

142
00:09:17,024 --> 00:09:20,127
发送不同的设备标识符

143
00:09:20,160 --> 00:09:25,799
因此 Apple 验证设备标识符的方式
与设备用于验证

144
00:09:25,832 --> 00:09:29,837
TLS 连接的客户端身份相关联

145
00:09:29,870 --> 00:09:31,905
这可以向 MDM 服务器和

146
00:09:31,939 --> 00:09:36,210
其他组织服务器
证明它们与哪个设备通信

147
00:09:37,678 --> 00:09:42,149
或者攻击者从合法设备中提取私钥

148
00:09:42,182 --> 00:09:47,120
并使用它来发出请求
欺骗合法设备

149
00:09:47,154 --> 00:09:51,491
Apple 证实
私钥受 Secure Enclave 保护

150
00:09:51,525 --> 00:09:53,794
该软件对私钥的

151
00:09:53,827 --> 00:09:57,297
导出或导入具有特别强的保护

152
00:09:57,331 --> 00:10:01,335
最后 攻击者劫持证书请求

153
00:10:01,368 --> 00:10:06,940
以获取证书颁发机构
为不同的设备颁发证书

154
00:10:06,974 --> 00:10:10,177
Apple 通过将请求设备与
证书请求绑定的方式

155
00:10:10,210 --> 00:10:13,146
来验证该设备的身份

156
00:10:13,180 --> 00:10:15,949
因此 证书颁发机构只向合法设备

157
00:10:15,983 --> 00:10:19,052
颁发证书

158
00:10:19,086 --> 00:10:23,423
证书为您提供安全方面的好处
从而减轻多种威胁

159
00:10:23,457 --> 00:10:26,727
那么您如何在您的环境中使用呢

160
00:10:26,760 --> 00:10:31,965
让我们详细了解
如何实现 Managed Device Attestation

161
00:10:31,999 --> 00:10:36,270
首先 对 DeviceInformation 命令
进行了增强

162
00:10:36,303 --> 00:10:40,741
MDM 服务器可以向
受管设备发出此命令

163
00:10:40,774 --> 00:10:45,546
该请求包括服务器想知道的属性列表

164
00:10:45,579 --> 00:10:49,883
我们添加了一个新属性
DevicePropertiesCertification

165
00:10:49,917 --> 00:10:53,120
将其添加到 Queries 数组
意味着 MDM 服务器

166
00:10:53,153 --> 00:10:56,323
正在请求认证

167
00:10:56,356 --> 00:10:59,059
为确保认证是新鲜的

168
00:10:59,092 --> 00:11:04,097
MDM 服务器可以使用
DeviceAttestationNonce 密钥

169
00:11:04,131 --> 00:11:08,702
与 Queries 密钥出现在
请求中的同一级别

170
00:11:08,735 --> 00:11:10,537
该密钥是可选的

171
00:11:10,571 --> 00:11:15,809
它的值是一个数据对象
最大大小为 32 字节

172
00:11:15,843 --> 00:11:19,213
这是一个请求认证的示例

173
00:11:19,246 --> 00:11:23,383
查询数组包含
DevicePropertiesCertification 密钥

174
00:11:23,417 --> 00:11:26,887
并且有一个32 字节的临时文件

175
00:11:26,920 --> 00:11:29,623
取证成功时

176
00:11:29,656 --> 00:11:34,127
响应包含一个
DevicePropertiesCertificate 密钥

177
00:11:34,161 --> 00:11:37,331
它的值是一个数据对象数组

178
00:11:37,364 --> 00:11:42,336
数组中的每个元素
是证书链中的一个证书

179
00:11:42,369 --> 00:11:44,938
这是一个示例响应

180
00:11:44,972 --> 00:11:48,775
叶证书首先出现在数组中

181
00:11:48,809 --> 00:11:53,780
它包含自定义 OID 中的设备属性

182
00:11:53,814 --> 00:11:59,720
前两个 OID 是设备标识属性
序列号和 UDID

183
00:11:59,753 --> 00:12:05,392
如果 MDM 注册是 User Enrollment
则它们会从证书中省略

184
00:12:05,425 --> 00:12:10,797
其余 OID 是匿名的
可用于所有注册类型

185
00:12:10,831 --> 00:12:14,468
sepOS 版本是指在
Secure Enclave 上运行的

186
00:12:14,501 --> 00:12:17,437
操作系统的版本

187
00:12:17,471 --> 00:12:20,841
临时文件 OID 中存在正确的值

188
00:12:20,874 --> 00:12:24,811
证明证书生成了

189
00:12:24,845 --> 00:12:27,314
当 MDM 服务器收到认证时

190
00:12:27,347 --> 00:12:30,851
必须按照以下顺序仔细地验证

191
00:12:30,884 --> 00:12:34,087
它验证证书链是否植根于预期的

192
00:12:34,121 --> 00:12:36,757
Apple 证书颁发机构

193
00:12:36,790 --> 00:12:38,959
Apple 证书颁发机构

194
00:12:38,992 --> 00:12:42,963
可以从
Apple Private PKI Repository 中获得

195
00:12:42,996 --> 00:12:46,834
它验证叶证书中的临时文件
是否与 DeviceInformation

196
00:12:46,867 --> 00:12:50,270
请求中的临时文件匹配
如果已指定的话

197
00:12:50,304 --> 00:12:55,342
然后它解析出剩余的 OID
并评估它们的值

198
00:12:55,375 --> 00:12:59,546
生成新的认证需要使用设备
和 Apple 服务器上的

199
00:12:59,580 --> 00:13:01,415
大量资源

200
00:13:01,448 --> 00:13:06,286
所以对于请求新认证证书的频率
存在速率限制

201
00:13:06,320 --> 00:13:10,824
目前每七天请求一个新认证

202
00:13:10,858 --> 00:13:16,063
通过指定新的临时文件
来请求新的认证

203
00:13:16,096 --> 00:13:19,933
省略一个临时文件表明
新鲜度不是问题

204
00:13:19,967 --> 00:13:24,771
因此 设备可以返回其最新的认证

205
00:13:24,805 --> 00:13:29,076
如果指定了随机数
并匹配缓存的认证

206
00:13:29,109 --> 00:13:32,613
则返回缓存的认证

207
00:13:32,646 --> 00:13:36,316
当 MDM 服务器在认证中
验证临时文件时

208
00:13:36,350 --> 00:13:38,952
它应该检测到不匹配的临时文件

209
00:13:38,986 --> 00:13:44,057
并确定这是否是由于缓存而导致的

210
00:13:44,091 --> 00:13:48,028
但不要仅仅因为这是利率上限

211
00:13:48,061 --> 00:13:50,297
就要求每七天更新一次认证

212
00:13:50,330 --> 00:13:54,201
这样做只会延迟您的
MDM 服务器发现更改的速度

213
00:13:54,234 --> 00:13:58,605
在设备属性上 更不用说浪费资源了

214
00:13:58,639 --> 00:14:03,677
相反 监视其他 DeviceInformation
属性中的相关更改

215
00:14:03,710 --> 00:14:05,646
比如操作系统版本

216
00:14:05,679 --> 00:14:10,050
当其中一项发生更改时
就请求新的认证

217
00:14:10,083 --> 00:14:14,788
这可确保在更改后尽快更新认证

218
00:14:14,821 --> 00:14:18,392
而不是等待速率限制到期

219
00:14:18,425 --> 00:14:23,830
为了防止设备被泄露
并谎报这些其他属性

220
00:14:23,864 --> 00:14:27,701
您可以偶尔随机要求提供新的认证

221
00:14:27,734 --> 00:14:29,803
以保持设备诚实

222
00:14:29,837 --> 00:14:33,106
请求认证可能会失败

223
00:14:33,140 --> 00:14:36,243
这种情况时 设备仍会响应

224
00:14:36,276 --> 00:14:38,779
但省略了一些信息

225
00:14:38,812 --> 00:14:43,450
可能响应中省略了
DevicePropertiesCertification 字段

226
00:14:43,483 --> 00:14:47,254
或是一个预期的 OID
抑或是它的值被省略了

227
00:14:47,287 --> 00:14:49,990
失败的原因有很多

228
00:14:50,023 --> 00:14:55,429
设备在到达 Apple 认证服务器时
遇到网络问题

229
00:14:55,462 --> 00:14:58,098
没有服务器 100% 的时间都在运行

230
00:14:58,131 --> 00:15:02,202
因此 Apple 的认证服务器
可能存在问题

231
00:15:02,236 --> 00:15:05,906
或者设备硬件或软件可能受到损害

232
00:15:05,939 --> 00:15:08,542
或者甚至不是真正的 Apple 硬件

233
00:15:08,575 --> 00:15:12,212
在最后三种情况下
Apple 的认证服务器

234
00:15:12,246 --> 00:15:17,584
拒绝为它们无法验证的属性
发布认证

235
00:15:17,618 --> 00:15:20,187
认证失败的原因有很多

236
00:15:20,220 --> 00:15:24,625
从无害的网络故障到主动攻击

237
00:15:24,658 --> 00:15:27,361
不幸的是
MDM 服务器没有可靠的方法

238
00:15:27,394 --> 00:15:30,931
知道确切的原因

239
00:15:30,964 --> 00:15:34,101
这是因为关于故障的唯一信息来源

240
00:15:34,134 --> 00:15:39,439
是设备本身
它可能是一个在撒谎的受损设备

241
00:15:39,473 --> 00:15:43,277
那么 MDM 服务器应该
如何解释故障呢

242
00:15:43,310 --> 00:15:48,148
认证失败时
不要总是假设最坏的情况

243
00:15:48,182 --> 00:15:50,484
如果您有一个零信任架构

244
00:15:50,517 --> 00:15:52,753
那么您可能会采用以下方式处理它

245
00:15:52,786 --> 00:15:56,790
该组织计算设备的信任分数

246
00:15:56,823 --> 00:16:02,896
失败或意外失效的认证
会降低该分数

247
00:16:02,930 --> 00:16:05,966
信任评分降低会触发不同的操作

248
00:16:05,999 --> 00:16:08,969
比如拒绝服务访问

249
00:16:09,002 --> 00:16:11,705
将设备标记为人工调查

250
00:16:11,738 --> 00:16:15,642
或通过清除设备
吊销其证书来进行补救

251
00:16:15,676 --> 00:16:20,414
这可以确保
对失败的认证做出适当的响应

252
00:16:20,447 --> 00:16:24,952
让我们继续实施 ACME
有效载荷认证

253
00:16:24,985 --> 00:16:28,522
安装 ACME 有效载荷
涉及几个步骤

254
00:16:28,555 --> 00:16:33,460
我将描述该过程中的不同参与者
然后是每个步骤

255
00:16:33,493 --> 00:16:37,764
我们从 iPhone iPad 或
Apple TV 开始

256
00:16:38,999 --> 00:16:43,737
在大多数情况下
这是由 MDM 服务器管理

257
00:16:43,770 --> 00:16:45,606
有一个 ACME 服务器

258
00:16:45,639 --> 00:16:50,777
这执行了 ACME协议 RFC 8555

259
00:16:50,811 --> 00:16:56,783
因此它可以从组织证书颁发机构
颁发客户端证书

260
00:16:56,817 --> 00:17:01,555
并且有 Apple 的认证服务器
发布认证

261
00:17:03,390 --> 00:17:07,294
第一步是
让 MDM 服务器安装配置文件

262
00:17:07,327 --> 00:17:10,397
包含 ACME 有效载荷

263
00:17:10,430 --> 00:17:16,036
有效载荷指定设备
将生成的密钥属性

264
00:17:16,069 --> 00:17:22,276
设备将请求的证书属性

265
00:17:22,309 --> 00:17:27,548
以及如何从 ACME 服务器请求证书

266
00:17:27,581 --> 00:17:29,483
要开始安装配置文件

267
00:17:29,516 --> 00:17:33,587
设备生成请求的密钥类型

268
00:17:33,620 --> 00:17:37,991
为了使用证书
密钥必须是硬件绑定的

269
00:17:38,025 --> 00:17:42,296
虽然 ACME 有效载荷支持 RSA
和各种大小的密钥

270
00:17:42,329 --> 00:17:47,801
但为了获得硬件绑定密钥
必须使用 ECSECPrimeRandom

271
00:17:47,835 --> 00:17:53,707
您的最佳选择是
ECSECPrimeRandom 384 位密钥

272
00:17:53,740 --> 00:17:58,345
因为这是最高安全性的硬件绑定密钥

273
00:17:58,378 --> 00:18:03,217
创建密钥后 设备将与
ACME 服务器进行初始联系

274
00:18:05,052 --> 00:18:08,155
设备请求 DirectoryURL

275
00:18:08,188 --> 00:18:11,792
它指定用于其余过程的 URL

276
00:18:11,825 --> 00:18:14,595
与 ACME 服务器的通信

277
00:18:14,628 --> 00:18:18,699
然后两个系统创建一个帐户
和一个订单

278
00:18:18,732 --> 00:18:24,404
服务器提供
device-attest-01 验证类型

279
00:18:24,438 --> 00:18:27,508
然后 ACME 服务器生成一个临时文件

280
00:18:27,541 --> 00:18:32,012
并将其发送到令牌字段中的设备

281
00:18:32,045 --> 00:18:36,483
ACME 协议最初用于
颁发服务器证书

282
00:18:36,517 --> 00:18:39,319
但是在这里
我们使用的验证类型

283
00:18:39,353 --> 00:18:42,356
是在 IETF 草案中引入的

284
00:18:42,389 --> 00:18:45,692
该草案指定了 ACME 协议的扩展

285
00:18:45,726 --> 00:18:49,730
认证和颁发客户端证书

286
00:18:50,931 --> 00:18:53,000
认证是可选的

287
00:18:53,033 --> 00:18:55,502
当有效载荷指定认证时

288
00:18:55,536 --> 00:18:59,106
设备请求 Apple 提供认证

289
00:18:59,139 --> 00:19:03,443
这几乎与
DeviceInformation 认证相同

290
00:19:03,477 --> 00:19:05,679
它使用相同的 OID

291
00:19:05,712 --> 00:19:10,751
并且为 User Enrollment
省略了设备标识的 OID

292
00:19:10,784 --> 00:19:13,153
但有一些不同之处

293
00:19:13,187 --> 00:19:20,394
临时文件在嵌入认证之前
使用 SHA-256 进行哈希处理

294
00:19:20,427 --> 00:19:25,165
临时文件来自 ACME 服务器
而不是 MDM 服务器

295
00:19:25,199 --> 00:19:29,436
认证叶证书匹配的私钥

296
00:19:29,469 --> 00:19:33,540
是设备刚刚生成的那个

297
00:19:33,574 --> 00:19:36,310
认证证书与私钥匹配

298
00:19:36,343 --> 00:19:42,816
但是 该证书不能用于
除认证之外的任何目的

299
00:19:42,850 --> 00:19:46,687
所以设备从 ACME 服务器
请求另一个证书

300
00:19:46,720 --> 00:19:50,824
匹配私钥 这个证书对 TLS 有好处

301
00:19:53,060 --> 00:19:56,029
设备提供证书签名请求

302
00:19:56,063 --> 00:20:00,367
包含来自有效载荷的证书请求属性

303
00:20:00,400 --> 00:20:03,670
它提供了认证链

304
00:20:03,704 --> 00:20:08,041
它还提供来自 ACME
有效载荷的 ClientIdentifier

305
00:20:08,075 --> 00:20:10,344
通常这就像一张票一样使用

306
00:20:10,377 --> 00:20:13,413
这有利于签发单一证书

307
00:20:13,447 --> 00:20:15,883
以防止重复请求

308
00:20:15,916 --> 00:20:19,353
ACME 服务器在发出证书之前

309
00:20:19,386 --> 00:20:23,056
必须按照此顺序仔细验证请求

310
00:20:23,090 --> 00:20:28,629
它必须验证 ClientIdentifier
是否有效且未使用

311
00:20:28,662 --> 00:20:34,401
认证证书必须链接到
正确的 Apple CA

312
00:20:34,434 --> 00:20:40,541
认证叶证书中的
公钥必须与 CSR 匹配

313
00:20:40,574 --> 00:20:47,681
临时文件必须匹配 ACME 服务器
之前发送的 SHA-256 哈希值

314
00:20:47,714 --> 00:20:52,386
然后 ACME 服务器
可以评估剩余的 OID

315
00:20:52,419 --> 00:20:55,389
请记住 认证可能会失败

316
00:20:55,422 --> 00:21:00,093
在颁发证书时 ACME 服务器
应该仔细考虑失败

317
00:21:00,127 --> 00:21:05,532
就像我们在 DeviceInformation
案例中审查认证失败一样

318
00:21:05,566 --> 00:21:08,402
从这里开始 事情很快就结束了

319
00:21:08,435 --> 00:21:11,538
ACME 服务器从组织 CA 颁发

320
00:21:11,572 --> 00:21:14,842
客户端证书 并将其返回给设备

321
00:21:17,077 --> 00:21:22,015
ACME 服务器是客户端证书
颁发的最终机构

322
00:21:22,049 --> 00:21:25,919
它可以选择尊重或覆盖 CSR 中的属性

323
00:21:25,953 --> 00:21:28,789
例如 SubjectAltName

324
00:21:28,822 --> 00:21:31,859
设备将证书存储在密钥链中

325
00:21:31,892 --> 00:21:35,095
这样就完成了 ACME 有效载荷的安装

326
00:21:36,930 --> 00:21:38,999
让我们把这一切联系起来

327
00:21:39,032 --> 00:21:42,469
服务器如何知道与它们通信的设备

328
00:21:42,503 --> 00:21:45,339
就是声称的那个

329
00:21:45,372 --> 00:21:49,376
设备使用同一个私钥的方式有多种

330
00:21:49,409 --> 00:21:51,879
在获得 Apple 认证时

331
00:21:51,912 --> 00:21:55,048
从 ACME 服务器获取客户端证书时

332
00:21:55,082 --> 00:21:58,785
以及使用 TLS 与其他服务器通信时

333
00:21:58,819 --> 00:22:01,421
因为密钥是硬件绑定的

334
00:22:01,455 --> 00:22:05,659
我们知道所有这些操作
都是由同一个设备执行的

335
00:22:05,692 --> 00:22:11,465
而且我们有一个
描述该设备的认证证书

336
00:22:11,498 --> 00:22:15,802
结合这些 组织服务器现在

337
00:22:15,836 --> 00:22:19,173
在授予访问权限时
对设备的身份有信心

338
00:22:21,742 --> 00:22:24,745
就像证书和 SCEP 有效载荷一样

339
00:22:24,778 --> 00:22:28,081
配置文件中的其他有效载荷
可以引用 ACME 有效载荷

340
00:22:28,115 --> 00:22:30,350
以使用证书

341
00:22:30,384 --> 00:22:33,820
将它用于 MDM Wi-Fi VPN

342
00:22:33,854 --> 00:22:35,989
Kerberos 和 Safari 浏览器

343
00:22:36,023 --> 00:22:39,626
所有这些系统都得益于认证

344
00:22:42,196 --> 00:22:44,865
一个设备可以有多达 10 个
ACME 有效载荷

345
00:22:44,898 --> 00:22:48,635
同时使用安装的认证

346
00:22:48,669 --> 00:22:52,105
请注意 硬件绑定的密钥不会被保留

347
00:22:52,139 --> 00:22:54,808
当受管设备的备份恢复时

348
00:22:54,842 --> 00:22:58,011
即使恢复到同一设备

349
00:22:58,045 --> 00:23:02,149
如果您对 Managed Device Attestation
不做任何其他操作

350
00:23:02,182 --> 00:23:05,819
那么可以对 MDM 客户端身份
使用 ACME 有效载荷

351
00:23:05,853 --> 00:23:10,290
因此 MDM 服务器可以
确定它正在管理哪个设备

352
00:23:10,324 --> 00:23:12,059
我们来总结一下

353
00:23:12,092 --> 00:23:17,898
您可以使用 Managed Device Attestation
认证来修复多类威胁

354
00:23:17,931 --> 00:23:23,403
利用 DeviceInformation 认证
来改进设备标识组件的状态

355
00:23:23,437 --> 00:23:27,107
以获得更好的信任评估

356
00:23:27,140 --> 00:23:33,113
而且 您现在可以在设备访问
组织资源时使用 ACME 认证

357
00:23:33,146 --> 00:23:35,349
来认证其身份

358
00:23:35,382 --> 00:23:40,053
我们期待开发者实施
Managed Device Attestation

359
00:23:40,087 --> 00:23:44,725
我们将共同提高
开发者设备部署的安全性

360
00:23:44,758 --> 00:23:48,395
谢谢 祝您的 WWDC 之旅一切顺利

