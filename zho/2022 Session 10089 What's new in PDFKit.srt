1
00:00:01,468 --> 00:00:07,474
[古怪的音乐]

2
00:00:09,877 --> 00:00:11,912
Conrad: 我是 Conrad 今天

3
00:00:11,945 --> 00:00:14,481
我将为大家介绍
PDFKit 更新的内容

4
00:00:14,515 --> 00:00:15,883
以下是我们的议程

5
00:00:15,916 --> 00:00:19,520
我们首先快速回顾下 PDFKit

6
00:00:19,553 --> 00:00:21,455
然后 了解更新的内容

7
00:00:21,488 --> 00:00:24,558
包括实时文本和表单

8
00:00:24,591 --> 00:00:27,628
将 PDF 页面转为图片的新方式

9
00:00:27,661 --> 00:00:30,831
最后 overlay views (覆盖视图)

10
00:00:30,864 --> 00:00:33,567
首先 我们先快速回顾下
PDFKit 是如何运行的

11
00:00:34,501 --> 00:00:38,539
PDFKit 是一个全功能框架
能帮助您的 App 查看

12
00:00:38,572 --> 00:00:41,041
编辑和编写 PDF 文件

13
00:00:41,074 --> 00:00:44,978
在 iOS macOS
和 Mac Catalyst 中均适用

14
00:00:45,012 --> 00:00:49,616
也可以通过可将 UI 视图
整合到您 APP 中的

15
00:00:49,650 --> 00:00:54,888
封装 UIViewRepresentable
在 SwiftUI 中使用 PDFKit

16
00:00:54,922 --> 00:00:58,592
PDFKit 包含四个核心类
覆盖您 App 中

17
00:00:58,625 --> 00:01:00,694
所需的大部分功能

18
00:01:00,727 --> 00:01:03,430
PDFView 是您使用 SwiftUI
或 Interface Builder

19
00:01:03,463 --> 00:01:05,966
加入到布局中的小组件

20
00:01:05,999 --> 00:01:09,670
可展示 PDF 文档的内容
允许用户导航

21
00:01:09,703 --> 00:01:12,372
设置缩放比例
及将文本复制到剪贴板

22
00:01:13,507 --> 00:01:16,710
PDFDocument 代表
一个 PDF 文件

23
00:01:16,743 --> 00:01:20,681
这对 PDFDocument 子类来说
并不常见 但您总是会用到

24
00:01:20,714 --> 00:01:24,518
它是 PDF 对象图的根源
是树之躯干

25
00:01:24,551 --> 00:01:26,720
无枝不成树

26
00:01:28,455 --> 00:01:32,192
每个文档都包含一个或多个
PDFPage 对象

27
00:01:32,226 --> 00:01:36,263
页面渲染内容和存储资源
如字体和图像

28
00:01:36,296 --> 00:01:37,631
对页面来说都是独特的

29
00:01:38,799 --> 00:01:41,969
我们对象图的绿叶
是 PDFAnnotations

30
00:01:42,002 --> 00:01:43,537
这些是可选的

31
00:01:43,570 --> 00:01:46,306
然而 PDFPage的内容
并不是用于编辑

32
00:01:46,340 --> 00:01:49,610
annotations 则具有交互特性
通常是可编辑的

33
00:01:50,177 --> 00:01:53,947
这些对象在我们今天的内容中
都扮演了对应的角色

34
00:01:53,981 --> 00:01:55,949
您可通过下方链接中
关于“Introducing PDFKit”的精彩内容

35
00:01:55,983 --> 00:01:59,953
来了解更多 PDFKit 的基本原理

36
00:02:01,989 --> 00:02:07,160
现在 我们来看下在 iOS 16 和
macOS Ventura 中推出的新功能

37
00:02:08,228 --> 00:02:11,131
PDFKit 当前已支持实时文本

38
00:02:11,164 --> 00:02:13,000
在照片 App 中 文本通常

39
00:02:13,033 --> 00:02:16,703
占少数 您可以直接点击复制

40
00:02:16,737 --> 00:02:21,275
而在 PDF 中 如果您看到的是文本
则普遍都是文本

41
00:02:21,308 --> 00:02:25,312
人们也希望其发挥文本的功能
别无他用

42
00:02:25,345 --> 00:02:27,614
而现在 使用实时文本
您可以在 PDF 文档中

43
00:02:27,648 --> 00:02:30,517
选择和搜索文本 如这一示例

44
00:02:30,551 --> 00:02:32,886
这只是一个扫描的位图
完全没有文本

45
00:02:34,188 --> 00:02:36,890
当然 PDFs 有很多页面

46
00:02:36,924 --> 00:02:40,594
您打开文档时 不会想对一个
PDF 文档的每个页面

47
00:02:40,627 --> 00:02:41,895
都费力进行 OCR

48
00:02:41,929 --> 00:02:45,566
因此 在您与每个页面发生
交互动作时

49
00:02:45,599 --> 00:02:47,534
PDFKit 应需启用

50
00:02:47,568 --> 00:02:51,605
OCR 即时完成 无需生成
文档副本

51
00:02:52,472 --> 00:02:55,209
如果您选择保存整份文档的文本

52
00:02:55,242 --> 00:02:56,877
保存时也可以选择对应的选项

53
00:02:58,478 --> 00:03:02,783
除实况文本以外 PDFKit的
表单处理也进行了改进

54
00:03:02,816 --> 00:03:05,719
即使没有内置文本区域

55
00:03:05,752 --> 00:03:08,522
也能自动识别
包含表单区域的文档

56
00:03:08,555 --> 00:03:11,191
您可以点击这些文本区域
输入文本

57
00:03:11,225 --> 00:03:12,526
正如您所想的那样

58
00:03:14,394 --> 00:03:18,365
接下来 我们说下从图片
创建 PDF 页面的新 API

59
00:03:20,567 --> 00:03:24,605
在 iOS 16 和 macOS Ventura 中
有一个全新的 灵活的 API

60
00:03:24,638 --> 00:03:28,041
可以让您的 App 用图片
作为输入 创建 PDF 页面

61
00:03:28,809 --> 00:03:32,012
您的 App 用 CGImageRef
提供图片

62
00:03:32,045 --> 00:03:35,549
PDFKit 使用您提供的
CGImageRef 并将其用高质量的

63
00:03:35,582 --> 00:03:37,518
JPEG 解码进行压缩

64
00:03:38,285 --> 00:03:41,455
由于 CGImageRef
是 CoreGraphics 中的原生数据类型

65
00:03:41,488 --> 00:03:43,657
所以无需额外转换

66
00:03:44,725 --> 00:03:48,161
有多个选项可供您处理
最常见的情况

67
00:03:49,463 --> 00:03:52,599
MediaBox 指定页面大小

68
00:03:52,633 --> 00:03:56,937
您可以选择适合图片的大小
或选择纸张尺寸 如 Letter

69
00:03:58,372 --> 00:04:02,009
Rotation 可供您指定纵向或横向

70
00:04:03,210 --> 00:04:04,444
还有 UpscaleIfSmaller

71
00:04:04,478 --> 00:04:07,080
如果图片大于 MediaBox

72
00:04:07,114 --> 00:04:09,216
则默认将图片缩小到适应比例

73
00:04:09,249 --> 00:04:12,452
如果 UpscaleIfSmaller 已被指定
该规则仍有效

74
00:04:12,486 --> 00:04:16,456
但如果图片较小
则会增加尺寸以适合页面

75
00:04:18,292 --> 00:04:21,562
现在 我们来回答下
大家都在问的问题

76
00:04:21,595 --> 00:04:24,865
“我怎么能用 PencilKit
在 PDF 页面上绘图呢”

77
00:04:24,898 --> 00:04:27,301
答案就是使用覆盖视图

78
00:04:28,535 --> 00:04:31,538
过去 在 PDFs 上绘图的
唯一方法

79
00:04:31,572 --> 00:04:34,842
就是将 PDFPage 编入子类
覆写绘图方法

80
00:04:34,875 --> 00:04:37,678
或使用
自定义 PDF annotations

81
00:04:37,711 --> 00:04:41,615
但从 iOS 16 和 macOS Ventura
开始 现在可以

82
00:04:41,648 --> 00:04:44,952
在每个 PDF 页面上
覆盖您自己的视图

83
00:04:44,985 --> 00:04:47,988
让您的 App 创建实时
具有强交互性的视图

84
00:04:48,021 --> 00:04:49,756
显示在 PDF 页面上层

85
00:04:50,557 --> 00:04:53,961
关于覆盖视图 你需要知道
以下三点

86
00:04:54,695 --> 00:04:58,265
首先 您要使用一个新代理
在 PDF 页面中

87
00:04:58,298 --> 00:04:59,733
安装您的覆盖视图

88
00:05:00,934 --> 00:05:05,339
到了需要保存的时候
您需要将内容并入 PDF

89
00:05:06,306 --> 00:05:09,576
说到保存 我们会分享一些
保存 PDF 文档的

90
00:05:09,610 --> 00:05:11,311
最优方法

91
00:05:13,280 --> 00:05:17,885
在 PDF 页面上安装覆盖视图
很简单

92
00:05:17,918 --> 00:05:21,121
因为 PDFs 可以包含
成百上千的页面

93
00:05:21,154 --> 00:05:25,792
打开 PDF 时 您不会想为这些
所有页面创建视图

94
00:05:25,826 --> 00:05:28,562
但如果用户快速前后滚动呢

95
00:05:28,595 --> 00:05:30,464
您如何知道何时创建视图

96
00:05:31,732 --> 00:05:35,869
幸运的是 PDFKit 已经设计好
在用户滚动至所需位置前

97
00:05:35,903 --> 00:05:38,238
就能智能准备内容

98
00:05:38,272 --> 00:05:41,341
它知道何时请求覆盖视图

99
00:05:41,375 --> 00:05:43,777
您的 App 只需要响应它

100
00:05:43,810 --> 00:05:45,546
通过新代理发出的请求

101
00:05:47,881 --> 00:05:51,685
PDFPageOverlayViewProvider
是新代理

102
00:05:51,718 --> 00:05:56,924
对了 PDFKitPlatformView
只是 UIView 或 NSView 的定义

103
00:05:56,957 --> 00:05:59,593
取决于平台

104
00:05:59,626 --> 00:06:03,730
你需要运行的最重要方法
是 overlayViewForPage

105
00:06:04,398 --> 00:06:07,835
只需要提供您的视图实例
PDFKit 就会应用适当的边界

106
00:06:07,868 --> 00:06:10,070
重设其尺寸

107
00:06:10,103 --> 00:06:13,173
如果页面有非零旋转
它会执行旋转

108
00:06:14,641 --> 00:06:16,643
接下来两个方法是可选的

109
00:06:16,677 --> 00:06:20,414
willDisplayOverlayView 可用于
安装您自己的动作处理程序

110
00:06:20,447 --> 00:06:23,917
或与 PDFKit 的动作处理程序
建立失败关系

111
00:06:25,619 --> 00:06:30,224
在 PDFKit 完成您的视图时 会调用
willEndDisplayingOverlayView

112
00:06:30,257 --> 00:06:32,559
可能是因为页面已滚动到
视图之外

113
00:06:32,593 --> 00:06:37,431
您可在这里发布您的视图
但这一方法还有另一个重要用途

114
00:06:37,464 --> 00:06:40,968
假如您的视图有一些
展示其正在绘制内容的数据

115
00:06:41,001 --> 00:06:44,671
您可以用该方法获取数据
并将其放置一边

116
00:06:44,705 --> 00:06:47,474
我们会用 PencilKit 进行示例

117
00:06:47,508 --> 00:06:49,977
但如果您的视图数据
被搁置在别处

118
00:06:50,010 --> 00:06:51,612
则无需执行此操作

119
00:06:53,380 --> 00:06:57,150
在示例中 这是我们用于
提供程序的类

120
00:06:57,184 --> 00:07:01,154
它执行
PDFPageOverlayViewProvider 代理

121
00:07:01,188 --> 00:07:05,392
这是 iOS 所以
PDFKitPlatformView 是一个 UIView

122
00:07:05,425 --> 00:07:09,029
使用地图从 PDFPage
到 UIView

123
00:07:09,930 --> 00:07:12,132
这是占位符代理方法

124
00:07:12,165 --> 00:07:15,169
接下来 我们看下实现

125
00:07:15,202 --> 00:07:18,238
overlayViewForPage 检查
其 pageToView 地图

126
00:07:18,272 --> 00:07:20,908
看是否对指定页面建立了视图

127
00:07:20,941 --> 00:07:23,010
如果没有 则创建一个新视图

128
00:07:23,043 --> 00:07:25,679
不管哪种情况 我们都能从页面
获取绘图

129
00:07:25,712 --> 00:07:28,182
并将其放置于画布视图

130
00:07:28,215 --> 00:07:32,252
在这些示例中 我使用的是
PDFPage 的子类

131
00:07:32,286 --> 00:07:34,521
其作用是添加“绘制”属性

132
00:07:37,691 --> 00:07:42,196
现在 我们来看下一个方法
即 WillEndDisplayingOverlay

133
00:07:44,264 --> 00:07:46,466
willEndDisplayingOverlayView
很简单

134
00:07:46,500 --> 00:07:51,939
它从视图中获取绘图
并将其存储于我们自定义页面类

135
00:07:51,972 --> 00:07:54,408
现在我们已经完成了
那就来看下实际的实施吧

136
00:07:56,076 --> 00:07:59,713
通常 每年大约这个时候
我会在缅因州钓鱼

137
00:07:59,746 --> 00:08:01,982
然而现在 我却在 WWDC 现场

138
00:08:02,015 --> 00:08:04,618
因此 有另一个人代替我去旅行

139
00:08:04,651 --> 00:08:07,521
我将会给他看下
一些我最喜欢的地点

140
00:08:07,554 --> 00:08:09,723
并且会用这一 App 来完成

141
00:08:09,756 --> 00:08:12,159
在覆盖视图中
使用 PencilKit

142
00:08:12,793 --> 00:08:16,129
这一 App 包含我们刚刚
看到的代码 仅此而已

143
00:08:16,163 --> 00:08:21,001
获取屏幕上的覆盖视图的
完整代码仅约 30 行

144
00:08:21,034 --> 00:08:24,972
因此 Grand Lake Stream
这是大坝池

145
00:08:25,005 --> 00:08:28,675
有很多鱼 大部分动作
都是在这里进行的

146
00:08:28,709 --> 00:08:30,811
您沿着这条小路一直走
经过树林

147
00:08:30,844 --> 00:08:33,647
就能到达大坝池 然后钓鱼

148
00:08:33,680 --> 00:08:35,449
您可以钓各种鱼

149
00:08:35,482 --> 00:08:40,053
或者也可以走这条路 越过大坝

150
00:08:40,087 --> 00:08:41,522
从这里往下走

151
00:08:41,555 --> 00:08:43,857
您可以从那里钓鱼 一直到这里

152
00:08:43,891 --> 00:08:46,326
环岛一圈 下来这里

153
00:08:46,360 --> 00:08:49,763
但不管你做什么 不要越过这里

154
00:08:49,796 --> 00:08:52,599
这里的水流又深又急

155
00:08:52,633 --> 00:08:56,670
避开这个地方 下来这里

156
00:08:56,703 --> 00:08:58,572
到孵化场

157
00:08:58,605 --> 00:09:02,009
沿着孵化场旁一直走

158
00:09:02,042 --> 00:09:04,578
进入这个池塘

159
00:09:04,611 --> 00:09:06,580
您可以在这里抛钓丝

160
00:09:06,613 --> 00:09:09,283
这是很好的地方
我经常在这里钓鱼

161
00:09:10,317 --> 00:09:14,588
好了 现在我们在这个页面
做了一些标记

162
00:09:14,621 --> 00:09:16,423
我们演示下缩放和滚动

163
00:09:17,891 --> 00:09:19,059
看它响应速度多快

164
00:09:25,299 --> 00:09:26,233
这就好了

165
00:09:26,266 --> 00:09:28,235
PDFKit 的覆盖视图

166
00:09:28,268 --> 00:09:31,738
现在 您已经有了这些草图
那要怎么保存呢

167
00:09:31,772 --> 00:09:34,441
我们可以用 PDFAnnotation 类
来完成

168
00:09:34,474 --> 00:09:37,144
保存时 我们希望能实现两点

169
00:09:37,177 --> 00:09:39,379
我们希望在高保真的前提下

170
00:09:39,413 --> 00:09:40,848
匹配屏幕显示

171
00:09:40,881 --> 00:09:43,217
并且我们希望做一些往返编辑

172
00:09:43,250 --> 00:09:47,554
PDF annotations 有一些功能
可以实现这些要求

173
00:09:47,588 --> 00:09:49,590
PDF annotations 有一个
“appearance stream”

174
00:09:49,623 --> 00:09:52,526
是 PDF 绘制指令流

175
00:09:52,559 --> 00:09:55,195
基本上所有您能用 Quartz2D
绘制的东西

176
00:09:55,229 --> 00:09:57,731
appearance stream 都能记录下来

177
00:09:57,764 --> 00:10:02,102
只要能渲染成图片的都能记录

178
00:10:02,135 --> 00:10:03,904
如果我们使用 Metal
用的就是这个方法

179
00:10:04,771 --> 00:10:07,074
而且 由于是作为 PDF 绘图
来记录的

180
00:10:07,107 --> 00:10:10,043
看起来和在 Adobe Reader
Chrome 等的显示都一样

181
00:10:11,378 --> 00:10:14,915
在 PDF 文档中 PDF annotations
是以字典的形式来存储的

182
00:10:14,948 --> 00:10:18,685
这意味着我们也可以在
私人密钥/值对中存储自定义数据

183
00:10:19,653 --> 00:10:22,756
那我们来看看代码是什么样的

184
00:10:22,789 --> 00:10:26,360
首先创建 PDFAnnotation 的子类

185
00:10:26,393 --> 00:10:28,795
这一步是为了覆写
draw() 方法

186
00:10:29,596 --> 00:10:32,766
PDFKit 在保存我上一张幻灯片中
讲的appearance stream 时

187
00:10:32,799 --> 00:10:34,434
会调用此方法

188
00:10:36,336 --> 00:10:39,640
要保存文档 我们要
覆写 UIDocument 的 contents()

189
00:10:39,673 --> 00:10:43,610
这是该函数的概览
对应稍后的上下文

190
00:10:43,644 --> 00:10:47,147
我们依次通过
PDFDocument 的各页面

191
00:10:47,181 --> 00:10:49,316
下一步再来充实循环

192
00:10:51,084 --> 00:10:53,253
每个页面我们都进行以下操作

193
00:10:53,287 --> 00:10:57,090
创建我们自定义类的 annotation

194
00:10:57,124 --> 00:11:00,527
将我们的绘图编码至数据

195
00:11:00,561 --> 00:11:02,129
将数据添加至 annotation

196
00:11:02,162 --> 00:11:06,300
我们下次打开该文档时
就可以使用 value:forAnnotationKey

197
00:11:06,333 --> 00:11:08,235
来回读存储的绘图数据

198
00:11:08,268 --> 00:11:10,003
并将其放置到我们的覆盖视图中

199
00:11:11,238 --> 00:11:14,174
最后 将 annotation
添加到页面

200
00:11:15,075 --> 00:11:16,944
回到我们的 contents() 覆写

201
00:11:16,977 --> 00:11:20,881
现在我们页面上
已经添加了 annotations

202
00:11:20,914 --> 00:11:25,018
我们用 PDFDocument 的
dataRepresentation() 返回结果

203
00:11:26,153 --> 00:11:28,589
当您的内容被存为 annotation 时

204
00:11:28,622 --> 00:11:31,892
文档接收者可对其进行移动
重设大小或删除

205
00:11:31,925 --> 00:11:33,260
通常来说 那正是您想要的

206
00:11:33,293 --> 00:11:38,232
但有时 您会希望您的 annotations
作为页面的一部分烧录

207
00:11:38,265 --> 00:11:42,970
在 iOS 16 和 macOS Ventura 中
有一个新的 PDFDocumentWriteOption

208
00:11:43,003 --> 00:11:44,404
可以简化该操作

209
00:11:44,438 --> 00:11:47,274
只要添加
burnInAnnotationsOption = true

210
00:11:47,307 --> 00:11:49,142
到保存选项 即可完成

211
00:11:50,544 --> 00:11:52,779
说到 PDF 编写选项 有一些

212
00:11:52,813 --> 00:11:56,717
在 iOS 16 和 macOS Ventura 中
已可用

213
00:11:56,750 --> 00:11:58,418
我们来看看

214
00:11:58,452 --> 00:12:01,488
CoreGraphics 一直致力于
让 PDFs 中保存的图片

215
00:12:01,522 --> 00:12:03,423
维持最高保真度

216
00:12:03,457 --> 00:12:07,294
因此图片都以无损压缩
全解析度保存

217
00:12:07,327 --> 00:12:10,898
如果 PDF 在大幅面打印机中
打印出来 那堪称完美

218
00:12:10,931 --> 00:12:13,634
但是更有可能的是
图片是在屏幕上显示的

219
00:12:13,667 --> 00:12:18,005
这些高保真度的图片数据
带来的结果就是文件尺寸超大

220
00:12:18,038 --> 00:12:20,807
为了应对这一问题 我向大家介绍
以下两个选项

221
00:12:21,942 --> 00:12:25,379
saveAllImagesAsJPEG 可完成
刚刚所说的操作

222
00:12:25,412 --> 00:12:28,015
不管图片是如何创建的
都可以通过 JPEG 保存

223
00:12:28,048 --> 00:12:30,150
解码入 PDF

224
00:12:31,351 --> 00:12:34,154
optimizeImagesForScreen 可对
图片进行下采样

225
00:12:34,188 --> 00:12:37,057
直至 HiDPI 屏幕分辨率的最大值

226
00:12:37,090 --> 00:12:39,159
这两个选项可以同时使用

227
00:12:41,428 --> 00:12:44,665
createLinearizedPDF 创建
一种特殊类型的 PDF

228
00:12:44,698 --> 00:12:46,600
针对网络进行优化

229
00:12:46,633 --> 00:12:50,971
PDF 格式 最初在互联网出现前
就已设计为

230
00:12:51,004 --> 00:12:53,207
从文件末尾读取

231
00:12:53,240 --> 00:12:55,876
这意味着它要提前下载

232
00:12:55,909 --> 00:12:57,911
所需的只是展示

233
00:12:57,945 --> 00:13:01,415
一个线性化 PDF 有了展示文件
开始的第一页

234
00:13:01,448 --> 00:13:03,450
所需的所有内容

235
00:13:03,483 --> 00:13:05,419
因此网页浏览器可先显示该内容

236
00:13:05,452 --> 00:13:06,920
并同时加载剩余部分

237
00:13:08,722 --> 00:13:12,059
您可以将这些选项传送到
PDFDocument 的 dataRepresentation

238
00:13:12,092 --> 00:13:14,394
或 writeToURL 方法

239
00:13:14,428 --> 00:13:18,131
正是如此 PDFKit 强大 简便

240
00:13:18,165 --> 00:13:21,902
今天在 iOS 和 macOS 以及有新功能的
iOS 16 和 macOS Ventura 中

241
00:13:21,935 --> 00:13:25,239
许多 App 都在使用

242
00:13:25,272 --> 00:13:27,307
我已经迫不及待要看看
您的成果了

243
00:13:28,642 --> 00:13:30,511
请查看下方的讲座

244
00:13:30,544 --> 00:13:32,012
了解更多信息

245
00:13:32,045 --> 00:13:33,146
感谢大家的观看

246
00:13:33,180 --> 00:13:36,183
[古怪的音乐]

