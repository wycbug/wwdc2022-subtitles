1
00:00:00,501 --> 00:00:08,509
♪ ♪

2
00:00:09,977 --> 00:00:12,846
Zheng Naiwei: 大家好
欢迎来到 WWDC

3
00:00:12,880 --> 00:00:16,750
我叫 Zheng Naiwei
来自 Apple 的 AVFoundation 团队

4
00:00:16,783 --> 00:00:20,120
在本次演讲中
我们将讨论如何通过添加到

5
00:00:20,153 --> 00:00:25,492
HLS Content Steering 中的新功能
来提高流媒体传输的可靠性

6
00:00:26,660 --> 00:00:29,029
我们今天将介绍三个主题

7
00:00:29,062 --> 00:00:31,798
如果开发者还没有听说过
Content Steering 请不要担心

8
00:00:31,832 --> 00:00:33,967
这是一项 HLS 技术

9
00:00:34,001 --> 00:00:37,104
可以动态引导流媒体流量

10
00:00:37,137 --> 00:00:39,907
以提高流媒体服务质量

11
00:00:39,940 --> 00:00:42,976
我会进行一个简短的回顾
以帮助开发者上手

12
00:00:44,878 --> 00:00:48,182
然后 我将介绍
新的 Pathway 克隆功能

13
00:00:48,215 --> 00:00:52,219
它可以带来
超越极限的动态控制能力

14
00:00:52,252 --> 00:00:55,689
以进一步提高流媒体服务的可靠性

15
00:00:56,990 --> 00:01:04,031
最后 我将使用具体的例子
来指导开发者

16
00:01:04,064 --> 00:01:06,533
话不多说 开始吧

17
00:01:07,768 --> 00:01:10,571
在我们没有推出
Content Steering 的时候

18
00:01:10,604 --> 00:01:14,074
HLS 规范中
没有对错误回退的变体选择

19
00:01:14,107 --> 00:01:16,310
进行标准化定义

20
00:01:16,343 --> 00:01:19,580
在选择下一个回退变体时
不同的客户端会有

21
00:01:19,613 --> 00:01:22,349
不同的实现方式

22
00:01:22,382 --> 00:01:25,586
但是一种典型的方法是
在多变量播放列表中

23
00:01:25,619 --> 00:01:27,354
遵循变量顺序

24
00:01:28,255 --> 00:01:32,826
如果流媒体提供商想要
指定一组回退 CDN

25
00:01:32,860 --> 00:01:35,863
那么他们就需要列出
每个CDN中的每一个变体

26
00:01:35,896 --> 00:01:38,866
并在多变体播放列表中正确地排列

27
00:01:38,899 --> 00:01:42,302
这样 如果客户端播放器
第一个变体遇到故障

28
00:01:42,336 --> 00:01:46,106
它可以在播放列表中
移动到下一个变体

29
00:01:46,139 --> 00:01:50,511
故障变体将在做选择时受到惩罚

30
00:01:50,544 --> 00:01:55,249
在这种情况下 我们看到客户端
播放器在 CDN1 的

31
00:01:55,282 --> 00:02:01,088
6 Mbps 变体上有问题
因此按照多变体播放列表中的顺序

32
00:02:01,121 --> 00:02:04,758
移动到下一个
CDN1 的 3 Mbps 变体

33
00:02:04,791 --> 00:02:10,097
如果很不幸
CDN1 的 3 Mbps 变体也坏了

34
00:02:10,130 --> 00:02:14,201
客户端播放器将不再保留
CDN1 的变体

35
00:02:14,234 --> 00:02:18,672
而是转向 CDN2 的 6 Mbps 变体

36
00:02:18,705 --> 00:02:22,776
它可以断断续续地执行此操作
直到没有要回退的变体为止

37
00:02:22,809 --> 00:02:26,780
但是 即使播放列表的
创作服务器可以控制

38
00:02:26,813 --> 00:02:28,248
回退变体的顺序

39
00:02:28,282 --> 00:02:30,117
这种控制只发生在

40
00:02:30,150 --> 00:02:34,354
客户端请求多变体播放列表时

41
00:02:34,388 --> 00:02:36,390
一旦播放列表发出

42
00:02:36,423 --> 00:02:39,459
就无法更改回退顺序

43
00:02:39,493 --> 00:02:42,863
这就是 Content Steering
进入画面的地方

44
00:02:42,896 --> 00:02:45,165
借助 Content Steering 流媒体提供商

45
00:02:45,199 --> 00:02:49,203
现在可以将变体分组到
具有不同 CDN host 的路径中

46
00:02:50,904 --> 00:02:55,542
错误回退行为现已针对
Content Steering 进行了标准化

47
00:02:55,576 --> 00:02:57,377
通路按偏好排序

48
00:02:57,411 --> 00:03:00,514
在此示例中 顶部的 CDN1 通路

49
00:03:00,547 --> 00:03:05,452
是首选 其次是 CDN2 和 CDN3

50
00:03:05,485 --> 00:03:08,922
流媒体提供商还托管 Steering Server

51
00:03:08,956 --> 00:03:13,160
为每个客户端播放器
生成 Steering Manifest

52
00:03:13,193 --> 00:03:16,964
Steering Manifest 定义了
路径优先级的规则

53
00:03:16,997 --> 00:03:18,565
所以 播放器可以遵守规则

54
00:03:18,599 --> 00:03:22,169
在变体流之间进行选择和回退

55
00:03:23,036 --> 00:03:27,241
例如 流媒体提供商正尝试

56
00:03:27,274 --> 00:03:31,378
将一些流量从 CDN1 转移到 CND2

57
00:03:31,411 --> 00:03:33,547
它将生成带有新路径

58
00:03:33,580 --> 00:03:36,283
优先级规则的 Steering Manifest

59
00:03:36,316 --> 00:03:39,086
当 CDN1 的客户端播放器

60
00:03:39,119 --> 00:03:42,122
请求更新 Steering Manifest 时

61
00:03:42,155 --> 00:03:45,526
Steering Server 可以将准备好的带有

62
00:03:45,559 --> 00:03:48,395
规则更改的 Steering Manifest
发送给客户端

63
00:03:48,428 --> 00:03:52,065
客户端将解析并查看
新的路径优先级规则

64
00:03:52,099 --> 00:03:55,936
并将其应用于其播放会话

65
00:03:55,969 --> 00:03:59,106
在这种情况下 规则更改
切换了 CDN1 和 CDN2

66
00:03:59,139 --> 00:04:02,209
通路之间的首选项顺序

67
00:04:02,242 --> 00:04:07,514
因此客户端播放器
将立即从 CDN2 切换播放

68
00:04:07,548 --> 00:04:09,850
然后 如果发生故障

69
00:04:09,883 --> 00:04:14,988
客户端将首先在当前路径中
耗尽回退变体

70
00:04:15,022 --> 00:04:17,424
并根据其当前路径优先级

71
00:04:17,457 --> 00:04:20,627
回退到最优先的路径

72
00:04:20,661 --> 00:04:24,498
在这种情况下
如果 CDN2 中的所有变体都出错了

73
00:04:24,531 --> 00:04:28,168
客户端播放器可以开始
从 CDN1 的变体中进行选择

74
00:04:28,202 --> 00:04:30,737
这是下一个首选途径

75
00:04:30,771 --> 00:04:34,041
当我们将  Content Steering
应用到全球范围时

76
00:04:34,074 --> 00:04:37,644
它可以解决更大的区域 负载均衡问题

77
00:04:37,678 --> 00:04:41,782
假设我们的流媒体服务提供商
在世界各地运营

78
00:04:41,815 --> 00:04:44,284
具有两个主要的 CDN 提供商

79
00:04:44,318 --> 00:04:47,788
要将这些 CDN 分配给
全球客户端播放器

80
00:04:47,821 --> 00:04:51,158
Steering Server 准备了
两个不同的 Steering Manifest

81
00:04:51,191 --> 00:04:56,230
一个倾向于 CDN1
另一个倾向于 CDN2

82
00:04:56,263 --> 00:04:58,699
然后它根据客户端播放器的区域

83
00:04:58,732 --> 00:05:02,002
分发这些 Steering Manifest

84
00:05:02,035 --> 00:05:06,306
以便北美和南美使用 CDN1

85
00:05:06,340 --> 00:05:10,143
世界其他地区使用 CDN2

86
00:05:10,177 --> 00:05:13,981
在世界地图的顶部
我们显示了一个水平堆叠的条形图

87
00:05:14,014 --> 00:05:18,719
表示 CDN1 和 CDN2 之间的流量分布

88
00:05:18,752 --> 00:05:23,123
截至目前 这两个 CDN
都为全球一半的流量提供服务

89
00:05:24,024 --> 00:05:27,995
但是 随着时间的推移
流媒体服务提供商观察到

90
00:05:28,028 --> 00:05:31,798
由于全球日光偏移

91
00:05:31,832 --> 00:05:34,635
CDN2 的流量显著增加

92
00:05:34,668 --> 00:05:38,372
与此同时
流向 CDN1 的流量也在减少

93
00:05:39,640 --> 00:05:44,711
因此 流媒体提供商决定
引导欧洲地区使用 CDN1

94
00:05:44,745 --> 00:05:48,749
它通过准备一个更倾向于 CDN1 的
Steering Manifest 来实现这一点

95
00:05:48,782 --> 00:05:52,653
并将其发送给欧洲地区的客户

96
00:05:52,686 --> 00:05:56,757
现在 该区域中的这些客户端播放器
将流量引导到 CDN1

97
00:05:56,790 --> 00:05:58,792
把 CDN2 卸载

98
00:05:58,825 --> 00:06:01,461
全球流量变得更加平衡

99
00:06:01,495 --> 00:06:05,632
现在让我们看一下
具有内容控制支持的

100
00:06:05,666 --> 00:06:07,801
HLS 多变量播放列表

101
00:06:07,835 --> 00:06:11,805
首先 我们看到
EXT-X-CONTENT-STEERING 标签

102
00:06:11,839 --> 00:06:16,610
这表示此多变量播放列表
使用 Content Steering

103
00:06:16,643 --> 00:06:19,713
然后我们有 SERVER-URI 属性

104
00:06:19,746 --> 00:06:24,017
指定客户端应从何处请求
Steering Manifest 更新

105
00:06:25,252 --> 00:06:29,957
然后 下一个 PATHWAY-ID 属性
指定启动时播放

106
00:06:29,990 --> 00:06:32,993
要选择的初始路径

107
00:06:33,026 --> 00:06:38,198
然后我们可以看到每个变体流
都被赋予了一个 PATHWAY-ID 属性

108
00:06:38,232 --> 00:06:40,267
将它们分组到通路中

109
00:06:40,300 --> 00:06:43,470
每个通路应具有相同的变体流集

110
00:06:43,504 --> 00:06:47,975
唯一的区别是它们的 URI
和媒体组名称

111
00:06:48,008 --> 00:06:51,011
这个例子中有两个通路

112
00:06:51,044 --> 00:06:53,847
即 CDN1 和 CDN2

113
00:06:53,881 --> 00:06:58,585
两者都包含两个变体流
一个 6 Mbps 高分辨率视频

114
00:06:58,619 --> 00:07:02,956
和一个 3 Mbps 低分辨率视频

115
00:07:02,990 --> 00:07:06,260
唯一的区别是它们的 URI 主机名

116
00:07:06,293 --> 00:07:09,663
每个路径还有两个不同的音频组

117
00:07:09,696 --> 00:07:13,100
它们具有不同的 URI 主机名

118
00:07:13,133 --> 00:07:17,404
下面是一个示例 Steering Manifest
它是一个 JSON 文档

119
00:07:17,437 --> 00:07:22,176
PATHWAY-PRIORITY 字段是按
首选项顺序排列的通路 ID 列表

120
00:07:22,209 --> 00:07:27,347
因此 在这种情况下 接收客户端
播放器将首选 CDN1 而不是 CDN2

121
00:07:27,381 --> 00:07:30,784
这是 Steering Server
提供给欧洲客户的

122
00:07:30,817 --> 00:07:34,922
Steering Manifest 让他们选择 CDN1

123
00:07:34,955 --> 00:07:38,258
通过更改 Steering Manifest 的
PATHWAY-PRIORITY 字段

124
00:07:38,292 --> 00:07:42,095
一个 Steering Server 可以控制
每个客户端的转向策略

125
00:07:42,129 --> 00:07:45,699
这就是 Content Steering 的快速概述

126
00:07:45,732 --> 00:07:48,402
如果您想要更深入的了解

127
00:07:48,435 --> 00:07:51,772
随时查看我的 WWDC21 演讲

128
00:07:51,805 --> 00:07:56,710
通过 HLS Content Steering
提高全球流媒体可用性

129
00:07:56,743 --> 00:07:59,713
但是 我们提供支持
更具可扩展性和更可靠的

130
00:07:59,746 --> 00:08:03,417
流媒体服务的旅程并不止于此

131
00:08:03,450 --> 00:08:08,188
如今 公司可以访问
更多通用的云基础架构

132
00:08:08,222 --> 00:08:12,659
和工具来完成过去无法想象的事情

133
00:08:12,693 --> 00:08:16,463
我们必须赶上技术的飞跃

134
00:08:16,496 --> 00:08:20,267
假设我们的流媒体服务提供商
今年已经变得更大

135
00:08:20,300 --> 00:08:24,872
他们正在尝试一种
新方法来满足不断增长的用户群的

136
00:08:24,905 --> 00:08:27,040
动态流量需求

137
00:08:27,074 --> 00:08:31,845
他们通过实时动态
生成 CDN 服务器队列

138
00:08:31,879 --> 00:08:35,215
来减轻时间流量压力

139
00:08:35,249 --> 00:08:38,819
例如 它可以生成新的 CDN3 舰队

140
00:08:38,852 --> 00:08:41,788
并希望将其宣传给现有的客户

141
00:08:41,822 --> 00:08:45,926
但是 挑战是当现有客户要求时

142
00:08:45,959 --> 00:08:48,428
动态生成的 CDN 信息

143
00:08:48,462 --> 00:08:50,964
并不包含在多变量播放列表中

144
00:08:50,998 --> 00:08:53,133
因为它根本不存在

145
00:08:53,166 --> 00:08:58,438
那么 我们可以做些什么来告诉客户
新的 CDN 的出现呢

146
00:08:59,273 --> 00:09:03,043
这就是我们新的
Pathway Cloning 功能的用武之地

147
00:09:03,076 --> 00:09:06,113
这是一项具有向后兼容性的新功能

148
00:09:06,146 --> 00:09:11,118
在 WWDC21 中引入
Content Steering 1.2

149
00:09:11,151 --> 00:09:15,022
有了 Pathway Cloning
Steering Server 可以使用一个

150
00:09:15,055 --> 00:09:16,790
紧凑的清单定义

151
00:09:16,823 --> 00:09:20,160
向现有的客户端宣布新的 CDN

152
00:09:20,194 --> 00:09:22,896
通过假设通路的结构上相同

153
00:09:22,930 --> 00:09:27,901
可以通过复制和修改现有通路
来创建新的路径

154
00:09:27,935 --> 00:09:31,672
我们来看看通路的结构

155
00:09:31,705 --> 00:09:35,108
通路由一个或多个变体流组成

156
00:09:35,142 --> 00:09:39,046
每个变体流只能在一个
且只有一个通路中

157
00:09:39,079 --> 00:09:41,748
如果未指定 PATHWAY-ID 属性

158
00:09:41,782 --> 00:09:45,619
它隐含的属于默认的“ . ”通路

159
00:09:45,652 --> 00:09:50,858
每个变体流可以引用
每种媒体类型的零个或一个媒体组

160
00:09:50,891 --> 00:09:54,027
音频 字幕和隐藏式字幕

161
00:09:54,061 --> 00:09:57,497
每个媒体组可以由多个变体流引用

162
00:09:57,531 --> 00:09:59,600
甚至来自不同的通路

163
00:09:59,633 --> 00:10:02,636
当我们现有通路中克隆出新的通路时

164
00:10:02,669 --> 00:10:05,005
我们不仅应该克隆其变体流

165
00:10:05,038 --> 00:10:08,108
而且还有引用的媒体组
如果有的话

166
00:10:10,844 --> 00:10:13,180
然后 为了使其成为新的通路

167
00:10:13,213 --> 00:10:16,783
我们需要修改新克隆通路的变体

168
00:10:16,817 --> 00:10:19,720
和呈现流的 URI

169
00:10:19,753 --> 00:10:24,491
让我们以克隆的通路中的
6 Mbps 变体流为例

170
00:10:25,993 --> 00:10:30,330
假设此特定变体流
具有如下所示的 URI

171
00:10:30,364 --> 00:10:33,867
要将其修改为新通路的 URI
请执行以下操作

172
00:10:33,901 --> 00:10:38,839
最灵活的方法是
完整替换完整的 URI 行

173
00:10:38,872 --> 00:10:42,709
这意味着我们需要
在 Steering Manifest 中为每个

174
00:10:42,743 --> 00:10:44,478
克隆的通路存储一整套 URI

175
00:10:44,511 --> 00:10:48,415
但是 在实践中
我们通常可以做得更好

176
00:10:48,448 --> 00:10:51,285
在业界
跨多个 CDN 部署流媒体资产

177
00:10:51,318 --> 00:10:56,056
并保留相同的 URI 路径结构
是很常见的

178
00:10:56,089 --> 00:11:00,661
从同一 URI 提供的资产
共享相同的 URI 主机名

179
00:11:00,694 --> 00:11:02,829
和查询参数

180
00:11:03,664 --> 00:11:06,767
如果是这种情况
我们只需要在清单中

181
00:11:06,800 --> 00:11:09,970
存储主机和查询参数的替换

182
00:11:10,003 --> 00:11:14,308
并替换所有克隆 URI 的组件
这样我们就得到了新的通路

183
00:11:15,976 --> 00:11:21,381
让我们看一下如何
在 Manifest 对象中定义路径克隆

184
00:11:21,415 --> 00:11:25,953
我们添加了带有路径克隆对象数组的
PATHWAY-CLONES 字段

185
00:11:25,986 --> 00:11:31,558
每个路径克隆对象定义
从现有路径来的新通路

186
00:11:31,592 --> 00:11:35,062
在此示例中
我们有一个路径克隆对象

187
00:11:35,095 --> 00:11:41,335
BASE-ID 字段指定
CDN1 是要从中克隆的原始路径

188
00:11:41,368 --> 00:11:46,673
ID 字段 将新的路径 ID
指定为 CDN3

189
00:11:46,707 --> 00:11:52,479
接下来 有个 URI-REPLACEMENT 字段
其中包含 URI 替换规则对象

190
00:11:54,081 --> 00:11:58,785
在此示例中
我们使用 HOST 和查询参数替换规则

191
00:11:58,819 --> 00:12:00,587
这应该取代主机部分

192
00:12:00,621 --> 00:12:06,527
并分别插入或替换流 URI 的查询参数

193
00:12:06,560 --> 00:12:09,029
在这种情况下 我们将把主机部分

194
00:12:09,062 --> 00:12:11,465
替换为 cdn3.example.com

195
00:12:11,498 --> 00:12:15,936
并添加或设置值为 xyz 的查询参数 foo

196
00:12:15,969 --> 00:12:19,973
和值为 123 的查询参数栏

197
00:12:21,241 --> 00:12:24,645
让我们尝试在前面的示例 URI 上

198
00:12:24,678 --> 00:12:27,714
应用主机和参数 URI 替换

199
00:12:27,748 --> 00:12:30,317
首先 我们有基于
多变量播放列表的 URI

200
00:12:30,350 --> 00:12:33,220
解析的变体流 URI

201
00:12:34,288 --> 00:12:38,225
在 Steering Manifest 中
我们使用了主机 URI 替换规则

202
00:12:38,258 --> 00:12:40,727
因此 对于 URI 的主机部分

203
00:12:40,761 --> 00:12:44,498
我们用 cdn3.example.com 替换它

204
00:12:44,531 --> 00:12:48,035
并获取了新 URI 的新主机部件

205
00:12:51,505 --> 00:12:55,943
然后 我们从克隆的 URI 中
保留 URI 路径组件

206
00:12:59,179 --> 00:13:03,784
最后 我们应用
URI 查询参数替换规则

207
00:13:03,817 --> 00:13:08,956
在这里 我们替换 foo 参数
因为它存在于原始 URI 上

208
00:13:08,989 --> 00:13:13,927
然后 我们追加 bar 参数
因为它是一个新参数

209
00:13:13,961 --> 00:13:19,132
这样 我们有了新 URI 的
替换查询参数部分

210
00:13:19,166 --> 00:13:23,737
最终结果 URI
来自新通路 CDN3 的

211
00:13:23,770 --> 00:13:26,440
6 Mbps 变体流的 URI

212
00:13:27,608 --> 00:13:31,512
我们将相同的 URI 替换规则
应用于其余变体

213
00:13:31,545 --> 00:13:34,381
和克隆通路中的再现

214
00:13:34,414 --> 00:13:39,253
对于 3 Mbps 变体流
我们有原始 URI

215
00:13:39,286 --> 00:13:44,758
并应用主机和参数
替换规则以获取新的 URI

216
00:13:44,791 --> 00:13:48,362
我们对音频和字幕再现
执行相同的操作

217
00:13:48,395 --> 00:13:53,400
将 URI 替换规则
应用于所有克隆的变体和格式副本后

218
00:13:53,433 --> 00:13:57,538
我们就有了一个
从新的 CDN 主机服务的新通路

219
00:13:58,505 --> 00:14:02,376
让我们再举一个例子
假设流媒体提供商

220
00:14:02,409 --> 00:14:06,413
希望通过对最快的 CDN 主机
进行特殊调整

221
00:14:06,446 --> 00:14:09,917
来提供最高带宽的视频和音频流

222
00:14:09,950 --> 00:14:13,287
这与其他较低比特率的流不同

223
00:14:13,320 --> 00:14:18,625
这就是 per-stable-ID
URI 替换规则派上用场的地方

224
00:14:18,659 --> 00:14:23,497
在 HLS 中 STABLE-VARIANT-ID
和 STABLE-RENDITION-ID 属性

225
00:14:23,530 --> 00:14:27,501
被引入 以识别变体和再现流

226
00:14:27,534 --> 00:14:30,237
通过在多变量播放列表中设置

227
00:14:30,270 --> 00:14:33,674
我们稍后通过通路克隆对象中的
稳定 ID

228
00:14:33,707 --> 00:14:36,310
在Steering Manifest 中

229
00:14:36,343 --> 00:14:38,045
引用每个变体或呈现流

230
00:14:38,078 --> 00:14:41,081
并为每个流分配 URI 替换规则

231
00:14:41,915 --> 00:14:45,519
要定义这些特定的
特殊 URI 替换规则 请执行以下操作

232
00:14:45,552 --> 00:14:49,156
我们需要为多变量播放列表中的
所有变体和呈现流

233
00:14:49,189 --> 00:14:51,358
分配稳定的 ID

234
00:14:51,391 --> 00:14:56,430
例如 我们将
STABLE-RENDITION-ID “audio-en-ac3”

235
00:14:56,463 --> 00:14:58,599
分配到 AC3 English 音频

236
00:14:58,632 --> 00:15:01,902
并将 STABLE-VARIANT-ID “video-4k-dv”

237
00:15:01,935 --> 00:15:05,572
分配到 25 Mbps 4K 变体流

238
00:15:05,606 --> 00:15:07,508
然后 在 Steering Manifest 中

239
00:15:07,541 --> 00:15:10,444
我们可以通过引用其稳定 ID

240
00:15:10,477 --> 00:15:13,213
添加两个灵活的替换规则

241
00:15:13,247 --> 00:15:17,217
对于变体流 我们将
PER-VARIANT-URIS 字段

242
00:15:17,251 --> 00:15:19,453
添加到 URI-REPLACEMENT 对象

243
00:15:19,486 --> 00:15:24,324
使用 STABLE-VARIANT-ID
到 URI 记录的字典

244
00:15:24,358 --> 00:15:27,895
在这里 我们指定用 STABLE-VARIANT-ID
“video-4k-dv”

245
00:15:27,928 --> 00:15:33,934
和下面的 URI 来替换变量流的 URI

246
00:15:33,967 --> 00:15:37,905
对于格式副本流
我们用 STABLE-RENDITION-ID

247
00:15:37,938 --> 00:15:40,007
到 URI 记录的字典
将 PER-RENDITION-URIS 字段

248
00:15:40,040 --> 00:15:44,912
添加到 URI-REPLACEMENT 对象

249
00:15:44,945 --> 00:15:48,148
这里我们指定用 STABLE-RENDITION-ID
“audio-en-ac3”

250
00:15:48,182 --> 00:15:53,887
用以下 URI 替换呈现流的 URI

251
00:15:55,622 --> 00:15:58,725
在这里 我们看到
在应用 URI 替换后

252
00:15:58,759 --> 00:16:03,897
所有流都从新的
cdn3.exmaple.com 主机提供服务

253
00:16:03,931 --> 00:16:08,869
除了 4K 视频变体
和 AC3 英语音频再现

254
00:16:08,902 --> 00:16:11,605
其中它们具有特殊的 URI 替换规则

255
00:16:11,638 --> 00:16:15,175
将其指向
faster.example.com 主机

256
00:16:15,209 --> 00:16:18,745
并具有不同的 URI 路径
和查询组件

257
00:16:20,414 --> 00:16:24,284
有了通路克隆
当流式处理提供程序动态生成时

258
00:16:24,318 --> 00:16:28,021
在本例中 就是新的 CDNfleet CDN3

259
00:16:28,055 --> 00:16:30,424
转向服务器可以添加 CDN3

260
00:16:30,457 --> 00:16:35,762
作为其 Steering Manifest 中
现有客户端的通路克隆

261
00:16:35,796 --> 00:16:39,800
它还可以选择一个区域 例如欧洲

262
00:16:39,833 --> 00:16:44,271
来优先考虑将 CDN3 作为主要通路

263
00:16:44,304 --> 00:16:47,975
当欧洲客户获得
Steering Manifest 更新时

264
00:16:48,008 --> 00:16:51,745
它们将引导流量转向 CDN3

265
00:16:51,778 --> 00:16:54,114
在本期演讲的最后一部分

266
00:16:54,147 --> 00:16:57,818
让我们将重点转移到
Steering Server 的细节上

267
00:16:57,851 --> 00:17:00,754
解释如何实现服务器逻辑

268
00:17:00,787 --> 00:17:05,959
通过具体示例
引导客户端流量 以实现负载平衡

269
00:17:06,660 --> 00:17:09,796
管理和编排大量客户端的一种方法

270
00:17:09,830 --> 00:17:14,268
以及应用分区规则
是将每个客户端放入存储器中

271
00:17:14,301 --> 00:17:16,904
并在存储器级别应用规则

272
00:17:16,937 --> 00:17:20,240
在 Steering Server 上
实施存储器非常简单

273
00:17:20,274 --> 00:17:23,343
不需要维护任何客户端会话状态

274
00:17:23,377 --> 00:17:27,014
当客户端请求
初始 Steering Manifest 时

275
00:17:27,047 --> 00:17:31,585
它在 Steering Server URI 上
发出 HTTP GET 请求

276
00:17:31,618 --> 00:17:37,791
然后 服务器从 12 个可能的存储中
生成统一的随机数

277
00:17:37,824 --> 00:17:41,528
返回 Steering Manifest 时
服务器会添加存储器编号

278
00:17:41,562 --> 00:17:45,199
在这种情况下
7 为 RELOAD-URI 属性

279
00:17:45,232 --> 00:17:47,568
这将是来自客户端播放器
下一个请求的

280
00:17:47,601 --> 00:17:50,270
Steering Manifest URI

281
00:17:50,304 --> 00:17:54,007
以便下次客户端播放器
请求 Steering Manifest 时

282
00:17:54,041 --> 00:17:57,578
它将在其请求参数中携带存储器编号

283
00:17:57,611 --> 00:18:02,382
并且服务器可以提取它并根据
存储器编号应用转向规则

284
00:18:03,183 --> 00:18:06,753
现在 让我们看一个简单的
双分区转向规则

285
00:18:06,787 --> 00:18:09,923
在这种情况下
我们希望引导 50% 的流量

286
00:18:09,957 --> 00:18:15,462
倾向于 CDN1
其他 50% 的流量倾向于 CDN2

287
00:18:15,495 --> 00:18:18,599
我们可以根据存储器编号
编写此类规则

288
00:18:18,632 --> 00:18:22,603
如果客户端播放器的数
落在前 6 个存储器中

289
00:18:22,636 --> 00:18:27,641
我们返回倾向于 CDN1的
带有 PATHWAY-PRIORITY 的 Steering Manifest

290
00:18:27,674 --> 00:18:32,946
否则返回倾向于 CDN2的

291
00:18:32,980 --> 00:18:36,650
由于客户端是统一分配到存储器的

292
00:18:36,683 --> 00:18:42,256
将 12 个存储器分成 6 个存储器
可以对流量进行平均分区

293
00:18:43,590 --> 00:18:49,596
现在 假设一个名为 CDN3 的
新通路是动态生成的

294
00:18:49,630 --> 00:18:53,300
Steering Server 可以使用
通路克隆向客户端宣传它

295
00:18:53,333 --> 00:18:57,204
而客户端并不从它们的
多变量播放列表中知道它

296
00:18:57,237 --> 00:19:00,541
用 Pathway Cloning
构建 Steering Manifest 时的

297
00:19:00,574 --> 00:19:04,311
一个常见问题是确定通路的集合

298
00:19:04,344 --> 00:19:07,981
需要包含在
PATHWAY-CLONES 阵列中

299
00:19:08,015 --> 00:19:12,986
规则是克隆不在客户端的
多变量播放列表中的通路

300
00:19:13,020 --> 00:19:15,622
但是 如果没有
维护任何服务器端状态的

301
00:19:15,656 --> 00:19:18,926
客户端会话
Steering Server 又如何

302
00:19:18,959 --> 00:19:22,863
知道客户端多变量
播放列表中的路径集呢

303
00:19:24,164 --> 00:19:27,534
一种方法是在
多变量播放列表的生成过程中

304
00:19:27,568 --> 00:19:32,172
在初始转向服务器 URI 中

305
00:19:32,206 --> 00:19:35,509
包含一组通路来作为查询参数

306
00:19:35,542 --> 00:19:39,546
在这种情况下
多变量播放列表包含两个通路

307
00:19:39,580 --> 00:19:42,115
CDN1 和 CDN2

308
00:19:42,149 --> 00:19:45,853
因此 将它们作为查询参数

309
00:19:45,886 --> 00:19:48,121
包含在 SERVER-URI 属性中

310
00:19:48,155 --> 00:19:52,492
然后 客户端播放器
将向 URI 发送请求

311
00:19:52,526 --> 00:19:56,063
将参数传送到 steering server

312
00:19:56,096 --> 00:19:58,832
然后 Steering Server 可以提取参数

313
00:19:58,866 --> 00:20:03,270
作为客户端
多变量播放列表中的通路集

314
00:20:03,303 --> 00:20:06,573
然后它可以通过
用客户端多变量播放列表中的

315
00:20:06,607 --> 00:20:09,476
通路集减去可用通路集

316
00:20:09,510 --> 00:20:13,313
来计算要克隆的通路集

317
00:20:13,347 --> 00:20:17,851
在这种情况下
可用的通路是 CDN1 2 和 3

318
00:20:17,885 --> 00:20:22,856
客户端多变量播放列表中的通路是
CDN1 和 CDN2

319
00:20:22,890 --> 00:20:25,526
因此 需要包含的通路

320
00:20:25,559 --> 00:20:29,096
在 PATHWAY-CLONES 阵列中
是 CDN3

321
00:20:31,231 --> 00:20:33,700
让我们也来看看
当有三个可用的通路时

322
00:20:33,734 --> 00:20:38,472
Steering Server 如何更改其转向规则

323
00:20:38,505 --> 00:20:41,241
在这种情况下 服务器想要分区

324
00:20:41,275 --> 00:20:45,379
客户端流量在 CDN1 2
和 3 之间均匀分布

325
00:20:45,412 --> 00:20:50,817
我们通过返回首选 CDN1 的
PATHWAY-PRIORITY 来编写此规则

326
00:20:50,851 --> 00:20:57,157
如果客户端的存储器数量
位于 12 个存储桶的前三分之一

327
00:20:57,191 --> 00:21:00,794
返回首选 CDN2 的
PATHWAY-PRIORITY

328
00:21:00,827 --> 00:21:05,365
如果客户端的存储器数
在第二到第三个范围内

329
00:21:05,399 --> 00:21:10,237
否则返回首选 CDN3 的
PATHWAY-PRIORITY

330
00:21:10,270 --> 00:21:15,142
这样 每个通路将为
三分之一的客户端流量提供服务

331
00:21:15,175 --> 00:21:18,745
凭借我们涵盖的一切
开发者现在装备齐全

332
00:21:18,779 --> 00:21:23,350
使用自己的动态转向规则
构建开发者的 Steering Server

333
00:21:23,383 --> 00:21:27,020
这样做可以进一步
提高流服务的可靠性

334
00:21:28,555 --> 00:21:32,259
这些是我们
今年在内容指导方面的更新

335
00:21:32,292 --> 00:21:33,627
如果您还没有做过

336
00:21:33,660 --> 00:21:38,432
尝试采用 Content Steering
作为开发者的 HLS CDN 后备机制

337
00:21:38,465 --> 00:21:43,303
因为它用途更广
并提供动态流量转向

338
00:21:43,337 --> 00:21:47,541
请同时利用新的通路克隆功能

339
00:21:47,574 --> 00:21:50,410
来提高服务的可靠性

340
00:21:50,444 --> 00:21:57,417
像往常一样 查看最新的
IETF HLS 规范以了解更多技术细节

341
00:21:57,451 --> 00:22:01,421
请记得使用
我们的 HTTP 实时流媒体工具

342
00:22:01,455 --> 00:22:04,858
在进行更改时验证播放列表

343
00:22:04,892 --> 00:22:07,928
最后 如果开发者有其他问题或建议

344
00:22:07,961 --> 00:22:13,033
请随时通过 hls-interest@ietf.org
与我们联系

345
00:22:13,066 --> 00:22:16,436
感谢您的加入 祝您今天愉快

